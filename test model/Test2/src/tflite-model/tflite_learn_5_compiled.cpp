/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.02.2024 11:15:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238528;
#else
constexpr int kTensorArenaSize = 237504;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032505190465599298, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 67530, -66113, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 7.2146001912187785e-05, 7.3686489486135542e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 84,-41,-51,103,-72,8,-55,71,127,-26,-40,-23,-15,80,-48,29,115,-88,-39,-101,109,77,90,-68,-72,-98,-45,78,15,-99,-16,68, 
  /* [1][0][][] */ 49,88,86,-64,-80,88,-6,22,-40,-20,49,122,127,53,48,4,-37,9,-66,-94,-81,48,28,125,99,88,-50,-5,110,-110,-114,-17, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0032992560882121325, 0.0033697027247399092, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -984, 948, 942, -726, -537, 1045, -676, 965, -669, -66, 1019, 949, 995, 947, 839, -750, -1009, 574, -139, -555, -697, 1054, -673, 1010, 979, 970, -454, -545, 202, -479, -45, -583, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.1048930395627394e-05, 3.3602598705329001e-05, 3.330513573018834e-05, 3.1047929951455444e-05, 2.9631630241055973e-05, 3.0730454454896972e-05, 3.1628500437363982e-05, 3.3983305911533535e-05, 3.1808616768103093e-05, 3.3484557206975296e-05, 3.3770847949199378e-05, 3.3441327104810625e-05, 3.3162948966491967e-05, 3.3380823879269883e-05, 3.3105723559856415e-05, 2.8468100936152041e-05, 3.0190607503755018e-05, 3.1582778319716454e-05, 3.1177511118585244e-05, 3.0965449695941061e-05, 2.7554458938539028e-05, 3.1215386115945876e-05, 3.1704861612524837e-05, 3.1934963772073388e-05, 3.3958061976591125e-05, 3.2770334655651823e-05, 3.1989959097700194e-05, 2.9710099624935538e-05, 3.3814259950304404e-05, 3.0775740015087649e-05, 3.3563010219950229e-05, 3.2250969525193796e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -53,-62,93,-5,91,-29,-94,-119,63,-104,-117,-10,46,-1,-49,48,-66,-48,-73,-73,-75,-122,-11,98,-120,1,64,-51,109,-4,-30,-95,71,-76,-112,53,-127,-93,-104,22,69,-100,-116,89,50,-116,109,-34, 
  /* [1][0][][] */ -43,28,-55,10,-24,91,51,22,93,-83,-87,114,76,-12,37,60,109,-27,48,127,-32,7,47,39,49,30,-38,118,24,19,109,-50,59,112,4,41,63,73,0,-54,-47,17,-9,-89,-20,49,-16,-41, 
  /* [2][0][][] */ 57,32,-46,102,-7,-44,100,105,-81,98,-22,124,101,-2,93,-112,-53,-13,46,66,-80,-2,120,33,-9,91,104,23,-53,91,90,104,-65,-8,-77,-91,-72,105,115,-18,-100,-63,26,-1,-68,127,-11,-64, 
  /* [3][0][][] */ 70,0,33,-31,-81,45,-127,33,44,13,61,-4,89,92,69,9,107,95,-66,7,112,-99,-75,-126,-33,-125,-89,102,38,-112,83,1,-62,-45,-24,-23,-104,-33,36,43,-34,-87,-109,-4,69,21,-59,-94, 
  /* [4][0][][] */ 51,113,-4,57,-34,-31,27,11,58,91,-13,50,25,-46,-20,-66,-30,-11,-76,10,110,-104,88,30,-27,-9,66,-70,-58,31,-79,-63,72,126,11,-116,-59,-12,-127,51,-60,-55,-86,-99,30,108,33,56, 
  /* [5][0][][] */ 115,-93,95,99,57,-106,44,72,127,-106,12,-58,38,117,51,38,68,77,-62,117,47,68,31,-15,-93,-52,-13,-81,66,46,31,-90,-36,14,-60,32,-107,-24,62,34,-79,-43,56,109,-21,39,51,-43, 
  /* [6][0][][] */ 12,-48,108,71,-92,-72,-10,61,-21,-89,3,-95,82,50,111,-117,42,-4,-6,97,-85,-127,105,53,-66,-90,-12,-65,-35,-121,43,-84,-94,-126,-52,-113,-15,35,-114,79,82,53,18,-21,-119,102,-90,-51, 
  /* [7][0][][] */ 125,62,-22,-28,-54,123,-4,13,127,19,-79,28,67,-70,58,68,54,29,12,122,65,47,8,95,-50,111,43,69,-59,116,-5,48,26,36,76,110,-88,97,4,-17,104,-62,95,70,62,11,112,-95, 
  /* [8][0][][] */ 5,37,-54,-100,51,18,-88,-31,-3,31,40,89,-6,-53,-95,-69,-73,87,-74,8,21,-34,74,102,-127,87,43,70,-80,10,-100,109,93,-40,39,-12,110,-6,-29,74,73,98,-121,-124,-18,-38,-28,103, 
  /* [9][0][][] */ -2,19,110,43,90,-103,-44,-115,55,51,-6,57,-24,-72,-95,-8,10,0,-95,-64,3,99,-105,-86,127,3,-8,36,-2,-57,-82,101,65,0,27,-22,-70,17,-33,-25,53,-48,49,-77,79,21,-83,52, 
  /* [10][0][][] */ -46,71,101,-53,-2,114,118,40,52,41,34,-52,109,93,-19,6,-33,91,-80,-46,-4,41,68,-57,46,65,-117,-96,-33,90,-76,-65,76,106,127,85,-26,21,-18,43,-20,118,-93,-36,-78,-42,11,-45, 
  /* [11][0][][] */ 119,8,-1,112,127,57,67,43,123,104,-62,121,7,-68,40,-66,-52,-86,75,52,44,85,36,-93,-87,-78,-17,82,91,7,38,-6,-85,-58,63,58,-48,86,-15,-48,-12,111,-59,10,-26,-44,-73,-75, 
  /* [12][0][][] */ 25,61,-40,11,99,22,-19,48,-58,66,-19,27,-29,25,62,-80,-94,-18,-32,-64,40,4,29,108,-49,-33,97,-88,105,28,-21,127,-84,-59,-31,29,10,-58,-4,49,126,49,-94,-41,-5,-66,-25,124, 
  /* [13][0][][] */ 120,-61,113,106,105,125,93,76,86,-85,24,-14,102,83,79,-49,-109,-55,-55,42,80,-13,127,-32,-47,53,9,33,-70,-72,94,50,42,113,-7,50,-69,-15,37,76,-48,86,-38,17,-28,42,12,-18, 
  /* [14][0][][] */ -43,-98,99,81,82,-15,-2,-100,-62,-20,81,90,-21,-65,-77,-93,-53,-47,26,36,-31,43,11,69,-115,-67,-29,44,-103,-101,-65,48,103,-8,-24,19,104,127,44,-126,1,-106,47,93,79,-98,75,-71, 
  /* [15][0][][] */ 12,-32,-39,77,97,-106,61,-118,60,-8,-86,5,113,-4,-110,-127,98,4,-113,20,47,14,75,115,83,69,41,99,16,56,67,-122,2,2,-79,-12,-83,120,116,-82,10,122,-62,-32,21,-96,-56,-97, 
  /* [16][0][][] */ -85,6,97,-76,32,107,-73,30,37,38,-127,65,-28,-64,-69,-59,112,72,63,57,105,72,-53,43,-51,45,-75,54,-122,1,30,0,-114,71,48,50,-49,44,-66,-82,10,-60,65,92,54,96,95,-24, 
  /* [17][0][][] */ 45,-125,40,88,-34,-106,-57,-91,56,-79,96,61,112,73,-107,37,25,64,117,127,-85,-4,23,-46,37,80,-90,39,119,-43,-23,88,-45,-21,42,16,-40,113,-83,-30,-88,-36,-6,-13,18,22,98,-108, 
  /* [18][0][][] */ -99,106,112,-67,-8,-107,-107,3,-7,77,-108,-48,-39,35,62,-44,31,-26,58,-25,103,-47,22,-83,28,-97,-11,127,33,34,1,43,50,-10,-112,-110,-32,36,-34,82,-41,-2,-54,-9,-118,25,34,2, 
  /* [19][0][][] */ 17,31,75,40,56,-90,95,90,92,-66,30,-15,-103,31,-62,74,81,-111,108,56,-27,79,-60,9,74,-86,32,-72,-97,-127,-71,43,86,-82,31,-4,6,-75,-62,-103,42,-124,-89,8,-93,30,93,-97, 
  /* [20][0][][] */ -18,83,74,105,-106,101,15,63,11,5,-108,-2,-13,94,41,-79,-59,-48,-83,-42,21,-58,-95,-86,85,-89,-120,47,21,9,-53,126,117,48,-22,58,42,-45,-25,-127,-103,-33,-110,-118,-39,-80,-85,117, 
  /* [21][0][][] */ 110,74,87,-93,114,-64,91,31,13,-52,-62,56,19,53,-39,-101,-104,-18,42,0,125,-37,86,-73,74,-76,-32,91,30,18,6,-9,7,34,-82,-103,127,114,-107,-27,6,18,43,-11,-87,-72,-68,107, 
  /* [22][0][][] */ 23,-55,-80,-104,88,-63,107,49,-96,89,-76,-114,106,-114,-125,-89,37,77,-118,-70,83,-84,24,23,94,-5,-127,103,-68,-84,-68,-120,40,58,9,4,-2,-21,-67,-118,-3,-19,-7,91,55,-125,93,-30, 
  /* [23][0][][] */ 76,-95,18,69,111,-102,19,-90,72,-68,98,88,31,-95,32,-45,93,-22,-95,114,107,-70,117,-23,-1,-1,85,35,85,61,85,-26,-38,54,32,47,110,6,-100,13,-94,10,22,-107,-57,-78,127,37, 
  /* [24][0][][] */ -61,-53,-85,-53,-67,-92,-50,-73,79,127,92,57,124,73,-23,-108,-73,55,41,-36,106,-63,-40,-22,66,-13,74,70,117,67,18,-46,1,22,61,42,-37,-67,73,-9,-56,-88,113,4,35,-21,56,80, 
  /* [25][0][][] */ -73,-62,-66,1,105,-58,-87,66,60,-99,-29,34,85,11,-95,-25,-68,72,46,-94,81,96,0,-44,29,-38,-100,52,90,-75,52,127,93,-99,56,84,109,-47,-10,-9,-69,104,-91,2,111,54,77,45, 
  /* [26][0][][] */ 51,-117,-26,-17,-99,-5,-12,-15,-109,-127,103,85,-80,-52,8,5,113,28,-83,-68,13,70,97,17,53,64,11,45,14,6,-96,-3,-33,-63,-101,-108,-69,82,-55,115,-101,125,54,32,-76,73,-44,100, 
  /* [27][0][][] */ 7,10,-73,-116,-118,-75,-79,-15,48,102,35,-121,-25,56,84,-29,81,-23,62,-88,-105,7,-36,-25,-106,58,-120,-7,78,30,-40,-14,68,74,-95,-99,-102,-75,-127,106,-106,21,25,19,101,22,69,106, 
  /* [28][0][][] */ 88,-7,86,45,-113,-62,-98,-70,-48,-100,54,66,-77,-80,5,80,86,108,-66,72,-24,23,-100,-71,-127,70,-82,-65,-80,-76,-2,-17,-100,16,76,73,17,-100,-38,12,95,39,-85,46,-102,-10,-1,47, 
  /* [29][0][][] */ 50,66,55,-57,-91,9,-127,3,99,-18,-95,-100,108,-112,-54,-26,-104,103,25,-72,-82,-38,54,2,-36,12,-46,-32,-109,-11,106,-7,55,0,-86,-62,-14,104,-12,121,49,117,-51,85,-3,107,-54,-28, 
  /* [30][0][][] */ 26,-61,-59,34,-78,37,-48,3,127,-17,-1,-40,-80,16,58,19,2,34,88,-81,41,-95,-108,17,-92,40,-66,115,1,-100,-89,9,-75,-68,-97,-52,15,-15,-5,38,90,-72,-11,112,101,-41,98,57, 
  /* [31][0][][] */ 77,-94,32,98,45,59,-65,-105,-36,-23,-81,-92,96,-127,-53,118,-60,-94,32,44,59,32,-35,102,40,-119,36,35,-77,-78,43,104,19,21,-96,-12,93,-36,-72,-104,56,-71,-35,29,1,-58,-41,22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022198103833943605, 0.0024023822043091059, 0.0023811154533177614, 0.0022197389043867588, 0.0021184820216149092, 0.0021970411762595177, 0.0022612460888922215, 0.0024296005722135305, 0.002274123253300786, 0.0023939430247992277, 0.0024144109338521957, 0.0023908521980047226, 0.0023709498345851898, 0.002386526670306921, 0.002366858534514904, 0.0020352967549115419, 0.0021584455389529467, 0.0022579771466553211, 0.0022290030028671026, 0.0022138420026749372, 0.0019699768163263798, 0.0022317110560834408, 0.0022667055018246174, 0.0022831563837826252, 0.0024277956690639257, 0.0023428802378475666, 0.0022870881948620081, 0.0021240920759737492, 0.0024175145663321018, 0.0022002789191901684, 0.0023995519150048494, 0.0023057488724589348, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 2136, -2108, 4621, 3177, 4575, -71, 2678, 6625, -2959, -2150, -1939, 13821, 5549, 4716, 8803, -4388, -3595, 9025, 4258, 7430, 6790, 33783, 30168, 1351, -2561, 2213, -513, -1012, 2776, 3062, 8152, 11378, -1393, 388, 14631, 4671, 11736, 3858, 2183, -2053, 5469, -2929, 12237, -686, 367, 2834, -2665, 6673, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00017850019503384829, 0.00016938691260293126, 0.00015642432845197618, 0.00017981836572289467, 0.0001165921421488747, 0.00014680136519018561, 0.00013602423132397234, 0.00011747654934879392, 0.00014176210970617831, 0.00016904725634958595, 0.00015212969447020441, 5.7540797570254654e-05, 0.00012174264702480286, 0.00012232988956384361, 0.00010267868492519483, 0.00013096122711431235, 0.00017211837985087186, 0.00010502550139790401, 0.00013794456026516855, 0.00010775695409392938, 0.00012148141831858084, 3.2346841180697083e-05, 3.3500007702969015e-05, 0.00013382890028879046, 0.00016026741650421172, 0.00010893798753386363, 0.00016345987387467176, 0.00018085104238707572, 0.0001670813508098945, 0.00014526738959830254, 8.4917337517254055e-05, 7.6909767813049257e-05, 0.00016039173351600766, 0.00022371071099769324, 6.2079554481897503e-05, 0.00013443862553685904, 7.1296912210527807e-05, 0.00015769746096339077, 0.00016563675308134407, 0.0001901016803458333, 0.00010064201342174783, 0.00015351790352724493, 7.1770722570363432e-05, 0.00019691337365657091, 0.00014381644723471254, 0.0001785164640750736, 0.00015437594265677035, 0.00010829608072526753, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -6,14,127,-12,-9,58,-9,-81, 
  /* [1][0][][] */ 89,-61,63,-82,-18,-73,127,29, 
  /* [2][0][][] */ 57,56,68,-75,-60,21,127,-23, 
  /* [3][0][][] */ 1,26,10,-15,16,-58,127,2, 
  /* [4][0][][] */ 127,-41,-52,-32,-101,-62,-33,79, 
  /* [5][0][][] */ 24,73,127,-7,25,-48,33,-45, 
  /* [6][0][][] */ 117,106,-14,127,-80,29,18,90, 
  /* [7][0][][] */ -24,-3,3,41,27,-109,-127,-31, 
  /* [8][0][][] */ 104,67,-35,80,-58,23,-127,-46, 
  /* [9][0][][] */ 127,-24,-42,47,3,-44,26,-82, 
  /* [10][0][][] */ 69,22,-8,17,-27,127,39,5, 
  /* [11][0][][] */ 127,-25,-2,-114,89,-55,-64,78, 
  /* [12][0][][] */ -57,118,86,-34,9,67,-98,127, 
  /* [13][0][][] */ 127,-2,-100,10,32,-87,31,-93, 
  /* [14][0][][] */ 104,33,4,-13,-127,28,-80,-17, 
  /* [15][0][][] */ 19,9,-106,-39,-127,-52,125,101, 
  /* [16][0][][] */ -4,-58,123,-10,127,-47,-62,-33, 
  /* [17][0][][] */ 18,-18,78,-15,127,-56,-64,1, 
  /* [18][0][][] */ 119,-42,127,48,-25,33,-36,-5, 
  /* [19][0][][] */ 79,56,65,-63,-49,-127,13,-53, 
  /* [20][0][][] */ 45,-36,55,127,5,-56,-78,73, 
  /* [21][0][][] */ 97,-10,-71,-127,58,-62,2,115, 
  /* [22][0][][] */ -33,-127,-56,-45,53,-18,97,-74, 
  /* [23][0][][] */ -14,19,26,-46,-101,-127,10,-27, 
  /* [24][0][][] */ 127,2,54,44,-6,-23,-88,75, 
  /* [25][0][][] */ 115,60,-31,-88,-13,-12,-16,127, 
  /* [26][0][][] */ -87,-33,27,-127,110,5,-43,-91, 
  /* [27][0][][] */ 102,127,-3,-46,6,59,23,0, 
  /* [28][0][][] */ 23,127,3,19,-5,-46,-20,116, 
  /* [29][0][][] */ 111,23,94,114,40,-31,-127,48, 
  /* [30][0][][] */ 127,-108,-73,117,48,9,-84,88, 
  /* [31][0][][] */ 94,-82,24,56,-87,-116,-127,62, 
  /* [32][0][][] */ -89,-69,23,-127,78,-18,-35,-76, 
  /* [33][0][][] */ 27,2,24,29,34,-65,127,34, 
  /* [34][0][][] */ -66,92,121,-78,127,-80,-81,103, 
  /* [35][0][][] */ -56,19,22,111,-2,127,25,-15, 
  /* [36][0][][] */ 90,33,-33,-127,46,-10,25,44, 
  /* [37][0][][] */ 50,50,-4,12,-76,127,56,39, 
  /* [38][0][][] */ -17,-71,23,116,22,61,5,127, 
  /* [39][0][][] */ 21,-4,-127,36,-5,-30,-26,69, 
  /* [40][0][][] */ 56,12,-92,-2,-42,46,-45,127, 
  /* [41][0][][] */ 42,1,23,-44,-115,-127,-21,-1, 
  /* [42][0][][] */ -77,54,-89,99,-7,92,-25,-127, 
  /* [43][0][][] */ -12,-3,-30,-127,-17,4,-9,-70, 
  /* [44][0][][] */ 69,20,17,60,29,127,-42,39, 
  /* [45][0][][] */ -2,74,-28,15,127,-36,-69,-10, 
  /* [46][0][][] */ 58,-69,10,127,70,29,-46,74, 
  /* [47][0][][] */ -21,-91,46,-20,127,13,46,35, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.003022399265319109, 0.0028680914547294378, 0.0026486064307391644, 0.0030447186436504126, 0.0019741603173315525, 0.0024856685195118189, 0.0023031882010400295, 0.0019891352858394384, 0.0024003430735319853, 0.0028623403050005436, 0.0025758889969438314, 0.00097429170273244381, 0.0020613695960491896, 0.0020713128615170717, 0.0017385750543326139, 0.002217460423707962, 0.0029143411666154861, 0.0017783117946237326, 0.0023357034660875797, 0.0018245612736791372, 0.002056946512311697, 0.00054770283168181777, 0.00056722847511991858, 0.0022660163231194019, 0.0027136784046888351, 0.0018445587484166026, 0.0027677335310727358, 0.0030622042249888182, 0.0028290532063692808, 0.0024596950970590115, 0.0014378364430740476, 0.0013022507773712277, 0.0027157831937074661, 0.0037879121955484152, 0.0010511428117752075, 0.0022763402666896582, 0.0012072129175066948, 0.0026701632887125015, 0.0028045929502695799, 0.0032188377808779478, 0.0017040896927937865, 0.0025993944145739079, 0.0012152355629950762, 0.0033341746311634779, 0.0024351275060325861, 0.0030226747039705515, 0.0026139228139072657, 0.0018336898647248745, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -14284, -4143, 1233, -14422, 1667, -5340, 14791, 15471, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00011872926552314311, 0.00011817735503427684, 5.9333979152143002e-05, 9.003846935229376e-05, 8.2578422734513879e-05, 8.4764855273533612e-05, 6.2113023886922747e-05, 9.4644274213351309e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-22,20,-27,27,54,10,36,114,-83,53,5,-47,61,15,-50,14,-31,-20,-19,13,-59,11,-26,-58,-36,-42,-41,-31,80,-23,33,25,-43,10,-34,60,-66,-58,9,23,-16,-72,-3,53,-31,56,-38, 
  /* [1][0][][] */ 45,1,-7,63,54,58,21,29,71,-85,-6,2,39,19,-39,-16,-32,-48,-66,-7,10,-50,51,73,-3,-63,-5,38,-27,58,-52,127,-26,41,-24,-27,-63,-15,-9,-22,-53,-15,-37,40,18,-8,6,-89, 
  /* [2][0][][] */ -39,-28,-79,30,-74,-33,-12,47,-105,-85,-91,-28,-37,48,-127,-7,76,-86,33,-18,122,80,-21,0,43,88,11,-95,-52,7,59,1,-23,37,66,-69,62,-6,80,100,-46,100,41,-6,-84,63,-33,66, 
  /* [3][0][][] */ -1,-21,-10,39,-22,1,-11,44,77,92,-127,-26,17,-24,-26,73,-54,-17,-2,45,-21,5,74,15,5,11,-52,51,-35,28,-36,-30,13,23,28,13,49,-8,40,5,-60,87,67,19,22,-14,-31,-39, 
  /* [4][0][][] */ -22,-73,18,-49,2,85,-60,-62,-4,-42,76,39,-52,-19,-12,31,62,17,-31,45,-75,-23,107,-11,-90,-14,-7,17,20,-27,-15,63,-48,49,-18,58,-29,37,1,15,-30,34,-33,40,127,56,-9,9, 
  /* [5][0][][] */ -67,-64,62,-127,-25,25,-34,-52,-7,77,-52,76,-81,24,54,14,73,61,70,17,32,1,-15,-65,46,-74,5,-47,-11,-41,39,-77,-5,-41,60,-3,-18,34,41,68,99,11,16,-26,-10,-8,-35,36, 
  /* [6][0][][] */ -67,-62,46,24,-62,-66,8,-62,-104,11,-127,43,23,-39,55,17,-35,22,13,126,-16,2,76,53,-77,-15,64,25,19,-39,-32,-64,-28,63,73,-86,-46,81,52,-26,-68,59,80,-62,-2,-42,-34,2, 
  /* [7][0][][] */ 20,-5,12,-11,13,23,-48,-48,-127,-33,98,23,3,-31,26,0,18,41,6,-24,-43,9,-9,-46,36,3,-43,10,-14,-18,-26,-54,-106,-59,-40,1,60,-34,-26,2,54,7,49,-20,14,-45,40,16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0073299892246723175, 0.0072959158569574356, 0.0036631021648645401, 0.005558705423027277, 0.0050981445237994194, 0.0052331280894577503, 0.0038346720393747091, 0.005843054037541151, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -3307, -1221, 15987, 2368, -733, -8370, -1067, 16924, 7786, -3724, -4695, -8075, -2136, 25792, 12399, -207, 10249, -7070, 5006, -2167, 19219, -4097, -1647, -2585, 1755, -6268, -301, -4361, 10187, -32172, -2941, 976, -3539, -1343, -1155, -2293, 13422, -6010, -1964, -16706, -4160, 7687, -6573, -1971, 3428, -3228, 10593, -4614, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00021671138529200107, 0.00012536912981886417, 6.4732666942290962e-05, 8.900294778868556e-05, 0.00018611463019624352, 9.454348764847964e-05, 0.00023824656091164798, 9.4234135758597404e-05, 0.00012589880498126149, 0.00034079334000125527, 0.0002583936438895762, 5.0018988986266777e-05, 0.00022322265431284904, 5.1895360229536891e-05, 0.00011500666732899845, 0.00017302310152444988, 8.7561573309358209e-05, 9.9509576102718711e-05, 0.00010959391511278227, 0.00026557347155176103, 7.6243581133894622e-05, 0.00016783247701823711, 0.00019059887563344091, 0.00015974690904840827, 0.00013283501903060824, 0.00021025100431870669, 0.00020815868629142642, 0.00033250387059524655, 9.0300374722573906e-05, 7.7116361353546381e-05, 0.00016690712072886527, 0.00016373048129025847, 5.8686629927251488e-05, 0.00027246825629845262, 6.5116255427710712e-05, 0.00010140397353097796, 0.0001078835703083314, 7.606713188579306e-05, 6.0860234952997416e-05, 8.4924402472097427e-05, 0.00017186602053698152, 9.8358388640917838e-05, 0.00018164704670198262, 0.00013338540156837553, 0.00014222860045265406, 6.9310255639720708e-05, 0.00010986231791321188, 0.00010578324145171791, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 80,81,-23,51,1,0,-51,15,37,-68,36,12,16,-120,-31,32,95,33,-76,-2,89,16,-28,-12,81,37,25,-3,-71,27,-13,-55,127,8,125,30,-42,26,127,33,-58,70,-97,-50,29,-98,-42,-3, 107,127,-76,86,15,55,-66,-127,53,37,127,48,-12,-16,-23,-10,-71,127,-93,24,61,127,34,-22,34,17,12,127,-127,89,-29,-127,-6,-35,41,85,-88,127,119,45,-108,-72,77,-4,9,18,-127,99, 57,49,-11,36,2,0,-36,27,29,-82,34,17,12,-87,-29,-27,86,-13,-39,-14,79,20,-32,48,60,69,17,-3,-6,8,-20,-33,120,15,98,16,-18,26,118,4,-30,71,55,68,33,86,16,-15, 
  /* [0][1][][] */ -20,-50,-127,86,22,51,70,-35,40,52,-45,127,127,-18,-25,-79,-32,78,71,-17,-110,14,24,-107,34,59,23,14,-13,88,19,50,61,127,38,43,-92,-8,-55,78,89,-3,81,-115,9,-107,-11,127, 43,-97,-51,-127,122,11,127,-87,-127,127,3,87,-111,127,127,-18,-127,85,19,127,33,-7,127,-10,-127,127,39,-73,-100,45,-127,94,97,-103,47,127,127,57,-20,127,127,-70,-32,-2,108,-65,-2,44, -7,-45,-127,50,-13,127,47,-26,35,38,-39,84,-18,-2,-32,-23,-68,76,127,-41,-127,20,-68,127,13,26,22,34,53,78,38,36,10,-8,-35,-116,-53,-25,-5,22,54,66,-21,127,-11,113,-31,90, 
  /* [0][2][][] */ -33,-17,3,18,-11,15,-14,0,31,-38,5,5,35,-109,-39,32,89,13,9,9,-63,28,-5,3,28,6,-4,2,19,15,36,6,22,14,127,3,-13,48,108,43,5,69,127,-19,-54,-127,-5,-10, -127,-3,-101,29,-127,8,-64,-12,20,90,-76,64,-16,-48,-19,127,-94,48,-91,-26,-84,28,3,-24,-12,71,-127,-20,-53,127,59,17,42,-26,17,30,-29,51,-38,62,-66,-127,-114,-30,-127,71,-95,104, -26,-21,-1,15,8,0,-15,2,23,-64,-8,-9,-6,-102,-26,1,93,-25,97,16,-70,1,3,43,24,-8,-10,-5,24,2,32,6,43,9,75,27,-6,42,127,8,8,70,-54,54,-35,101,-6,-40, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.013847255147993565, 0.0080107394605875015, 0.0041362377814948559, 0.0056870412081480026, 0.011892207898199558, 0.0060410662554204464, 0.01522329356521368, 0.0060212993994355202, 0.008044583722949028, 0.021775748580694199, 0.016510635614395142, 0.0031960743945091963, 0.014263307675719261, 0.0033159693703055382, 0.0073486063629388809, 0.011055695824325085, 0.005594941321760416, 0.0063583855517208576, 0.0070027466863393784, 0.016969406977295876, 0.0048717530444264412, 0.010724028572440147, 0.012178738601505756, 0.010207383893430233, 0.0084877889603376389, 0.013434454798698425, 0.013300761580467224, 0.021246073767542839, 0.0057699428871273994, 0.0049275211058557034, 0.010664901696145535, 0.010461922734975815, 0.0037499126046895981, 0.017409965395927429, 0.0041607478633522987, 0.0064794323407113552, 0.006893460638821125, 0.0048604784533381462, 0.0038888000417500734, 0.005426433403044939, 0.010981760919094086, 0.0062848278321325779, 0.011606741696596146, 0.0085229566320776939, 0.0090880123898386955, 0.0044287326745688915, 0.0070198969915509224, 0.0067592551931738853, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 34145, 8226, 2243, 1479, 5529, 4227, 8627, 5127, 4061, -8898, 14325, 1556, 10509, 2614, 6383, 3238, 7889, -1206, 14640, 147, 5215, -1114, 5378, 8280, 3872, -3632, 2789, 18103, 980, 9657, 2444, 15514, 853, 7598, -433, -2387, 3387, 2876, 344, 2525, 18476, -1293, 15522, 3977, 1677, 6470, 5813, -2156, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 3.1490104447584599e-05, 9.8537770099937916e-05, 0.00013033357390668243, 0.00016127816343214363, 0.00012931387755088508, 0.00011490521137602627, 8.8666965893935412e-05, 0.00012780998076777905, 0.00011395521141821519, 8.2967555499635637e-05, 6.7085871705785394e-05, 0.00014415885380003601, 7.6474469096865505e-05, 0.00014100890257395804, 0.00010876567830564454, 0.00011531446943990886, 9.7167569037992507e-05, 0.00014724541688337922, 6.3595616666134447e-05, 0.00013714871602132916, 0.00012664336827583611, 0.00010922292858595029, 0.00010657480015652254, 8.5496882093138993e-05, 0.00011162544979015365, 0.00016918570327106863, 0.00015280820662155747, 5.1341161452000961e-05, 0.00017939403187483549, 8.1196565588470548e-05, 0.00013869852409698069, 6.0274313000263646e-05, 0.00011319243640173227, 0.00010543303505983204, 0.00013286464673001319, 0.00014989527699071914, 0.0001641234994167462, 0.00012513408728409559, 0.00012700937804765999, 0.00012330459139775485, 4.8962519940687343e-05, 0.00014875851047690958, 5.5724183766869828e-05, 0.00010950324212899432, 0.0001212503484566696, 0.00012197066826047376, 0.00010651053162291646, 0.00014521634147968143, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,45,-23,-11,69,28,13,-44, 
  /* [1][0][][] */ -5,-46,-34,-16,-49,-127,18,20, 
  /* [2][0][][] */ -75,71,4,-54,-57,46,-72,127, 
  /* [3][0][][] */ 54,48,47,-13,-46,-127,41,-24, 
  /* [4][0][][] */ 26,66,-118,37,-127,99,38,36, 
  /* [5][0][][] */ -27,51,27,-29,-89,-127,-64,-10, 
  /* [6][0][][] */ -49,127,107,-31,-72,-26,15,-33, 
  /* [7][0][][] */ -8,-3,40,60,2,-127,0,55, 
  /* [8][0][][] */ 127,25,-87,74,-84,-74,-108,-12, 
  /* [9][0][][] */ 103,-41,-68,-83,5,-25,-51,127, 
  /* [10][0][][] */ -87,8,5,127,9,69,23,-93, 
  /* [11][0][][] */ 29,17,51,-21,12,115,127,92, 
  /* [12][0][][] */ -66,-85,-38,-96,127,-28,-15,37, 
  /* [13][0][][] */ -23,-1,-4,60,16,-127,53,79, 
  /* [14][0][][] */ 75,91,124,18,85,-127,-98,-34, 
  /* [15][0][][] */ -40,79,127,68,-14,23,49,-85, 
  /* [16][0][][] */ -95,-41,54,-75,127,14,-61,7, 
  /* [17][0][][] */ 36,-49,-49,-1,-12,127,-25,43, 
  /* [18][0][][] */ -31,127,77,-54,-52,41,89,-86, 
  /* [19][0][][] */ 14,113,89,127,-24,27,49,27, 
  /* [20][0][][] */ 4,6,69,-127,-58,-4,75,-12, 
  /* [21][0][][] */ -103,76,35,-127,117,72,117,11, 
  /* [22][0][][] */ 79,-37,-103,70,60,-49,-53,127, 
  /* [23][0][][] */ 38,-81,-127,-38,61,-9,-60,89, 
  /* [24][0][][] */ 42,-18,-102,24,-64,29,-126,127, 
  /* [25][0][][] */ -16,-18,57,13,127,-14,-88,-47, 
  /* [26][0][][] */ 3,89,127,-34,-29,-14,49,-59, 
  /* [27][0][][] */ -38,42,127,-87,28,18,94,-125, 
  /* [28][0][][] */ 63,-10,86,127,75,-30,26,102, 
  /* [29][0][][] */ 70,76,99,26,-55,30,-127,85, 
  /* [30][0][][] */ 47,-2,-78,67,-127,-37,-38,63, 
  /* [31][0][][] */ 30,127,108,-61,-86,48,104,-121, 
  /* [32][0][][] */ 64,-16,-11,25,109,127,32,-36, 
  /* [33][0][][] */ 17,-39,-127,5,24,-15,-43,75, 
  /* [34][0][][] */ 21,-56,23,-127,-2,77,-11,9, 
  /* [35][0][][] */ -26,24,95,-9,8,-127,1,-26, 
  /* [36][0][][] */ -7,12,-30,-127,-14,11,13,-37, 
  /* [37][0][][] */ 61,-14,-18,-90,-79,127,-54,-72, 
  /* [38][0][][] */ 90,-66,-26,97,64,35,-24,127, 
  /* [39][0][][] */ 127,88,29,74,-8,94,-39,-2, 
  /* [40][0][][] */ 53,-116,-127,-42,12,19,-60,122, 
  /* [41][0][][] */ -4,-55,-127,-100,-1,-76,-40,-19, 
  /* [42][0][][] */ 60,105,95,127,-85,-31,26,54, 
  /* [43][0][][] */ 127,-36,-113,-119,-72,-37,23,69, 
  /* [44][0][][] */ -3,78,109,-81,-98,-9,75,-127, 
  /* [45][0][][] */ 42,19,-127,55,-34,36,19,68, 
  /* [46][0][][] */ 49,-48,-77,-127,15,-34,-26,43, 
  /* [47][0][][] */ 82,-120,127,-64,75,-24,8,11, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00063074927311390638, 0.0019737193360924721, 0.0026105919387191534, 0.0032304145861417055, 0.002590167336165905, 0.0023015604820102453, 0.0017760064220055938, 0.0025600441731512547, 0.0022825319319963455, 0.0016618467634543777, 0.001343735377304256, 0.002887513255700469, 0.0015317897778004408, 0.0028244196437299252, 0.0021785851567983627, 0.0023097579833120108, 0.0019462741911411285, 0.002949337475001812, 0.0012738252989947796, 0.0027470998466014862, 0.002536676824092865, 0.002187744015827775, 0.0021347017027437687, 0.0017125094309449196, 0.002235866617411375, 0.0033888029865920544, 0.0030607604421675205, 0.0010283675510436296, 0.0035932767204940319, 0.0016263736179098487, 0.0027781424578279257, 0.0012072992976754904, 0.0022672535851597786, 0.002111832145601511, 0.0026612894143909216, 0.0030024142470210791, 0.0032874068710952997, 0.0025064456276595592, 0.0025440079625695944, 0.0024698006454855204, 0.00098072318360209465, 0.0029796448070555925, 0.001116159837692976, 0.0021933587267994881, 0.0024286541156470776, 0.0024430821649730206, 0.0021334143821150064, 0.0029086950235068798, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -12122, -34676, 1546, 6687, -18594, -184, -27074, -546, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00014682840264867991, 6.5149157308042049e-05, 5.8853584050666541e-05, 6.56170304864645e-05, 6.0383485106285661e-05, 7.693495717830956e-05, 5.7354707678314298e-05, 7.6770069426856935e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 51,52,-79,55,15,23,-89,-34,7,-20,-1,-39,-15,-5,45,3,50,-15,45,-22,19,-39,45,-2,10,-28,-22,15,-16,1,-21,-1,51,18,19,13,127,57,29,-28,6,-23,-6,-25,85,30,18,-47, 
  /* [1][0][][] */ 70,27,12,0,34,92,-14,-26,30,65,-41,-75,111,-23,14,45,25,40,25,-84,127,-29,42,52,42,23,43,16,26,-61,60,79,65,103,8,113,64,27,23,26,88,11,35,28,30,45,114,-70, 
  /* [2][0][][] */ -17,10,78,127,-51,26,-1,58,34,75,23,-82,-41,111,22,38,-81,-99,76,4,6,61,-53,-80,-32,-39,27,-5,-112,21,3,-4,-34,-32,-89,-47,15,23,-93,-24,-19,-58,-36,21,66,-77,-34,31, 
  /* [3][0][][] */ -21,55,-75,-7,22,-77,9,66,107,-79,-44,16,-6,-25,7,59,26,11,-19,-22,-5,17,-73,35,-27,-31,41,-15,61,-28,40,-54,42,-23,-34,-50,-127,-7,-84,14,-22,-63,37,-10,-52,16,-13,-37, 
  /* [4][0][][] */ 51,-30,34,-30,-70,72,29,75,-127,-59,64,53,83,-53,-74,-63,93,63,73,-40,17,-94,-19,55,-29,10,-53,-127,-52,-68,102,40,83,7,125,103,75,77,57,39,8,48,-55,-26,86,82,95,-57, 
  /* [5][0][][] */ 28,70,21,94,25,29,-55,-96,-101,29,-14,6,28,66,42,-63,76,98,-21,26,-19,-66,-22,-72,-96,-73,-44,61,4,43,-29,36,-7,-83,70,10,-34,127,-29,-107,-19,-30,-18,-37,-1,-13,-34,91, 
  /* [6][0][][] */ 113,48,-6,127,-93,26,12,75,27,-97,70,87,92,-41,-25,-46,70,21,-69,20,75,-21,-30,1,11,67,-50,-46,21,-46,67,55,18,-40,1,102,105,-83,9,14,-94,82,-114,61,63,116,110,-57, 
  /* [7][0][][] */ 26,19,127,48,-33,64,-91,7,-43,101,-13,-12,45,54,12,-8,-54,-7,-65,10,-14,30,3,-46,-14,39,49,-18,-1,3,18,-10,-87,-23,61,29,91,-7,37,-14,-20,-39,-33,-56,4,-31,13,26, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0062402072362601757, 0.002768839243799448, 0.0025012772530317307, 0.0027887236792594194, 0.0025662980042397976, 0.0032697354909032583, 0.0024375750217586756, 0.0032627277541905642, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 16208, -22986, -1317, 2443, 125, 15909, 3131, -2134, -12418, 1223, -3483, -2832, -8516, -17316, 6211, 1867, -10621, 38378, -1694, -16745, 16514, -560, 774, -2376, -1828, 849, -5184, -1356, -1304, 983, 83, 24615, 18175, -1053, 11025, 22783, 101, 19022, 829, -963, -3356, -9551, -953, 4713, 3227, 34135, 16023, -5041, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 7.8113756899256259e-05, 5.2832943765679374e-05, 0.0007446279632858932, 0.00021472916705533862, 0.00015259461360983551, 0.00010547471174504608, 9.6892661531455815e-05, 0.00034329268964938819, 7.4273179052397609e-05, 0.00030307724955491722, 0.0001549009612062946, 9.3728107458446175e-05, 0.000134160669404082, 6.6942491685040295e-05, 0.00014324579387903214, 5.9729605709435418e-05, 6.8510431447066367e-05, 4.0652510506333783e-05, 0.00037266264553181827, 4.6126682718750089e-05, 7.9965895565692335e-05, 0.00024585134815424681, 0.00015012883523013443, 0.00016794711700640619, 0.00018568542145658284, 0.00020666544151026756, 0.00016709702322259545, 0.00023210627841763198, 0.00020192106603644788, 0.00012650412099901587, 0.00012405606685206294, 7.7535223681479692e-05, 7.8438344644382596e-05, 0.00018384985742159188, 0.00011157201515743509, 9.2822090664412826e-05, 0.0004797483270522207, 0.00013792980462312698, 0.00011272419942542911, 0.00036066619213670492, 0.00013958883937448263, 0.00012078022700734437, 0.0001611508778296411, 0.00012172157585155219, 0.00016575588961131871, 4.950490256305784e-05, 9.7742857178673148e-05, 0.00015253786114044487, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -58,9,37,10,127,-49,28,7,20,33,53,-21,-1,8,-59,20,79,-43,-20,67,-36,8,-52,-3,-14,-1,38,-37,-25,127,26,-96,-47,100,94,-83,10,-48,-127,-30,18,-22,-13,-70,2,-50,-127,23, -67,102,-13,36,-15,-85,127,-16,81,16,43,127,57,127,-14,37,100,-69,5,86,-36,-26,102,-94,9,43,-92,27,-26,-92,108,-127,-127,-87,-6,-35,-62,-27,-109,22,-53,-28,19,-127,27,-88,29,54, -25,8,4,0,51,-46,20,-3,34,26,-11,-54,-7,-4,-56,31,55,-37,-16,57,-24,1,-64,3,29,0,34,-96,-34,48,-48,-86,10,-3,86,-57,13,-32,-89,9,23,-1,0,-52,-11,-77,-121,-19, 
  /* [0][1][][] */ -127,117,-19,-69,6,-90,12,-7,41,21,67,48,67,115,-48,24,127,-127,12,96,-30,-63,-104,-31,-127,-13,-24,18,-9,2,80,-64,-56,127,-113,-79,35,-58,38,67,-97,29,-83,48,-10,-127,9,-49, 16,127,127,127,-43,96,-124,127,127,-127,-62,84,127,117,127,-127,-39,-86,127,13,-127,127,127,6,104,104,75,127,127,-81,127,19,-50,-101,-41,-127,127,127,92,67,-48,127,-31,62,127,49,0,-127, -73,67,-42,-53,-61,-127,13,-23,2,7,106,46,36,108,-35,115,99,-115,-9,113,33,-85,-109,-29,31,-19,-20,23,-5,16,83,-41,1,-29,-127,-54,22,-70,45,-127,-69,36,127,57,-27,-109,-7,111, 
  /* [0][2][][] */ -18,-16,3,-6,29,-37,20,6,47,29,127,41,9,-9,-34,101,77,-64,-46,-4,-23,6,-58,46,-12,-15,-25,-19,10,63,0,0,-13,35,-76,28,-44,-48,52,-36,88,-1,-9,3,-21,-6,8,-35, -54,117,7,22,-88,-127,84,-69,67,24,56,-50,-42,21,-50,112,78,15,-3,127,-57,11,78,127,19,-127,127,10,19,-49,-40,-84,7,-49,-76,-90,-71,-73,33,40,127,61,-45,33,-24,-81,-93,-7, 43,-16,24,-1,-15,-39,14,12,47,25,100,21,27,-12,-31,63,50,-55,-56,5,-21,-3,-58,43,15,-16,-22,-56,4,-7,-8,13,1,5,-36,50,-36,-41,54,6,55,8,38,-5,-23,-72,21,25, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0047211912460625172, 0.0031932201236486435, 0.045005273073911667, 0.012978218495845795, 0.0092228101566433907, 0.0063748857937753201, 0.0058561870828270912, 0.020748591050505638, 0.0044890665449202061, 0.018317971378564835, 0.0093622049316763878, 0.0056649213656783104, 0.008108663372695446, 0.0040460005402565002, 0.0086577674373984337, 0.0036100540310144424, 0.004140766803175211, 0.0024570354726165533, 0.022523708641529083, 0.0027878941036760807, 0.0048331343568861485, 0.014859242364764214, 0.0090737780556082726, 0.010150713846087456, 0.011222816072404385, 0.012490847148001194, 0.010099334642291069, 0.014028490521013737, 0.012204097583889961, 0.007645901758223772, 0.0074979420751333237, 0.004686224739998579, 0.0047408090904355049, 0.01111187506467104, 0.0067434064112603664, 0.0056101619265973568, 0.02899596095085144, 0.0083364695310592651, 0.0068130441941320896, 0.021798644214868546, 0.0084367413073778152, 0.0072999498806893826, 0.0097399502992630005, 0.0073568453080952168, 0.010018276982009411, 0.0029920735396444798, 0.0059075728058815002, 0.0092193800956010818, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 843, 10215, -7999, 6117, 3712, 6400, 3925, 12577, 16456, 7962, -2659, -341, 1649, 5689, 4386, -1052, -161, 8625, 13448, 655, 2969, 12907, 3822, 7411, 17508, 10389, 1870, 10088, 2440, 6607, -2491, 12000, 2162, 10439, 10225, 7500, 65705, 18618, 6967, 17948, 2981, 1077, 6571, 2244, 4498, 3065, 3168, 4264, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00020141054119449109, 7.87033059168607e-05, 9.7483251010999084e-05, 0.0001040850838762708, 0.00013434364518616349, 0.00010233365901513025, 0.00012324283306952566, 7.0282199885696173e-05, 5.6345223129028454e-05, 9.2773720098193735e-05, 0.00014180055586621165, 0.00014270919200498611, 0.00013302321895025671, 0.00010665348236216232, 0.00011939895921386778, 0.00010715515236370265, 0.00014344901137519628, 8.7448650447186083e-05, 7.0298097853083163e-05, 0.00012330067693255842, 0.00015538152365479618, 6.2415754655376077e-05, 0.0001458249898860231, 9.1801884991582483e-05, 5.1570030336733907e-05, 8.4933381003793329e-05, 0.00013088108971714973, 8.8573084212839603e-05, 0.00010190770262852311, 0.00012162141501903534, 0.00019315711688250303, 6.9857851485721767e-05, 0.00018115293642040342, 7.5149990152567625e-05, 6.9902322138659656e-05, 0.00010524831304792315, 2.3707763830316253e-05, 5.049934406997636e-05, 8.6832391389179975e-05, 5.5304855777649209e-05, 0.00011687391815939918, 0.00016071891877800226, 0.00010654561629053205, 0.00010808842489495873, 0.00014345090312417597, 0.00010677883255993947, 0.00012742588296532631, 9.0819004981312901e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -85,-127,-31,26,-40,-15,52,-46, 
  /* [1][0][][] */ -8,127,40,-87,7,-91,-77,92, 
  /* [2][0][][] */ -127,-65,38,12,74,4,29,-18, 
  /* [3][0][][] */ -2,-47,-127,-60,37,-46,-39,58, 
  /* [4][0][][] */ -54,-109,98,-31,127,-66,55,1, 
  /* [5][0][][] */ -24,72,63,-94,100,39,-55,127, 
  /* [6][0][][] */ -127,89,57,67,-56,7,37,-118, 
  /* [7][0][][] */ 43,-10,56,35,50,-127,0,99, 
  /* [8][0][][] */ -1,76,-10,-31,25,101,127,-77, 
  /* [9][0][][] */ 87,127,1,-70,-71,-74,-45,108, 
  /* [10][0][][] */ 27,-11,34,-2,-18,40,-127,-77, 
  /* [11][0][][] */ -76,9,-107,-72,127,26,36,58, 
  /* [12][0][][] */ 87,33,-31,-2,127,92,11,7, 
  /* [13][0][][] */ -125,-127,-15,51,-97,52,62,9, 
  /* [14][0][][] */ -19,93,-74,120,-53,127,-19,40, 
  /* [15][0][][] */ -12,-78,-38,-96,127,56,-31,58, 
  /* [16][0][][] */ 68,-91,-1,50,42,-13,37,-127, 
  /* [17][0][][] */ -73,-72,-127,105,4,87,79,-110, 
  /* [18][0][][] */ 79,-18,127,3,-31,-115,-85,-38, 
  /* [19][0][][] */ -31,127,38,25,107,-118,-75,-41, 
  /* [20][0][][] */ -75,-14,-127,-44,30,-7,-4,-1, 
  /* [21][0][][] */ -115,-16,44,71,-84,-108,127,-56, 
  /* [22][0][][] */ 54,-10,-127,-68,-31,-7,-12,51, 
  /* [23][0][][] */ -26,36,127,-20,-100,32,-12,-108, 
  /* [24][0][][] */ -91,114,91,122,127,89,11,-50, 
  /* [25][0][][] */ -49,-127,-72,36,-66,33,56,-3, 
  /* [26][0][][] */ 104,114,-120,-59,-127,-18,-74,34, 
  /* [27][0][][] */ 58,58,-60,26,-127,26,-36,-14, 
  /* [28][0][][] */ -25,74,26,-74,78,92,-127,-110, 
  /* [29][0][][] */ 38,-8,-6,-72,-127,0,12,-47, 
  /* [30][0][][] */ -88,-6,38,127,52,23,-35,-21, 
  /* [31][0][][] */ 20,-111,-7,-87,-127,53,-70,-113, 
  /* [32][0][][] */ -127,0,25,-8,6,-36,-3,28, 
  /* [33][0][][] */ 48,-73,-127,-114,-6,12,-62,22, 
  /* [34][0][][] */ 51,90,127,-5,-122,-66,74,-70, 
  /* [35][0][][] */ 105,35,23,8,-114,-47,-127,-50, 
  /* [36][0][][] */ 127,11,86,-41,9,-12,67,84, 
  /* [37][0][][] */ 127,118,-6,-4,79,83,-126,35, 
  /* [38][0][][] */ -47,93,119,127,-31,69,38,-76, 
  /* [39][0][][] */ 30,54,127,-42,84,-61,-31,17, 
  /* [40][0][][] */ 70,43,30,7,-75,-127,35,-57, 
  /* [41][0][][] */ 33,-51,16,127,-23,70,11,76, 
  /* [42][0][][] */ -20,-106,76,-54,127,-44,101,22, 
  /* [43][0][][] */ -1,-21,-94,-24,117,36,-78,127, 
  /* [44][0][][] */ 96,-23,127,-1,0,35,-56,15, 
  /* [45][0][][] */ -22,27,20,-22,-93,-127,-23,101, 
  /* [46][0][][] */ -59,88,76,39,-11,-32,43,-127, 
  /* [47][0][][] */ 45,-19,10,127,-20,-127,71,67, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.005061921663582325, 0.0019779994618147612, 0.0024499837309122086, 0.0026159035041928291, 0.0033763723913580179, 0.0025718859396874905, 0.003097382839769125, 0.0017663573380559683, 0.0014160881983116269, 0.002331622177734971, 0.0035637819673866034, 0.0035866182297468185, 0.0033431870397180319, 0.0026804532390087843, 0.0030007772147655487, 0.0026930614840239286, 0.0036052118521183729, 0.0021977906581014395, 0.0017667568754404783, 0.0030988366343080997, 0.003905103774741292, 0.0015686550177633762, 0.0036649254616349936, 0.0023071977775543928, 0.0012960763415321708, 0.0021345759741961956, 0.0032893503084778786, 0.0022260502446442842, 0.0025611806195229292, 0.0030566328205168247, 0.0048544933088123798, 0.001755692414008081, 0.0045528002083301544, 0.0018886963371187449, 0.0017568101175129414, 0.0026451381854712963, 0.00059583195252344012, 0.0012691675219684839, 0.0021823025308549404, 0.0013899413170292974, 0.00293731689453125, 0.0040392451919615269, 0.0026777423918247223, 0.0027165168430656195, 0.0036052591167390347, 0.0026836036704480648, 0.0032025126274675131, 0.0022824956104159355, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3573, -854, 13619, -6577, -13454, -15470, -8053, -948, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00010689864575397223, 0.0001446478272555396, 0.00010981029481627047, 0.000121881123050116, 0.0001679228589637205, 0.00011243690823903307, 0.00017922422557603568, 0.00019104157399851829, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -21,-28,44,-50,55,81,67,90,105,-49,-23,62,-27,-23,13,-22,39,40,10,-56,-26,22,-91,-40,35,-5,20,-74,-36,24,39,19,21,47,67,12,114,-49,-75,2,-58,-68,-34,2,-70,-88,-127,57, 
  /* [1][0][][] */ -16,-3,-44,50,4,11,-45,-19,-60,26,16,91,-27,0,-29,127,39,62,9,-35,-42,-22,-73,18,17,-7,-19,-90,51,-13,-58,-71,60,-31,-31,-58,32,34,50,-45,3,68,50,-40,-1,-41,-54,-25, 
  /* [2][0][][] */ 6,-72,-27,-7,-31,18,2,11,108,18,-6,-19,-31,-77,36,9,1,-58,-24,-3,-97,51,6,27,5,46,-37,-27,-22,-38,39,-45,-96,26,-51,52,-70,59,-20,-21,127,-20,-1,40,27,39,-58,-35, 
  /* [3][0][][] */ -34,-112,94,56,23,-106,-20,-14,-127,121,55,-50,54,9,-23,18,53,35,-32,42,75,84,27,-66,15,85,61,30,-29,-74,13,10,-28,7,54,7,-18,-84,-38,38,-28,-14,21,-67,-84,13,-4,26, 
  /* [4][0][][] */ -7,58,-13,75,29,7,13,2,-50,74,49,73,0,24,64,17,10,-105,-4,-10,91,-11,-92,63,68,-22,33,32,46,30,-12,-50,-48,127,2,13,56,-21,24,27,-22,45,2,-23,0,-45,-29,22, 
  /* [5][0][][] */ -21,2,-7,-68,-127,33,123,32,18,60,-21,-29,-104,-4,63,-29,-80,40,-54,-79,-2,105,2,40,102,25,-2,20,-24,-13,127,-49,-9,102,73,92,-21,53,92,41,-20,-37,-21,34,-61,55,31,58, 
  /* [6][0][][] */ 4,-21,-9,26,-58,-56,18,5,24,-16,43,9,-53,-25,33,55,4,-63,9,-60,72,-23,0,-29,9,0,11,41,39,3,10,127,43,-13,-13,23,1,-7,24,14,2,38,-27,-49,-3,-22,-22,40, 
  /* [7][0][][] */ -29,-18,-47,-4,9,-27,3,8,39,6,21,-1,-5,11,-1,-3,29,-4,-1,-7,-59,9,7,-29,3,-7,-55,-14,-12,-19,18,27,16,-11,32,9,-21,127,-15,-42,-43,-3,-49,-33,22,62,-73,-14, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0045431922189891338, 0.0061475322581827641, 0.0046669375151395798, 0.0051799477078020573, 0.0071367211639881134, 0.0047785686329007149, 0.0076170293614268303, 0.0081192664802074432, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -197, 24660, 29807, 535, -792, -12307, 23189, 17834, -10644, -2317, -925, 17493, 21053, -15690, -11252, -30, 718, 27037, -401, 1290, 45542, 10531, -8831, -6068, 15366, 11922, -2690, -1607, -3303, -113, 29045, 357, -3468, 9800, 13062, 14939, -2255, 39554, -3343, 1140, 27528, -167, -2967, 15440, -18, -1049, -7749, 13944, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00025170089793391526, 0.00012385116133373231, 7.9572033428121358e-05, 8.218203583965078e-05, 5.5721026001265272e-05, 0.00012936863640788943, 9.9175005743745714e-05, 9.1009387688245624e-05, 0.0002913549542427063, 6.6213302488904446e-05, 0.00014855607878416777, 8.716349839232862e-05, 8.3598148194141686e-05, 0.00020570264314301312, 6.9288144004531205e-05, 7.0990521635394543e-05, 8.0144782259594649e-05, 0.00016337339184246957, 0.00058571703266352415, 5.7424538681516424e-05, 5.5600445193704218e-05, 6.4738946093712002e-05, 7.3665556556079537e-05, 0.00014448206638917327, 8.0007259384728968e-05, 9.0761532192118466e-05, 0.00017102890706155449, 0.00019863681518472731, 0.0001501580118201673, 0.00020819675410166383, 0.00015103392070159316, 8.3460021414794028e-05, 5.5950436944840476e-05, 9.2618269263766706e-05, 8.3362276200205088e-05, 9.2848698841407895e-05, 9.6700969152152538e-05, 9.1670211986638606e-05, 9.0462504886090755e-05, 7.7017335570417345e-05, 0.0001399846951244399, 0.00026644484023563564, 7.1038804890122265e-05, 8.7975487986113876e-05, 0.00016806942585390061, 0.00014065956929698586, 0.00023614350357092917, 9.3110815214458853e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 64,-60,-32,45,97,38,-72,-96,11,60,116,-71,-62,77,95,48,56,-72,57,75,-92,-94,51,99,-40,-18,81,80,84,97,-47,66,52,-77,-96,-65,57,-52,78,18,-84,75,40,-93,75,112,74,-71, 94,-78,-68,77,123,45,-76,-106,25,69,126,-95,-95,99,107,82,57,-92,48,93,-87,-120,75,116,-56,-53,113,100,104,127,-66,91,70,-96,-127,-85,74,-71,82,42,-120,97,42,-106,108,127,79,-83, 48,-33,-49,26,52,-3,-34,-55,17,18,17,-42,-77,44,25,23,2,-17,24,31,-19,-84,39,53,-21,-8,55,47,34,55,-18,13,38,-70,-67,-38,17,-24,9,30,-38,36,15,-30,43,28,23,-58, 
  /* [0][1][][] */ 53,-91,-70,82,106,85,-121,-117,90,111,122,-93,-91,96,127,81,109,-99,47,114,-109,-127,77,112,-119,-80,108,98,110,93,-82,97,95,-127,-89,-120,90,-96,113,81,-100,91,93,-124,84,122,50,-100, 56,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,124,127,127,-127,50,127,-127,-126,127,127,-127,-127,127,127,127,112,-127,127,127,-127,-89,-127,127,-127,127,127,-127,127,127,-127,127,120,57,-127, -3,-63,-86,62,51,30,-71,-53,56,39,19,-68,-81,44,43,51,26,-34,23,41,-34,-95,63,65,-70,-17,25,58,53,25,-38,29,60,-106,-71,-57,48,-32,23,56,-25,59,48,-54,46,1,24,-84, 
  /* [0][2][][] */ -38,-35,-54,41,28,46,-57,-24,-91,63,28,-67,-59,34,67,45,68,-24,-79,58,-26,-55,42,47,-81,-63,59,56,33,-2,-51,34,57,-69,-31,-54,29,-40,46,70,-39,60,84,-73,35,6,-102,-29, -127,-59,-94,70,43,70,-70,-9,-67,73,47,-71,-92,48,58,72,76,-28,-127,71,-44,-98,68,40,-94,-46,50,54,36,0,-76,43,76,-117,-35,-64,40,-57,47,96,-31,73,115,-89,52,-27,-127,-70, -65,-12,-64,39,14,19,-9,6,-84,32,18,-28,-41,22,25,34,22,-7,-65,37,-16,-12,24,26,-47,2,12,29,12,-8,-28,12,35,-46,-10,-19,10,-8,-7,35,-5,15,54,-18,7,-27,-51,-34, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.010697287507355213, 0.0052636740729212761, 0.0033818113151937723, 0.0034927364904433489, 0.0023681435268372297, 0.0054981671273708344, 0.004214937798678875, 0.0038678988348692656, 0.012382585555315018, 0.0028140654321759939, 0.0063136331737041473, 0.0037044484633952379, 0.0035529211163520813, 0.0087423622608184814, 0.0029447460547089577, 0.0030170970130711794, 0.0034061530604958534, 0.0069433688186109066, 0.024892972782254219, 0.0024405429139733315, 0.0023630189243704081, 0.0027514051180332899, 0.003130786120891571, 0.0061404877342283726, 0.003400308545678854, 0.0038573651108890772, 0.0072687286883592606, 0.0084420647472143173, 0.0063817151822149754, 0.0088483616709709167, 0.006418941542506218, 0.0035470507573336363, 0.0023778935428708792, 0.0039362763054668903, 0.0035428965929895639, 0.0039460696280002594, 0.0041097910143435001, 0.0038959840312600136, 0.003844656515866518, 0.0032732365652918816, 0.0059493496082723141, 0.011323905549943447, 0.0030191491823643446, 0.0037389581557363272, 0.007142950315028429, 0.005978031549602747, 0.010036098770797253, 0.0039572096429765224, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -2081, 6942, 4689, -1092, 118, 11455, 4343, 1881, 11850, 1841, -2834, 2104, 4555, 2127, -358, 1110, -1719, 7057, -3303, -1174, 1219, 1183, 553, -598, 268, 3137, -1845, -1800, -1134, -3278, 10860, 3554, 695, 1218, 549, 1598, 1460, 7766, 1341, 440, 9931, -2544, 666, 1746, -1738, -1870, 16344, 3101, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00025158800417557359, 0.00012590234109666198, 0.00016355377738364041, 0.0002351354924030602, 0.00043942758929915726, 7.693727093283087e-05, 0.00020088207384105772, 0.00020258485164958984, 8.6197651398833841e-05, 0.00029664381872862577, 0.0001629083271836862, 0.00024760144879110157, 0.00014234885748010129, 0.00021904647292103618, 0.00034907870576716959, 0.00017585561727173626, 0.00023875583428889513, 0.00013532239245250821, 0.00014319378533400595, 0.00026452096062712371, 0.0003286561113782227, 0.00022254213399719447, 0.00026719420566223562, 0.00024640225456096232, 0.00029851961880922318, 0.00016643284470774233, 0.00023285616771318018, 0.00017503202252555639, 0.00021530126105062664, 0.00013588336878456175, 0.00010308825585525483, 0.00019787187920883298, 0.00033195957075804472, 0.00028489271062426269, 0.00020929491438437253, 0.00024929098435677588, 0.00021335967176128179, 0.00011167507182108238, 0.0003273153561167419, 0.00025028534582816064, 0.00010140094673261046, 0.00010757478594314307, 0.00031745483283884823, 0.00025430376990698278, 0.00029387991526164114, 0.00023809476988390088, 6.6175227402709424e-05, 0.00016455459990538657, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 43,24,-58,11,-39,52,-127,31, 
  /* [1][0][][] */ 3,-64,-123,-8,-4,-19,127,-109, 
  /* [2][0][][] */ -127,-54,-75,-46,-32,50,-125,-6, 
  /* [3][0][][] */ -52,-35,19,-9,-24,-127,-108,-20, 
  /* [4][0][][] */ -44,-127,-41,13,61,19,-42,-40, 
  /* [5][0][][] */ 70,-33,83,55,-127,59,-73,-100, 
  /* [6][0][][] */ 39,-127,-71,-35,-9,70,-45,-90, 
  /* [7][0][][] */ -27,-90,-54,-58,66,-127,4,22, 
  /* [8][0][][] */ 39,58,47,58,31,-52,-6,127, 
  /* [9][0][][] */ -23,-55,-49,9,45,-17,127,-11, 
  /* [10][0][][] */ -27,18,-127,20,23,24,95,-110, 
  /* [11][0][][] */ 4,-38,-35,2,-127,17,8,55, 
  /* [12][0][][] */ 95,71,-23,46,-77,127,81,-10, 
  /* [13][0][][] */ -48,-8,22,-19,40,-127,-3,68, 
  /* [14][0][][] */ -102,-46,5,42,6,72,-121,-127, 
  /* [15][0][][] */ 65,91,50,6,-127,48,114,-63, 
  /* [16][0][][] */ 1,-62,11,69,-7,-74,2,-127, 
  /* [17][0][][] */ -75,127,24,-8,-66,-46,-83,-76, 
  /* [18][0][][] */ 91,127,-98,-107,103,95,-88,-79, 
  /* [19][0][][] */ -25,83,-11,13,-127,11,-70,-102, 
  /* [20][0][][] */ -127,-7,4,10,26,17,102,46, 
  /* [21][0][][] */ -31,0,48,17,-89,-102,-127,22, 
  /* [22][0][][] */ -8,-36,-50,-7,-127,4,8,60, 
  /* [23][0][][] */ 63,5,-18,-10,127,63,-92,84, 
  /* [24][0][][] */ 127,6,-47,21,-86,8,11,-9, 
  /* [25][0][][] */ 33,-56,70,111,-53,-127,21,107, 
  /* [26][0][][] */ 18,127,4,53,79,-20,18,-14, 
  /* [27][0][][] */ -126,115,67,-16,127,-70,5,101, 
  /* [28][0][][] */ -68,-71,-55,-29,73,-127,18,-16, 
  /* [29][0][][] */ -54,-21,42,48,127,-100,-92,79, 
  /* [30][0][][] */ 127,44,-114,-101,-75,-90,-77,-72, 
  /* [31][0][][] */ 25,1,40,63,-127,10,35,4, 
  /* [32][0][][] */ 127,14,56,39,-33,-65,89,59, 
  /* [33][0][][] */ 127,30,-43,12,-123,-65,31,46, 
  /* [34][0][][] */ 37,-11,-26,23,-50,127,18,-74, 
  /* [35][0][][] */ 127,34,-18,-42,43,-102,31,120, 
  /* [36][0][][] */ -35,-40,73,-100,-29,-19,75,-127, 
  /* [37][0][][] */ 82,-62,61,52,106,-5,37,-127, 
  /* [38][0][][] */ 69,127,13,-29,-31,26,25,83, 
  /* [39][0][][] */ 21,6,-79,71,-30,-56,-72,127, 
  /* [40][0][][] */ -17,-30,-1,-37,30,-127,20,44, 
  /* [41][0][][] */ -30,47,-127,-65,87,120,61,-111, 
  /* [42][0][][] */ 29,-43,-37,17,68,127,32,47, 
  /* [43][0][][] */ 0,47,-26,25,-127,-84,55,-64, 
  /* [44][0][][] */ -127,-52,-14,-30,52,53,-107,-75, 
  /* [45][0][][] */ -61,55,-54,19,33,-7,-65,127, 
  /* [46][0][][] */ -29,58,127,-1,-59,-57,-56,44, 
  /* [47][0][][] */ -122,-121,-42,-49,103,127,-36,85, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0028719981200993061, 0.0014372358564287424, 0.0018670451827347279, 0.0026841848157346249, 0.0050162775442004204, 0.00087827595416456461, 0.0022931655403226614, 0.0023126036394387484, 0.00098398770205676556, 0.0033863319549709558, 0.0018596769077703357, 0.0028264897409826517, 0.0016249807085841894, 0.0025005210191011429, 0.0039849015884101391, 0.002007476519793272, 0.002725512720644474, 0.0015447703190147877, 0.0016346260672435164, 0.0030196341685950756, 0.0037517677992582321, 0.0025404256302863359, 0.0030501503497362137, 0.0028128002304583788, 0.0034077451564371586, 0.0018999110907316208, 0.002658165292814374, 0.0019980748184025288, 0.0024577674921602011, 0.0015511740930378437, 0.0011768020922318101, 0.0022588027641177177, 0.0037894782144576311, 0.0032521875109523535, 0.0023892021272331476, 0.0028457767330110073, 0.0024356034118682146, 0.0012748247245326638, 0.0037364624440670013, 0.0028571276925504208, 0.0011575405951589346, 0.0012280179653316736, 0.0036238997709006071, 0.0029029999859631062, 0.0033547806087881327, 0.0027179664466530085, 0.00075542210834100842, 0.0018784699495881796, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10825, 13605, 3968, 5270, 1079, -13152, 7150, -7806, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00013892391871195287, 0.00012242434604559094, 0.00014923357230145484, 0.00019904309010598809, 0.00011825208639493212, 0.00012919861183036119, 7.5432632002048194e-05, 0.00012610194971784949, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 39,-44,99,69,32,-41,20,9,-5,60,-30,15,-48,-82,39,7,-106,64,-35,65,-47,71,2,-27,-4,-49,69,-28,-25,27,-31,106,-66,-13,-36,-85,-65,-47,-36,-15,-10,59,-127,11,52,22,24,55, 
  /* [1][0][][] */ -50,-36,62,-7,-25,32,-34,-27,50,-9,2,-26,-16,15,2,19,5,24,16,-7,-55,-24,-69,-25,26,-34,-28,-31,18,-69,-5,-127,-3,-56,-64,-66,-41,-79,-22,25,45,-12,83,-107,-46,-18,-19,-5, 
  /* [2][0][][] */ -57,90,-4,36,14,12,22,-34,79,-41,74,87,98,17,31,-58,100,-1,9,32,-11,23,15,127,-107,-41,8,-21,-5,86,-20,-89,-16,-2,7,-77,-27,9,-37,-15,91,-79,26,-8,33,-119,3,-13, 
  /* [3][0][][] */ 60,-17,-62,30,83,-82,1,-120,-33,-7,-60,-92,-21,127,-12,17,-44,-18,-68,-51,28,78,-11,-54,109,42,53,-67,31,-96,53,-66,52,61,108,-74,-45,16,-30,43,17,85,-79,29,-6,27,5,37, 
  /* [4][0][][] */ -51,26,-38,66,90,-28,28,-41,-36,-6,-59,33,-44,-17,3,-58,12,62,-33,-36,-40,39,-67,-61,22,-10,20,-37,30,-34,-32,61,-4,77,-66,-72,-63,-60,-39,-2,66,-53,127,19,5,84,-52,-51, 
  /* [5][0][][] */ 54,8,81,-8,-9,18,52,30,127,-1,71,-1,69,55,27,-61,-12,30,31,-45,-56,-72,16,42,20,-10,26,42,-37,-29,15,-18,-23,48,-20,58,49,-2,-27,-46,-9,69,35,41,-20,-5,72,6, 
  /* [6][0][][] */ -10,-64,-23,11,36,-8,0,7,-54,-21,105,52,104,66,-38,51,115,-127,-23,-5,-15,-46,-108,37,-83,67,-35,-2,-14,-54,68,-52,93,17,-80,-22,-42,5,54,5,72,-78,-8,-70,-117,48,-48,25, 
  /* [7][0][][] */ -11,-23,-54,-29,21,102,3,-5,-9,-49,-127,-98,48,46,-55,-44,-38,29,99,25,-11,-68,59,-12,108,-26,-72,90,-37,-8,-20,-80,-44,73,46,117,90,-51,-19,-36,-25,-7,41,-16,-4,-28,4,-51, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.005904266145080328, 0.0052030347287654877, 0.0063424268737435341, 0.0084593314677476883, 0.0050257137045264244, 0.0054909409955143929, 0.003205886809155345, 0.0053593330085277557, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -872, 1920, 191, 307, 583, 8447, -231, -3541, -4520, -544, -7105, -336, -3871, -5760, 268, -428, -7901, 14428, -3433, 229, -1209, 273, -765, -117, 18516, 491, 690, -1229, 478, 702, -269, -8327, -474, 13074, -70, 5568, -97, -3294, -242, 85, -5122, -751, 4133, 5613, 1530, 7465, -588, -1952, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0003718022198881954, 0.00014758175530005246, 0.00060003029648214579, 0.00013241069973446429, 0.00015220344357658178, 0.00028333315276540816, 0.00033380361855961382, 0.00018172696582041681, 0.00039243861101567745, 0.00013422110350802541, 0.00047579823876731098, 0.00018903140153270215, 0.00014891136379446834, 0.00014032806211616844, 0.00015284887922462076, 0.00043921777978539467, 0.00030965259065851569, 0.00010079142521135509, 0.00012631442223209888, 0.00054773682495579123, 0.00029914540937170386, 0.00037739233812317252, 0.00024489074712619185, 0.00083670951426029205, 0.00025748249026946723, 0.00032832188298925757, 0.00023518873786088079, 0.00018310055020265281, 0.00023643224267289042, 0.00018437851394992322, 0.00052201165817677975, 0.00043382181320339441, 0.00050517363706603646, 0.00011941088450839743, 0.00049119518371298909, 0.00022958958288654685, 0.00022088648984208703, 0.00010137447679881006, 0.00041434296872466803, 0.000642450584564358, 0.00019192941545043141, 0.00073997915023937821, 0.00054746947716921568, 0.00019020936451852322, 0.00024043694429565221, 0.00011543818982318044, 0.00024682565708644688, 0.00028677767841145396, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -5,-44,41,-33,127,-6,-9,-13,-33,37,-7,10,58,16,127,-36,11,-24,-31,-17,-27,-21,-68,25,-122,46,23,-41,-17,19,-15,-1,-32,17,17,1,83,42,30,-9,68,16,-15,-6,-102,-6,-36,-36, 5,-103,-68,-36,-56,-3,37,22,18,-7,66,127,-16,56,-79,127,-2,-63,37,-52,-69,-127,-85,79,-127,-88,16,120,9,36,127,12,-127,-111,-47,37,127,-96,117,10,64,-10,-24,-16,-58,-13,71,3, 11,-19,-12,127,43,9,-79,-1,-27,-46,-19,-15,48,-9,-71,-44,21,25,-10,-10,3,-3,-32,15,-47,-65,-31,37,-6,30,-86,-7,15,57,18,20,2,66,-127,-1,35,-5,-10,25,-127,1,-52,46, 
  /* [0][1][][] */ -109,-67,127,-8,-46,-36,79,17,16,89,11,19,40,25,109,31,29,-127,98,41,82,-10,52,-39,-4,-22,30,-47,20,52,36,57,37,-95,3,127,7,36,-44,-117,32,90,-20,-83,25,-83,-57,20, 127,-67,-68,-77,-5,-127,127,127,127,12,127,-37,-127,25,-43,-42,127,-96,127,127,127,79,127,-127,5,-28,98,-19,127,127,-123,127,31,-127,127,-102,-70,127,-102,123,-127,-127,127,-127,94,-127,127,-122, -13,-110,12,73,-33,-7,-47,10,-16,-127,-30,51,73,4,-64,45,21,1,-8,15,1,-25,40,-23,6,7,-127,81,-75,9,82,18,-12,-107,-17,-43,62,14,125,11,36,52,-45,8,53,-24,-52,127, 
  /* [0][2][][] */ -3,121,28,-34,76,14,-43,-17,-30,17,-4,3,54,17,92,9,-18,-5,-7,-43,-13,6,1,13,-20,-16,25,4,-58,-109,-11,0,-3,49,-18,34,-62,37,16,102,20,19,-3,8,15,-3,-16,-42, 3,97,-45,16,24,-31,-2,29,31,8,26,-30,39,127,-84,-74,-2,-31,104,-76,-44,71,-2,53,73,127,-2,127,-75,-108,-18,1,95,-109,-84,1,-73,-46,-28,-127,58,-21,-57,77,42,17,20,9, 13,127,-15,32,24,11,-62,-5,-23,-22,-2,-2,58,-7,-75,-1,-9,-2,-39,-24,-5,1,-4,0,-43,30,-46,17,35,-78,17,3,7,45,2,-18,-48,56,14,0,-20,-5,1,-13,8,3,-1,31, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015801593661308289, 0.0062722242437303066, 0.02550128661096096, 0.005627454724162817, 0.006468646228313446, 0.012041659094393253, 0.014186653308570385, 0.0077233961783349514, 0.016678640618920326, 0.0057043968699872494, 0.020221425220370293, 0.0080338343977928162, 0.0063287327066063881, 0.005963942501693964, 0.006496076937764883, 0.01866675540804863, 0.013160235248506069, 0.0042836354114115238, 0.0053683626465499401, 0.023278815671801567, 0.012713680043816566, 0.016039174050092697, 0.010407856665551662, 0.035560153424739838, 0.010943005792796612, 0.013953679241240025, 0.0099955210462212563, 0.0077817733399569988, 0.010048369877040386, 0.0078360866755247116, 0.022185495123267174, 0.018437426537275314, 0.021469878032803535, 0.0050749625079333782, 0.020875794813036919, 0.0097575569525361061, 0.0093876756727695465, 0.0043084151111543179, 0.017609575763344765, 0.027304148301482201, 0.008156999945640564, 0.031449113041162491, 0.023267453536391258, 0.0080838976427912712, 0.01021857000887394, 0.0049061230383813381, 0.010490089654922485, 0.012188050895929337, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 6272, 2317, 42133, -2339, -1146, 7718, -931, 1162, 2693, 159, 8228, 536, 3233, 4937, 3775, 3129, 3420, 3305, -952, 4525, 1548, 410, 1235, 13727, 26283, 4582, 4635, -1390, -95, 6823, 8438, 11687, 12885, 4660, 6937, -1099, 717, 2488, 7410, 5317, 624, 13112, 11389, 3748, 8123, 2597, 4268, 680, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00013302452862262726, 0.00023273771512322128, 3.1135608878685161e-05, 0.00021155769354663789, 0.0003298321389593184, 0.00013544454122893512, 0.00020007527200505137, 0.00045531289651989937, 0.00022327726765070111, 0.00027852362836711109, 0.00010204919817624614, 0.00031713079079054296, 0.00016553740715608001, 0.00015971114044077694, 0.00015173878637142479, 0.00024377275258302689, 0.00014359415217768401, 0.00016689224867150187, 0.00029830765561200678, 0.00018978380830958486, 0.00022952123254071921, 0.0002944807056337595, 0.00024514482356607914, 7.1943934017326683e-05, 5.9227255405858159e-05, 0.00018247347907163203, 0.00017610458598937839, 0.00025047981762327254, 0.00045183362090028822, 0.00012308484292589128, 0.00010653164645191282, 8.3427810750436038e-05, 7.5332580308895558e-05, 0.00018195490702055395, 0.00012675292964559048, 0.00017965013103093952, 0.00025755699607543647, 0.00017190547077916563, 0.00012184433580841869, 0.00016659960965625942, 0.000209192861802876, 7.7824915933888406e-05, 0.00010087127157021314, 0.0002080520789604634, 0.00011509790056152269, 0.0002399001969024539, 0.00017908807785715908, 0.00028542132349684834, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -20,28,12,-127,-89,6,27,112, 
  /* [1][0][][] */ 101,6,-10,1,-89,49,127,24, 
  /* [2][0][][] */ -4,109,-38,-28,-38,85,-46,-127, 
  /* [3][0][][] */ 64,-71,-84,112,-127,-42,-7,-28, 
  /* [4][0][][] */ 40,-65,51,-14,-127,-5,51,28, 
  /* [5][0][][] */ -17,55,-11,-94,-127,0,-36,8, 
  /* [6][0][][] */ 45,-17,35,26,127,-28,-11,-114, 
  /* [7][0][][] */ 13,30,22,127,22,-4,-5,21, 
  /* [8][0][][] */ 25,26,15,-43,29,127,10,-28, 
  /* [9][0][][] */ 127,27,-10,27,-66,-51,126,75, 
  /* [10][0][][] */ 3,68,-73,-32,4,127,79,-57, 
  /* [11][0][][] */ -17,-30,-127,89,-57,32,-16,71, 
  /* [12][0][][] */ -92,-84,54,49,32,-127,-39,7, 
  /* [13][0][][] */ 41,33,33,52,-59,127,17,-41, 
  /* [14][0][][] */ 6,-93,10,-1,-60,-71,-127,104, 
  /* [15][0][][] */ -86,38,-5,7,92,-2,-127,-45, 
  /* [16][0][][] */ 91,74,-97,-127,56,118,111,34, 
  /* [17][0][][] */ -105,115,-127,36,-7,-24,18,-117, 
  /* [18][0][][] */ 32,-5,-90,127,-11,-38,-36,-58, 
  /* [19][0][][] */ 111,19,9,29,-40,9,127,43, 
  /* [20][0][][] */ 35,-72,-89,127,45,-27,-28,-61, 
  /* [21][0][][] */ 20,51,127,-98,38,-29,31,-102, 
  /* [22][0][][] */ -82,-31,-127,58,-31,37,10,112, 
  /* [23][0][][] */ 72,23,29,39,-127,113,63,-43, 
  /* [24][0][][] */ -8,6,-127,81,-34,34,37,62, 
  /* [25][0][][] */ 43,-27,-66,127,42,-4,-39,-7, 
  /* [26][0][][] */ -78,26,127,-95,-15,27,57,-3, 
  /* [27][0][][] */ -68,75,127,0,23,-12,75,15, 
  /* [28][0][][] */ -53,-103,44,-127,-26,3,-1,-26, 
  /* [29][0][][] */ -76,-71,-15,82,-6,-127,-12,51, 
  /* [30][0][][] */ -127,48,117,-31,49,41,69,20, 
  /* [31][0][][] */ -60,49,82,-127,-43,19,32,59, 
  /* [32][0][][] */ -69,87,99,-103,5,-3,4,127, 
  /* [33][0][][] */ 8,107,-45,55,19,14,-127,-26, 
  /* [34][0][][] */ 89,21,127,-121,-91,-114,54,-52, 
  /* [35][0][][] */ 86,-10,26,98,82,-67,25,-127, 
  /* [36][0][][] */ 20,61,127,-117,32,-20,47,-118, 
  /* [37][0][][] */ -58,-45,100,63,-4,-127,88,-8, 
  /* [38][0][][] */ 80,-1,73,43,-24,-44,127,21, 
  /* [39][0][][] */ 55,-81,-28,5,-127,6,70,65, 
  /* [40][0][][] */ -38,40,-127,92,-42,46,-74,103, 
  /* [41][0][][] */ -109,-22,-47,-2,127,15,-96,17, 
  /* [42][0][][] */ -77,54,-20,-26,127,37,-107,-51, 
  /* [43][0][][] */ 127,106,-31,124,-1,-93,52,68, 
  /* [44][0][][] */ -9,24,90,7,39,-127,26,-32, 
  /* [45][0][][] */ -6,-78,127,84,-31,-18,-120,18, 
  /* [46][0][][] */ 43,-112,-127,56,-83,31,-4,-17, 
  /* [47][0][][] */ -106,-28,41,-7,77,40,-127,-34, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0026657450944185257, 0.0046639475040137768, 0.00062394206179305911, 0.0042395102791488171, 0.0066096712835133076, 0.0027142409235239029, 0.0040094084106385708, 0.0091242427006363869, 0.0044743646867573261, 0.0055814743973314762, 0.0020450148731470108, 0.0063551422208547592, 0.0033172869589179754, 0.0032005314715206623, 0.0030407693702727556, 0.0048850839957594872, 0.002877555089071393, 0.0033444373402744532, 0.0059779365547001362, 0.0038031726144254208, 0.0045994906686246395, 0.0059012463316321373, 0.0049125794321298599, 0.0014417205238714814, 0.0011868845904245973, 0.0036566772032529116, 0.0035290478263050318, 0.0050194906070828438, 0.0090545201674103737, 0.0024665587116032839, 0.0021348409354686737, 0.0016718516126275063, 0.0015096272109076381, 0.0036462852731347084, 0.0025400654412806034, 0.0036000988911837339, 0.0051613133400678635, 0.0034448998048901558, 0.0024416996166110039, 0.0033385730348527431, 0.0041921203956007957, 0.0015595724107697606, 0.0020214098040014505, 0.0041692596860229969, 0.0023065044078975916, 0.0048074801452457905, 0.0035888354759663343, 0.0057197008281946182, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12044, 1608, -16338, -256, 2824, -2889, 11097, 1188, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001637929817661643, 0.0001154949568444863, 0.00010202679550275207, 6.8769499193876982e-05, 0.00018149096285924315, 0.00012965613859705627, 0.00015607208479195833, 0.00013683861470781267, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 49,107,-38,72,0,-7,-23,10,62,-63,3,-27,9,8,-37,-54,1,-17,33,17,-58,-31,-36,8,19,13,23,0,19,10,-23,29,-65,11,112,-127,-21,24,-9,117,-31,13,15,-2,-12,40,26,-44, 
  /* [1][0][][] */ 1,-49,34,55,-13,-15,-17,-24,46,-44,94,46,20,13,-49,-85,127,41,20,11,-73,34,39,-10,-47,-96,-34,-50,-15,-62,44,-41,-10,-22,-30,13,5,-19,87,-51,-15,33,-59,41,79,66,15,50, 
  /* [2][0][][] */ 77,-28,-14,-20,113,109,59,79,-27,-3,-1,-31,-7,44,59,26,-29,-33,60,-69,-42,-51,-44,64,-93,-97,121,21,63,-66,-63,18,-127,87,106,16,-8,1,-9,18,26,69,17,-63,-21,20,56,-44, 
  /* [3][0][][] */ 82,-29,18,-8,118,127,28,47,-36,-26,32,57,-126,40,70,27,11,13,75,-106,-95,17,32,86,6,-36,53,28,50,-54,2,-8,-120,61,-61,-118,25,-35,70,-49,54,-97,-113,-29,-60,43,-18,62, 
  /* [4][0][][] */ 38,41,-28,-41,-13,-8,-18,-17,5,-3,-10,-13,-33,-22,61,50,-42,-19,-33,42,28,-12,-12,6,-50,-41,-2,56,-11,13,-23,29,-29,-15,27,-127,-8,26,12,54,7,-12,-11,-23,42,1,86,-21, 
  /* [5][0][][] */ 67,58,-90,48,4,5,-9,31,-85,-61,-57,-21,35,21,46,28,41,-64,44,127,-69,-48,-56,50,33,-22,-37,65,34,32,-55,3,-5,1,-58,1,-9,19,-23,70,17,78,-7,-41,124,31,15,-61, 
  /* [6][0][][] */ -31,-72,17,-49,-40,-42,-79,-76,-38,-65,-114,39,-51,-49,96,89,-127,10,18,-21,21,53,64,8,-14,-11,-74,81,-81,-41,40,71,17,-57,88,35,23,41,-15,-86,-15,-57,-26,13,-43,-23,-6,60, 
  /* [7][0][][] */ 75,17,-16,39,14,16,9,4,83,-7,-14,-18,58,7,-14,-24,-54,-4,-29,0,2,-18,-22,-25,68,-127,17,0,0,94,-16,17,-72,25,-56,-47,-16,28,25,22,26,68,-35,-16,-41,30,41,-23, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0069612013176083565, 0.0049085356295108795, 0.0043361387215554714, 0.0029227035120129585, 0.0077133658342063427, 0.0055103856138885021, 0.0066330633126199245, 0.0058156410232186317, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 1813, 7944, 10, -811, 700, 418, 8789, 7471, 1809, -5387, 295, 1048, 5551, 3605, 21724, 16593, -1528, -2073, 3980, 4054, 16739, -58, -896, 41, 6419, 979, 6077, 19623, 6546, 11366, 523, 1911, 713, -2574, -713, 2168, 318, 329, 555, 3285, 3885, 3586, -5347, 1120, 2183, -845, 8631, 282, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.8536551629658788e-05, 0.00012754029012285173, 0.00061208417173475027, 8.4656516264658421e-05, 0.00059653905918821692, 0.00080027064541354775, 0.00013125523400958627, 0.00017563733854331076, 6.2552251620218158e-05, 0.00025893232668749988, 0.00055073323892429471, 0.00027376032085157931, 0.00021267136617098004, 0.00016773967945482582, 5.8768837334355339e-05, 5.6824603234417737e-05, 0.00014484023267868906, 0.00055020756553858519, 6.2810919189359993e-05, 9.1848829470109195e-05, 6.4692198066040874e-05, 0.00076470279600471258, 0.001198509824462235, 0.00033714098390191793, 4.896121026831679e-05, 0.00015935846022330225, 8.5340965597424656e-05, 0.00012147524103056639, 0.00016848121595103294, 0.00010926627146545798, 0.00042977902921847999, 0.00029906039708293974, 8.7309424998238683e-05, 0.00029773626010864973, 7.4713090725708753e-05, 7.2217902925331146e-05, 0.00038714497350156307, 0.00021465567988343537, 0.00010096345795318484, 0.00019367762433830649, 0.00010062086948892102, 0.00022627372527495027, 0.00011326630192343146, 0.00033925534808076918, 9.2891059466637671e-05, 0.00023839085770305246, 8.4412356954999268e-05, 0.00066248240182176232, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -17,-85,-109,73,-87,3,-82,-76,63,69,127,-42,8,17,-77,-61,102,-82,34,-41,-15,-107,-38,-80,77,92,8,-121,8,-38,56,80,47,68,60,15,87,86,36,15,-122,-8,20,41,-45,77,-26,-96, 92,-4,33,75,-127,42,-59,12,108,101,127,58,-4,-70,-127,-102,127,-35,104,-73,-104,127,127,27,127,94,50,-117,-77,-44,-108,115,95,127,91,100,-19,83,60,-70,-88,-76,8,-55,-61,107,-40,101, 118,0,64,62,-79,12,-25,-10,32,72,3,-31,-72,7,-52,-53,44,82,50,-14,-59,-26,-83,65,45,21,27,-42,-1,-37,24,40,43,93,8,64,-3,19,52,-6,-53,-2,-4,9,-23,75,-8,-3, 
  /* [0][1][][] */ 50,-127,122,86,87,-72,-127,-127,113,84,112,-53,11,5,-105,-93,97,127,49,-100,-39,110,32,-127,88,115,109,-123,1,-124,-79,97,106,-5,100,47,29,111,64,4,-10,-23,94,92,-110,115,-98,108, 127,-6,3,127,120,-127,-105,8,127,127,125,53,-24,-127,-117,-127,125,63,127,-127,-127,-122,-104,44,106,127,127,-127,-127,-127,127,127,127,0,127,127,-6,127,127,-127,10,-127,117,-84,-127,127,-115,-127, 103,-5,-127,72,85,-59,-37,-11,26,81,8,-21,-127,6,-36,-37,44,-94,66,-38,-73,9,79,66,46,38,3,-53,-13,-81,-40,25,40,-10,29,72,0,14,74,-2,-20,-6,42,-14,-70,78,-44,12, 
  /* [0][2][][] */ 72,-77,9,19,-3,64,-78,-77,37,11,29,48,14,13,-39,-37,19,-38,22,-60,-19,-1,18,-81,23,37,74,-25,14,-117,12,9,57,-85,63,13,-127,25,16,2,27,-6,98,-127,-78,63,-80,-13, 52,8,9,59,6,91,-37,0,30,53,26,-127,-13,-83,-41,-45,37,-12,42,-87,-34,-12,-21,24,30,52,76,-51,-83,-122,-28,10,57,-92,63,30,19,43,64,-50,127,-62,127,100,-113,43,-127,15, -34,-8,-2,38,-21,39,-18,-3,10,26,-54,38,-64,6,-13,-9,5,25,27,-11,-38,22,18,29,23,25,23,-3,-3,-55,13,-21,-2,-51,16,21,9,-18,48,11,64,2,29,-12,-30,46,-31,-3, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0037628035061061382, 0.0054204622283577919, 0.026013577356934547, 0.003597901901230216, 0.025352908298373222, 0.03401150181889534, 0.0055783474817872047, 0.0074645867571234703, 0.0026584705337882042, 0.011004623956978321, 0.023406162858009338, 0.011634813621640205, 0.0090385330840945244, 0.0071289362385869026, 0.0024976755958050489, 0.0024150456301867962, 0.0061557097360491753, 0.023383820429444313, 0.002669464098289609, 0.0039035752415657043, 0.0027494183741509914, 0.032499868422746658, 0.050936665385961533, 0.014328491874039173, 0.0020808514673262835, 0.0067727342247962952, 0.0036269908305257559, 0.0051626977510750294, 0.0071604517288506031, 0.0046438165009021759, 0.018265608698129654, 0.012710066512227058, 0.003710650373250246, 0.012653790414333344, 0.0031753063667565584, 0.0030692608561366796, 0.016453661024570465, 0.0091228662058711052, 0.0042909467592835426, 0.0082312989979982376, 0.0042763869278132915, 0.0096166329458355904, 0.0048138177953660488, 0.014418352395296097, 0.0039478698745369911, 0.010131611488759518, 0.0035875251051038504, 0.028155501931905746, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 10882, 4897, 8601, 2094, 3887, 3827, -4024, 4594, 2625, -2733, -3965, 4865, -3226, -4503, 7438, 1451, -2089, 2366, -1867, 3203, 123, 4701, 1654, -2463, -389, -4889, 2563, -4340, 4079, 7587, 187, 186, 7551, 10866, 8699, 4821, 5430, -4457, 1160, 4729, -733, -4514, 4029, 1812, 375, -6445, -11689, 2195, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042339455103501678, 0.00057511741761118174, 0.00011770186392823234, 0.00084135134238749743, 0.00052052678074687719, 0.00049914902774617076, 0.0020492507610470057, 0.0011147335171699524, 0.00097009720047935843, 0.00051494152285158634, 0.00012922039604745805, 0.00045049947220832109, 0.00047472052392549813, 0.0012146973749622703, 0.00051953829824924469, 0.0015359052922576666, 0.00099450896959751844, 0.00030348621658049524, 0.0011635262053459883, 0.001772345625795424, 0.00074554787715896964, 0.00037788701592944562, 0.00011708106467267498, 0.0004718202690128237, 0.0011240099556744099, 0.00084665918257087469, 0.00095996027812361717, 0.0004082171362824738, 0.0010929548880085349, 0.00072971940971910954, 0.00030306240660138428, 0.00051915523363277316, 0.00078588764881715178, 0.0002604470937512815, 0.00039123854367062449, 0.00034369350760243833, 0.00051579577848315239, 0.0014607597840949893, 0.0005363634554669261, 0.00062152935424819589, 0.0013516861945390701, 0.00061761669348925352, 0.00075838790507987142, 0.00022812279348727316, 0.0013995942426845431, 0.00070552114630118012, 0.00060695759020745754, 0.00045600769226439297, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -102,-100,25,-127,-57,-6,-2,-5, 
  /* [1][0][][] */ -127,-18,100,-3,-52,24,2,18, 
  /* [2][0][][] */ 21,-16,20,127,24,-25,-20,-2, 
  /* [3][0][][] */ -106,-66,-24,-13,41,127,-42,-38, 
  /* [4][0][][] */ -6,-31,-7,-1,-10,6,-127,-70, 
  /* [5][0][][] */ -2,-34,-15,-3,-9,13,-127,-71, 
  /* [6][0][][] */ 127,5,15,-12,-68,17,0,-4, 
  /* [7][0][][] */ -127,-33,-17,3,70,10,-3,11, 
  /* [8][0][][] */ 21,44,-13,-11,-28,-127,44,16, 
  /* [9][0][][] */ 76,22,-13,-7,-24,-4,-9,127, 
  /* [10][0][][] */ 121,-7,-127,14,-89,-5,46,127, 
  /* [11][0][][] */ -127,109,8,-32,84,-63,12,20, 
  /* [12][0][][] */ 127,-37,-104,12,53,-3,-7,-22, 
  /* [13][0][][] */ 127,7,14,-15,-26,23,8,-13, 
  /* [14][0][][] */ -123,-75,96,-20,73,-14,-36,-127, 
  /* [15][0][][] */ 34,79,4,-2,-7,-127,-17,5, 
  /* [16][0][][] */ -12,-63,11,5,12,127,13,4, 
  /* [17][0][][] */ 33,-127,-72,-6,-34,126,-56,-18, 
  /* [18][0][][] */ 40,-21,-17,-17,-20,30,127,-11, 
  /* [19][0][][] */ -5,21,-3,-127,-11,35,-2,-10, 
  /* [20][0][][] */ -77,-28,72,11,57,103,-2,-127, 
  /* [21][0][][] */ -21,-3,30,-29,-15,12,-127,-79, 
  /* [22][0][][] */ 72,-12,7,127,-14,-11,57,40, 
  /* [23][0][][] */ 125,-19,-127,-9,24,-23,7,11, 
  /* [24][0][][] */ -32,21,30,33,12,3,-127,-87, 
  /* [25][0][][] */ 127,10,-89,9,13,-5,4,28, 
  /* [26][0][][] */ -1,58,-32,-127,-27,25,4,-4, 
  /* [27][0][][] */ 127,25,-111,2,-110,53,27,83, 
  /* [28][0][][] */ -127,-26,-21,14,55,7,-3,35, 
  /* [29][0][][] */ -8,-127,-15,-124,-9,27,-13,-24, 
  /* [30][0][][] */ -2,88,127,37,36,-97,111,33, 
  /* [31][0][][] */ -72,-5,-127,44,-2,-22,89,103, 
  /* [32][0][][] */ -4,-124,1,-127,-12,14,-12,-16, 
  /* [33][0][][] */ 17,-123,-2,-127,12,10,5,-30, 
  /* [34][0][][] */ -29,-55,31,-100,35,-56,127,84, 
  /* [35][0][][] */ -127,7,52,4,-118,-22,26,105, 
  /* [36][0][][] */ -127,16,115,-8,-44,25,-34,40, 
  /* [37][0][][] */ 127,12,-5,-9,-77,18,0,18, 
  /* [38][0][][] */ -77,0,78,33,64,-52,49,127, 
  /* [39][0][][] */ -127,-7,76,-3,-70,14,-8,5, 
  /* [40][0][][] */ -1,28,40,-21,29,-8,127,44, 
  /* [41][0][][] */ 127,-15,-75,2,54,15,8,-7, 
  /* [42][0][][] */ -14,-127,32,-7,17,7,-4,-20, 
  /* [43][0][][] */ 3,124,127,-6,50,-99,72,13, 
  /* [44][0][][] */ 5,-15,-2,114,-1,-127,-1,4, 
  /* [45][0][][] */ 127,-31,35,-6,-63,106,8,2, 
  /* [46][0][][] */ 15,123,-19,105,2,127,25,42, 
  /* [47][0][][] */ -13,40,9,-31,27,-36,127,73, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0053891553543508053, 0.0073203523643314838, 0.0014981620479375124, 0.010709096677601337, 0.0066254977136850357, 0.006353392731398344, 0.026083780452609062, 0.014188827946782112, 0.012347831390798092, 0.0065544066019356251, 0.0016447750385850668, 0.0057341591455042362, 0.0060424553230404854, 0.015461212024092674, 0.0066129160113632679, 0.019549690186977386, 0.012658555060625076, 0.0038629085756838322, 0.014809883199632168, 0.022559208795428276, 0.0094896676018834114, 0.0048099150881171227, 0.0014902602415531874, 0.006005539558827877, 0.014306901954114437, 0.010776657611131668, 0.012218804098665714, 0.0051959706470370293, 0.013911619782447815, 0.0092881955206394196, 0.003857513889670372, 0.0066080405376851559, 0.010003129951655865, 0.0033150874078273773, 0.004979859571903944, 0.0043746847659349442, 0.0065652793273329735, 0.018593205139040947, 0.0068270741030573845, 0.0079111037775874138, 0.017204867675900459, 0.0078613022342324257, 0.0096531007438898087, 0.0029036491177976131, 0.017814662307500839, 0.0089801894500851631, 0.0077256280928850174, 0.0058042700402438641, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3923, -4413, -275, 3226, 1930, 329, -2767, 2532, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.3841169069055468e-05, 0.0001380566245643422, 0.00010036700405180454, 6.4836407545953989e-05, 0.00012776786752510816, 0.00020240276353433728, 9.3354508862830698e-05, 0.00018596439622342587, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -28,-4,-47,-34,-23,35,-127,-11, 
  /* [1][0][][] */ 17,95,-2,127,6,-9,-11,-39, 
  /* [2][0][][] */ 127,0,-33,-59,-64,42,93,-51, 
  /* [3][0][][] */ 12,-127,40,-86,14,-86,29,56, 
  /* [4][0][][] */ 127,-4,-59,-10,30,-3,-127,-46, 
  /* [5][0][][] */ 4,-34,4,39,5,-127,1,12, 
  /* [6][0][][] */ 127,-29,120,2,110,-34,-6,9, 
  /* [7][0][][] */ -127,-4,-91,-3,-98,7,31,5, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0031382495071738958, 0.0058674062602221966, 0.0042655975557863712, 0.0027555471751838923, 0.0054301340132951736, 0.0086021171882748604, 0.0039675664156675339, 0.0079034864902496338, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10903, 10629, 274, -13280, -914, -13483, 211, 102, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00036252886638976634, 0.00046264310367405415, 0.00024637504247948527, 0.0003909014631062746, 0.00030559845617972314, 0.00037221427191980183, 0.0013956211041659117, 0.0029129725880920887, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 1,3,14,17,13,1,9,32, 7,4,-38,127,-19,1,-4,30, -5,2,-6,19,-2,2,-6,23, 
  /* [0][1][][] */ -3,0,127,-23,127,1,-112,42, 127,-127,-104,7,-87,127,-15,-127, -28,4,17,-19,-2,1,127,40, 
  /* [0][2][][] */ 2,1,9,4,12,-1,16,34, 4,3,-45,-2,-12,2,-10,-104, -5,-1,-9,0,1,-2,-6,39, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.01540747657418251, 0.019662331789731979, 0.010470938868820667, 0.016613312065601349, 0.012987934052944183, 0.015819106251001358, 0.05931389331817627, 0.1238013282418251, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 10658, 7477, 49, 18418, 2068, 5676, 74756, 474, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00022870718385092914, 0.00028669362654909492, 0.00022609287407249212, 0.00014615642430726439, 0.00037748151225969195, 0.00042166427010670304, 1.1857266144943424e-05, 5.3674892114941031e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -56, 51, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -42, 47, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 31, 28, -47, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 33, -58, 
  /* [3][0][][] */ 42, 52, 20, 
  /* [3][1][][] */ 52, 74, 25, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 3, -53, 46, 
  /* [4][1][][] */ 15, -127, 111, 
  /* [4][2][][] */ 4, -37, 31, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -17, -82, 3, 
  /* [6][1][][] */ -23, -127, -3, 
  /* [6][2][][] */ -12, -54, 7, 
  /* [7][0][][] */ 48, -127, 34, 
  /* [7][1][][] */ -16, 0, -8, 
  /* [7][2][][] */ -21, 79, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.070360206067562103, 0.088199339807033539, 0.06955593079328537, 0.044964026659727097, 0.11612960696220398, 0.12972213327884674, 0.0036478070542216301, 0.016512714326381683, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.064870260655879974, } };
const TfArray<1, int> quant46_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.078564174473285675, } };
const TfArray<1, int> quant47_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.049901444464921951, } };
const TfArray<1, int> quant51_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.086224071681499481, } };
const TfArray<1, int> quant54_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.087600335478782654, } };
const TfArray<1, int> quant55_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.039789345115423203, } };
const TfArray<1, int> quant59_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.016545349732041359, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.031266443431377411, } };
const TfArray<1, int> quant62_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.049924913793802261, } };
const TfArray<1, int> quant63_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.015650132670998573, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.016197741031646729, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.042063169181346893, } };
const TfArray<1, int> quant66_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.059059105813503265, } };
const TfArray<1, int> quant67_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.013987199403345585, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.021867355331778526, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.035865575075149536, } };
const TfArray<1, int> quant70_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
