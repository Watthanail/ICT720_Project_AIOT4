/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.03.2024 18:50:57

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238544;
#else
constexpr int kTensorArenaSize = 237520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 29941, -49010, -35475, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00017313337593805045, 0.00011519870167830959, 0.00015841350250411779, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 48,12,117,-52,-73,37,5,45,-39,26,-8,-30,-16,-44,23,-11,-34,55,127,72,-54,-43,89,-105,-69,84,-42,63,2,-1,-79,-6, 
  /* [1][0][][] */ 46,-39,-70,35,-3,118,-13,-3,127,-40,-1,-67,-63,111,53,-47,96,-40,-74,-91,-116,31,66,83,33,27,3,-68,-86,-44,40,-21, 
  /* [2][0][][] */ -17,61,-57,46,67,-29,-19,83,70,30,95,3,-68,-59,64,88,-59,-36,-34,-78,58,88,-83,-63,63,-58,-11,-127,27,-49,20,-11, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0050332038663327694, 0.003348970552906394, 0.0046052788384258747, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -354, 381, 36, -283, 73, -223, -304, 200, 262, -493, 231, -512, -415, 240, 379, 68, 202, -422, 2459, -375, 364, 203, 505, -186, -222, 1150, -305, 1452, 728, -638, 242, -475, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.1525388698792085e-05, 5.5720636737532914e-05, 6.4962769101839513e-05, 5.6175889767473564e-05, 5.5643336963839829e-05, 5.9671470808098093e-05, 5.3322146413847804e-05, 6.1161896155681461e-05, 5.4809032008051872e-05, 5.1159822760382667e-05, 5.6021977798081934e-05, 5.1808565331157297e-05, 5.0078975618816912e-05, 5.468139352160506e-05, 5.8753834309754893e-05, 5.686905569746159e-05, 5.3199317335383967e-05, 5.303838406689465e-05, 8.9838897110894322e-05, 5.0908383855130523e-05, 5.5522483307868242e-05, 5.0641679990803823e-05, 5.8727251598611474e-05, 5.7605226174928248e-05, 5.1595754484878853e-05, 5.6443495850544423e-05, 5.7825654948828742e-05, 0.00010369351366534829, 5.9578065702226013e-05, 5.2688341384055093e-05, 7.7157776104286313e-05, 5.4270494729280472e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -48,-62,100,0,92,-24,-98,-113,64,-107,-115,-11,48,3,-48,48,-60,-43,-77,-68,-75,-119,-5,105,-122,0,71,-59,106,-4,-25,-94,78,-75,-109,60,-127,-95,-93,30,72,-100,-111,97,52,-118,112,-29, 
  /* [1][0][][] */ -51,49,-61,9,-33,91,31,14,75,-104,-124,118,69,-20,19,60,121,-24,27,127,-31,5,46,38,45,22,-29,94,20,20,101,-51,75,117,6,13,62,41,-19,-62,-76,23,-21,-84,-54,36,-24,-40, 
  /* [2][0][][] */ 37,21,-57,73,-19,-54,70,98,-79,92,-37,98,74,-4,70,-99,-56,-18,26,43,-79,-13,92,14,-15,64,84,6,-58,74,74,82,-63,-25,-77,-88,-73,73,82,-7,-97,-69,18,-9,-69,127,-24,-69, 
  /* [3][0][][] */ 76,20,46,-17,-57,47,-113,9,20,-1,86,7,86,79,61,5,113,91,-42,7,114,-86,-56,-119,-30,-104,-83,96,37,-104,94,8,-41,-23,-20,-13,-87,-10,58,33,-21,-95,-127,-7,86,11,-19,-64, 
  /* [4][0][][] */ 56,121,9,64,-20,-8,27,7,33,74,-42,64,32,-36,-22,-68,9,7,-59,26,111,-82,92,38,-6,8,79,-58,-40,44,-68,-47,90,127,26,-116,-39,-15,-108,39,-65,-38,-83,-75,4,90,39,71, 
  /* [5][0][][] */ 78,-84,74,71,39,-111,31,25,95,-127,6,-82,24,68,31,42,50,29,-65,77,23,40,5,-28,-94,-52,-31,-79,47,18,0,-96,-48,2,-76,17,-111,-26,48,10,-76,-53,27,74,-28,-7,22,-57, 
  /* [6][0][][] */ 12,-54,108,72,-90,-70,-6,69,-15,-80,0,-93,81,56,113,-126,45,1,-4,99,-79,-125,107,55,-64,-89,-14,-64,-31,-114,51,-80,-97,-127,-50,-110,-14,34,-115,83,84,52,22,-21,-119,123,-88,-51, 
  /* [7][0][][] */ 108,75,-26,-28,-63,111,-19,-2,96,-5,-127,21,53,-78,37,64,60,24,-1,109,54,37,2,85,-60,94,47,45,-65,100,-22,35,37,34,68,79,-88,70,-6,-32,69,-57,73,70,9,-12,88,-88, 
  /* [8][0][][] */ 28,53,-31,-81,71,33,-77,-46,0,7,66,106,10,-57,-81,-70,-49,100,-47,21,37,-17,93,114,-123,102,58,74,-76,10,-78,122,112,-17,53,7,125,19,0,33,87,107,-121,-108,8,-65,4,127, 
  /* [9][0][][] */ -9,-5,111,39,77,-118,-59,-121,40,55,-20,46,-39,-88,-117,-38,7,-11,-115,-81,-5,95,-127,-118,114,-19,-19,20,-18,-71,-105,97,58,-9,17,-31,-92,7,-49,-48,41,-76,50,-110,77,24,-118,44, 
  /* [10][0][][] */ -55,98,98,-55,-11,113,102,23,25,18,-6,-55,101,80,-39,8,-15,89,-92,-52,-12,35,64,-58,36,60,-101,-113,-43,83,-91,-75,101,110,125,61,-32,2,-27,28,-46,127,-115,-25,-119,-66,1,-44, 
  /* [11][0][][] */ 101,-2,-29,96,111,34,46,30,111,96,-96,104,-21,-95,17,-80,-65,-119,54,30,23,66,12,-127,-118,-113,-32,61,74,-16,17,-32,-106,-89,41,36,-79,65,-43,-70,-40,98,-89,-9,-56,-64,-103,-108, 
  /* [12][0][][] */ 4,61,-69,-9,87,1,-44,30,-87,60,-26,5,-58,8,46,-93,-119,-46,-63,-96,20,-21,7,97,-72,-60,96,-105,94,9,-48,117,-106,-86,-60,7,-13,-91,-33,48,118,35,-127,-51,-30,-91,-51,113, 
  /* [13][0][][] */ 126,-42,119,78,112,96,84,35,71,-123,40,-19,100,46,76,-36,-121,-84,-50,7,66,-21,127,-66,-72,52,-2,26,-111,-112,102,46,39,95,-35,59,-74,-7,47,39,-47,51,-76,0,-15,-1,20,-12, 
  /* [14][0][][] */ -40,-73,94,75,83,-19,-16,-110,-69,-42,80,88,-20,-75,-79,-77,-31,-45,26,31,-35,41,12,66,-118,-59,-16,30,-109,-119,-61,44,115,-8,-22,15,100,120,48,-111,1,-93,32,94,74,-127,76,-61, 
  /* [15][0][][] */ 15,-11,-22,84,83,-68,52,-88,50,-7,-96,21,100,8,-98,-113,107,24,-105,37,55,25,75,118,84,64,52,80,33,68,51,-93,22,22,-46,-29,-56,82,89,-65,-9,127,-49,-10,-7,-76,-52,-71, 
  /* [16][0][][] */ -54,15,122,-77,63,97,-48,20,51,37,-79,80,-2,-68,-39,-47,103,67,95,47,112,87,-31,37,-41,70,-78,74,-122,-6,64,23,-112,70,43,85,-25,80,-26,-92,42,-72,56,81,94,84,127,5, 
  /* [17][0][][] */ 25,-125,22,76,-53,-123,-74,-104,39,-96,75,43,94,57,-127,46,31,48,96,110,-101,-22,5,-61,22,62,-89,19,107,-58,-40,71,-43,-31,27,-4,-58,92,-101,-26,-106,-49,-24,-20,-3,20,81,-126, 
  /* [18][0][][] */ -45,23,72,-29,3,-101,-19,95,72,121,-76,-19,1,87,88,4,-28,22,40,8,82,22,49,-23,-4,-64,-4,63,43,19,21,54,12,-38,-29,-24,5,28,-22,127,2,-24,72,45,-65,87,2,-12, 
  /* [19][0][][] */ 15,23,74,35,57,-95,99,97,98,-65,25,-17,-107,33,-62,59,76,-115,111,57,-25,80,-64,9,79,-90,25,-76,-99,-126,-71,46,79,-94,29,-6,4,-78,-64,-107,43,-127,-90,5,-95,40,82,-106, 
  /* [20][0][][] */ -7,77,73,111,-76,116,18,74,16,17,-98,24,8,100,39,-73,-25,-7,-68,-5,45,-29,-63,-45,106,-51,-82,49,42,42,-37,127,117,65,16,44,56,-41,-24,-100,-83,3,-76,-84,-36,-50,-62,109, 
  /* [21][0][][] */ 110,102,88,-98,110,-68,74,-1,-14,-92,-68,55,10,33,-61,-103,-86,-24,38,-7,121,-47,86,-80,62,-85,-21,75,17,6,-7,-20,28,37,-90,-127,126,109,-111,-70,-15,22,16,-6,-105,-112,-69,117, 
  /* [22][0][][] */ 66,-42,-44,-81,89,-39,123,49,-82,60,-43,-96,127,-116,-98,-62,50,77,-79,-67,93,-64,44,25,81,4,-97,97,-48,-67,-51,-105,51,75,22,47,13,18,-32,-100,16,-38,32,77,78,-105,105,-4, 
  /* [23][0][][] */ 70,-78,13,35,106,-127,0,-119,55,-94,109,69,20,-122,26,-36,78,-50,-82,74,75,-82,98,-51,-24,-5,68,26,42,19,85,-36,-42,27,-1,53,92,15,-86,-14,-83,-23,-17,-116,-37,-108,125,33, 
  /* [24][0][][] */ -87,-23,-96,-58,-69,-100,-70,-127,29,103,108,64,115,60,-68,-109,-66,50,41,-46,110,-81,-51,-31,74,-10,74,61,126,67,16,-61,6,31,56,20,-45,-80,81,-29,-72,-79,67,-20,32,-47,73,96, 
  /* [25][0][][] */ -57,-49,-55,-18,101,-86,-67,77,85,-57,-9,30,87,33,-70,-4,-91,68,53,-116,76,100,8,-83,16,-42,-99,67,70,-81,59,123,87,-110,50,111,111,-28,-2,8,-56,53,-35,18,127,72,81,48, 
  /* [26][0][][] */ 47,-108,-24,-15,-94,-4,-12,-15,-103,-116,97,80,-77,-48,6,-17,127,27,-76,-65,16,64,89,10,105,59,11,39,12,20,-96,-3,-29,-55,-95,-102,-65,76,-54,96,-97,95,48,26,-70,68,-48,96, 
  /* [27][0][][] */ 23,-9,-17,-46,-48,-33,14,24,70,90,12,-46,2,59,127,41,32,6,51,-25,-36,33,2,21,-31,31,-52,27,50,35,2,26,25,35,-34,4,-28,-14,-58,79,-12,23,97,73,61,37,27,51, 
  /* [28][0][][] */ 90,3,86,61,-93,-34,-83,-27,90,-87,36,84,-50,-56,9,100,98,127,-69,92,-2,39,-85,-42,-77,93,-55,-46,-24,-46,3,2,-70,33,103,59,32,-107,-45,96,101,77,-47,62,-113,24,12,49, 
  /* [29][0][][] */ 41,41,45,-65,-103,1,-127,2,101,-17,-104,-110,97,-113,-60,-57,-110,92,15,-77,-89,-47,43,-5,-40,-5,-57,-39,-113,-11,95,-15,39,-12,-94,-68,-24,93,-22,98,38,98,-53,74,-11,113,-63,-39, 
  /* [30][0][][] */ 46,-12,-25,-36,-42,-25,-74,-100,51,-71,37,-10,-65,-63,46,-2,3,18,92,-127,43,-64,-48,-45,-95,33,-30,57,-59,-112,-32,23,-24,-37,-92,-6,25,17,28,-12,85,-110,-88,53,107,-99,112,76, 
  /* [31][0][][] */ 73,-105,28,93,43,55,-64,-103,-33,-23,-87,-97,92,-127,-54,106,-75,-99,29,42,59,28,-40,99,42,-122,26,33,-76,-77,42,103,6,12,-100,-14,89,-39,-76,-115,54,-77,-35,23,-1,-54,-40,14, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021898290142416954, 0.0023681269958615303, 0.0027609176468104124, 0.0023874752223491669, 0.0023648417554795742, 0.0025360374711453915, 0.002266191178932786, 0.0025993804447352886, 0.0023293837439268827, 0.0021742924582213163, 0.0023809340782463551, 0.0022018640302121639, 0.0021283563692122698, 0.0023239592555910349, 0.002497037872672081, 0.0024169348180294037, 0.0022609708830714226, 0.0022541312500834465, 0.0038181529380381107, 0.0021636062301695347, 0.0023597055114805698, 0.0021522713359445333, 0.0024959081783890724, 0.0024482221342623234, 0.0021928194910287857, 0.0023988485336303711, 0.0024575903080403805, 0.0044069741852581501, 0.002532067708671093, 0.0022392545361071825, 0.0032792054116725922, 0.0023064960259944201, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 868, -1146, 2819, 1616, 1954, 71, 976, 3314, -2170, -830, -602, 4854, 3253, 3478, 3279, -2295, -2047, 5132, 2465, 2856, 2875, 18736, 7664, 446, -787, 1164, -357, -624, 1530, 1019, 2606, 4384, -418, 272, 8034, 2157, 5142, 2068, 1236, -894, 2451, -956, 9697, -355, 260, 2152, -1280, 2910, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00035029128775931895, 0.0002881124964915216, 0.00026258887373842299, 0.0003222679952159524, 0.00026322240591980517, 0.00044917396735399961, 0.00031911107362248003, 0.00023398922348860651, 0.00024284105165861547, 0.00030836954829283059, 0.00044498030911199749, 0.0001611530315130949, 0.00019828532822430134, 0.00018391072808299214, 0.00026858516503125429, 0.00025050388649106026, 0.00030823837732896209, 0.00019132706802338362, 0.00024543685140088201, 0.00025557019398547709, 0.00027436818345449865, 5.7115692470688373e-05, 0.00012904802861157805, 0.00051607232308015227, 0.00048133812379091978, 0.00025758560514077544, 0.00037457735743373632, 0.00033987860661000013, 0.00029617981635965407, 0.00042377147474326193, 0.00024881394347175956, 0.00020391021098475903, 0.00044358603190630674, 0.00039473045035265386, 0.00011421376257203519, 0.00028577324701473117, 0.00017017072241287678, 0.00028126122197136283, 0.00025431718677282333, 0.00039544736500829458, 0.00023410558060277253, 0.00048805412370711565, 0.00010267203469993547, 0.00038741895696148276, 0.00045934144873172045, 0.00027718790806829929, 0.00033317570341750979, 0.00025822050520218909, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -7,3,127,-22,1,62,1,-74, 
  /* [1][0][][] */ 79,-55,69,-73,-11,-78,127,20, 
  /* [2][0][][] */ 61,49,77,-74,-66,33,127,-17, 
  /* [3][0][][] */ -1,31,0,-19,24,-74,127,5, 
  /* [4][0][][] */ 127,-59,-51,-47,-110,-51,-18,88, 
  /* [5][0][][] */ 28,61,127,-8,21,-41,30,-34, 
  /* [6][0][][] */ 103,108,-20,127,-68,19,20,89, 
  /* [7][0][][] */ -27,-5,-7,43,36,-112,-127,-38, 
  /* [8][0][][] */ 98,70,-41,88,-66,29,-127,-59, 
  /* [9][0][][] */ 127,-26,-38,49,3,-41,26,-81, 
  /* [10][0][][] */ 60,16,-1,10,-33,127,41,14, 
  /* [11][0][][] */ 97,-40,6,-127,80,-52,-43,78, 
  /* [12][0][][] */ -54,94,82,-43,16,61,-76,127, 
  /* [13][0][][] */ 127,-9,-81,11,35,-86,37,-78, 
  /* [14][0][][] */ 110,41,-7,-12,-127,27,-84,-14, 
  /* [15][0][][] */ 13,26,-108,-16,-127,-64,100,88, 
  /* [16][0][][] */ -13,-46,114,2,127,-56,-71,-41, 
  /* [17][0][][] */ 23,-25,92,-17,127,-55,-65,4, 
  /* [18][0][][] */ 117,-37,127,67,-31,39,-50,-15, 
  /* [19][0][][] */ 62,38,65,-76,-40,-127,21,-38, 
  /* [20][0][][] */ 56,-53,72,127,7,-58,-72,99, 
  /* [21][0][][] */ 88,6,-93,-127,61,-75,-2,97, 
  /* [22][0][][] */ -52,-127,-34,-63,32,-8,102,-43, 
  /* [23][0][][] */ -10,13,38,-50,-110,-127,10,-22, 
  /* [24][0][][] */ 127,16,60,57,-7,-43,-105,79, 
  /* [25][0][][] */ 93,43,-2,-77,-29,-1,-11,127, 
  /* [26][0][][] */ -81,-42,25,-127,106,8,-48,-76, 
  /* [27][0][][] */ 113,127,-4,-62,8,67,34,5, 
  /* [28][0][][] */ 33,103,0,5,5,-53,-14,127, 
  /* [29][0][][] */ 116,22,112,111,60,-56,-127,73, 
  /* [30][0][][] */ 123,-127,-78,105,39,27,-83,92, 
  /* [31][0][][] */ 105,-94,26,49,-90,-96,-127,64, 
  /* [32][0][][] */ -92,-66,38,-127,66,-23,-24,-72, 
  /* [33][0][][] */ 27,-13,41,17,25,-61,127,54, 
  /* [34][0][][] */ -58,59,127,-103,108,-70,-59,117, 
  /* [35][0][][] */ -46,4,29,86,-6,127,46,-7, 
  /* [36][0][][] */ 83,23,-23,-127,37,-1,29,47, 
  /* [37][0][][] */ 38,32,-2,-2,-71,127,66,48, 
  /* [38][0][][] */ -33,-67,18,126,23,45,-5,127, 
  /* [39][0][][] */ 18,2,-127,39,-8,-34,-26,66, 
  /* [40][0][][] */ 59,15,-83,1,-48,48,-46,127, 
  /* [41][0][][] */ 34,-14,31,-57,-108,-127,-9,4, 
  /* [42][0][][] */ -91,76,-88,121,-17,95,-29,-127, 
  /* [43][0][][] */ -8,3,-39,-127,-16,9,-17,-80, 
  /* [44][0][][] */ 59,16,31,58,15,127,-35,44, 
  /* [45][0][][] */ -2,81,-27,18,127,-32,-80,-19, 
  /* [46][0][][] */ 60,-99,13,127,71,52,-47,97, 
  /* [47][0][][] */ -15,-104,57,-24,127,30,55,34, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0030259790364652872, 0.0024888499174267054, 0.0022683648858219385, 0.0027839008253067732, 0.0022738375701010227, 0.0038801736664026976, 0.0027566300705075264, 0.0020213078241795301, 0.002097774064168334, 0.0026638396084308624, 0.0038439470808953047, 0.0013921149075031281, 0.0017128809122368693, 0.0015887063927948475, 0.0023201636504381895, 0.0021639692131429911, 0.0026627066545188427, 0.0016527723055332899, 0.0021201977506279945, 0.0022077343892306089, 0.0023701200261712074, 0.00049339194083586335, 0.0011147769400849938, 0.0044580730609595776, 0.0041580228134989738, 0.002225144300609827, 0.003235773416236043, 0.0029360295739024878, 0.002558539155870676, 0.0036607352085411549, 0.0021493707317858934, 0.00176147127058357, 0.0038319025188684464, 0.0034098653122782707, 0.00098663161043077707, 0.0024686423130333424, 0.001470013870857656, 0.0024296652991324663, 0.0021969100926071405, 0.00341605837456882, 0.0020223129540681839, 0.0042160386219620705, 0.00088692881399765611, 0.0033467053435742855, 0.0039680050686001778, 0.0023944780696183443, 0.0028781266883015633, 0.0022306288592517376, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -9458, -2432, 3641, -13390, 5110, -4793, 13802, 11187, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00013141598901711404, 0.0002252166741527617, 0.00012176064774394035, 0.00017756760644260794, 8.7447500845883042e-05, 0.00013495239545591176, 0.00010230307816527784, 0.00015221924695651978, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-27,20,-26,14,47,7,40,108,-72,60,14,-46,55,19,-49,6,-18,-18,-23,8,-54,6,-30,-50,-36,-36,-36,-31,78,-17,27,26,-45,18,-34,65,-56,-48,7,24,-25,-72,-13,56,-22,59,-29, 
  /* [1][0][][] */ 57,0,-10,65,51,62,13,31,69,-80,7,0,43,16,-41,-17,-33,-55,-79,-8,10,-42,59,76,-10,-60,-10,36,-27,45,-59,127,-24,43,-31,-20,-51,-20,-13,-33,-45,-24,-32,38,19,-13,11,-87, 
  /* [2][0][][] */ -20,-34,-91,45,-106,-38,-27,55,-116,-73,-66,-22,-44,26,-127,-16,78,-93,22,-29,118,105,-22,-21,24,89,-7,-95,-50,1,63,-20,-31,17,67,-66,65,-4,72,78,-47,88,34,-33,-111,63,-31,84, 
  /* [3][0][][] */ 2,-28,-3,29,-14,2,0,47,73,96,-127,-34,28,-11,-17,83,-60,-8,-6,48,-19,-5,77,32,11,8,-39,52,-36,24,-36,-11,17,41,36,15,59,-9,50,5,-52,91,72,33,42,-9,-32,-43, 
  /* [4][0][][] */ -33,-75,14,-44,3,101,-58,-73,1,-58,76,42,-60,-34,-22,21,83,11,-30,40,-88,-20,110,-27,-103,-27,-14,20,29,-25,-14,61,-61,35,-31,59,-40,45,-12,11,-47,36,-42,29,127,59,-12,3, 
  /* [5][0][][] */ -57,-61,57,-127,-7,20,-24,-57,3,69,-52,66,-73,31,54,16,63,62,71,22,30,-12,-14,-54,51,-70,14,-41,-15,-23,42,-64,-8,-31,55,1,-17,28,44,70,94,19,21,-14,0,-3,-37,28, 
  /* [6][0][][] */ -68,-63,36,35,-69,-61,-4,-70,-108,10,-127,35,15,-57,47,17,-33,10,13,116,-20,6,76,33,-86,-13,46,17,24,-36,-41,-82,-39,44,61,-93,-46,79,49,-34,-77,56,71,-86,-22,-51,-27,0, 
  /* [7][0][][] */ 17,-2,11,-10,0,25,-44,-46,-127,-30,98,33,3,-35,31,-1,17,52,8,-28,-51,19,-19,-51,43,-5,-39,16,-13,-15,-20,-61,-108,-65,-29,5,55,-23,-22,3,53,-3,48,-36,18,-38,41,24, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0055851791985332966, 0.0095717087388038635, 0.0051748272962868214, 0.0075466232374310493, 0.0037165186367928982, 0.0057354765012860298, 0.0043478808365762234, 0.0064693177118897438, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1246, 845, 11640, 3482, 543, -4841, 685, 15104, 6085, -2814, -4281, -6257, -2932, 13531, 12449, 752, 8619, -4355, 4313, -558, 23966, -4186, -1203, -3623, 1192, -2119, 823, -1822, 5632, -26836, -3366, 1561, -4140, -2611, -1768, -657, 7525, -4851, 1835, -18510, -789, 4437, -1346, -1703, 1201, -4012, 10049, -3249, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00032917637145146728, 0.00015907938359305263, 6.4639578340575099e-05, 9.6885421953629702e-05, 0.00026232670643366873, 0.00013062269135843962, 0.0002830282028298825, 0.0001121747336583212, 0.0001629865582799539, 0.00046467961510643363, 0.00036649286630563438, 4.9066813517129049e-05, 0.00032971365726552904, 8.1280224549118429e-05, 0.00012049324868712574, 0.00025108843692578375, 0.00013313404633663595, 0.00010774787369882688, 0.00018120685126632452, 0.00042518792906776071, 7.3120361776091158e-05, 0.00017316674347966909, 0.00024055434914771467, 0.00022938147594686598, 0.00018085654301103204, 0.00054147810442373157, 0.00023450645676348358, 0.00046345780720002949, 0.00011076017835875973, 7.3499104473739862e-05, 0.00020281811885070056, 0.00024531062808819115, 8.3546961832325906e-05, 0.00039811452734284103, 7.2184564487542957e-05, 0.00013545923866331577, 0.00018904433818534017, 8.8801483798306435e-05, 6.7072374804411083e-05, 7.3457646067254245e-05, 0.00025680215912871063, 0.00016417297592852265, 0.00028715684311464429, 0.00014537770766764879, 0.00019431012333370745, 9.2975278676021844e-05, 0.0001150620446424, 0.00014254078269004822, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 71,73,-25,53,-3,-6,-64,0,42,-64,32,31,16,-104,-33,26,90,43,-77,-2,51,28,-29,-8,76,21,18,-5,-65,20,-11,-58,127,14,99,20,-33,16,127,52,-69,82,-110,-57,36,-94,-44,6, 94,127,-66,93,16,54,-82,-127,50,46,127,57,-14,-13,-17,-15,-69,127,-94,20,28,127,31,-19,30,0,3,127,-127,78,-30,-127,18,-24,28,87,-68,127,98,72,-127,-66,67,-9,15,28,-127,106, 50,43,11,30,-1,-4,-48,9,30,-72,35,42,16,-77,-31,-34,83,4,-47,-19,47,38,-39,42,59,48,10,-1,-10,4,-11,-36,112,17,86,8,-14,21,110,25,-41,77,42,59,39,92,4,-8, 
  /* [0][1][][] */ -26,-46,-127,103,16,46,62,-41,41,53,-47,127,127,4,-41,-82,-38,76,81,-17,-114,42,33,-90,32,41,15,4,9,104,31,41,79,127,45,20,-76,-15,-64,123,77,7,76,-116,14,-102,-12,127, 42,-95,-37,-127,111,9,127,-83,-127,127,4,51,-116,127,127,-21,-127,39,19,127,16,-18,127,2,-127,127,27,-84,-65,42,-127,89,115,-90,23,101,127,63,-37,127,112,-67,-32,7,123,-54,-2,40, -12,-46,-121,62,-21,127,45,-30,37,25,-38,86,-15,14,-50,-27,-75,101,127,-45,-127,54,-65,127,16,-3,17,26,57,76,49,31,10,-2,-16,-127,-42,-22,-8,48,43,73,-29,127,-8,127,-36,85, 
  /* [0][2][][] */ -34,-28,-8,26,-19,6,-16,-14,31,-34,7,-12,53,-91,-48,31,79,20,10,0,-88,38,0,8,31,4,-9,-2,19,12,47,1,15,20,127,-4,-10,51,65,64,13,75,125,-28,-52,-122,-13,-27, -127,-10,-109,49,-127,-2,-66,-28,20,92,-75,46,-3,-36,-31,127,-99,67,-108,-42,-100,20,7,-17,-9,90,-127,-22,-51,127,69,19,36,-18,30,36,-29,54,-62,57,-61,-127,-127,-27,-127,58,-104,75, -29,-30,-25,22,1,0,-13,-16,19,-67,-6,-10,10,-79,-38,-2,83,-10,86,8,-91,10,5,45,26,5,-11,-9,27,8,36,6,33,10,76,14,0,52,100,31,16,76,-61,55,-33,100,-18,-45, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.015519994311034679, 0.0075002685189247131, 0.0030476243700832129, 0.0045679500326514244, 0.012368169613182545, 0.0061585935764014721, 0.013344202190637589, 0.0052888100035488605, 0.0076844836585223675, 0.021908696740865707, 0.01727939210832119, 0.0023134001530706882, 0.015545327216386795, 0.0038321968168020248, 0.0056810108944773674, 0.011838307604193687, 0.0062769986689090729, 0.0050800926983356476, 0.0085435332730412483, 0.020046744495630264, 0.0034474758431315422, 0.0081644589081406593, 0.011341647244989872, 0.010814868845045567, 0.0085270171985030174, 0.025529589504003525, 0.011056501418352127, 0.021851090714335442, 0.0052221165969967842, 0.0034653330221772194, 0.0095624607056379318, 0.01156589575111866, 0.0039390688762068748, 0.018770288676023483, 0.0034033551346510649, 0.0063866269774734974, 0.0089130550622940063, 0.0041868090629577637, 0.0031623258255422115, 0.0034633781760931015, 0.012107698246836662, 0.0077404212206602097, 0.013538859784603119, 0.0068542626686394215, 0.009161326102912426, 0.0043835947290062904, 0.0054249409586191177, 0.0067205070517957211, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 23287, 3991, 917, 693, 4072, 1617, 6798, 3268, 2160, -6784, 15073, 923, 7502, 1660, 3814, 1953, 4185, -851, 6782, 189, 4507, -290, 2998, 4935, 1700, -2949, 2067, 8715, 583, 7249, 943, 12427, 560, 4734, -484, -1422, 2470, 2264, 261, 1498, 9620, -1045, 10916, 2385, 764, 3690, 4412, -1651, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 4.4893462472828105e-05, 0.00019960151985287666, 0.00021875834499951452, 0.00025157749769277871, 0.00018454481323715299, 0.00028184990515001118, 0.00012625454110093415, 0.00021948042558506131, 0.00021311627642717212, 0.00010997494246112183, 6.5311993239447474e-05, 0.00020863520330749452, 0.00010586892312858254, 0.00024178327294066548, 0.00018934771651402116, 0.00020698001026175916, 0.00017206398479174823, 0.00025968602858483791, 0.00012345798313617706, 0.00018717952480074018, 0.00016171349852811545, 0.00021480438590515405, 0.0001867039391072467, 0.00013922245125286281, 0.00021049012138973922, 0.00021059552091173828, 0.00020826327090617269, 0.00010733985982369632, 0.00029838108457624912, 0.00010970148287015036, 0.00030205794610083103, 8.0873425758909434e-05, 0.00024082939489744604, 0.00016146778943948448, 0.00020900950767099857, 0.00029500646633096039, 0.00024436699459329247, 0.00018236023606732488, 0.00026954925851896405, 0.00023638528364244848, 9.6613104688003659e-05, 0.00017897920042742044, 8.0240584793500602e-05, 0.00015400959819089621, 0.00020565305021591485, 0.00022050728148315102, 0.00014092041237745434, 0.00020016878261230886, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,28,-11,-24,57,36,12,-55, 
  /* [1][0][][] */ -10,-43,-44,-16,-50,-127,5,15, 
  /* [2][0][][] */ -56,42,-7,-61,-42,47,-62,127, 
  /* [3][0][][] */ 45,48,47,-11,-41,-127,55,-19, 
  /* [4][0][][] */ 30,47,-81,19,-127,79,59,50, 
  /* [5][0][][] */ -25,43,35,-30,-87,-127,-53,-5, 
  /* [6][0][][] */ -52,127,90,-24,-75,-29,6,-29, 
  /* [7][0][][] */ 1,1,45,58,-4,-127,-1,62, 
  /* [8][0][][] */ 126,20,-90,94,-86,-65,-127,-17, 
  /* [9][0][][] */ 104,-37,-80,-79,11,-25,-54,127, 
  /* [10][0][][] */ -112,9,17,127,-8,72,31,-101, 
  /* [11][0][][] */ 25,12,54,-20,4,127,114,90, 
  /* [12][0][][] */ -87,-106,-54,-96,127,-31,-32,45, 
  /* [13][0][][] */ -29,-4,-13,38,23,-127,41,63, 
  /* [14][0][][] */ 45,106,102,36,63,-127,-47,-5, 
  /* [15][0][][] */ -28,57,127,37,2,7,52,-76, 
  /* [16][0][][] */ -90,-28,29,-54,127,18,-60,-12, 
  /* [17][0][][] */ 51,-38,-35,-5,-19,127,-15,57, 
  /* [18][0][][] */ -22,127,66,-46,-74,58,101,-89, 
  /* [19][0][][] */ 6,111,72,127,-43,41,31,34, 
  /* [20][0][][] */ 5,-16,77,-127,-90,11,49,-42, 
  /* [21][0][][] */ -92,73,46,-124,90,57,127,24, 
  /* [22][0][][] */ 81,-40,-93,60,49,-54,-53,127, 
  /* [23][0][][] */ 28,-77,-127,-30,58,2,-67,91, 
  /* [24][0][][] */ 74,-45,-91,-1,-57,32,-127,121, 
  /* [25][0][][] */ -13,-30,50,13,127,-14,-88,-44, 
  /* [26][0][][] */ 5,113,127,-24,-36,-29,66,-75, 
  /* [27][0][][] */ -49,43,127,-81,14,27,74,-108, 
  /* [28][0][][] */ 57,-16,79,127,81,-24,40,95, 
  /* [29][0][][] */ 74,77,115,22,-62,29,-127,95, 
  /* [30][0][][] */ 35,-12,-87,48,-127,-27,-51,50, 
  /* [31][0][][] */ 55,127,116,-95,-70,49,125,-123, 
  /* [32][0][][] */ 60,-8,-14,29,106,127,24,-43, 
  /* [33][0][][] */ 20,-38,-127,3,28,-21,-36,76, 
  /* [34][0][][] */ 25,-58,18,-127,0,80,-15,23, 
  /* [35][0][][] */ -29,23,82,-5,7,-127,-5,-31, 
  /* [36][0][][] */ -9,18,-37,-127,-11,3,7,-47, 
  /* [37][0][][] */ 62,-6,-27,-87,-87,127,-69,-87, 
  /* [38][0][][] */ 83,-59,-32,108,68,24,-36,127, 
  /* [39][0][][] */ 127,78,38,64,-19,105,-39,4, 
  /* [40][0][][] */ 28,-93,-127,-20,14,12,-52,87, 
  /* [41][0][][] */ -7,-64,-127,-112,2,-75,-39,-22, 
  /* [42][0][][] */ 42,102,87,127,-85,-29,17,43, 
  /* [43][0][][] */ 112,-40,-127,-91,-77,-6,6,90, 
  /* [44][0][][] */ -14,94,110,-83,-112,6,73,-127, 
  /* [45][0][][] */ 24,20,-127,61,-28,38,6,56, 
  /* [46][0][][] */ 41,-57,-83,-127,16,-23,-47,44, 
  /* [47][0][][] */ 68,-106,127,-66,65,-15,15,7, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00061622797511518002, 0.0027398206293582916, 0.0030027758330106735, 0.0034532665740698576, 0.0025331454817205667, 0.0038687991909682751, 0.0017330269329249859, 0.0030126874335110188, 0.0029253303073346615, 0.0015095657436177135, 0.00089650193694978952, 0.0028638211078941822, 0.0014532046625390649, 0.0033188264351338148, 0.0025990724097937346, 0.002841101260855794, 0.0023618279956281185, 0.0035645677708089352, 0.0016946401447057724, 0.0025693108327686787, 0.0022197526413947344, 0.0029485020786523819, 0.0025627827271819115, 0.0019110303837805986, 0.0028892825357615948, 0.0028907293453812599, 0.0028587158303707838, 0.001473395386710763, 0.0040957136079668999, 0.0015058121643960476, 0.0041461838409304619, 0.0011101051932200789, 0.0033057332038879395, 0.0022163798566907644, 0.0028689589817076921, 0.0040493919514119625, 0.0033542916644364595, 0.0025031589902937412, 0.0036999548319727182, 0.003244731342419982, 0.0013261551503092051, 0.0024567493237555027, 0.0011014185147359967, 0.0021140053868293762, 0.0028228866867721081, 0.0030267825350165367, 0.0019343371968716383, 0.002747607184574008, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -13970, -33234, -458, 6889, -15611, -1754, -24335, -2013, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00015581076149828732, 8.8459208200220019e-05, 6.2451057601720095e-05, 7.479691703338176e-05, 7.3278919444419444e-05, 7.0174195570871234e-05, 6.2187005823943764e-05, 9.5119758043438196e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 46,53,-79,56,20,22,-91,-27,7,-13,1,-38,-17,4,38,1,44,-15,47,-23,22,-42,40,-2,9,-33,-22,11,-15,3,-20,3,49,16,20,21,127,65,30,-22,2,-17,-5,-22,87,27,24,-47, 
  /* [1][0][][] */ 64,27,13,5,26,85,-9,-21,28,52,-46,-71,113,-23,18,55,23,37,19,-93,122,-36,49,55,42,42,50,19,26,-75,56,88,51,100,13,127,71,30,15,20,96,12,25,34,20,44,108,-69, 
  /* [2][0][][] */ -10,16,73,127,-52,21,4,55,39,78,18,-76,-41,109,11,36,-88,-96,76,6,-1,47,-48,-83,-25,-43,30,-24,-99,14,10,9,-37,-53,-100,-29,11,29,-81,-28,-25,-49,-34,18,77,-81,-26,22, 
  /* [3][0][][] */ -38,54,-78,-9,16,-89,-1,76,112,-91,-47,22,-3,-16,24,73,29,12,-15,-26,-6,32,-90,53,-23,-21,36,2,74,-27,37,-64,39,-4,-24,-57,-127,-3,-81,25,-30,-63,33,2,-68,21,-6,-36, 
  /* [4][0][][] */ 56,-21,28,-23,-72,74,36,71,-117,-58,45,44,66,-53,-89,-70,82,66,72,-41,20,-93,-3,45,-27,4,-47,-127,-62,-65,94,46,83,-7,103,100,71,68,53,32,8,45,-45,-33,80,67,95,-61, 
  /* [5][0][][] */ 33,87,18,93,27,31,-62,-98,-110,42,-8,2,19,71,38,-76,81,119,-22,42,-9,-56,-28,-67,-118,-80,-48,51,-8,65,-45,29,6,-68,68,-7,-34,127,-29,-108,-26,-35,-10,-37,-8,-18,-36,102, 
  /* [6][0][][] */ 125,57,-6,127,-86,23,22,59,21,-75,70,78,66,-43,-40,-59,53,27,-73,31,77,-42,-17,-11,10,61,-36,-58,15,-45,69,70,15,-62,-18,95,86,-82,0,1,-87,75,-100,41,64,95,98,-52, 
  /* [7][0][][] */ 21,19,127,50,-34,58,-83,15,-31,110,-11,-19,45,68,9,-6,-55,-7,-57,2,-7,24,1,-48,-15,35,48,-25,-2,8,16,-13,-88,-23,56,28,87,3,29,-10,-22,-33,-29,-59,7,-33,11,24, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.006621957290917635, 0.0037595161702483892, 0.0026541699189692736, 0.0031788689084351063, 0.0031143540982156992, 0.0029824031516909599, 0.0026429477147758007, 0.0040425895713269711, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 12373, -15591, -782, 1722, -1072, 8584, 1861, -1523, -5749, 234, -2193, -1630, -7403, -13095, 7361, -493, -6513, 26857, -900, -12254, 14707, 1543, 1248, -67, -1352, -217, -2266, 698, -1455, -3474, 30, 20381, 11589, -987, 1636, 19420, -2545, 17835, -693, 51, -1852, -4949, -525, 2065, 2931, 32444, 14181, -2874, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00011116019595647231, 7.8880628279875964e-05, 0.0012057154672220349, 0.00036720876232720912, 0.00022045357036404312, 0.00016204387065954506, 0.00012430266360752285, 0.00047740893205627799, 0.00012346208677627146, 0.00048882537521421909, 0.00025226350408047438, 0.00012299127411097288, 0.00016755297838244587, 8.4822859207633883e-05, 0.00011602418817346916, 8.3017715951427817e-05, 9.9322453024797142e-05, 6.5638028900139034e-05, 0.00046609420678578317, 6.0696867876686156e-05, 9.0489338617771864e-05, 0.00038497181958518922, 0.00018761891988106072, 0.0002314225712325424, 0.00026852285373024642, 0.00032711887615732849, 0.0002306797105120495, 0.0002764205273706466, 0.00037232969771139324, 0.00022763731249142438, 0.00016024756769184023, 0.00010936622129520401, 0.00011853635078296065, 0.00026604128652252257, 0.00018559253658168018, 0.00011317765165586025, 0.00081815361045300961, 0.00014224110054783523, 0.00015192794671747833, 0.00051035231444984674, 0.00019694842922035605, 0.00020513864001259208, 0.00020209110516589135, 0.00014878378715366125, 0.00029040608205832541, 3.7503192288568243e-05, 0.0001079586218111217, 0.00019108092237729579, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -56,17,42,10,127,-33,32,8,-9,33,5,-24,15,31,-87,29,90,-34,-19,84,-49,3,-58,-16,-17,1,26,-45,-23,127,43,-83,-49,88,127,-121,14,-56,-127,-26,1,-30,-18,-69,-3,-39,-124,15, -93,99,-20,42,-10,-77,122,-16,66,17,55,127,63,127,-43,47,90,-69,7,122,-53,-34,119,-114,6,42,-107,21,-22,-66,127,-122,-127,-84,22,-33,-54,-40,-122,19,-52,-34,17,-127,21,-96,27,35, -26,0,18,2,59,-37,31,-1,20,26,-35,-57,-2,15,-76,29,69,-29,-18,68,-37,-9,-74,-4,35,-7,20,-122,-31,65,-36,-77,3,-17,107,-56,17,-43,-92,6,11,-10,0,-51,-14,-112,-118,-34, 
  /* [0][1][][] */ -127,127,-27,-78,2,-73,22,-6,11,21,100,54,69,89,-81,57,127,-127,17,113,-34,-70,-120,-38,-127,-2,-34,13,-12,15,58,-77,-54,127,-94,-127,38,-76,55,63,-93,27,-91,64,-14,-102,2,-46, 6,101,127,127,-40,86,-127,127,127,-127,-5,85,127,77,127,-83,-49,-98,127,37,-127,127,127,0,100,115,67,127,127,-57,94,20,-39,-77,-13,-120,127,127,108,61,-43,127,-39,86,127,49,-39,-127, -74,67,-51,-60,-43,-108,21,-22,-13,7,127,63,31,88,-56,120,106,-103,-15,127,33,-96,-123,-35,37,-20,-29,16,-10,33,57,-60,9,-30,-113,-99,24,-87,56,-127,-60,26,127,78,-31,-127,-18,97, 
  /* [0][2][][] */ -15,10,11,-11,37,-28,30,2,31,33,105,30,14,23,-45,113,71,-65,-53,28,-37,3,-62,41,-12,-7,-33,-19,16,67,-5,-12,-27,43,-51,27,-35,-66,60,-39,71,-20,-9,-3,-28,21,-11,-31, -62,100,-2,18,-74,-127,73,-70,77,26,33,-72,-35,54,-70,127,61,-7,-13,123,-65,11,94,127,12,-127,127,13,25,-29,-29,-127,0,-43,-64,-109,-64,-88,35,38,127,46,-41,32,-32,-99,-127,-14, 27,2,25,-5,-1,-25,23,11,26,28,54,12,45,17,-43,44,48,-41,-59,29,-41,-8,-59,42,11,-10,-27,-69,7,11,-1,-10,-17,-2,-26,53,-28,-40,65,0,45,-6,41,-11,-27,-82,18,19, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0047243083827197552, 0.003352426690980792, 0.051242906600236893, 0.015606371685862541, 0.0093692764639854431, 0.0068868640810251236, 0.0052828630432486534, 0.02028987929224968, 0.0052471384406089783, 0.020775077864527702, 0.010721198283135891, 0.0052271289750933647, 0.0071210013702511787, 0.0036049713380634785, 0.0049310280010104179, 0.0035282527096569538, 0.0042212042026221752, 0.0027896161191165447, 0.019809003919363022, 0.0025796168483793736, 0.0038457969203591347, 0.016361301764845848, 0.0079738041386008263, 0.009835459291934967, 0.011412221007049084, 0.013902551494538784, 0.0098038874566555023, 0.011747872456908226, 0.015824012458324432, 0.0096745854243636131, 0.0068105217069387436, 0.0046480642631649971, 0.0050377948209643364, 0.011306754313409328, 0.0078876828774809837, 0.0048100501298904419, 0.034771528095006943, 0.006045246496796608, 0.0064569376409053802, 0.021689971908926964, 0.0083703082054853439, 0.0087183918803930283, 0.008588871918618679, 0.0063233105465769768, 0.012342258356511593, 0.001593885594047606, 0.0045882412232458591, 0.0081209391355514526, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 409, 5664, -5379, 5100, 1516, 3153, 3548, 9174, 7027, 5533, -2256, -733, 1143, 3911, 3733, -386, -180, 5769, 8098, 462, 2443, 9361, 3385, 5419, 12581, 4992, 1482, 6784, 2617, 4312, -2795, 6849, 1164, 7613, 6736, 2983, 54749, 9629, 5439, 13901, 2218, 1065, 4561, 1303, 2676, 1460, 1436, 2311, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00038181597483344376, 0.00013577434583567083, 0.00014901366375852376, 0.00012935292033944279, 0.00028661635587923229, 0.00018588874081615359, 0.00015294719196390361, 9.7479562100488693e-05, 0.00012496911222115159, 0.00013870575639884919, 0.00016986635455396026, 0.00015578456805087626, 0.00022286029707174748, 0.00016067958495113999, 0.00014099138206802309, 0.00018051243387162685, 0.00023140206758398563, 0.00012202994548715651, 0.00011245484347455204, 0.00019937175966333598, 0.00018685443501453847, 9.4071947387419641e-05, 0.00017955446674022824, 0.00013291346840560436, 6.9369503762573004e-05, 0.00016814192349556834, 0.00021397728414740413, 0.00013558118371292949, 0.00010724591993493959, 0.00017748514073900878, 0.00018020428251475096, 0.00011724732030415908, 0.00031703143031336367, 0.00010449237743159756, 9.8293632618151605e-05, 0.00023863818205427378, 2.7997146389679983e-05, 9.2681351816281676e-05, 0.00011202106543350965, 7.5515737989917397e-05, 0.00015678605996072292, 0.00021457570255734026, 0.00015998320304788649, 0.00015020174032542855, 0.00021986069623380899, 0.00016608995792921633, 0.00025376235134899616, 0.00015550022362731397, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -71,-127,-36,26,-29,-11,43,-50, 
  /* [1][0][][] */ -7,127,47,-89,-2,-91,-68,108, 
  /* [2][0][][] */ -127,-58,35,17,68,14,21,-27, 
  /* [3][0][][] */ 6,-49,-127,-68,29,-57,-33,62, 
  /* [4][0][][] */ -67,-101,93,-10,127,-55,40,-3, 
  /* [5][0][][] */ -18,57,53,-107,115,39,-67,127, 
  /* [6][0][][] */ -122,88,66,68,-49,10,35,-127, 
  /* [7][0][][] */ 49,-27,61,19,53,-127,-7,107, 
  /* [8][0][][] */ -12,66,-13,-32,30,118,127,-80, 
  /* [9][0][][] */ 60,127,-1,-46,-77,-49,-50,119, 
  /* [10][0][][] */ 20,-2,20,11,-9,36,-127,-74, 
  /* [11][0][][] */ -81,21,-116,-72,127,24,35,53, 
  /* [12][0][][] */ 89,31,-33,-7,127,84,13,0, 
  /* [13][0][][] */ -127,-123,-5,55,-114,44,85,19, 
  /* [14][0][][] */ -20,93,-75,120,-44,127,-28,21, 
  /* [15][0][][] */ -23,-78,-34,-77,127,71,-27,56, 
  /* [16][0][][] */ 59,-72,1,51,32,-17,26,-127, 
  /* [17][0][][] */ -105,-90,-127,109,13,116,81,-108, 
  /* [18][0][][] */ 90,-20,127,-1,-23,-122,-86,-38, 
  /* [19][0][][] */ -39,127,30,23,92,-113,-89,-55, 
  /* [20][0][][] */ -60,-22,-127,-42,32,-6,-7,-8, 
  /* [21][0][][] */ -115,-3,37,70,-81,-103,127,-48, 
  /* [22][0][][] */ 55,-10,-127,-77,-37,-11,-7,60, 
  /* [23][0][][] */ -8,38,127,-43,-84,51,9,-102, 
  /* [24][0][][] */ -99,68,72,93,127,109,-19,-36, 
  /* [25][0][][] */ -47,-127,-60,43,-67,45,48,12, 
  /* [26][0][][] */ 121,127,-116,-63,-111,-37,-52,46, 
  /* [27][0][][] */ 71,65,-65,38,-127,18,-34,-16, 
  /* [28][0][][] */ -29,75,53,-112,109,115,-126,-127, 
  /* [29][0][][] */ 44,0,-14,-59,-127,-2,32,-25, 
  /* [30][0][][] */ -102,-9,39,127,53,24,-27,-9, 
  /* [31][0][][] */ 13,-121,5,-86,-127,59,-68,-114, 
  /* [32][0][][] */ -127,3,34,-13,2,-33,6,26, 
  /* [33][0][][] */ 42,-85,-127,-113,-16,33,-62,32, 
  /* [34][0][][] */ 59,127,125,3,-115,-74,84,-96, 
  /* [35][0][][] */ 95,8,10,5,-99,-32,-127,-55, 
  /* [36][0][][] */ 127,-1,76,-47,22,-10,58,63, 
  /* [37][0][][] */ 113,109,-3,-8,89,80,-127,25, 
  /* [38][0][][] */ -51,88,102,127,-23,71,16,-78, 
  /* [39][0][][] */ 43,63,127,-38,86,-68,-19,14, 
  /* [40][0][][] */ 91,44,35,3,-86,-127,48,-43, 
  /* [41][0][][] */ 27,-44,12,127,-21,70,0,69, 
  /* [42][0][][] */ -28,-127,49,-43,116,-23,90,48, 
  /* [43][0][][] */ -15,-38,-112,-42,126,39,-82,127, 
  /* [44][0][][] */ 109,-32,127,-13,14,25,-49,10, 
  /* [45][0][][] */ -27,26,29,-23,-102,-127,-19,108, 
  /* [46][0][][] */ -47,68,81,14,-16,-29,38,-127, 
  /* [47][0][][] */ 23,-31,17,127,-15,-104,78,77, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0065413527190685272, 0.0023261150345206261, 0.0025529339909553528, 0.0022161018569022417, 0.0049103726632893085, 0.0031846857164055109, 0.0026203240267932415, 0.0016700406558811665, 0.0021409974433481693, 0.0023763366043567657, 0.0029101867694407701, 0.0026689344085752964, 0.0038180903065949678, 0.0027527969796210527, 0.0024154945276677608, 0.0030925776809453964, 0.0039644297212362289, 0.0020906431600451469, 0.0019266004674136639, 0.0034156795591115952, 0.0032012301962822676, 0.0016116607002913952, 0.0030761654488742352, 0.00227710185572505, 0.0011884531704708934, 0.0028806433547288179, 0.0036659045144915581, 0.0023228058125823736, 0.0018373599741607904, 0.003040713258087635, 0.0030872982461005449, 0.0020087060984224081, 0.0054314499720931053, 0.0017901856917887926, 0.0016839875606819987, 0.0040884003974497318, 0.00047965309931896627, 0.0015878367703408003, 0.0019191688625141978, 0.0012937517603859305, 0.0026860921643674374, 0.0036761567462235689, 0.0027408665046095848, 0.0025732882786542177, 0.003766700392588973, 0.0028454887215048075, 0.0043475106358528137, 0.0026640631258487701, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3460, -2936, 12624, -6992, -12983, -11972, -7222, -1447, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00010002144699683413, 0.00018339144298806787, 0.00013855430006515235, 0.00012877835251856595, 0.00015875637473072857, 0.00011083453136961907, 0.00016790295194368809, 0.00019743603479582816, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -28,-23,45,-47,59,89,69,98,108,-50,-18,57,-27,-18,23,-17,47,36,12,-49,-33,18,-84,-40,30,-13,19,-77,-28,37,49,27,19,44,61,19,122,-53,-77,10,-52,-75,-36,-2,-66,-88,-127,56, 
  /* [1][0][][] */ -9,2,-39,53,-1,12,-38,-20,-54,22,19,87,-25,7,-26,127,42,54,13,-29,-39,-20,-72,15,16,-7,-22,-77,54,-13,-60,-68,60,-28,-29,-57,31,34,56,-44,5,74,48,-39,-1,-35,-48,-20, 
  /* [2][0][][] */ -5,-62,-22,-1,-29,20,6,15,104,18,-2,-16,-27,-73,41,12,5,-61,-23,-1,-100,40,10,29,3,38,-40,-25,-13,-38,46,-41,-93,22,-51,56,-63,56,-19,-18,127,-28,-4,37,33,32,-59,-37, 
  /* [3][0][][] */ -19,-122,94,59,21,-111,-17,-17,-127,123,55,-52,54,10,-26,18,56,30,-31,45,81,99,27,-63,16,94,69,38,-35,-72,8,11,-28,11,57,7,-21,-82,-36,44,-31,-5,19,-68,-85,24,0,25, 
  /* [4][0][][] */ -12,64,-15,80,32,7,5,-2,-53,74,44,75,4,23,65,13,7,-107,-6,-13,100,-18,-104,65,73,-27,27,29,47,29,-14,-57,-56,127,4,13,56,-29,24,34,-24,40,4,-26,-2,-55,-31,22, 
  /* [5][0][][] */ -28,-7,-13,-76,-127,29,111,24,11,59,-31,-32,-108,-12,54,-33,-89,42,-56,-84,-2,117,-2,32,109,37,-4,10,-30,-14,120,-56,-13,110,75,85,-23,55,85,34,-26,-27,-21,38,-63,42,26,52, 
  /* [6][0][][] */ -1,-22,-12,24,-51,-50,11,2,19,-10,43,3,-51,-26,36,56,8,-54,7,-57,67,-30,-1,-28,4,-8,2,36,46,1,12,127,44,-14,-14,25,3,-10,17,13,2,35,-24,-47,-3,-29,-25,34, 
  /* [7][0][][] */ -34,-14,-39,-3,5,-24,5,12,39,6,22,-1,-9,12,4,1,33,-8,3,-4,-64,6,13,-27,-2,-9,-55,-12,-13,-19,21,32,20,-14,28,12,-19,127,-14,-41,-40,-7,-49,-36,25,58,-74,-10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0042509115301072598, 0.007794136181473732, 0.0058885575272142887, 0.0054730796255171299, 0.0067471456713974476, 0.0047104675322771072, 0.0071358755230903625, 0.0083910310640931129, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -39, 27954, 28358, 433, 2231, -12515, 22869, 19812, -10790, 6056, -1985, 17121, 21367, -14002, -11745, 1779, 2034, 31577, -600, 1259, 70253, 12566, -7605, -4908, 14955, 12682, -1702, -1207, -3458, 302, 29741, 1589, -1632, 5807, 11250, 17567, -311, 41644, -5288, -1270, 25924, 384, -1910, 12182, 1370, -390, -4752, 10685, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00030258545302785933, 9.2992864665575325e-05, 7.8987832239363343e-05, 8.9701505203265697e-05, 5.2261621021898463e-05, 0.0001159305902547203, 0.00010814241977641359, 9.0314046246930957e-05, 0.00038606158341281116, 4.8197416617767885e-05, 7.052761793602258e-05, 5.8829449699260294e-05, 8.999444980872795e-05, 0.00025692445342428982, 5.3265375754563138e-05, 6.201792712090537e-05, 6.108380330260843e-05, 0.00015129723760765046, 0.00058672297745943069, 6.0467849834822118e-05, 3.2217329135164618e-05, 8.0991354479920119e-05, 5.5074073316063732e-05, 0.00020844156097155064, 7.9261793871410191e-05, 8.9895351266022772e-05, 0.0001938390196301043, 0.00016013141430448741, 0.00010933029261650518, 0.00020368077093735337, 0.00013198985834605992, 7.2077455115504563e-05, 5.7402019592700526e-05, 9.2457266873680055e-05, 8.1951242464128882e-05, 9.600202611181885e-05, 7.7983204391784966e-05, 9.7979143902193755e-05, 0.00010503641533432528, 9.5184994279406965e-05, 0.00015397493552882224, 0.00018003086734097451, 5.8379420806886628e-05, 7.5902506068814546e-05, 0.00013505537935998291, 0.00016376844723708928, 0.00025444861967116594, 8.7221429566852748e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 55,-64,-29,33,89,49,-81,-110,16,65,110,-91,-30,67,97,40,64,-89,40,81,-94,-114,57,85,-40,-30,79,81,83,79,-55,75,52,-51,-80,-103,68,-55,85,26,-76,107,76,-71,77,111,61,-52, 73,-87,-67,62,97,57,-76,-122,30,76,107,-118,-56,87,106,72,63,-107,37,100,-88,-111,76,86,-75,-68,127,108,116,120,-70,88,68,-75,-127,-127,99,-77,83,51,-102,101,76,-74,110,127,66,-81, 50,-42,-47,15,32,13,-26,-54,23,21,24,-46,-53,32,44,27,3,-26,12,17,-26,-85,38,15,-34,-16,57,38,50,56,-30,23,49,-50,-57,-66,41,-24,14,43,-32,59,34,-42,40,31,15,-47, 
  /* [0][1][][] */ 34,-99,-59,89,111,89,-127,-127,91,99,127,-85,-88,98,123,76,116,-106,49,120,-105,-127,90,121,-109,-81,89,104,125,90,-88,101,92,-98,-90,-120,96,-94,113,85,-104,119,110,-94,108,106,41,-82, 39,-127,-127,127,127,127,-127,-118,127,127,123,-127,-127,127,127,127,127,-127,53,127,-127,-93,127,127,-127,-127,119,127,127,127,-127,127,127,-127,-105,-124,127,-127,127,127,-127,127,127,-127,127,106,55,-127, -6,-70,-88,64,47,40,-58,-32,62,41,42,-52,-94,39,64,69,34,-33,27,29,-40,-80,66,46,-64,-15,19,54,70,29,-46,31,67,-95,-71,-32,44,-44,25,66,-26,58,33,-71,51,-3,18,-63, 
  /* [0][2][][] */ -47,-54,-45,50,30,44,-61,-62,-79,47,49,-76,-83,27,68,60,75,-37,-90,54,-45,-36,53,57,-82,-59,55,57,28,-9,-44,36,44,-65,-11,-60,15,-49,45,76,-40,99,67,-55,42,6,-104,-25, -127,-66,-87,80,41,62,-69,-25,-58,53,74,-83,-109,37,47,81,82,-41,-127,74,-61,-67,75,44,-80,-41,50,54,51,0,-65,44,70,-102,-13,-59,25,-59,43,103,-30,72,98,-77,55,-26,-127,-70, -53,-25,-65,38,9,16,2,10,-72,23,49,-26,-57,14,34,56,25,-16,-66,25,-33,-18,22,17,-51,9,19,33,18,-2,-23,16,37,-34,-5,-4,-4,-19,-7,40,-8,12,34,-35,18,-23,-54,-21, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.012859881855547428, 0.0039521967992186546, 0.003356982721015811, 0.0038123137783259153, 0.0022211188916116953, 0.0049270498566329479, 0.0045960526913404465, 0.0038383468054234982, 0.016407616436481476, 0.002048390218988061, 0.002997423755005002, 0.0025002516340464354, 0.0038247639313340187, 0.010919289663434029, 0.0022637783549726009, 0.0026357618626207113, 0.0025960614439100027, 0.0064301327802240849, 0.024935726076364517, 0.0025698835961520672, 0.0013692363863810897, 0.0034421326126903296, 0.002340648090466857, 0.0088587664067745209, 0.0033686261158436537, 0.0038205524906516075, 0.0082381581887602806, 0.0068055847659707069, 0.004646537359803915, 0.0086564328521490097, 0.005609569139778614, 0.0030632917769253254, 0.0024395857471972704, 0.0039294338785111904, 0.0034829278010874987, 0.0040800860151648521, 0.0033142860047519207, 0.0041641136631369591, 0.0044640474952757359, 0.0040453621186316013, 0.0065439348109066486, 0.0076513118110597134, 0.0024811252951622009, 0.0032258564606308937, 0.0057398537173867226, 0.0069601587019860744, 0.010814066044986248, 0.0037069106474518776, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1248, 4193, 2786, -739, -46, 9161, 2496, 1684, 7249, 1520, -1284, 1396, 3239, 1303, -295, 631, -1214, 8529, -2677, -812, 843, 1139, 196, -471, 100, 2981, -1244, -982, -561, -1821, 9782, 3055, 328, 696, 294, 1384, 988, 6979, 1236, 531, 5568, -1678, 609, 1164, -1402, -1440, 12167, 2406, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00042511828360147774, 0.00020552623027469963, 0.00027260018396191299, 0.00035581263364292681, 0.00061353389173746109, 9.6638214017730206e-05, 0.00035723659675568342, 0.00026407244149595499, 0.00013842004409525543, 0.00038779916940256953, 0.00030821780092082918, 0.00037447395152412355, 0.00022080395137891173, 0.00035106373252347112, 0.00053425389342010021, 0.00024843617575243115, 0.00031381324515677989, 0.00011765856470447034, 0.00016949232667684555, 0.00037840823642909527, 0.00040314660873264074, 0.00028246405418030918, 0.00041894151945598423, 0.00029354353318922222, 0.00045768832205794752, 0.00019936170428991318, 0.00036868877941742539, 0.00028446575743146241, 0.00037084377254359424, 0.00022319240088108927, 0.000113680973299779, 0.00023228753707371652, 0.00055021635489538312, 0.00043616251787170768, 0.00033371450263075531, 0.00028962502256035805, 0.00030174365383572876, 0.00013673928333446383, 0.00040108038228936493, 0.00031402634340338409, 0.00018035960965789855, 0.00016293983208015561, 0.00038484792457893491, 0.00034811525256372988, 0.00040185547550208867, 0.00032907584682106972, 8.9892324467655271e-05, 0.00021622706844937056, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 32,16,-58,14,-42,53,-127,34, 
  /* [1][0][][] */ 1,-61,-119,1,-11,-17,127,-113, 
  /* [2][0][][] */ -127,-58,-67,-47,-38,55,-123,-5, 
  /* [3][0][][] */ -47,-34,13,-12,-19,-127,-106,-23, 
  /* [4][0][][] */ -46,-127,-41,24,58,15,-42,-41, 
  /* [5][0][][] */ 64,-34,93,57,-127,59,-72,-97, 
  /* [6][0][][] */ 45,-127,-76,-39,-6,59,-51,-86, 
  /* [7][0][][] */ -22,-91,-73,-61,88,-127,-3,25, 
  /* [8][0][][] */ 42,74,48,61,38,-49,-6,127, 
  /* [9][0][][] */ -24,-55,-59,4,51,-18,127,-8, 
  /* [10][0][][] */ -29,19,-127,20,25,20,93,-105, 
  /* [11][0][][] */ 7,-35,-43,7,-127,25,10,49, 
  /* [12][0][][] */ 87,58,-28,38,-73,127,79,-11, 
  /* [13][0][][] */ -50,0,17,-25,46,-127,-7,76, 
  /* [14][0][][] */ -99,-49,14,37,9,64,-127,-125, 
  /* [15][0][][] */ 69,89,47,13,-127,45,111,-65, 
  /* [16][0][][] */ -13,-63,14,74,-14,-66,1,-127, 
  /* [17][0][][] */ -78,127,33,-8,-70,-49,-94,-84, 
  /* [18][0][][] */ 110,127,-85,-120,105,98,-114,-89, 
  /* [19][0][][] */ -29,86,-20,3,-127,6,-70,-98, 
  /* [20][0][][] */ -127,-7,11,19,19,18,111,43, 
  /* [21][0][][] */ -20,-7,61,23,-83,-116,-127,18, 
  /* [22][0][][] */ -9,-37,-48,-14,-127,1,12,63, 
  /* [23][0][][] */ 60,1,-13,-12,127,60,-88,81, 
  /* [24][0][][] */ 127,9,-53,28,-90,0,14,-6, 
  /* [25][0][][] */ 41,-69,86,121,-63,-127,20,110, 
  /* [26][0][][] */ 13,127,4,59,72,-10,24,-16, 
  /* [27][0][][] */ -123,110,55,-13,127,-66,8,98, 
  /* [28][0][][] */ -68,-69,-52,-32,73,-127,18,-19, 
  /* [29][0][][] */ -56,-28,58,36,127,-92,-92,68, 
  /* [30][0][][] */ 127,43,-112,-95,-75,-89,-75,-75, 
  /* [31][0][][] */ 23,-2,42,69,-127,9,39,6, 
  /* [32][0][][] */ 127,17,46,41,-33,-60,91,54, 
  /* [33][0][][] */ 127,32,-43,13,-125,-72,33,46, 
  /* [34][0][][] */ 42,-19,-20,32,-51,127,17,-76, 
  /* [35][0][][] */ 127,47,-30,-30,53,-100,8,120, 
  /* [36][0][][] */ -31,-43,76,-89,-31,-16,66,-127, 
  /* [37][0][][] */ 92,-67,58,46,120,-11,31,-127, 
  /* [38][0][][] */ 61,127,6,-34,-24,23,27,79, 
  /* [39][0][][] */ 40,7,-87,71,-20,-67,-92,127, 
  /* [40][0][][] */ -13,-31,-5,-32,26,-127,22,38, 
  /* [41][0][][] */ -38,52,-127,-63,91,119,68,-107, 
  /* [42][0][][] */ 29,-41,-41,11,76,127,20,47, 
  /* [43][0][][] */ 4,47,-22,30,-127,-78,51,-56, 
  /* [44][0][][] */ -127,-60,-4,-34,59,52,-122,-79, 
  /* [45][0][][] */ -66,56,-53,19,28,-6,-63,127, 
  /* [46][0][][] */ -23,51,127,5,-59,-56,-58,41, 
  /* [47][0][][] */ -127,-115,-34,-49,100,107,-29,99, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0034649756271392107, 0.0016751652583479881, 0.0022218592930585146, 0.0029000919312238693, 0.0050006788223981857, 0.00078766094520688057, 0.0029116983059793711, 0.0021523530595004559, 0.0011282085906714201, 0.003160801948979497, 0.0025121648795902729, 0.0030521932058036327, 0.0017996880924329162, 0.0028613854665309191, 0.0043544983491301537, 0.0020249078515917063, 0.0025577710475772619, 0.00095898972358554602, 0.0013814667472615838, 0.0030842600390315056, 0.0032858930062502623, 0.0023022559471428394, 0.0034146313555538654, 0.002392560476437211, 0.0037304416764527559, 0.0016249206382781267, 0.0030050405766814947, 0.002318571088835597, 0.003022605087608099, 0.0018191555282101035, 0.0009265699191018939, 0.0018932864768430591, 0.0044846017844974995, 0.0035549930762499571, 0.0027199785690754652, 0.0023606221657246351, 0.0024593966081738472, 0.0011145093012601137, 0.0032690521329641342, 0.0025595079641789198, 0.0014700418105348945, 0.0013280599378049374, 0.0031367475166916847, 0.0028373536188155413, 0.0032753695268183947, 0.0026821708306670189, 0.00073267781408503652, 0.0017623837338760495, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10009, 13495, 5557, 6741, 638, -13834, 5580, -8293, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00012613690341822803, 0.00010863944771699607, 0.00014723348431289196, 0.00020241797028575093, 0.00011267757508903742, 0.00011813369928859174, 8.9336805103812367e-05, 0.00013112490705680102, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 37,-45,106,72,28,-39,26,5,0,67,-29,12,-51,-88,36,-3,-110,62,-30,69,-47,67,-1,-34,10,-41,70,-28,-30,23,-37,115,-55,-13,-43,-82,-66,-49,-39,-16,-17,60,-127,14,60,30,28,49, 
  /* [1][0][][] */ -50,-36,56,-7,-24,28,-40,-29,52,-5,5,-32,-15,16,3,19,5,23,14,-15,-56,-34,-68,-24,23,-36,-28,-31,19,-73,-7,-127,-3,-53,-67,-68,-37,-82,-21,25,39,-12,83,-103,-57,-13,-17,-2, 
  /* [2][0][][] */ -62,87,-13,28,14,15,22,-37,73,-57,74,83,100,23,35,-58,93,5,9,23,-10,17,12,127,-118,-51,3,-24,0,85,-18,-91,-25,3,8,-78,-24,5,-43,-17,85,-83,19,1,20,-123,-5,-11, 
  /* [3][0][][] */ 52,-14,-67,26,87,-80,-3,-116,-35,-15,-58,-86,-18,127,-10,15,-50,-20,-55,-55,29,71,-13,-52,107,35,47,-67,32,-99,53,-65,53,69,107,-70,-51,20,-31,42,20,83,-78,38,-17,27,4,37, 
  /* [4][0][][] */ -50,28,-39,71,90,-32,31,-49,-38,-7,-64,30,-49,-19,-2,-58,14,60,-36,-34,-42,30,-69,-66,27,-3,20,-44,33,-33,-38,65,-4,71,-70,-85,-62,-68,-42,-1,65,-59,127,25,6,93,-58,-52, 
  /* [5][0][][] */ 58,12,80,-6,-3,17,53,35,127,-3,68,0,78,51,24,-57,-15,39,35,-49,-57,-73,16,45,10,-16,26,47,-35,-30,22,-25,-25,56,-16,63,53,3,-25,-46,-6,70,40,47,-25,-12,76,10, 
  /* [6][0][][] */ -8,-57,-12,18,33,1,3,9,-36,-8,104,46,90,61,-38,43,111,-127,-8,-2,-8,-44,-107,23,-59,71,-32,-3,-22,-52,58,-46,99,9,-74,-18,-44,6,49,10,65,-71,-1,-69,-104,55,-39,20, 
  /* [7][0][][] */ -17,-26,-56,-29,25,110,0,-5,-3,-46,-124,-102,46,53,-63,-60,-37,20,117,22,-20,-83,55,-18,127,-25,-73,97,-50,-17,-29,-78,-43,75,43,120,87,-56,-25,-42,-31,-13,44,-14,-3,-18,7,-62, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0053608180023729801, 0.0046171764843165874, 0.0062574231997132301, 0.0086027635261416435, 0.0047887968830764294, 0.0050206822343170643, 0.0037968140095472336, 0.0055728084407746792, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1151, 1034, 1272, 570, 844, 8733, -630, -3672, -4436, -469, -5750, 113, -3938, -6838, -42, -18, -7381, 16698, -3414, 674, 197, -225, -1366, -1903, 18007, -641, -643, -1573, 583, 2355, 391, -6984, -58, 14288, -1159, 5519, -150, -2441, -964, 264, -4017, -725, 3690, 4647, -444, 8898, -94, -1480, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00046971955453045666, 0.00019074753799941391, 0.00060657353606075048, 0.000154022520291619, 0.0001545928098494187, 0.00028147647390142083, 0.00038721255259588361, 0.00018340794485993683, 0.00043604488018900156, 0.00014870644372422248, 0.00049138965550810099, 0.00022030279797036201, 0.0001239088160218671, 0.00014030355669092387, 0.0001398590684402734, 0.0006415645475499332, 0.00030538422288373113, 6.8962493969593197e-05, 0.00014642628957517445, 0.00063826935365796089, 0.00039660450420342386, 0.00037502576014958322, 0.00026488929870538414, 0.00078759912867099047, 0.00026381437783129513, 0.00042034120997413993, 0.00025687966262921691, 0.00015004440501797944, 0.0003690131998155266, 0.00023927175789140165, 0.0006982184131629765, 0.00046120549086481333, 0.00060247431974858046, 9.7250027465634048e-05, 0.00051545555470511317, 0.00021910652867518365, 0.00020406562543939799, 8.1340978795196861e-05, 0.00046090129762887955, 0.0010392152471467853, 0.00023158075055107474, 0.00091498723486438394, 0.00062053219880908728, 0.00020938945817761123, 0.00023007318668533117, 0.00013344481703825295, 0.00028120112256146967, 0.00038974860217422247, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -4,-33,38,-42,127,-8,-5,-16,-31,40,-16,7,77,23,127,-38,8,-23,-34,-16,-35,-21,-55,32,-127,47,32,-27,-19,10,-19,-6,-30,9,19,4,86,41,29,-8,52,16,-13,-2,-99,-17,-37,-37, 2,-89,-69,-37,-57,-6,39,20,15,-5,60,127,4,57,-78,127,-3,-57,46,-49,-84,-127,-73,84,-123,-84,20,127,12,27,120,7,-127,-127,-46,39,127,-82,120,10,45,-10,-23,-16,-56,-23,70,1, 14,-5,-14,127,49,12,-76,-3,-23,-47,-24,-23,67,-3,-66,-45,27,25,5,-12,0,-5,-25,19,-58,-60,-28,43,-6,25,-88,-12,16,51,18,19,-8,71,-127,-4,20,-4,-8,30,-127,-6,-55,44, 
  /* [0][1][][] */ -111,-59,127,-17,-48,-36,83,22,19,94,2,13,42,36,108,30,26,-127,80,40,79,-6,57,-33,1,-18,35,-38,23,53,32,56,33,-103,6,127,8,40,-40,-116,21,90,-19,-82,32,-82,-58,22, 127,-68,-70,-81,-3,-127,127,127,127,15,127,-51,-127,25,-39,-45,127,-93,127,127,127,78,127,-127,11,-23,103,-7,127,127,-127,127,29,-123,127,-98,-70,127,-96,125,-127,-127,127,-127,98,-127,127,-125, -9,-96,11,76,-31,-6,-45,10,-11,-127,-37,50,78,5,-51,44,24,7,-2,15,-3,-20,39,-19,3,12,-127,88,-72,2,76,18,-14,-102,-13,-38,59,22,127,6,25,53,-44,11,58,-29,-54,127, 
  /* [0][2][][] */ -4,121,24,-44,77,14,-34,-14,-30,22,-11,-8,37,29,81,9,-22,-16,1,-47,-25,17,0,21,-15,-14,34,12,-59,-117,-8,-5,-8,33,-13,38,-56,40,17,103,16,20,-4,10,32,0,-16,-45, 2,91,-50,12,25,-33,3,31,25,15,22,-45,26,127,-90,-79,-9,-44,122,-75,-59,79,-5,60,80,127,2,118,-79,-116,-14,-5,95,-111,-76,3,-70,-34,-25,-127,51,-20,-56,82,56,22,14,3, 13,127,-19,34,25,12,-58,-2,-22,-20,-5,-14,43,-8,-71,-1,-10,-10,-23,-27,-10,9,-9,7,-44,32,-43,22,33,-89,18,-5,5,43,6,-15,-44,57,12,-1,-17,-3,1,-12,17,10,-6,28, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.019963080063462257, 0.0081067699939012527, 0.025779375806450844, 0.0065459567122161388, 0.0065701943822205067, 0.011962749995291233, 0.016456533223390579, 0.0077948374673724174, 0.018531907349824905, 0.0063200239092111588, 0.020884059369564056, 0.0093628689646720886, 0.0052661248482763767, 0.0059629012830555439, 0.0059440103359520435, 0.027266493067145348, 0.012978829443454742, 0.0029309059027582407, 0.0062231174670159817, 0.027126448228955269, 0.016855690628290176, 0.015938594937324524, 0.011257794685661793, 0.03347296267747879, 0.01121211051940918, 0.017864501103758812, 0.010917386040091515, 0.0063768872059881687, 0.015683060511946678, 0.010169049724936485, 0.029674282297492027, 0.019601233303546906, 0.025605158880352974, 0.0041331262327730656, 0.021906860172748566, 0.009312027134001255, 0.0086727887392044067, 0.0034569913987070322, 0.019588304683566093, 0.044166646897792816, 0.0098421815782785416, 0.038886956870555878, 0.026372617110610008, 0.008899051696062088, 0.0097781103104352951, 0.005671404767781496, 0.011951046995818615, 0.016564315184950829, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 4880, 1827, 25747, -2078, -1110, 4587, -618, 1106, 1847, 217, 5014, 414, 1932, 2911, 1694, 2991, 2360, 1560, -688, 4047, 1045, 335, 857, 8242, 31038, 3329, 3327, -1398, -75, 5109, 6236, 7935, 8387, 3614, 4516, -1012, 331, 2178, 4872, 3825, 724, 11224, 7508, 2776, 5199, 1565, 2922, 617, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017546753224451095, 0.00035225070314481854, 5.1266226364532486e-05, 0.00025525310775265098, 0.00040449644438922405, 0.00023148160835262388, 0.00029024344985373318, 0.00056763296015560627, 0.00033428543247282505, 0.0002975623938255012, 0.00017283747729379684, 0.00045078666880726814, 0.00029133685166016221, 0.000272942561423406, 0.00032277620630338788, 0.00026216567493975163, 0.00020996345847379416, 0.00032179974368773401, 0.00042760343058034778, 0.00022496884048450738, 0.00034426792990416288, 0.00041494672768749297, 0.00031907166703604162, 0.00011958927643718198, 5.1924580475315452e-05, 0.00025067749083973467, 0.00024095985281746835, 0.00028498884057626128, 0.0006458879797719419, 0.00017149790073744953, 0.00014487233420368284, 0.00012117672304157168, 0.00011105493467766792, 0.00023622190929017961, 0.00019301152497064322, 0.00023925748246256262, 0.00042772683082148433, 0.00023345404770225286, 0.00018483970779925585, 0.00022073369473218918, 0.00029130728216841817, 9.3723458121530712e-05, 0.00014513853238895535, 0.0002940772392321378, 0.00017721395124681294, 0.00039799587102606893, 0.00025025621289387345, 0.00035870308056473732, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -14,31,15,-127,-92,6,25,125, 
  /* [1][0][][] */ 84,12,-24,-17,-59,46,127,41, 
  /* [2][0][][] */ 4,112,-37,-26,-26,100,-57,-127, 
  /* [3][0][][] */ 62,-83,-87,124,-127,-49,-5,-32, 
  /* [4][0][][] */ 30,-53,39,-20,-127,-5,50,23, 
  /* [5][0][][] */ -16,53,-13,-98,-127,-6,-32,5, 
  /* [6][0][][] */ 44,-19,22,23,127,-30,-7,-119, 
  /* [7][0][][] */ 12,36,26,127,30,-11,-1,27, 
  /* [8][0][][] */ 25,23,19,-39,32,127,19,-26, 
  /* [9][0][][] */ 112,1,22,52,-100,-79,127,93, 
  /* [10][0][][] */ 7,63,-68,-27,7,127,90,-60, 
  /* [11][0][][] */ -16,-43,-127,101,-55,31,-21,79, 
  /* [12][0][][] */ -94,-84,53,53,24,-127,-35,6, 
  /* [13][0][][] */ 42,29,34,56,-63,127,16,-42, 
  /* [14][0][][] */ 16,-96,3,0,-65,-45,-127,75, 
  /* [15][0][][] */ -102,61,-22,-10,120,9,-127,-50, 
  /* [16][0][][] */ 93,74,-96,-127,61,118,112,44, 
  /* [17][0][][] */ -97,116,-127,47,-15,-28,27,-120, 
  /* [18][0][][] */ 33,1,-85,127,-16,-36,-34,-51, 
  /* [19][0][][] */ 114,-2,27,56,-69,10,127,56, 
  /* [20][0][][] */ 34,-77,-78,127,33,-26,-28,-55, 
  /* [21][0][][] */ 19,56,127,-107,43,-32,29,-103, 
  /* [22][0][][] */ -83,-40,-127,58,-34,29,15,112, 
  /* [23][0][][] */ 71,43,19,25,-111,127,67,-45, 
  /* [24][0][][] */ -4,2,-127,73,-32,39,38,63, 
  /* [25][0][][] */ 45,-31,-79,127,43,-1,-32,-15, 
  /* [26][0][][] */ -86,22,127,-103,-14,27,55,-3, 
  /* [27][0][][] */ -73,85,127,3,17,-14,82,24, 
  /* [28][0][][] */ -54,-95,42,-127,-20,17,-10,-17, 
  /* [29][0][][] */ -92,-99,-13,101,-10,-127,-14,63, 
  /* [30][0][][] */ -127,45,127,-25,62,42,60,33, 
  /* [31][0][][] */ -63,52,81,-127,-41,14,32,59, 
  /* [32][0][][] */ -69,114,89,-120,15,11,12,127, 
  /* [33][0][][] */ 11,109,-52,48,29,22,-127,-27, 
  /* [34][0][][] */ 91,12,127,-125,-76,-94,47,-51, 
  /* [35][0][][] */ 90,9,37,126,82,-81,41,-127, 
  /* [36][0][][] */ 30,59,127,-92,21,-22,39,-102, 
  /* [37][0][][] */ -48,-51,107,69,4,-127,94,-15, 
  /* [38][0][][] */ 63,-9,70,44,-16,-40,127,12, 
  /* [39][0][][] */ 51,-83,-30,9,-127,14,76,68, 
  /* [40][0][][] */ -42,33,-127,115,-51,49,-92,119, 
  /* [41][0][][] */ -111,-14,-52,-3,127,19,-92,13, 
  /* [42][0][][] */ -83,56,-23,-39,127,29,-111,-60, 
  /* [43][0][][] */ 127,99,-38,103,8,-85,52,58, 
  /* [44][0][][] */ 6,16,103,-2,45,-127,21,-36, 
  /* [45][0][][] */ -5,-82,127,80,-24,-25,-115,13, 
  /* [46][0][][] */ 48,-126,-127,61,-84,22,-5,-22, 
  /* [47][0][][] */ -127,-11,35,-22,92,56,-122,-31, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0024261125363409519, 0.0048704156652092934, 0.00070883560692891479, 0.0035292725078761578, 0.0055927946232259274, 0.0032005945686250925, 0.0040130685083568096, 0.0078484117984771729, 0.004622017964720726, 0.0041142646223306656, 0.0023897478822618723, 0.0062328292988240719, 0.0040281866677105427, 0.0037738566752523184, 0.0044628847390413284, 0.0036248497199267149, 0.0029030723962932825, 0.0044493838213384151, 0.0059122848324477673, 0.0031105452217161655, 0.0047600413672626019, 0.0057372860610485077, 0.0044116638600826263, 0.0016535083996132016, 0.00071793835377320647, 0.0034660075325518847, 0.0033316460903733969, 0.0039404155686497688, 0.0089304093271493912, 0.002371226204559207, 0.002003086032345891, 0.0016754573443904519, 0.0015355077339336276, 0.0032661366276443005, 0.0026686855126172304, 0.0033081080764532089, 0.0059139910154044628, 0.0032278664875775576, 0.0025556974578648806, 0.00305198784917593, 0.0040277778171002865, 0.0012958730803802609, 0.0020067666191607714, 0.0040660765953361988, 0.0024502594023942947, 0.0055029140785336494, 0.0034601828083395958, 0.0049596298485994339, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12285, 3892, -17288, 2611, 1821, -1860, 12426, 1181, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001388369855703786, 0.00014347661635838449, 9.373020293423906e-05, 5.5174212320707738e-05, 0.00015671896107960492, 0.00014191378431860358, 0.00014597305562347174, 0.00011286633525742218, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 43,105,-35,65,-4,-7,-22,7,59,-61,4,-27,7,5,-32,-47,5,-22,31,17,-54,-32,-34,9,14,19,22,-3,16,14,-22,24,-66,7,112,-127,-24,18,-11,117,-26,11,12,-4,-13,35,24,-46, 
  /* [1][0][][] */ -2,-51,33,53,-12,-18,-30,-17,51,-42,95,44,21,13,-50,-90,127,45,21,18,-71,34,37,-8,-56,-104,-38,-54,-12,-62,44,-42,-11,-22,-31,5,9,-11,86,-52,-13,34,-60,41,79,63,17,54, 
  /* [2][0][][] */ 82,-24,-20,-18,112,113,68,78,-28,-5,5,-32,-12,43,66,33,-25,-38,58,-72,-44,-49,-47,56,-96,-94,123,19,58,-71,-62,17,-127,87,113,20,-11,-4,-9,22,22,65,13,-62,-21,20,55,-46, 
  /* [3][0][][] */ 82,-27,13,-14,123,127,25,44,-40,-27,30,54,-126,39,63,18,0,15,78,-114,-84,16,36,89,14,-28,56,33,47,-58,3,-13,-115,51,-64,-115,28,-39,63,-46,44,-99,-101,-27,-61,39,-19,58, 
  /* [4][0][][] */ 40,39,-30,-36,-13,-12,-19,-19,5,-2,-10,-13,-30,-18,69,56,-37,-19,-35,48,35,-12,-14,4,-53,-44,-8,50,-15,16,-24,33,-34,-15,27,-127,-10,29,14,52,4,-8,-11,-24,44,0,93,-20, 
  /* [5][0][][] */ 61,56,-98,51,5,6,-8,30,-86,-62,-58,-24,30,24,40,19,31,-57,42,127,-71,-46,-60,54,32,-28,-35,66,32,27,-54,-1,-3,5,-62,-5,-5,20,-30,68,16,76,-7,-42,121,25,16,-61, 
  /* [6][0][][] */ -35,-79,21,-52,-44,-40,-86,-77,-36,-67,-121,42,-58,-54,100,97,-127,7,20,-18,20,57,70,13,-11,-10,-74,88,-84,-40,45,71,12,-62,87,38,26,41,-12,-89,-10,-61,-35,16,-44,-23,-12,63, 
  /* [7][0][][] */ 73,17,-10,39,11,14,15,1,80,-10,-15,-19,64,4,-10,-17,-49,-9,-31,0,3,-22,-25,-31,69,-127,13,-3,0,105,-20,16,-83,16,-62,-40,-18,21,29,24,26,71,-40,-19,-43,28,39,-25, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0059005720540881157, 0.0060977563261985779, 0.0039835334755480289, 0.002344904001802206, 0.0066605554893612862, 0.0060313357971608639, 0.0062038549222052097, 0.0047968192957341671, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 1184, 8894, 646, 470, 759, 542, 6481, 6478, 3578, -4782, 172, 314, 6169, 3519, 21357, 18070, 257, -3081, 4138, 3942, 15526, -905, -422, 242, 6877, 553, 5596, 20346, 5928, 13653, -426, 1920, -136, -4890, -4521, 1846, -423, 559, 762, 3872, 5728, 4049, -5200, 187, -250, 459, 10444, 497, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.6742965979501605e-05, 0.00011958972027059644, 0.00063880690140649676, 8.0373363744001836e-05, 0.00045335982576943934, 0.00076587568037211895, 0.00018244943930767477, 0.00018252061272505671, 5.5827196774771437e-05, 0.00030100031290203333, 0.00048649215023033321, 0.00027805697754956782, 0.00021322052634786814, 0.00017760618356987834, 5.5177977628773078e-05, 4.8934405640466139e-05, 0.00012700728257186711, 0.00064111693063750863, 5.9158839576411992e-05, 0.00010395058779977262, 6.699034565826878e-05, 0.00080247025471180677, 0.0012844782322645187, 0.00028995034517720342, 4.4460150093073025e-05, 0.00012592933489941061, 9.0502020611893386e-05, 0.00011160413123434409, 0.00017970675253309309, 0.00010821443720487878, 0.00050847744569182396, 0.00033220637124031782, 9.5040166343096644e-05, 0.00027111358940601349, 8.6707987065892667e-05, 8.4513143519870937e-05, 0.00040428451029583812, 0.00037177227204665542, 9.9468328699003905e-05, 0.00020227367349434644, 7.1938797191251069e-05, 0.00022480632469523698, 9.7074065706692636e-05, 0.00039334184839390218, 8.6526917584706098e-05, 0.00037783279549330473, 8.5142339230515063e-05, 0.00065745145548135042, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -15,-88,-103,70,-88,0,-103,-73,61,58,127,-42,1,2,-83,-71,95,-77,29,-38,-10,-102,-38,-74,82,93,8,-127,7,-64,61,77,47,72,67,11,94,84,44,14,-127,-11,13,49,-39,16,-48,-95, 88,-6,34,75,-127,37,-80,11,101,96,120,64,-5,-81,-122,-127,122,-30,93,-68,-96,127,127,22,127,79,52,-124,-77,-72,-101,118,100,127,93,98,-21,76,66,-71,-100,-79,0,-55,-54,90,-68,100, 107,-6,58,52,-79,10,-38,0,25,83,12,-36,-78,9,-39,-58,37,87,57,0,-46,-23,-83,62,45,15,28,-44,3,-44,26,40,45,89,6,66,-4,14,52,-11,-59,3,-12,11,-17,52,-32,-4, 
  /* [0][1][][] */ 51,-127,119,91,82,-74,-127,-127,116,83,122,-50,7,-3,-112,-96,91,127,45,-105,-45,116,31,-127,101,127,112,-125,0,-125,-70,85,106,3,105,46,35,114,64,3,-16,-19,87,104,-111,86,-120,107, 127,-9,4,127,114,-127,-95,5,127,127,127,59,-24,-127,-127,-126,127,65,127,-127,-127,-119,-107,40,114,126,127,-117,-127,-127,127,127,127,5,127,127,-4,127,127,-127,2,-127,116,-87,-127,127,-127,-127, 104,-9,-127,58,81,-57,-50,0,25,91,16,-22,-127,11,-37,-35,41,-90,76,-35,-67,12,73,70,57,40,-3,-44,-8,-79,-35,26,44,-7,29,72,0,28,85,-7,-21,-5,46,-9,-72,27,-55,9, 
  /* [0][2][][] */ 73,-85,2,7,4,64,-82,-76,32,18,51,60,11,9,-43,-48,12,-35,20,-72,-16,4,16,-74,35,51,67,-31,9,-116,15,16,61,-72,67,16,-127,18,10,0,18,-4,89,-127,-68,33,-78,-12, 53,5,4,40,15,94,-47,3,24,47,21,-127,-10,-90,-30,-57,37,-8,50,-101,-35,-10,-26,29,35,62,72,-60,-82,-113,-25,18,59,-80,63,30,20,31,64,-54,121,-67,127,109,-102,34,-114,15, -28,-14,0,20,-11,41,-33,5,3,29,-48,46,-64,7,-5,-7,-4,28,35,2,-37,21,18,38,30,42,21,-15,1,-52,15,-15,0,-39,12,23,11,-40,49,6,60,4,34,-9,-23,44,-22,-7, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0041115758940577507, 0.0050825630314648151, 0.027149291709065437, 0.0034158679191023111, 0.019267791882157326, 0.032549716532230377, 0.0077541009522974491, 0.0077571258880198002, 0.0023726557847112417, 0.012792512774467468, 0.020675916224718094, 0.011817421764135361, 0.0090618720278143883, 0.0075482628308236599, 0.0023450639564543962, 0.0020797122269868851, 0.0053978092037141323, 0.027247469872236252, 0.0025142505764961243, 0.0044178999960422516, 0.0028470896650105715, 0.034104984253644943, 0.054590325802564621, 0.012322889640927315, 0.0018895564135164022, 0.0053519965149462223, 0.0038463359232991934, 0.0047431755810976028, 0.0076375366188585758, 0.0045991134829819202, 0.021610289812088013, 0.014118771068751812, 0.0040392070077359676, 0.011522327549755573, 0.0036850892938673496, 0.0035918084904551506, 0.017182091251015663, 0.015800321474671364, 0.0042274040170013905, 0.0085966307669878006, 0.003057398833334446, 0.0095542687922716141, 0.0041256477124989033, 0.016717027872800827, 0.0036773940082639456, 0.016057893633842468, 0.0036185493227094412, 0.027941687032580376, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 10399, 4590, 7520, 2256, 3325, 3526, -3852, 4064, 2302, -2691, -3181, 4625, -2865, -4260, 6528, 1370, -1738, 2954, -1769, 2586, 126, 4266, 2293, -2008, -379, -4447, 2432, -3815, 3792, 6777, 201, 563, 6848, 9699, 7636, 3914, 5026, -4058, 940, 4660, -943, -3950, 4022, 1242, 305, -6049, -10416, 1609, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00039588421350345016, 0.0006700758240185678, 0.00012971062096767128, 0.00085902697173878551, 0.00070812023477628827, 0.00060767354443669319, 0.0020637221168726683, 0.0011892765760421753, 0.0011526827001944184, 0.00058274227194488049, 0.00015063946193549782, 0.0005435597850009799, 0.00054934871150180697, 0.0014028062578290701, 0.00060919846873730421, 0.0017914740601554513, 0.0010520528303459287, 0.00030894606607034802, 0.0012677783379331231, 0.0018268789863213897, 0.00082963373279199004, 0.00039217734592966735, 0.00011465686839073896, 0.00058020651340484619, 0.0012739035300910473, 0.00096638419199734926, 0.001138996914960444, 0.0004817205190192908, 0.001213732291944325, 0.00079236843157559633, 0.00035585599835030735, 0.00055864499881863594, 0.0008645601337775588, 0.00031231902539730072, 0.00043690059101209044, 0.00041765588684938848, 0.0005748860421590507, 0.0015058830613270402, 0.00059792661340907216, 0.00069344660732895136, 0.0018494807882234454, 0.00072511378675699234, 0.00088666740339249372, 0.00024624835350550711, 0.0015438465634360909, 0.00062795873964205384, 0.00066785828676074743, 0.00063498021336272359, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -114,-112,26,-127,-73,1,-5,6, 
  /* [1][0][][] */ -127,-18,99,-5,-53,19,1,14, 
  /* [2][0][][] */ 23,-3,19,127,23,-23,-18,-3, 
  /* [3][0][][] */ -106,-74,-30,-14,42,127,-42,-37, 
  /* [4][0][][] */ -6,-36,-7,-5,-5,7,-127,-77, 
  /* [5][0][][] */ -3,-38,-11,-3,-10,8,-127,-72, 
  /* [6][0][][] */ 127,4,12,-9,-66,19,-1,-2, 
  /* [7][0][][] */ -127,-30,-12,8,65,11,-6,14, 
  /* [8][0][][] */ 22,40,-8,-11,-25,-127,45,17, 
  /* [9][0][][] */ 76,23,-16,-6,-22,-2,-3,127, 
  /* [10][0][][] */ 117,-2,-127,7,-92,-9,45,124, 
  /* [11][0][][] */ -127,97,0,-34,67,-57,0,34, 
  /* [12][0][][] */ 127,-37,-102,13,51,-4,-10,-20, 
  /* [13][0][][] */ 127,7,17,-12,-30,27,2,-10, 
  /* [14][0][][] */ -112,-75,83,-22,73,-16,-29,-127, 
  /* [15][0][][] */ 35,75,2,-6,-7,-127,-14,6, 
  /* [16][0][][] */ -12,-66,11,3,13,127,13,5, 
  /* [17][0][][] */ 34,-127,-74,-12,-39,118,-69,-8, 
  /* [18][0][][] */ 47,-18,-18,-19,-17,27,127,-16, 
  /* [19][0][][] */ -5,23,-2,-127,-11,44,-5,-9, 
  /* [20][0][][] */ -65,-28,61,4,63,93,2,-127, 
  /* [21][0][][] */ -18,-7,37,-24,-18,12,-127,-80, 
  /* [22][0][][] */ 79,-6,5,127,-13,-11,59,38, 
  /* [23][0][][] */ 127,-13,-116,-13,27,-29,3,8, 
  /* [24][0][][] */ -32,24,26,35,9,3,-127,-82, 
  /* [25][0][][] */ 127,13,-87,8,15,-6,6,26, 
  /* [26][0][][] */ -1,51,-33,-127,-28,24,6,-3, 
  /* [27][0][][] */ 127,17,-110,0,-102,50,32,77, 
  /* [28][0][][] */ -127,-28,-19,18,57,5,-8,35, 
  /* [29][0][][] */ -5,-127,-18,-120,-7,27,-19,-22, 
  /* [30][0][][] */ 0,80,127,37,29,-93,104,35, 
  /* [31][0][][] */ -73,-9,-127,41,-1,-27,97,104, 
  /* [32][0][][] */ -3,-121,0,-127,-10,9,-10,-19, 
  /* [33][0][][] */ 12,-122,-1,-127,9,8,8,-27, 
  /* [34][0][][] */ -28,-47,32,-98,36,-55,127,82, 
  /* [35][0][][] */ -127,16,47,5,-111,-21,29,86, 
  /* [36][0][][] */ -127,18,124,-8,-45,16,-41,39, 
  /* [37][0][][] */ 127,9,-3,-6,-75,16,-4,18, 
  /* [38][0][][] */ -78,4,86,34,63,-55,59,127, 
  /* [39][0][][] */ -127,-9,71,-7,-74,8,-15,7, 
  /* [40][0][][] */ -6,33,40,-20,22,-1,127,57, 
  /* [41][0][][] */ 127,-14,-74,2,52,12,6,-7, 
  /* [42][0][][] */ -17,-127,34,-13,17,5,1,-22, 
  /* [43][0][][] */ 13,115,127,-3,48,-95,81,2, 
  /* [44][0][][] */ 6,-12,-2,116,1,-127,-1,2, 
  /* [45][0][][] */ 127,-36,31,-3,-60,105,9,2, 
  /* [46][0][][] */ 12,127,-17,99,4,118,31,32, 
  /* [47][0][][] */ -11,34,10,-28,25,-37,127,68, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045630470849573612, 0.0077234385535120964, 0.0014950726181268692, 0.0099013308063149452, 0.0081619471311569214, 0.0070041767321527004, 0.023786908015608788, 0.013707859441637993, 0.013286069966852665, 0.0067168134264647961, 0.0017363029764965177, 0.0062651876360177994, 0.006331911776214838, 0.016169048845767975, 0.0070217535831034184, 0.020648917183279991, 0.012126187793910503, 0.0035609791520982981, 0.01461268775165081, 0.021057002246379852, 0.0095625380054116249, 0.0045203207992017269, 0.0013215598883107305, 0.0066875857301056385, 0.014683287590742111, 0.011138753034174442, 0.013128324411809444, 0.0055524148046970367, 0.013989740982651711, 0.009133010171353817, 0.0041016731411218643, 0.0064390627667307854, 0.0099651068449020386, 0.0035998565144836903, 0.0050358106382191181, 0.0048139919526875019, 0.0066262609325349331, 0.017357133328914642, 0.0068918312899768353, 0.007992815226316452, 0.021317515522241592, 0.0083578182384371758, 0.010219920426607132, 0.0028383117169141769, 0.017794709652662277, 0.0072379880584776402, 0.0076978788711130619, 0.0073189195245504379, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3965, -4339, -193, 2746, 2028, 342, -2662, 1941, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 8.2349237345624715e-05, 0.00012923155736643821, 8.6097024905029684e-05, 5.4039050155552104e-05, 0.00013611309987027198, 0.00019127479754388332, 9.2717418738175184e-05, 0.00017562317952979356, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -25,-5,-49,-37,-21,40,-127,-9, 
  /* [1][0][][] */ 17,85,-4,127,6,-3,-6,-30, 
  /* [2][0][][] */ 127,-7,-31,-53,-68,50,96,-51, 
  /* [3][0][][] */ 13,-127,41,-84,19,-84,31,59, 
  /* [4][0][][] */ 127,-2,-59,-4,30,-7,-124,-49, 
  /* [5][0][][] */ 3,-31,5,35,4,-127,-3,8, 
  /* [6][0][][] */ 127,-31,123,7,108,-24,-5,12, 
  /* [7][0][][] */ -127,-5,-88,0,-98,11,34,9, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.003499842481687665, 0.0054923412390053272, 0.0036591235548257828, 0.002296659629791975, 0.0057848063297569752, 0.0081291785463690758, 0.0039404900744557381, 0.0074639851227402687, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10553, 11329, 315, -12935, -625, -11305, 546, 112, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00034672467154450715, 0.00046463933540508151, 0.00025537339388392866, 0.00036396796349436045, 0.00031952597782947123, 0.00038471297011710703, 0.0013418003218248487, 0.0030863720458000898, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -1,0,14,21,8,-4,7,34, 5,2,-38,127,-20,-5,-6,34, -3,0,-12,18,-1,-2,-8,26, 
  /* [0][1][][] */ -4,-2,127,-17,127,-3,-114,45, 127,-127,-103,10,-91,127,-16,-127, -27,4,11,-18,0,-2,127,43, 
  /* [0][2][][] */ 1,0,13,0,9,-5,14,36, 4,3,-42,-9,-12,1,-11,-103, -5,-1,-11,-4,0,-3,-7,41, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.014735798351466656, 0.019747171550989151, 0.010853368788957596, 0.015468638390302658, 0.013579853810369968, 0.01635030098259449, 0.057026512920856476, 0.13117080926895142, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 5450, 3715, -952, 7748, 1159, 2877, 60986, 3294, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00045258784666657448, 0.00056551728630438447, 0.00036553826066665351, 0.00032311116228811443, 0.00061007065232843161, 0.00088539934949949384, 1.5748815712868236e-05, 3.3214040740858763e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -56, 51, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -42, 47, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -43, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 33, 30, -45, 
  /* [2][1][][] */ 54, 72, -127, 
  /* [2][2][][] */ 23, 34, -57, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 111, 
  /* [4][2][][] */ 4, -37, 32, 
  /* [5][0][][] */ 2, -57, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -14, -90, 5, 
  /* [6][1][][] */ -24, -127, 0, 
  /* [6][2][][] */ -18, -57, 14, 
  /* [7][0][][] */ 39, -127, 25, 
  /* [7][1][][] */ -22, -6, -15, 
  /* [7][2][][] */ -28, 69, -15, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.11540989577770233, 0.14420689642429352, 0.093212254345417023, 0.082393340766429901, 0.15556800365447998, 0.22577682137489319, 0.0040159476920962334, 0.008469579741358757, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.072300136089324951, } };
const TfArray<1, int> quant46_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.086758740246295929, } };
const TfArray<1, int> quant47_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.072324566543102264, } };
const TfArray<1, int> quant51_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10767846554517746, } };
const TfArray<1, int> quant54_zero = { 1, { -40 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.1226901188492775, } };
const TfArray<1, int> quant55_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.058369573205709457, } };
const TfArray<1, int> quant59_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.03519594669342041, } };
const TfArray<1, int> quant62_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.072852037847042084, } };
const TfArray<1, int> quant63_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.021209824830293655, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.1007082462310791, } };
const TfArray<1, int> quant66_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.11576130241155624, } };
const TfArray<1, int> quant67_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.034398242831230164, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.087013512849807739, } };
const TfArray<1, int> quant70_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
