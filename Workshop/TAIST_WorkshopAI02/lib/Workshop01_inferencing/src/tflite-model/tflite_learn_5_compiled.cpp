/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 29.03.2024 14:59:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 416224;
#else
constexpr int kTensorArenaSize = 415200;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038292964454740286, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 20473, -26549, -28589, -25548, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.000216018917853944, 0.00020719347230624408, 0.00019257311942055821, 0.00021538960572797805, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 87,-36,-82,-63,126,-38,5,-52,127,-31,100,99,-67,-47,7,-12,17,-64,-115,14,-20,81,-54,101,12,17,6,38,99,-51,47,-15, 
  /* [1][0][][] */ 61,80,-86,-23,-44,43,122,45,-49,-71,-90,33,96,-56,118,-127,125,-103,25,-54,10,-87,-88,-25,-13,-106,68,-58,-42,-109,-24,-28, 
  /* [2][0][][] */ -33,121,25,97,-35,-11,95,48,-84,-117,102,-61,-99,95,-127,80,60,84,94,-74,-16,21,-24,-31,48,-44,95,-105,-15,22,81,81, 
  /* [3][0][][] */ 73,-75,84,13,-14,117,42,-5,-1,-101,37,116,79,-6,-127,-23,114,-90,111,3,-119,-3,-7,-27,88,-10,-97,89,-89,119,38,64, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0031839858274906874, 0.0030539040453732014, 0.0028384090401232243, 0.0031747100874781609, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -305, -51, -287, 60, -208, 69, -236, -23, -4, -71, 13, -43, 180, -157, 552, 119, 28, -108, -237, -283, -103, 499, -225, 212, 117, 90, -156, -278, -61, -97, -391, 157, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1393781430087984e-05, 4.1763516492210329e-05, 3.9643760828766972e-05, 4.5037271775072441e-05, 4.1051498556043953e-05, 4.1887960833264515e-05, 4.0791583160171285e-05, 4.2325758840888739e-05, 4.2206156649626791e-05, 4.2407875298522413e-05, 4.3485648347996175e-05, 4.0211976738646626e-05, 4.1744715417735279e-05, 4.4334465201245621e-05, 4.4948916183784604e-05, 4.20947908423841e-05, 4.1465329559287056e-05, 4.1616782255005091e-05, 4.3400588765507564e-05, 4.2577234125928953e-05, 4.2913856304949149e-05, 4.3650794395944104e-05, 4.1714396502356976e-05, 4.1939179936889559e-05, 4.195102519588545e-05, 4.2948999180225655e-05, 4.2131898226216435e-05, 4.0253133192891255e-05, 3.945610296796076e-05, 4.1715349652804434e-05, 4.2033840145450085e-05, 4.1573668568162248e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -47,-60,108,5,93,-24,-94,-103,58,-113,-120,-20,50,0,-47,49,-65,-44,-65,-61,-84,-115,-4,112,-124,3,72,-49,109,-3,-31,-86,80,-72,-102,59,-117,-95,-93,26,66,-98,-108,96,43,-121,101,-22,12,-61,-49,98,-75,-59,-99,101,30,58,119,-119,-94,81,-66,41,-12,13,67,92,52,93,83,-127,96,-112,30,84,-112,6,-65,25,52,13,84,-12,-70,-54,-99,107,22,112,-16,-114,0,68,20,11, 
  /* [1][0][][] */ -50,40,-82,-6,-38,73,34,11,81,-101,-107,90,60,-29,24,64,108,-40,28,127,-48,-11,36,22,38,22,-46,93,0,12,106,-65,70,113,-9,38,50,68,-11,-67,-60,8,-22,-97,-32,43,-25,-60,-21,-87,123,63,-4,93,-80,-47,14,111,48,80,-57,103,-63,-76,-53,35,72,45,111,32,10,10,-115,99,-44,41,90,-50,-48,83,-85,86,-57,-117,29,123,-67,-66,79,85,86,29,87,93,33,2, 
  /* [2][0][][] */ 57,44,-78,107,-30,-73,82,111,-100,97,-41,104,90,-19,75,-115,-78,-25,32,50,-107,-20,119,11,-23,77,115,-5,-88,78,91,107,-73,-15,-106,-113,-107,103,108,-28,-127,-79,18,-15,-97,124,-24,-100,108,31,91,-103,-60,77,15,7,-69,109,-82,4,-26,45,-47,79,91,46,48,99,-113,77,7,-81,31,-91,27,25,-66,-31,-5,17,32,-114,-26,-37,-8,-102,-20,-39,86,116,-40,3,-59,-103,-59,-70, 
  /* [3][0][][] */ 81,8,29,-17,-62,35,-110,46,56,29,68,-11,77,96,73,10,98,101,-61,5,117,-85,-58,-114,-16,-107,-74,89,30,-102,91,17,-46,-25,-16,-4,-89,-15,47,49,-16,-83,-84,7,78,37,-36,-83,71,-92,47,3,81,38,85,-89,-113,-102,-127,-56,-87,25,-27,78,65,-26,-62,-25,-44,-56,-4,98,22,-96,62,-48,17,97,90,-50,-82,-116,35,98,33,50,-34,-105,-78,50,-14,-94,89,-90,-78,49, 
  /* [4][0][][] */ 48,102,3,53,-31,-9,31,12,60,88,-12,72,35,-41,-15,-72,-26,-9,-52,12,107,-96,86,26,-23,-6,63,-41,-41,34,-74,-60,67,114,14,-112,-53,-11,-122,47,-56,-69,-80,-98,31,105,32,59,19,-47,-23,-84,-83,41,-92,18,32,-104,40,12,3,-60,-45,-76,-53,54,1,-42,27,-109,-108,-91,-62,18,99,55,60,-26,-10,-65,2,-47,-103,-26,-3,67,90,-3,-127,-82,56,42,29,102,-106,-23, 
  /* [5][0][][] */ 102,-91,78,89,34,-127,28,61,114,-116,1,-92,26,100,36,42,52,65,-80,101,31,53,16,-27,-103,-67,-15,-109,37,34,19,-95,-37,7,-85,17,-125,-35,50,26,-89,-51,42,100,-33,28,38,-63,-107,105,26,36,29,22,36,-27,113,52,-71,-41,34,-90,37,-72,-29,107,-28,33,73,2,99,-75,-50,79,-48,-73,14,-53,14,89,112,37,18,117,-81,83,-5,45,67,-98,109,99,-23,23,77,-89, 
  /* [6][0][][] */ 28,-50,113,84,-104,-79,-3,70,-10,-91,10,-107,94,55,120,-124,35,4,-6,115,-81,-127,109,59,-62,-81,-9,-72,-36,-109,52,-71,-93,-120,-49,-109,-18,46,-113,89,94,60,26,-19,-116,117,-87,-54,-89,23,-22,-63,51,-48,101,-25,4,0,-82,113,-97,-13,75,-70,-45,74,102,-45,87,-3,-120,-7,57,-68,-110,-49,-76,-115,-60,-25,38,-35,42,-18,-74,-93,-41,-91,87,103,94,28,-56,-69,87,-25, 
  /* [7][0][][] */ 127,74,-46,-43,-71,107,-22,2,121,8,-96,-3,60,-90,46,75,47,19,-11,121,56,32,-7,84,-67,107,40,42,-89,115,-16,42,32,30,65,109,-112,93,-7,-26,100,-76,88,72,55,2,110,-119,57,-54,-106,-66,-42,94,19,33,110,-84,-9,-62,10,-24,85,-109,-64,-54,64,27,-107,24,58,86,88,29,62,54,-60,52,-103,53,94,-38,-23,-69,90,36,-108,100,81,9,78,72,-55,-43,2,-61, 
  /* [8][0][][] */ 4,30,-34,-95,60,47,-75,-25,2,34,42,117,1,-46,-86,-74,-61,92,-52,12,27,-23,84,116,-122,90,46,95,-51,14,-97,112,89,-39,47,-10,127,-3,-21,69,77,101,-115,-122,-15,-35,-31,116,17,-86,-73,-7,-49,-16,-34,-115,53,102,-80,109,108,62,37,104,-39,-50,-18,97,-88,49,41,-4,76,66,7,30,-53,112,86,69,34,86,-114,-94,24,38,72,-48,36,-43,-70,96,-84,-104,-54,57, 
  /* [9][0][][] */ -2,6,119,46,86,-110,-50,-123,41,49,-12,70,-23,-77,-104,-29,12,-2,-91,-69,6,101,-110,-107,111,-2,-13,35,-4,-66,-92,97,60,-2,27,-21,-78,14,-37,-46,46,-71,55,-97,81,19,-108,56,50,-13,-69,-54,76,-80,-71,108,82,-62,9,-5,-83,118,82,-80,-91,2,106,47,-39,103,105,-94,7,84,-94,-96,-84,-121,-41,105,32,36,122,25,-46,-100,37,-20,104,32,-21,105,127,-1,62,-37, 
  /* [10][0][][] */ -54,86,79,-62,-21,97,102,35,44,37,24,-82,91,81,-36,13,-50,83,-105,-69,-16,27,57,-80,35,44,-115,-127,-64,71,-89,-81,89,105,123,79,-54,11,-38,35,-31,117,-107,-41,-92,-56,3,-61,1,-7,30,4,51,28,-71,-42,-96,-10,14,-48,-9,62,104,45,111,-77,-99,-18,13,-16,-96,-65,83,57,-75,102,-22,63,61,28,71,-12,45,105,-100,73,101,-30,28,9,-20,-73,-62,-55,-52,-60, 
  /* [11][0][][] */ 116,14,-16,109,127,52,54,32,118,99,-84,116,-8,-92,28,-73,-65,-111,75,48,32,78,24,-118,-114,-104,-26,75,90,-4,27,-19,-97,-77,52,50,-71,80,-29,-66,-29,109,-80,6,-45,-63,-98,-100,80,116,121,58,-100,-96,20,24,-74,-61,-45,-98,-88,90,89,4,28,93,-64,29,98,62,-97,-82,36,111,-109,54,-66,34,-50,94,-114,-31,-71,-46,49,-89,13,-26,-101,-7,13,-105,-83,-34,-71,-40, 
  /* [12][0][][] */ 0,66,-48,3,89,11,-31,38,-74,58,-10,4,-40,15,53,-73,-100,-30,-42,-77,27,-6,12,106,-65,-45,108,-93,100,21,-37,127,-90,-67,-62,6,1,-75,-14,50,121,44,-122,-36,-19,-80,-41,109,-41,-111,-75,114,44,6,-79,89,-14,-72,53,76,65,101,0,53,120,41,-43,125,64,94,44,69,89,123,-29,4,-29,30,-114,-105,-53,109,45,22,-31,30,53,125,-93,-106,104,53,108,-11,36,68, 
  /* [13][0][][] */ 116,-53,85,96,90,104,68,64,75,-94,7,-41,81,69,55,-44,-127,-65,-75,21,68,-30,115,-58,-60,30,5,4,-98,-93,85,31,45,107,-14,44,-94,-23,17,65,-58,77,-49,6,-41,27,5,-34,36,91,-37,-108,-105,37,90,-86,-41,35,-35,-75,-32,98,-78,19,-55,-69,-94,87,-44,-8,95,1,-86,29,-66,-53,-109,64,68,-53,41,-102,84,19,-86,-92,93,107,-19,-55,-87,46,101,-62,58,2, 
  /* [14][0][][] */ -52,-83,91,72,86,-15,-1,-103,-73,-24,82,86,-24,-67,-73,-80,-36,-45,13,37,-28,45,9,73,-103,-55,-21,35,-94,-98,-71,50,102,-10,-23,15,103,127,42,-96,10,-98,50,100,78,-94,76,-68,117,53,89,65,95,-4,-3,27,-42,11,53,102,4,-72,-10,72,-74,3,86,-92,-72,-70,-73,100,8,93,59,-63,67,-92,65,35,57,-11,-93,-31,-97,-71,-101,116,122,23,94,-38,101,112,2,77, 
  /* [15][0][][] */ 31,-16,-36,83,94,-82,61,-81,70,8,-68,15,105,8,-88,-107,91,20,-96,21,60,23,84,109,89,67,47,88,18,54,79,-104,14,20,-50,9,-70,127,111,-66,28,121,-38,-18,36,-74,-30,-68,0,-86,-4,30,-99,-90,-53,-6,80,66,-51,118,-45,-63,2,116,-37,99,-71,13,-64,18,70,-66,26,-16,74,-111,-6,65,106,91,-84,58,-106,-61,-120,-22,-84,36,90,75,-123,-44,56,112,-111,127, 
  /* [16][0][][] */ -64,4,103,-57,44,108,-54,47,57,55,-106,56,-8,-48,-52,-58,106,86,68,73,117,82,-40,55,-30,61,-67,52,-112,22,47,22,-103,86,55,66,-40,61,-46,-66,28,-43,78,96,69,112,111,-19,-55,-111,12,120,-56,127,73,50,29,99,57,14,124,95,39,70,64,20,-38,102,49,107,-41,-9,32,100,58,89,-5,100,-110,-8,19,-87,56,20,16,106,109,18,81,19,-21,125,73,-31,-80,29, 
  /* [17][0][][] */ 57,-105,29,89,-48,-123,-70,-101,51,-97,86,55,99,64,-121,50,31,58,105,114,-94,-12,20,-57,23,68,-80,26,104,-60,-25,74,-23,-24,48,21,-54,104,-95,-32,-99,-42,-8,-13,6,11,90,-108,88,105,-17,23,-20,81,98,-78,-127,108,-89,-117,31,-100,74,115,-93,-81,46,-104,-119,10,123,34,20,-125,-53,67,116,-46,41,-44,8,-17,-74,-99,-119,79,90,-39,22,77,-105,-127,-14,95,9,29, 
  /* [18][0][][] */ -102,90,102,-66,-18,-112,-103,-2,-4,61,-106,-57,-34,30,56,-66,11,-24,50,-22,98,-49,11,-82,18,-94,-18,100,21,36,-3,44,40,-28,-114,-113,-42,32,-37,62,-42,-4,-53,-15,-114,15,23,-13,14,-32,71,30,-116,-9,3,85,-52,28,-22,-127,82,96,8,35,-68,-117,-36,88,60,-81,-82,105,-97,-39,-97,-109,55,43,-3,-85,-57,-13,-30,-64,97,-43,66,68,-109,-74,-65,106,83,-57,47,-26, 
  /* [19][0][][] */ 15,28,75,35,58,-84,93,88,89,-64,26,-10,-93,30,-58,57,73,-107,127,56,-25,77,-58,11,75,-82,26,-59,-91,-120,-68,44,78,-85,28,-3,8,-72,-57,-104,42,-119,-85,9,-89,27,74,-97,-31,35,-42,43,-28,12,5,-13,22,95,-1,-29,52,-43,98,60,-72,-5,-29,-5,-10,52,73,-54,-65,-121,-56,-82,-25,-114,12,104,56,-118,-33,75,-89,-10,5,-6,86,27,0,62,-35,112,68,-50, 
  /* [20][0][][] */ -13,68,76,90,-67,115,20,54,10,12,-88,26,5,88,42,-75,-31,-38,-53,-12,24,-44,-74,-68,75,-52,-104,68,46,30,-42,108,100,41,-7,56,60,-33,-15,-110,-84,-36,-90,-99,-28,-66,-70,117,61,-95,-97,39,62,106,63,10,90,70,120,90,113,-31,-52,-34,-23,-69,-49,11,-62,-78,-59,81,-60,-78,46,20,127,81,109,104,84,19,101,-29,59,115,-15,70,25,93,50,60,37,32,-3,4, 
  /* [21][0][][] */ 100,82,82,-94,106,-58,84,30,4,-55,-61,61,1,47,-38,-82,-86,-25,39,-7,114,-38,80,-67,62,-82,-22,88,33,9,-1,-17,8,26,-75,-104,123,103,-100,-24,1,15,38,-3,-87,-74,-72,108,-18,-53,-4,97,48,74,-78,32,-36,56,-38,127,59,-56,23,-9,86,40,-24,-62,-88,6,68,87,36,-17,83,77,-101,-19,73,109,25,105,42,-67,35,-84,69,-76,-91,85,121,-115,-35,-55,70,-22, 
  /* [22][0][][] */ 27,-62,-77,-102,89,-43,117,51,-102,83,-83,-94,120,-121,-121,-94,37,83,-109,-58,88,-78,27,36,89,-3,-122,120,-46,-76,-74,-117,44,57,30,6,-3,-21,-69,-121,-3,-19,-3,92,53,-127,89,-25,-71,-75,5,-12,-59,-101,-48,34,-16,-38,-12,-37,112,-76,-81,-125,-75,16,-117,-47,120,103,-31,-5,-78,7,61,-101,49,-60,68,90,110,-108,-74,-127,78,82,95,-36,-55,30,-51,63,23,26,-30,99, 
  /* [23][0][][] */ 56,-91,22,55,119,-100,7,-102,54,-82,86,95,22,-106,22,-40,110,-37,-98,98,92,-79,112,-28,-17,-11,85,41,91,40,70,-48,-45,39,20,31,119,-12,-96,4,-112,-2,10,-104,-74,-97,109,39,77,-101,-101,-58,98,-69,-47,89,-83,-28,123,54,-120,-75,-53,-16,29,35,-114,-116,73,-18,124,-75,-2,-36,-20,-86,51,-13,99,115,-56,-38,32,-115,96,6,116,-28,-89,40,127,-15,118,-56,-39,82, 
  /* [24][0][][] */ -80,-47,-100,-67,-89,-127,-70,-87,73,127,88,35,114,65,-39,-113,-81,45,20,-69,96,-81,-53,-35,61,-38,80,63,99,46,5,-61,-8,12,36,32,-48,-87,72,-26,-75,-100,110,7,23,-35,45,76,-92,-62,-31,15,77,62,70,-79,1,80,14,7,87,-7,38,97,-96,104,-46,-101,-116,58,-55,-29,-39,38,102,110,66,-73,-105,-82,-79,-94,-74,-117,5,67,-11,-99,23,-110,-2,-78,-26,25,-104,34, 
  /* [25][0][][] */ -91,-58,-75,-6,90,-50,-82,55,43,-116,-38,45,80,-5,-109,-20,-59,56,43,-99,67,96,-11,-37,13,-40,-105,50,98,-73,35,111,87,-115,64,69,105,-65,-10,-1,-87,94,-88,3,95,38,61,51,-108,114,-74,4,59,-25,-55,7,-7,52,-89,79,115,64,50,40,-3,78,-2,15,-68,8,-7,-117,41,-119,71,27,92,75,33,16,56,48,-45,78,-75,-48,-104,-90,-16,-35,127,17,-121,7,-19,-68, 
  /* [26][0][][] */ 64,-118,-27,-19,-95,-10,-11,-16,-119,-121,111,75,-73,-47,13,-23,116,31,-86,-58,18,71,99,12,49,74,7,38,10,16,-93,-2,-23,-58,-93,-93,-67,94,-47,114,-94,105,61,36,-68,81,-32,105,-22,37,4,108,3,-44,3,-98,91,78,51,21,9,-106,75,-15,127,-19,-60,63,-80,87,80,104,86,-89,-81,0,56,-113,-100,10,-29,81,89,-74,82,-1,-40,19,-81,120,7,23,-50,122,61,102, 
  /* [27][0][][] */ 7,4,-70,-112,-127,-80,-77,-21,42,101,35,-113,-30,56,83,-35,65,-22,73,-92,-104,8,-35,-29,-114,45,-119,-5,65,26,-39,-14,60,69,-99,-97,-99,-73,-123,90,-105,14,26,13,100,22,68,106,91,67,59,-84,-83,-96,-11,-41,116,-31,-124,-87,-65,-68,-41,53,38,-54,-122,108,48,7,-126,4,61,-60,-15,-96,46,-74,90,104,86,-32,119,-64,-83,-93,-39,29,-55,-9,-40,-58,56,15,88,56, 
  /* [28][0][][] */ 95,-5,95,46,-122,-65,-108,-83,-42,-113,62,89,-86,-89,3,107,101,120,-78,80,-31,24,-119,-82,-127,89,-92,-53,-83,-82,-3,-22,-115,16,82,77,18,-118,-46,30,111,44,-99,54,-119,-11,14,48,23,-68,-88,-40,-85,24,57,43,59,-16,87,54,-9,-48,-102,7,61,77,-25,85,-87,34,-116,-50,74,41,-1,-109,-119,-71,-97,49,-83,-98,115,-35,65,-123,69,-92,-114,-78,-40,-73,-43,63,-109,-63, 
  /* [29][0][][] */ 63,60,50,-44,-95,13,-127,19,111,-6,-87,-113,106,-103,-58,-39,-112,112,27,-71,-74,-33,57,0,-29,3,-38,-39,-111,-11,114,8,57,11,-81,-52,-21,110,-12,103,53,116,-39,78,0,109,-49,-37,22,-11,57,-99,70,-91,111,40,-87,67,-60,113,-123,85,-101,-46,-66,-62,55,99,93,-79,35,-72,110,72,55,25,114,-64,-33,42,-8,-93,-17,-65,63,125,49,81,-45,99,63,83,-111,12,-5,66, 
  /* [30][0][][] */ 19,-75,-71,29,-101,17,-74,-22,109,-24,-10,-44,-102,12,51,11,-13,28,94,-111,34,-111,-123,5,-120,16,-78,116,-19,-112,-102,-2,-87,-80,-127,-63,7,-26,-12,17,82,-86,-21,92,98,-53,96,53,-79,75,17,-113,96,-62,-19,96,-83,-57,-84,-60,-112,-11,-83,-29,-118,-97,-105,85,-69,105,48,-42,-91,100,32,-95,-62,-81,-85,-68,22,26,-114,-27,-117,21,-117,102,-46,-127,74,50,-40,-11,0,-79, 
  /* [31][0][][] */ 96,-88,39,115,58,49,-55,-93,-20,-13,-73,-106,107,-117,-43,125,-71,-83,39,38,75,44,-25,113,55,-127,48,31,-90,-88,59,123,29,32,-91,1,97,-23,-67,-104,71,-61,-25,39,13,-46,-31,25,83,11,105,-25,-125,-49,-88,28,-113,82,-9,125,-32,-18,84,-67,74,125,-40,-69,62,-117,-120,20,-91,-39,6,12,-74,-43,60,105,-70,-36,59,86,66,109,-89,28,24,-45,-104,-47,14,103,0,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017592356307432055, 0.0017749493708834052, 0.001684859860688448, 0.0019140839576721191, 0.0017446887213736773, 0.0017802382353693247, 0.0017336423043161631, 0.0017988447798416018, 0.0017937616212293506, 0.0018023346783593297, 0.0018481400329619646, 0.0017090089386329055, 0.001774150412529707, 0.0018842146964743733, 0.0019103288650512695, 0.0017890285234898329, 0.0017622763989493251, 0.00176871323492378, 0.0018445249879732728, 0.0018095324048772454, 0.0018238389166072011, 0.0018551587127149105, 0.0017728618113324046, 0.0017824150854721665, 0.0017829184653237462, 0.0018253324087709188, 0.0017906056018546224, 0.001710758195258677, 0.0016768843634054065, 0.0017729023238644004, 0.0017864381661638618, 0.001766880857758224, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1618, 3659, 5824, 2344, -3411, -4198, 17447, 1504, 2567, -1297, 8171, -102, -7048, 1635, 15559, 6404, 14130, 4842, -4393, -5319, 4406, 30135, 20552, 18000, 1017, 1062, 3548, 2722, 1836, -4389, 5848, -1755, -315, 4419, 119, 1046, 9961, 4630, -1329, 4072, 8534, 4241, 5477, 9358, 3313, 3852, 1765, 5428, 4687, -5080, -6341, 531, -308, -1168, 2040, 20, 201, -860, -2766, 9879, -767, 1131, -970, -1745, -2714, 5566, 20819, 1536, -1875, 917, 1570, 1714, 1444, -985, 653, 10808, -430, 17397, 14134, -927, 6343, 1595, -458, 1152, 11043, 5918, 4649, 1097, 4831, 3938, -330, -5166, 574, -1647, -1631, -1922, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00038061203667894006, 0.00043038272997364402, 0.00040995707968249917, 0.00036615494173020124, 0.00030225090449675918, 0.00035497694625519216, 0.00018943702161777765, 0.00047075541806407273, 0.00023682053142692894, 0.00050288916099816561, 0.00024323865363840014, 0.00033860933035612106, 0.00036324697430245578, 0.0017229784280061722, 0.00019833132682833821, 0.00018196900782641023, 0.00013214767386671156, 0.00029931656899861991, 0.00045144671457819641, 0.00032045162515714765, 0.00014232800458557904, 9.0026587713509798e-05, 0.00014906444994267076, 9.3629794719163328e-05, 0.00018348710727877915, 0.00045982227311469615, 0.00084704277105629444, 0.00039696958265267313, 0.00030115459230728447, 0.00045246069203130901, 0.00025157461641356349, 0.00043915671994909644, 0.00020212931849528104, 0.00026224862085655332, 0.00030512703233398497, 0.0002425672864774242, 0.00019351557421032339, 0.00023246051569003612, 0.00046600442146882415, 0.00042995312833227217, 0.00015090058150235564, 0.00060774327721446753, 0.00027510884683579206, 0.00024834234500303864, 0.00058352691121399403, 0.00026080035604536533, 0.00028776942053809762, 0.0004001176857855171, 0.00028756484971381724, 0.00026145740412175655, 0.00024898553965613246, 0.0002030062023550272, 0.0004987040301784873, 0.00025672130868770182, 0.00037616229383274913, 0.0003342627314850688, 0.00043029343942180276, 0.00029959451057948172, 0.00055146153317764401, 0.00018759586964733899, 0.00096275948453694582, 0.00054536614334210753, 0.00028345134342089295, 0.00044670110219158232, 0.00068522203946486115, 0.00034381277509965003, 0.00010359052248531953, 0.00026108857127837837, 0.00062051950953900814, 0.0003554702561814338, 0.00027909729396924376, 0.00029477113275788724, 0.00093397579621523619, 0.00041761962347663939, 0.00030039090779609978, 0.00019997653726022691, 0.00032321148319169879, 0.00010889599798247218, 0.0001290249201701954, 0.00020901148673146963, 0.00022851064568385482, 0.00022339793213177472, 0.00019542411610018462, 0.00022000925673637539, 0.00016561978554818779, 0.00040348569746129215, 0.0005061039119027555, 0.00028237942024134099, 0.00014544984151143581, 0.00051877181977033615, 0.00030348918517120183, 0.00038013045559637249, 0.00039615551941096783, 0.00063091318588703871, 0.00039190248935483396, 0.00020391707948874682, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -34,87,-9,-127,-50,-25,-29,-58,-18,25,0,67,23,-58,-4,54, 
  /* [1][0][][] */ -30,28,-58,-1,-31,-35,21,-80,61,58,-53,20,1,7,36,-127, 
  /* [2][0][][] */ -7,2,-42,25,30,28,-55,-63,127,-13,7,-2,-12,83,-57,33, 
  /* [3][0][][] */ 48,-61,0,-112,-1,-35,-10,1,104,-1,76,49,-3,48,28,127, 
  /* [4][0][][] */ -83,48,20,36,12,-21,-5,42,2,3,19,-30,-127,-11,-21,31, 
  /* [5][0][][] */ -5,65,116,3,30,87,-71,74,-47,68,-20,-39,37,-50,-127,25, 
  /* [6][0][][] */ 43,-43,127,-117,40,-4,-55,103,-87,-93,53,-27,-6,91,-23,72, 
  /* [7][0][][] */ 26,107,-35,-63,84,19,8,-54,127,102,-20,11,29,-26,66,52, 
  /* [8][0][][] */ 7,-89,5,-94,19,-53,12,-78,22,71,72,-10,21,127,86,68, 
  /* [9][0][][] */ 13,-38,1,127,47,-12,35,-57,-68,113,34,-27,-6,-60,-12,-1, 
  /* [10][0][][] */ 0,29,-40,-127,16,-7,-15,41,36,-47,24,-21,-22,-40,-7,21, 
  /* [11][0][][] */ -1,7,12,-27,72,-38,94,-67,-81,26,8,35,4,127,-57,-30, 
  /* [12][0][][] */ 68,-14,-113,-7,24,-71,22,29,19,63,-65,-39,-39,127,-2,24, 
  /* [13][0][][] */ -15,10,-25,13,3,-127,-4,19,2,-8,6,2,10,-13,9,7, 
  /* [14][0][][] */ 16,-33,92,-39,59,18,-127,-103,-19,-50,18,13,7,-71,-15,-28, 
  /* [15][0][][] */ -88,14,-26,-41,4,-1,127,50,-41,32,65,-20,12,75,68,-4, 
  /* [16][0][][] */ -4,79,127,108,-7,31,112,76,-95,10,-91,-14,20,3,21,-106, 
  /* [17][0][][] */ -47,-120,-19,28,-80,-20,-65,14,-127,-26,22,-49,-2,41,67,-34, 
  /* [18][0][][] */ 1,42,9,65,50,5,23,1,74,36,-35,-30,16,127,49,29, 
  /* [19][0][][] */ -2,-28,31,8,96,25,-88,-66,-90,-81,-32,-127,-35,-45,4,-25, 
  /* [20][0][][] */ 96,-51,-74,-44,18,-126,23,17,-45,30,-127,-24,39,-2,34,0, 
  /* [21][0][][] */ 66,-38,68,-29,-29,10,-8,102,-2,-116,93,27,6,127,62,104, 
  /* [22][0][][] */ -28,41,-50,127,-67,3,87,69,-16,52,-7,51,-1,9,39,9, 
  /* [23][0][][] */ 53,-13,103,-106,56,-1,1,51,32,12,13,-34,9,-21,-127,43, 
  /* [24][0][][] */ -127,45,15,-14,7,107,30,-18,-3,16,100,-5,-84,21,57,-33, 
  /* [25][0][][] */ 28,27,11,18,8,7,61,-53,-8,-127,-12,-15,-12,-33,14,22, 
  /* [26][0][][] */ -39,-4,-1,10,-46,-10,-35,-33,-103,-40,2,-40,12,127,-38,53, 
  /* [27][0][][] */ -7,30,6,69,39,-26,-16,-32,54,4,-27,0,4,127,-7,9, 
  /* [28][0][][] */ 19,66,45,52,127,-7,40,29,-96,-28,-59,-40,28,85,56,-33, 
  /* [29][0][][] */ -4,1,10,20,32,-4,10,42,-23,-8,-18,-127,-6,-12,-22,5, 
  /* [30][0][][] */ -25,79,-53,70,-43,-15,38,-127,-45,65,-14,-1,53,33,80,91, 
  /* [31][0][][] */ -30,-21,-5,-59,1,-7,-46,-103,24,65,-16,-127,-28,-40,-2,15, 
  /* [32][0][][] */ -127,-76,-6,66,59,34,-19,11,-2,-44,-111,52,74,5,60,68, 
  /* [33][0][][] */ -17,-33,-47,-13,-97,-10,-88,3,59,25,11,-42,26,-119,127,27, 
  /* [34][0][][] */ 54,-6,70,28,49,19,-47,82,-81,-54,67,19,15,-8,-20,127, 
  /* [35][0][][] */ -50,53,-79,16,-6,-16,34,-126,86,91,-92,-2,9,-11,81,-127, 
  /* [36][0][][] */ -23,46,27,119,54,11,127,34,-23,27,-36,-21,-9,33,-84,-44, 
  /* [37][0][][] */ -3,-3,3,-82,-9,-3,-41,-41,-84,-1,6,-2,-1,-127,71,-31, 
  /* [38][0][][] */ 45,98,-15,-49,127,-8,24,-39,115,81,-16,1,12,-29,51,9, 
  /* [39][0][][] */ -28,59,-8,-127,-19,9,-47,40,49,-64,-19,-16,9,78,43,34, 
  /* [40][0][][] */ -7,-40,28,-105,4,-9,3,-51,-122,-9,-14,-38,3,-127,86,-60, 
  /* [41][0][][] */ -5,-12,-42,-21,-1,-34,12,-4,-35,22,-43,-3,-127,13,29,35, 
  /* [42][0][][] */ 127,85,-41,-27,-84,-49,-13,-61,9,19,89,-61,-66,47,116,-110, 
  /* [43][0][][] */ -23,95,-83,-14,49,-7,107,-43,53,105,-30,-18,36,-127,-64,-37, 
  /* [44][0][][] */ -22,-14,13,-32,59,3,-80,-127,-11,-18,10,-1,-2,-35,60,-62, 
  /* [45][0][][] */ -21,33,-127,-44,14,-55,15,-60,7,43,16,-63,21,-21,54,-8, 
  /* [46][0][][] */ 4,-6,-21,-92,-17,16,23,-31,-112,-19,14,10,-11,-127,66,-26, 
  /* [47][0][][] */ 23,48,27,-12,127,-15,-23,18,-50,35,-2,18,4,4,107,-30, 
  /* [48][0][][] */ -127,-73,-18,40,67,10,6,-16,-6,-14,-111,47,62,13,77,48, 
  /* [49][0][][] */ 18,18,103,85,119,-7,39,36,-127,-42,-33,-72,8,127,14,-64, 
  /* [50][0][][] */ 26,-23,-97,-20,21,-127,-45,-9,-24,-17,5,-36,39,-15,-1,20, 
  /* [51][0][][] */ 3,35,42,10,36,10,6,21,-127,57,8,-124,15,-122,-22,87, 
  /* [52][0][][] */ 3,51,1,55,41,7,29,29,70,81,-20,-60,38,127,69,20, 
  /* [53][0][][] */ -14,-45,-25,-19,-87,-5,-74,-4,45,19,10,-60,26,-127,117,14, 
  /* [54][0][][] */ 49,-20,-55,1,122,94,-127,-52,-89,4,-30,-79,-1,-54,-10,-32, 
  /* [55][0][][] */ 44,-13,8,-1,43,-37,-65,-127,-29,-75,-58,5,-6,-27,12,-1, 
  /* [56][0][][] */ -16,18,27,-18,-4,-26,-91,72,-7,127,-4,-11,25,8,-7,5, 
  /* [57][0][][] */ -3,17,-53,-28,-60,-49,120,87,-33,34,-11,1,27,19,127,-4, 
  /* [58][0][][] */ 43,16,-127,30,82,99,-27,42,-96,-43,-5,4,-29,19,4,-25, 
  /* [59][0][][] */ -104,65,108,18,-72,-59,127,119,23,4,25,-21,19,8,71,3, 
  /* [60][0][][] */ 9,-4,-47,5,25,-127,-19,-1,-5,-22,-9,-27,26,-16,-3,3, 
  /* [61][0][][] */ 17,-7,27,127,75,26,24,12,-90,6,17,42,-17,24,30,-50, 
  /* [62][0][][] */ -56,127,14,-50,-32,-2,-64,54,-16,-67,-82,-60,-5,-98,-53,-35, 
  /* [63][0][][] */ -44,30,-25,127,-82,9,-76,-29,-61,-21,-19,-35,21,69,37,42, 
  /* [64][0][][] */ 5,-2,-1,37,0,10,-10,58,28,1,-12,-46,-9,-127,53,0, 
  /* [65][0][][] */ -26,-45,3,-127,36,-29,58,-31,0,54,9,-119,-10,4,20,-39, 
  /* [66][0][][] */ 36,-28,61,-33,0,6,15,101,17,-85,54,26,0,127,29,90, 
  /* [67][0][][] */ -6,47,-21,-127,-16,4,-53,32,81,-84,-26,-11,31,75,72,40, 
  /* [68][0][][] */ -39,33,127,11,16,14,-2,-1,-34,-21,-14,-39,11,-21,84,-29, 
  /* [69][0][][] */ 127,77,-28,-8,-102,-27,-21,-45,17,18,99,-67,-70,60,82,-95, 
  /* [70][0][][] */ 41,9,-64,-14,-35,27,58,127,-38,94,-40,11,16,58,-22,19, 
  /* [71][0][][] */ 9,-1,-6,14,6,-82,6,19,-34,13,-84,4,-127,-6,41,45, 
  /* [72][0][][] */ 13,17,-127,7,5,16,22,91,-38,-16,15,-17,19,17,2,12, 
  /* [73][0][][] */ -52,17,38,0,44,-31,-72,-127,23,-67,37,-22,16,-48,40,-11, 
  /* [74][0][][] */ 6,33,48,127,28,-10,-95,92,-77,17,-48,37,17,-119,29,-85, 
  /* [75][0][][] */ -21,24,-60,6,8,-2,22,-22,127,38,-10,0,9,118,-35,5, 
  /* [76][0][][] */ 4,-11,2,22,7,-16,-15,66,14,-31,-24,-127,-9,-4,5,9, 
  /* [77][0][][] */ -20,28,-20,127,-54,28,87,99,10,55,-20,32,-11,-25,-14,-16, 
  /* [78][0][][] */ 16,12,39,-107,60,-43,-45,47,11,-43,11,-29,21,127,12,35, 
  /* [79][0][][] */ -15,-86,-76,-53,-81,-9,25,-77,127,23,23,63,13,39,43,-56, 
  /* [80][0][][] */ -37,4,127,-85,20,-40,7,-84,-53,63,-34,-107,23,112,66,-39, 
  /* [81][0][][] */ -45,44,-127,31,77,-124,-11,54,-4,-51,61,-4,30,1,8,-7, 
  /* [82][0][][] */ 127,-15,-10,13,12,-117,-17,16,-19,-13,-108,-7,110,4,-1,32, 
  /* [83][0][][] */ -41,67,-103,-81,-26,-9,37,-109,69,59,-45,-127,15,48,41,104, 
  /* [84][0][][] */ -33,40,80,-27,13,-39,76,-127,-40,41,-20,-69,27,54,63,-16, 
  /* [85][0][][] */ -91,123,21,-127,-81,-26,-23,-7,-51,-3,-68,20,10,-14,-91,-23, 
  /* [86][0][][] */ -9,1,-31,-5,-36,-35,127,29,4,-22,7,10,10,36,92,-12, 
  /* [87][0][][] */ -24,-39,3,-113,6,-28,44,-12,-2,22,-10,-127,-14,1,5,-34, 
  /* [88][0][][] */ 93,-39,33,-23,14,-118,0,27,-68,52,-127,-60,56,25,93,15, 
  /* [89][0][][] */ 22,-16,-50,-59,20,-14,-26,-13,-55,18,33,-62,127,-12,35,-50, 
  /* [90][0][][] */ -6,-60,40,-67,74,4,-63,88,69,-92,-42,-31,-10,122,18,-127, 
  /* [91][0][][] */ -38,-13,-23,-45,8,-10,-24,-89,16,58,-6,-127,-24,-11,5,16, 
  /* [92][0][][] */ -25,18,37,14,1,-127,16,-1,1,-28,-2,-17,6,-28,24,4, 
  /* [93][0][][] */ 44,-18,127,-10,-50,52,30,-32,-23,18,-73,-17,-23,-3,31,0, 
  /* [94][0][][] */ 31,4,-11,-18,30,-6,-11,-3,-30,-24,10,-62,127,-16,28,-36, 
  /* [95][0][][] */ 127,89,2,36,-84,-19,-62,-3,-26,-24,76,-35,-37,27,70,-77, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00086206267587840557, 0.00097479025134816766, 0.0009285273845307529, 0.00082931824726983905, 0.00068457960151135921, 0.00080400076694786549, 0.0004290631040930748, 0.0010662318672984838, 0.00053638382814824581, 0.0011390127474442124, 0.00055092049296945333, 0.0007669291808269918, 0.00082273187581449747, 0.0039024394936859608, 0.00044920816435478628, 0.0004121485399082303, 0.00029930629534646869, 0.00067793350899592042, 0.0010224988218396902, 0.00072580308187752962, 0.00032236409606412053, 0.00020390463760122657, 0.00033762175007723272, 0.00021206568635534495, 0.00041558692464604974, 0.0010414689313620329, 0.0019184993579983711, 0.00089911150280386209, 0.00068209652090445161, 0.001024795463308692, 0.00056980090448632836, 0.00099466275423765182, 0.00045781038352288306, 0.00059397687437012792, 0.00069109379546716809, 0.00054939987603574991, 0.0004383007762953639, 0.00052650866564363241, 0.001055471133440733, 0.00097381719388067722, 0.00034178048372268677, 0.0013765009352937341, 0.00062310451176017523, 0.00056248001055791974, 0.001321652322076261, 0.00059069663984701037, 0.0006517798756249249, 0.00090624176664277911, 0.00065131660085171461, 0.000592184835113585, 0.000563936831895262, 0.00045979645801708102, 0.0011295337462797761, 0.00058145786169916391, 0.00085198431042954326, 0.00075708440272137523, 0.00097458797972649336, 0.00067856302484869957, 0.0012490261578932405, 0.00042489301995374262, 0.0021805905271321535, 0.0012352205812931061, 0.00064199970802292228, 0.0010117503115907311, 0.0015519855078309774, 0.00077871460234746337, 0.00023462611716240644, 0.00059134943876415491, 0.0014054382918402553, 0.00080511812120676041, 0.00063213810790330172, 0.00066763832001015544, 0.0021153972484171391, 0.00094588258070871234, 0.0006803667638450861, 0.00045293447328731418, 0.00073205400258302689, 0.0002466426813043654, 0.00029223345336504281, 0.00047339807497337461, 0.00051756243919953704, 0.00050598249072209001, 0.00044262351002544165, 0.00049830734496936202, 0.00037511854316107929, 0.00091387011343613267, 0.0011462939437478781, 0.00063957186648622155, 0.00032943487167358398, 0.0011749860132113099, 0.00068738422123715281, 0.00086097192252054811, 0.0008972677169367671, 0.0014289793325588107, 0.00088763487292453647, 0.0004618595412466675, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9864, 17262, -22394, -6701, -12550, 8886, 27572, -55758, 251, 18257, 21605, 14858, -6290, 13500, -2894, 11780, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00071360025322064757, 0.00038576108636334538, 0.00022371429076883942, 0.00022865628125146031, 0.00038544138078577816, 0.00031701623811386526, 0.00035199278499931097, 0.00026243965839967132, 0.00035281913005746901, 0.0002528285258449614, 0.00061342748813331127, 0.00061408767942339182, 0.00041479920037090778, 0.00025959816412068903, 0.00045192326069809496, 0.00045253956341184676, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -14,-15,6,-28,16,-8,-35,-2,20,0,-13,1,-4,-12,-22,9,-1,7,-1,1,13,-34,5,9,2,12,7,127,29,-34,40,-14,-5,4,10,2,-7,9,-36,-7,-9,10,-4,37,8,16,13,9,19,-1,-6,11,14,-15,-14,81,6,12,-31,-31,-8,27,-3,-25,-43,-62,-19,40,3,13,21,-12,-4,-29,-8,-23,-22,20,5,4,-9,-29,27,21,-5,-13,-4,-96,6,-18,8,-7,48,-30,-32,-9, 
  /* [1][0][][] */ 40,-76,-86,-54,127,-15,67,31,-18,-97,-60,-15,9,-12,-60,45,-65,9,52,50,20,39,-19,-54,11,-2,-7,-83,30,-30,-57,33,-29,28,-1,-7,10,-13,7,13,-24,41,-48,-22,-47,102,12,13,20,-79,18,-47,-24,45,49,14,-54,-19,-39,-32,16,-19,-4,-40,-93,114,-30,-18,-12,-22,-17,21,61,-104,-30,-2,39,-48,51,7,-1,-31,30,0,-59,30,-17,21,21,-46,4,5,27,18,36,92, 
  /* [2][0][][] */ 8,57,-80,-20,102,87,42,88,-13,-102,6,-12,2,-8,33,34,1,-24,-46,74,14,-12,88,29,47,29,-15,-48,35,4,39,-72,33,38,-17,44,-127,-81,25,34,-10,-37,16,-12,18,-43,-6,60,-18,26,-28,0,87,-9,-18,62,42,5,28,14,29,35,29,-25,33,-9,-30,9,-46,-6,-7,-36,-39,-79,11,65,82,52,35,-15,23,-52,15,-12,-46,29,19,54,-10,24,-4,-28,12,-43,-61,10, 
  /* [3][0][][] */ 58,23,99,-16,55,-25,28,2,-25,-62,15,-34,-7,40,38,98,14,-8,21,-3,127,-20,42,17,44,-25,-19,23,39,43,-17,70,-90,21,31,4,-14,-11,-10,45,-91,-25,77,28,27,29,-36,-94,-48,-23,-54,52,-5,-110,6,30,-101,68,56,30,20,107,-9,-50,43,56,-8,-49,26,-32,3,-66,44,-43,45,-22,3,-14,34,40,-23,-71,21,-16,-16,24,25,50,23,17,5,40,47,84,46,-24, 
  /* [4][0][][] */ 30,2,32,-16,127,37,4,-18,-48,-44,-34,-31,-44,17,-11,66,28,-84,-47,89,-29,7,38,-13,6,-9,9,-47,17,-16,60,-48,86,18,-27,9,54,26,15,7,-32,-7,-20,-19,-8,-58,-20,-1,45,20,-27,19,-2,-40,3,-22,36,-18,-30,29,6,67,61,29,54,42,-14,2,-42,-8,40,65,20,-73,-40,-26,30,27,75,-37,-16,-45,5,-4,-70,19,41,62,-54,32,6,-39,23,13,23,-12, 
  /* [5][0][][] */ 5,-9,-18,8,26,-16,36,-21,-15,-40,-11,10,-5,31,-1,11,-2,0,10,-9,35,14,-42,62,7,-5,11,-92,1,31,12,31,-6,5,8,-56,30,26,-4,13,-4,-10,28,-22,-4,-4,7,-25,-15,-13,7,-12,-8,-28,-3,-54,-8,20,-24,12,71,12,5,33,0,59,5,70,6,96,13,25,6,7,-11,70,-31,-14,13,14,-4,-7,-2,21,-7,18,-13,127,2,30,-7,-10,4,11,-60,21, 
  /* [6][0][][] */ 21,-71,13,-28,-35,7,28,24,11,-8,-17,-72,-39,2,-23,24,20,-3,-4,-10,-36,41,7,5,-28,-3,-16,-6,-16,16,42,-10,53,6,65,2,-9,-17,18,-86,-14,90,5,-37,19,-17,-13,23,-10,37,-28,62,-23,-52,-14,-13,-1,-54,-14,4,-9,52,31,-79,26,-24,8,-25,-10,6,127,-1,-43,5,-36,20,-85,-13,12,7,35,40,18,-5,-18,-6,42,24,12,11,42,-40,-20,-2,-33,-18, 
  /* [7][0][][] */ 2,125,48,6,127,45,54,-24,-32,-26,34,-12,-31,30,17,25,12,-37,11,24,43,-39,45,12,-7,8,6,11,26,-10,2,30,39,-2,-37,16,18,14,-8,84,-57,27,24,31,-7,-35,33,-26,-21,-19,25,17,19,-44,-33,54,43,-1,-16,-6,-8,-34,-6,-1,-48,67,-33,-84,-4,-38,1,70,-20,-32,9,11,52,54,33,-18,-41,-46,-8,-3,-10,50,-9,4,-21,34,-44,-33,-40,-24,29,5, 
  /* [8][0][][] */ -7,0,45,19,-127,-26,41,-9,35,79,57,11,-19,20,28,3,-45,16,8,-5,-40,-1,-113,63,10,-33,54,-9,8,19,0,58,68,-17,7,-3,-26,-18,9,39,19,-31,37,5,-33,1,39,0,-101,11,21,25,-56,-44,-31,39,9,-48,-81,-24,19,-36,-32,-8,5,75,2,-58,25,-9,-45,-26,33,47,50,-12,-23,-39,-19,23,-83,11,-20,-3,28,18,66,43,35,-34,41,49,-4,-3,35,19, 
  /* [9][0][][] */ 15,-109,-29,19,99,78,-38,-34,24,-31,89,90,-22,18,87,-106,14,-35,-4,22,-61,-36,33,-9,-20,8,6,23,-24,2,5,-14,21,26,-113,26,-4,15,-17,67,29,-85,-24,56,-7,-17,-81,-36,19,13,-17,-97,70,23,-12,-44,-6,82,-9,-2,9,-58,-34,127,-96,-19,-11,-23,3,35,-63,-76,44,-2,5,31,61,-71,30,9,-14,-22,7,29,-9,-64,16,-18,-3,-36,-60,39,-76,-14,-8,-54, 
  /* [10][0][][] */ -40,-15,-25,-47,-21,-5,65,-20,34,20,26,31,27,-6,-6,0,-8,22,-25,-18,1,31,19,18,-10,-9,9,-127,31,-44,50,-37,5,20,-4,-8,-5,33,-1,-1,6,-31,25,-49,11,-9,28,12,-6,34,-28,-13,-33,-24,-4,-52,16,11,-4,-42,26,15,-3,5,-36,83,-16,-27,16,-24,1,-15,-32,-7,20,59,-1,34,-18,17,-21,0,7,27,9,-21,-8,118,6,-6,9,11,26,-42,44,-32, 
  /* [11][0][][] */ -81,22,-1,-4,19,-53,-16,7,-46,-5,-5,15,23,26,-25,-9,45,4,-64,-55,19,-7,-9,-3,67,2,54,4,-13,32,-44,21,-5,23,-7,-4,-7,9,20,15,-23,-7,2,4,80,9,70,11,52,38,-9,37,13,-62,22,-4,-67,-17,-30,-46,-5,-11,-3,17,-4,-31,26,-2,25,7,-7,25,-27,7,20,2,-21,74,-127,62,-35,-6,-66,-65,124,21,38,-3,17,41,-35,-52,-24,38,-21,2, 
  /* [12][0][][] */ -13,-17,-48,6,63,19,-8,-24,-9,16,17,-11,5,-26,36,-17,-36,-11,16,-14,-6,-14,-45,42,-20,42,-25,99,-29,40,-36,11,-22,23,5,23,-24,-22,22,-2,6,-12,-13,-1,-13,0,16,31,-13,-15,-2,-40,-16,13,-11,-19,-13,-8,13,24,-25,-31,-6,52,30,-78,11,52,-36,-127,-14,60,9,16,13,89,1,-4,-2,-1,-3,17,-49,5,12,-16,0,-59,-6,10,17,2,-49,37,-14,15, 
  /* [13][0][][] */ -81,66,-4,-8,-60,3,-18,21,-37,-23,40,21,76,17,-27,-7,-17,29,-47,-14,11,-7,55,-58,59,32,-8,5,16,-33,-37,-93,-88,-27,1,12,-6,23,34,-10,-29,78,5,12,43,9,-17,-1,70,-11,27,72,72,-68,73,-20,-28,47,45,-2,15,27,-18,20,9,-29,6,1,16,16,16,-127,5,-30,-74,6,44,35,-52,-41,81,-19,-2,-20,43,-28,83,10,-13,-5,-23,28,36,-39,-22,14, 
  /* [14][0][][] */ -34,12,-24,-49,29,-7,-19,19,-84,-4,15,10,-30,-61,-81,-41,-85,-15,78,15,40,4,12,-111,-39,18,-48,-23,12,-24,-4,-27,-69,-31,16,10,-24,-8,6,-6,16,75,-81,-19,-59,23,7,21,127,-34,27,-19,33,56,-102,16,-24,32,-100,10,-2,20,39,26,-5,37,-6,0,-53,31,57,39,37,1,-22,27,53,-68,-21,-103,16,-33,4,44,26,-72,-49,2,-45,18,39,54,7,38,16,-22, 
  /* [15][0][][] */ -41,-72,-14,-40,4,10,-9,-57,-22,13,-5,-29,34,-7,42,-20,-90,-2,-22,9,-14,9,-69,-45,-7,0,-6,27,-16,-16,58,-82,-1,24,20,11,-9,23,-97,7,31,-73,3,25,-22,-48,55,29,52,17,-13,-127,0,43,2,35,31,-10,-16,37,4,-4,42,-9,-2,-9,-13,-12,-21,26,5,32,-43,1,-3,-30,-35,-13,3,12,0,43,-10,69,-11,-37,-37,-28,-40,60,26,82,-42,-6,-2,-14, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.030328011140227318, 0.016394846141338348, 0.0095078572630882263, 0.0097178919240832329, 0.016381258144974709, 0.013473189435899258, 0.01495969295501709, 0.011153684929013252, 0.01499481312930584, 0.010745212435722351, 0.026070667430758476, 0.026098726317286491, 0.017628965899348259, 0.011032922193408012, 0.019206738099455833, 0.019232930615544319, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 17680, 60019, -1111, -380, 14380, -4408, 540, 321, 5660, 7692, -3726, -591, 603, 5077, 5064, -8747, -3992, -317, -1122, 14757, -10955, 17064, -3195, 8969, 21706, -196, -6176, 17255, 14124, -19654, 1343, 22200, 24619, -10898, 2230, 525, -64, -964, 3904, -5636, -5869, -572, -7230, -83, 30971, -1231, 12758, -1761, -14246, 1150, 88, -693, -2211, 21984, -3145, 13463, 16121, -236, 33984, 384, -9571, -506, 1668, 108, -1994, 13485, -806, -5354, -3248, 2895, -164, -4606, 823, 253, -1173, -3303, -323, -1668, 37004, -7378, -5778, -11338, -550, 18, 59927, -13802, -9486, -26847, -7416, 10483, -2025, 36785, 21, -2063, -2703, 844, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013441662304103374, 9.4589493528474122e-05, 0.00011838107457151636, 0.00025238661328330636, 0.00024363446573261172, 0.00018083202303387225, 4.016775346826762e-05, 8.3317783719394356e-05, 0.00028086142265237868, 0.00031308940378949046, 0.00025031095719896257, 9.8362470453139395e-05, 0.00027997879078611732, 0.00021157131413929164, 0.00045709812548011541, 0.00013998161011841148, 0.00019815939594991505, 0.0002255801809951663, 0.00020511372713372111, 7.4785726610571146e-05, 6.8173641921021044e-05, 5.1726325182244182e-05, 0.00014097109669819474, 8.4020815847907215e-05, 8.613296813564375e-05, 9.5133560535032302e-05, 0.00016490132838953286, 0.00018104874470736831, 8.0787009210325778e-05, 0.00053212716011330485, 0.00039530970389023423, 0.00025915875448845327, 0.00011818896018667147, 0.00015215552411973476, 0.0002383770770393312, 0.00045479318941943347, 0.0003737143415492028, 0.00018439856648910791, 0.00024328842118848115, 0.00015499553410336375, 0.00022656514192931354, 0.0002599522122181952, 0.00035518617369234562, 9.4795039331074804e-05, 0.00039123161695897579, 0.00011953453940805048, 0.00011167538468725979, 0.00036308591370470822, 0.00075295928400009871, 0.00010838086018338799, 0.00042212000698782504, 0.00018613373686093837, 0.00023007110576145351, 0.00012446942855603993, 0.00026830253773368895, 0.00012608164979610592, 0.00017184011812787503, 0.00048002236871980131, 4.8943649744614959e-05, 0.00016119808424264193, 0.00027237387257628143, 0.00038979659439064562, 0.00011272167466813698, 0.00014623592142015696, 0.0001429905096301809, 0.00013611398753710091, 0.00034472713014110923, 0.00040689646266400814, 0.00019437348237261176, 0.0001364805648336187, 0.000289030751446262, 9.7754731541499496e-05, 0.00029647856717929244, 0.00012729018635582179, 0.00062244129367172718, 0.00054001447279006243, 0.00014193665992934257, 8.225336205214262e-05, 6.8733526859432459e-05, 0.00016875880828592926, 0.00022734180674888194, 0.00024405826115980744, 0.00015977740986272693, 0.00025786101468838751, 5.9346381021896377e-05, 0.00010634484351612628, 7.5777606980409473e-05, 0.00054972042562440038, 0.00025107734836637974, 0.0001420543558197096, 0.00038647642941214144, 2.8083371944376267e-05, 0.00016521896759513766, 0.00012981801410205662, 0.00033891352359205484, 0.00030501768924295902, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-71,-10,127,22,73,77,-60,-15,-17,-15,-5,-30,0,37,2,-10,-44,27,23,18,-127,127,6,-81,9,49,-28,-127,-127,39,24,12,27,61,-19,-31,-10,30,-9,-12,27,-107,71,25,-67,37,47,-17,52,-24,20,3,-6,16,48,-90,-49,-61,-20,-11,-1,10,37,68,-26,74,13,-8,15,20,127,24,23,26,-1,-10,16,127,-7,-14,14,-27,20,125,18,-76,-17,0,-32,-15,-40,2,-26,-15,25, 127,-127,75,106,-43,127,39,-119,69,5,-18,127,127,-98,-13,15,10,127,127,-111,127,-75,81,67,-127,-116,-66,-34,-55,47,-60,-20,-90,54,-127,-85,-43,-15,-54,61,0,127,127,81,-52,-112,-113,-50,-15,-127,42,86,65,-31,45,83,-46,42,-80,-114,-44,-41,-62,67,73,-62,27,29,-81,33,-17,90,116,127,14,18,2,57,-32,52,64,127,127,-23,-8,73,-112,127,-119,-101,5,-127,-89,-127,-38,106, -74,-12,29,-82,14,-27,67,-9,79,-34,-27,18,-20,-4,-9,-11,-10,-15,8,-4,-22,-102,29,-1,-122,97,8,-54,119,51,-15,9,0,15,15,-30,-9,33,19,11,25,13,-118,64,18,-17,36,14,-14,11,-17,5,-10,1,-2,21,-66,6,-33,51,2,40,33,-1,-7,-39,-31,23,9,2,-3,36,10,-26,-6,3,-12,-7,-84,2,-21,-24,-17,2,-109,8,-33,-23,-50,23,-25,-33,29,-26,-14,1, 
  /* [0][1][][] */ -65,-74,74,-35,-48,93,19,127,-52,-22,-1,-119,25,-116,78,31,-4,-61,-16,89,52,-72,47,48,-94,-12,127,-22,-24,65,123,-104,-127,89,-87,-57,-36,31,-29,96,-49,-25,-5,47,-48,127,-23,66,16,96,19,-1,15,-55,28,32,127,123,-72,-87,127,-33,-36,127,72,-39,-15,-1,127,39,127,97,-40,102,-6,11,14,12,-31,9,-43,123,-79,110,1,32,-55,30,79,-127,-31,-7,127,-69,-23,0, 66,124,56,-113,127,85,90,37,-127,127,127,-39,-66,-127,-127,127,127,-65,-122,-50,103,97,-123,127,-105,-91,-43,127,-127,110,-127,-127,-88,127,108,127,127,-127,-105,127,-66,-95,110,-127,-127,-35,-127,-127,127,-111,85,44,127,127,127,-127,100,-127,-127,127,20,-80,-127,-100,-127,127,-127,127,-125,-127,-106,-84,-127,-80,127,127,-127,127,-77,127,127,29,-41,-127,60,127,92,46,127,11,127,2,-67,36,127,-127, -54,-12,-50,38,-56,-100,37,-28,18,-33,-29,93,1,95,13,10,-5,64,-6,127,3,-84,-41,8,-74,104,-71,-20,-69,-16,17,-62,-71,39,5,-18,-29,44,-68,41,127,-4,-39,29,-40,-58,16,46,9,118,-11,7,-36,-72,3,19,94,2,1,21,-35,127,91,-52,-43,12,38,-10,-77,122,-18,-87,0,-55,-17,-21,27,15,76,-37,-70,-43,57,14,-47,-18,72,22,16,61,-43,21,-42,97,-26,-5, 
  /* [0][2][][] */ -67,2,-4,-21,13,-46,68,24,54,-29,-37,-2,18,18,-27,2,-8,65,7,1,-53,-83,2,-8,-26,-54,36,-68,91,39,26,26,15,-9,-11,-47,-7,35,-3,-1,-15,-5,-67,105,3,31,11,37,-15,-31,10,-20,21,-2,9,16,-69,25,-17,13,15,-1,-22,-5,0,-47,-46,15,-33,12,26,30,14,-20,28,3,17,4,-78,-13,-8,-7,16,14,-127,5,14,-44,-58,-51,-27,-48,10,57,-19,-9, 121,34,-127,-36,-71,-27,38,30,-65,-29,-20,-109,-78,114,-13,37,2,-52,-9,-125,93,-51,-38,1,-108,127,-51,21,-35,-21,-9,-4,-63,16,27,5,-23,-29,127,54,11,-13,68,-34,-39,76,-68,-43,-32,-6,-127,-127,-49,-27,1,40,-65,-6,11,38,-8,-20,8,-48,-54,33,63,-22,114,108,-23,-70,12,-58,4,3,99,3,51,22,12,-97,-49,2,3,9,127,40,-60,37,-18,-108,41,80,-10,25, -54,14,-19,25,15,-70,-127,1,-12,-7,-16,4,15,-25,18,-1,-9,-16,5,17,-47,-71,14,2,15,-96,21,3,-49,-39,-8,17,41,-20,-6,-26,-36,3,42,-42,23,-2,-49,-34,3,66,22,17,-9,-4,9,-8,18,5,-4,-5,-62,-13,3,-40,-12,9,83,-11,35,-2,-1,27,0,5,-3,19,-17,15,-1,14,36,0,74,-12,3,-8,-7,-17,74,0,43,-39,59,38,-16,-55,-7,3,-15,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0057127061299979687, 0.0040200534276664257, 0.0050311954692006111, 0.010726431384682655, 0.010354464873671532, 0.0076853609643876553, 0.0017071295296773314, 0.0035410057753324509, 0.0119366105645895, 0.013306299224495888, 0.010638215579092503, 0.0041804048232734203, 0.011899098753929138, 0.0089917806908488274, 0.019426669925451279, 0.0059492182917892933, 0.0084217740222811699, 0.0095871575176715851, 0.0087173329666256905, 0.0031783932354301214, 0.0028973796870559454, 0.002198368776589632, 0.0059912712313234806, 0.0035708846990019083, 0.0036606511566787958, 0.0040431763045489788, 0.0070083062164485455, 0.0076945717446506023, 0.0034334477968513966, 0.022615402936935425, 0.016800662502646446, 0.011014247313141823, 0.0050230305641889572, 0.0064666098915040493, 0.010131025686860085, 0.019328709691762924, 0.015882859006524086, 0.0078369388356804848, 0.010339757427573204, 0.0065873102284967899, 0.0096290186047554016, 0.0110479686409235, 0.01509541179984808, 0.0040287892334163189, 0.016627343371510506, 0.0050802179612219334, 0.0047462037764489651, 0.015431150794029236, 0.032000768929719925, 0.0046061864122748375, 0.017940100282430649, 0.0079106837511062622, 0.0097780218347907066, 0.0052899508737027645, 0.0114028574898839, 0.0053584701381623745, 0.0073032048530876637, 0.020400950685143471, 0.0020801050122827291, 0.0068509182892739773, 0.011575889773666859, 0.016566354781389236, 0.004790671169757843, 0.0062150266021490097, 0.0060770967975258827, 0.0057848440483212471, 0.014650902710855007, 0.01729309931397438, 0.0082608731463551521, 0.0058004241436719894, 0.012283806689083576, 0.004154575988650322, 0.012600339017808437, 0.0054098330438137054, 0.026453753933310509, 0.022950615733861923, 0.0060323076322674751, 0.0034957679454237223, 0.0029211747460067272, 0.0071722492575645447, 0.0096620265394449234, 0.01037247572094202, 0.0067905397154390812, 0.010959092527627945, 0.0025222210679203272, 0.0045196558348834515, 0.0032205483876168728, 0.023363117128610611, 0.01067078672349453, 0.0060373097658157349, 0.016425248235464096, 0.0011935433140024543, 0.0070218057371675968, 0.0055172652937471867, 0.01440382469445467, 0.012963251210749149, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1877, 7665, 16039, 40411, 17567, -3247, -2062, 5175, 38159, -4896, 11926, 5931, 8906, 14887, 41782, 1183, 2399, 10127, 15999, 6890, -347, 358, 14272, -1285, 4916, 55, 16385, 8365, 6145, 46496, 67418, 19651, 8756, -666, 10112, 2496, 1572, 3862, 23467, -1047, 12870, 9257, 53642, -3104, 25502, 8997, 7255, 15600, 55814, 10963, -494, 9490, -4361, -150, -2835, 6724, -641, 19474, 6039, 10019, 6035, 17991, 7703, 6604, 11082, 8818, 6268, -6615, 9715, -2512, 5089, 11227, 15980, 7052, -5909, -7346, 7702, 461, 2829, -1202, 15088, 15451, 5746, 17430, 3612, 265, 12384, 77516, 11334, 14734, 8673, -166, 6774, 9873, 5018, 14069, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00020993057114537805, 0.00019279512343928218, 0.00011749692203011364, 5.7518973335390911e-05, 0.00016869147657416761, 0.00030766267445869744, 0.00039667257806286216, 0.00031548450351692736, 6.1227459809742868e-05, 0.00028513450524769723, 0.00022557890042662621, 0.00015012135554570705, 0.00014316177112050354, 0.00015592563431710005, 5.7303426729049534e-05, 0.00046732151531614363, 0.00019816494022961706, 0.00012327556032687426, 0.00013755870168097317, 0.00017491891048848629, 0.00023504611453972757, 0.0006386622553691268, 0.00014009096776135266, 0.0005198050057515502, 0.00052876275731250644, 0.00023368719848804176, 0.00013678606774192303, 0.00016532992594875395, 0.00026424790848977864, 7.5443014793563634e-05, 4.2321818909840658e-05, 0.00012629029515665025, 0.00019178912043571472, 0.00030361776589415967, 0.00019714831432793289, 0.0002423744008410722, 0.00033235157025046647, 0.00037957826862111688, 0.00011574405652936548, 0.00054871308384463191, 0.00014602753799408674, 0.00016874521679710597, 5.0549588195281103e-05, 0.00033801179961301386, 0.00012781692203134298, 0.00016975328617263585, 0.00023826351389288902, 0.00017216333071701229, 7.3516654083505273e-05, 0.00019042134226765484, 0.0002241475012851879, 0.00017942141857929528, 0.00024098566791508347, 0.00022643068223260343, 0.00036003001150675118, 0.00016506890824530274, 0.00019298643746878952, 9.650942956795916e-05, 0.0003387041506357491, 0.00014881364768370986, 0.00026339810574427247, 7.6903445005882531e-05, 0.00019211525795981288, 0.00015116784197743982, 0.00022139957582112402, 0.00022040333715267479, 0.00020701995526906103, 0.00020209845388308167, 0.00017458968795835972, 0.00028038292657583952, 0.0002150762447854504, 0.00014158104022499174, 0.00012971277465112507, 0.00014708015078213066, 0.00026151051861234009, 0.00018570262182038277, 0.00021381842088885605, 0.00025158352218568325, 0.0002623127365950495, 0.00032254628604277968, 0.00013440797920338809, 0.00010672309144865721, 0.00015103080659173429, 0.00011112467473139986, 0.00031794147798791528, 0.00032919639488682151, 0.00018908608763013035, 4.9540904001332819e-05, 0.00012373292702250183, 0.00015512430400121957, 0.00014388667477760464, 0.00029347240342758596, 0.00021322633256204426, 0.00016215250070672482, 0.00022581269149668515, 0.00012187134416308254, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -10,54,-32,69,16,41,13,-21,35,33,-57,92,14,-127,51,-112, 
  /* [1][0][][] */ 17,46,-13,-17,19,-25,127,-91,6,88,-18,-6,10,-41,33,18, 
  /* [2][0][][] */ -127,41,-29,-15,7,-3,42,95,-29,59,102,-9,-59,19,29,-49, 
  /* [3][0][][] */ -75,73,56,54,-47,65,71,127,2,81,-114,-6,34,-85,-99,-68, 
  /* [4][0][][] */ 9,-6,30,67,-26,62,2,52,5,-21,0,-7,26,-7,-127,-22, 
  /* [5][0][][] */ -7,-33,49,-26,3,-23,2,20,-63,86,-24,-127,-11,17,-50,-19, 
  /* [6][0][][] */ 18,-4,36,-13,44,54,-67,-74,-10,-12,46,-12,127,-23,-14,-34, 
  /* [7][0][][] */ 24,7,127,-17,-18,-37,4,-8,-71,21,-74,-49,9,-3,29,-8, 
  /* [8][0][][] */ 28,38,75,75,-60,77,14,57,37,7,19,-82,-52,14,-127,-87, 
  /* [9][0][][] */ 40,-106,72,33,28,-39,-10,9,119,-11,81,2,-42,-3,-127,-41, 
  /* [10][0][][] */ -46,-77,17,-4,-77,21,-6,61,98,127,28,-18,-39,69,61,-19, 
  /* [11][0][][] */ 39,-10,-4,-103,7,-33,-98,-127,-57,51,-3,-22,36,-21,56,-62, 
  /* [12][0][][] */ -6,-1,18,-34,-25,-42,-101,-10,-40,-78,-26,7,15,127,77,48, 
  /* [13][0][][] */ -62,-126,-68,57,5,-75,23,-9,88,20,-27,-3,11,43,127,48, 
  /* [14][0][][] */ -9,-65,44,21,15,39,16,118,14,66,17,-48,6,37,-64,127, 
  /* [15][0][][] */ 17,-35,-3,52,10,-7,92,-5,7,-127,17,-35,9,-25,0,-28, 
  /* [16][0][][] */ 45,-73,-32,37,21,4,37,-68,127,49,85,11,6,108,58,105, 
  /* [17][0][][] */ -39,-44,39,127,86,41,18,-1,106,-32,0,-30,-7,59,-112,17, 
  /* [18][0][][] */ -13,28,-9,26,-113,-8,-8,43,-69,-16,-25,-39,7,-127,72,-1, 
  /* [19][0][][] */ 58,-69,32,-80,77,27,-100,72,75,-87,80,44,-6,43,54,127, 
  /* [20][0][][] */ 46,-23,68,-64,-10,4,-36,43,-21,-63,100,-20,4,10,-38,127, 
  /* [21][0][][] */ -57,-16,0,-49,19,15,-77,-58,-30,53,7,4,-127,-22,30,-10, 
  /* [22][0][][] */ 23,-30,23,-29,14,-62,7,-17,-127,22,-12,-42,-15,-14,78,-23, 
  /* [23][0][][] */ 20,9,21,-6,10,5,-15,-5,-14,-13,40,-11,127,-9,6,-41, 
  /* [24][0][][] */ -12,-2,12,-70,-26,-18,39,1,-48,-10,-10,-127,7,-92,45,13, 
  /* [25][0][][] */ -127,28,-65,-22,54,-43,-83,-127,-43,67,-19,-49,-87,-87,22,-46, 
  /* [26][0][][] */ 25,-23,49,-123,125,-42,2,-7,127,-56,50,-39,-10,106,8,94, 
  /* [27][0][][] */ 95,-28,27,-31,-27,-55,-6,-21,-30,16,-127,9,10,-16,-5,38, 
  /* [28][0][][] */ -127,-30,-106,-67,62,1,58,-42,-6,52,-74,-1,45,-14,-55,35, 
  /* [29][0][][] */ -68,-34,-7,127,-11,14,-6,-47,-12,2,-99,51,20,-87,32,-40, 
  /* [30][0][][] */ 50,-20,127,-30,49,53,-37,68,-44,-72,59,-51,-22,19,-84,81, 
  /* [31][0][][] */ 18,-84,5,-42,1,-52,19,-35,-15,35,103,20,-19,92,60,127, 
  /* [32][0][][] */ -11,64,-35,40,-127,25,-69,-36,-51,-27,-2,52,7,47,31,55, 
  /* [33][0][][] */ 34,-16,24,127,24,-4,20,-56,-107,42,66,-25,8,1,13,106, 
  /* [34][0][][] */ 23,3,15,-12,67,-38,-127,-20,-51,79,-30,8,-33,5,13,15, 
  /* [35][0][][] */ 64,10,-11,6,23,-127,-19,-5,-20,-2,-83,-9,68,25,-9,14, 
  /* [36][0][][] */ 20,-8,-127,1,36,17,-32,17,-31,-12,5,-10,7,9,-12,14, 
  /* [37][0][][] */ -7,-7,127,-4,-55,29,27,-54,-15,27,-55,14,24,-13,7,2, 
  /* [38][0][][] */ -127,43,-4,24,25,77,10,-26,9,-24,125,-22,-36,10,-13,-28, 
  /* [39][0][][] */ -15,-5,11,30,30,-17,-127,31,9,24,1,-37,-3,-25,-2,-5, 
  /* [40][0][][] */ 3,63,-22,127,5,38,33,19,-71,-46,-37,67,25,26,-63,-28, 
  /* [41][0][][] */ 24,15,-38,-17,-45,-6,127,85,-43,82,-37,-7,3,61,29,-14, 
  /* [42][0][][] */ 57,-64,-24,-45,39,21,-86,61,82,-124,127,40,3,29,-77,62, 
  /* [43][0][][] */ -90,9,22,-39,32,25,-76,-88,-28,53,-8,-13,-127,-16,41,-4, 
  /* [44][0][][] */ 1,2,-17,-7,-7,-11,4,-43,127,5,15,44,17,71,3,45, 
  /* [45][0][][] */ -61,-84,10,-93,29,0,-19,58,18,-60,-19,-14,38,110,-26,127, 
  /* [46][0][][] */ -51,14,-33,98,-89,-24,10,-83,-127,41,-55,-20,2,30,-2,-46, 
  /* [47][0][][] */ -16,-24,-90,127,7,48,-10,-16,17,39,65,68,-16,-9,34,-12, 
  /* [48][0][][] */ -19,1,19,-127,15,-29,-13,2,-54,19,26,-18,-19,53,86,46, 
  /* [49][0][][] */ -14,31,36,99,-22,45,-40,-28,8,-39,-98,-62,-29,-54,-79,-127, 
  /* [50][0][][] */ 0,67,18,-104,49,20,-21,59,127,-5,-43,18,10,-48,16,-36, 
  /* [51][0][][] */ 16,-35,27,-2,52,-8,-60,-127,19,-77,3,-7,-10,-5,-16,-9, 
  /* [52][0][][] */ 24,15,-11,46,39,-12,-66,116,-91,127,-45,-34,94,100,0,-37, 
  /* [53][0][][] */ -12,83,12,-99,-35,1,34,-19,-57,-47,-44,40,10,-127,-93,0, 
  /* [54][0][][] */ -3,8,16,30,47,-28,6,-29,-1,25,-11,-22,-6,127,-41,-14, 
  /* [55][0][][] */ -125,119,84,-28,40,12,-19,-12,-43,26,114,-17,-6,-35,127,-7, 
  /* [56][0][][] */ 50,8,27,-101,92,8,-11,39,52,-48,40,127,-25,19,82,48, 
  /* [57][0][][] */ -25,3,16,61,-25,15,34,127,-10,7,7,-25,2,52,8,23, 
  /* [58][0][][] */ 17,127,1,-121,4,39,-14,23,105,-4,-11,85,2,-81,40,70, 
  /* [59][0][][] */ 26,48,39,-117,-50,7,31,-14,11,25,37,-62,-5,-127,-58,25, 
  /* [60][0][][] */ 63,-10,127,-49,-43,125,31,-49,-15,33,-62,-15,32,3,34,-14, 
  /* [61][0][][] */ -28,23,-38,-40,-51,9,104,127,-23,76,-9,15,1,79,14,-34, 
  /* [62][0][][] */ 4,1,6,-3,-63,23,-57,1,-30,-16,-6,-58,5,-127,62,-4, 
  /* [63][0][][] */ 8,-29,-4,-91,40,-3,-120,-127,-63,103,-23,15,58,-7,38,-33, 
  /* [64][0][][] */ -23,-3,39,49,82,-8,-30,-127,29,-107,0,-50,-10,-23,-14,-1, 
  /* [65][0][][] */ -127,21,29,-54,17,78,48,-42,-66,36,46,-4,3,21,-15,-33, 
  /* [66][0][][] */ 50,3,81,24,-60,30,-14,69,-48,4,59,-89,-17,61,-127,-15, 
  /* [67][0][][] */ 30,-40,-46,63,53,-42,-72,-96,53,-127,-75,-41,-115,13,-90,29, 
  /* [68][0][][] */ 4,-32,-74,60,-55,-85,20,-43,-26,-12,48,-70,-34,74,127,-13, 
  /* [69][0][][] */ -23,40,-58,53,-5,-127,24,78,21,-1,55,-16,108,36,-16,11, 
  /* [70][0][][] */ 13,3,-30,-30,-36,8,127,94,-15,55,-22,3,11,43,9,-10, 
  /* [71][0][][] */ 10,-6,-30,-44,15,9,10,52,-29,-35,-15,3,12,-127,74,11, 
  /* [72][0][][] */ 27,43,-13,43,32,-46,-50,-127,14,58,-69,28,40,66,37,48, 
  /* [73][0][][] */ -41,-127,-26,-68,-79,-23,32,-36,-16,17,-34,-37,12,-55,63,-2, 
  /* [74][0][][] */ -33,38,66,95,-1,-2,-127,102,23,-33,-45,-41,-1,-3,-20,-6, 
  /* [75][0][][] */ -60,36,-45,8,-29,91,97,120,-9,53,0,-35,-127,73,16,25, 
  /* [76][0][][] */ 18,-12,-32,-15,39,-61,-127,-114,-14,-9,2,-2,34,0,72,-38, 
  /* [77][0][][] */ -30,14,-30,-21,-43,-9,-10,-49,127,-2,-62,18,-9,53,28,-91, 
  /* [78][0][][] */ -99,-127,-6,74,57,62,-42,20,-2,-83,-107,72,42,-32,86,70, 
  /* [79][0][][] */ 40,-4,37,-49,127,7,40,9,70,21,-1,25,-10,-29,10,-38, 
  /* [80][0][][] */ -24,-36,57,-119,-31,-36,16,7,-71,-27,-9,-66,7,127,-34,22, 
  /* [81][0][][] */ 29,-14,53,46,14,54,-21,-14,10,-7,-12,-36,-2,37,-127,17, 
  /* [82][0][][] */ -86,-13,20,-127,-13,-41,6,-36,-42,-28,-54,-106,-12,-109,-94,30, 
  /* [83][0][][] */ -6,26,-35,-76,-65,5,-2,36,-79,-4,10,-59,27,-127,8,55, 
  /* [84][0][][] */ 127,29,16,41,-50,3,-60,15,-6,-25,96,2,-64,11,88,-78, 
  /* [85][0][][] */ 3,-26,3,-46,30,-21,-47,92,-95,-127,-49,-45,-8,59,95,-107, 
  /* [86][0][][] */ 25,2,8,1,-51,55,-44,41,-98,-67,20,-19,-9,-127,-12,30, 
  /* [87][0][][] */ 127,-37,11,-12,-40,-38,2,-7,4,9,-101,15,45,-12,7,42, 
  /* [88][0][][] */ 33,78,-26,-3,-17,-32,-30,-23,91,6,39,44,-32,-42,127,-107, 
  /* [89][0][][] */ 41,69,-93,-22,-43,-14,36,-70,60,52,27,-29,-35,5,-16,-127, 
  /* [90][0][][] */ -20,-33,-8,-98,-88,12,127,-89,90,-89,19,-89,35,-35,-42,-7, 
  /* [91][0][][] */ 18,-8,-7,-103,-35,-13,19,-45,-58,8,60,40,15,-19,26,127, 
  /* [92][0][][] */ 23,4,14,20,66,-10,-80,-127,52,-59,1,-26,-42,-11,-11,-30, 
  /* [93][0][][] */ 63,14,30,-124,-48,-2,-26,65,46,-77,85,-15,-29,127,-18,16, 
  /* [94][0][][] */ -102,40,-93,21,70,-127,-11,12,6,-52,90,-35,-1,7,-23,-2, 
  /* [95][0][][] */ -21,73,26,-127,0,-9,-28,9,25,-40,-77,-65,2,38,-74,-10, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00071046745870262384, 0.00065247603924944997, 0.00039764452958479524, 0.00019466130470391363, 0.00057090213522315025, 0.001041222014464438, 0.001342457951977849, 0.0010676933452486992, 0.00020721193868666887, 0.00096497999038547277, 0.00076342606917023659, 0.00050805532373487949, 0.00048450203030370176, 0.00052769872127100825, 0.00019393183174543083, 0.0015815549995750189, 0.00067064911127090454, 0.00041720116860233247, 0.00046553954598493874, 0.00059197761584073305, 0.0007954659522511065, 0.0021614229772239923, 0.00047410951810888946, 0.0017591746291145682, 0.0017894904594868422, 0.00079086696496233344, 0.00046292474144138396, 0.00055952562252059579, 0.00089429348008707166, 0.00025532158906571567, 0.00014322962670121342, 0.00042740392382256687, 0.00064907141495496035, 0.0010275328531861305, 0.0006672085146419704, 0.00082026707241311669, 0.0011247765505686402, 0.0012846057070419192, 0.00039171229582279921, 0.0018570083193480968, 0.00049420061986893415, 0.00057108397595584393, 0.00017107483290601522, 0.0011439324589446187, 0.00043257046490907669, 0.00057449558516964316, 0.00080635456833988428, 0.00058265193365514278, 0.00024880221462808549, 0.00064444245072081685, 0.00075858179479837418, 0.0006072154501453042, 0.00081556715304031968, 0.00076630874536931515, 0.0012184486258774996, 0.00055864226305857301, 0.00065312348306179047, 0.00032661660225130618, 0.0011462755501270294, 0.00050362962065264583, 0.00089141749776899815, 0.00026026411796920002, 0.00065017514862120152, 0.0005115969106554985, 0.0007492820150218904, 0.00074591045267879963, 0.00070061709266155958, 0.00068396126152947545, 0.00059086340479552746, 0.0009488992509432137, 0.00072788196848705411, 0.00047915233881212771, 0.00043898657895624638, 0.00049776298692449927, 0.00088502932339906693, 0.0006284728879109025, 0.00072362512582913041, 0.0008514334331266582, 0.00088774430332705379, 0.0010915925959125161, 0.00045487657189369202, 0.00036118266871199012, 0.00051113317022100091, 0.00037607894046232104, 0.0010760085424408317, 0.0011140984715893865, 0.00063992355717346072, 0.00016766115732025355, 0.0004187490267213434, 0.00052498676814138889, 0.00048695530858822167, 0.0009931979002431035, 0.0007216213271021843, 0.00054877228103578091, 0.00076421728590503335, 0.00041244886233471334, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -4247, -893, -13073, 27918, 25138, 3720, -5335, -4597, 27106, 5320, 28099, 22514, -9099, 11678, 37741, -29111, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00045197203871794045, 0.00025515188463032246, 0.0002342067746212706, 0.00023636614787392318, 0.00032117016962729394, 0.00028937848401255906, 0.00033765652915462852, 0.00034312938805669546, 0.00018080831796396524, 0.00032206159085035324, 0.00035473168827593327, 0.00071771419607102871, 0.00039115583058446646, 0.00047173185157589614, 0.0003854194947052747, 0.00027686552493833005, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -3,11,-6,16,45,75,-31,-28,51,6,17,8,-5,9,20,73,2,-3,-4,-5,105,-54,9,-12,-28,-33,-45,-96,-9,-2,43,48,118,-2,-1,-3,15,-18,-19,10,-29,12,22,-39,7,-34,-15,29,-10,16,5,-5,-33,-11,3,-8,36,27,-19,-31,-62,33,-6,-13,18,13,53,-2,15,-2,3,-31,-67,-2,3,4,-10,-91,10,-15,41,-14,-56,-42,34,-9,11,23,-11,7,22,-31,17,23,-12,127, 
  /* [1][0][][] */ 73,-107,37,78,-8,-63,-21,-53,-27,-91,-4,30,13,-73,-28,-70,-96,-4,33,28,-34,-113,-36,29,127,-71,-72,23,-23,89,-9,43,4,15,-39,19,-38,-6,52,-19,2,-78,82,-43,-53,12,64,-15,44,26,5,-79,74,-76,42,-22,21,36,-17,-120,33,-64,18,-58,9,-93,38,46,35,53,-42,-7,-108,41,-24,75,46,92,25,-20,41,10,-80,40,-95,72,-6,72,-37,7,24,11,11,-42,42,-4, 
  /* [2][0][][] */ 34,8,19,-34,5,-5,-8,34,76,-20,18,67,6,17,45,15,-1,-8,8,-6,-14,-70,6,-55,-6,-10,-29,21,-7,15,127,-55,18,-71,-31,63,27,125,-39,-25,-2,-27,-6,33,-42,-51,-69,22,33,27,-30,-32,19,-6,-7,-31,-20,5,-10,32,13,4,80,88,10,-88,15,-70,-13,-21,-17,18,-12,16,-16,9,10,68,7,25,9,102,26,-17,-12,1,15,2,24,-2,-11,-49,-51,6,-7,74, 
  /* [3][0][][] */ -7,-24,-22,34,31,-25,0,-24,-7,10,4,2,1,-6,38,0,48,-27,25,5,-14,-15,-11,4,-17,17,9,-6,14,-41,54,-14,20,-12,-17,50,-1,-8,-10,6,10,-63,18,-34,-9,0,-2,5,-127,35,-10,21,-117,-59,-17,-41,27,4,-17,57,2,20,11,17,-15,-85,-32,24,53,19,-3,33,-35,14,-11,-44,-52,-43,24,-40,12,-13,16,65,43,53,42,14,25,-8,-14,5,-31,-4,-16,-25, 
  /* [4][0][][] */ -3,-40,16,-69,7,-9,-44,12,-25,-49,-24,-15,12,73,6,17,61,-7,1,4,-10,26,51,1,-2,5,17,7,7,-13,-4,-1,-31,15,-3,12,35,-24,1,-9,7,0,-101,-38,38,-3,-14,-10,4,83,-16,-14,-28,-17,6,-8,4,-28,26,39,11,10,7,-10,35,-122,21,-16,-53,21,-10,6,-8,16,-17,28,-20,73,56,9,16,12,127,-44,45,-27,-7,-11,74,10,-3,15,-32,24,-5,-41, 
  /* [5][0][][] */ -14,3,-1,0,-6,-11,1,108,56,-16,-17,-28,-14,29,37,29,-12,-14,-1,-40,-51,-19,-1,-54,13,5,27,77,69,12,64,54,-45,18,4,-5,-46,-59,-32,-21,-39,-16,-10,-2,60,16,11,20,9,1,-22,12,-32,-17,8,-7,-26,-23,-4,36,-45,22,-21,-39,6,21,-27,8,0,20,3,1,31,4,1,2,-8,30,9,123,-1,-47,28,31,6,-4,24,-31,1,-19,25,-127,-36,-25,-10,-121, 
  /* [6][0][][] */ -31,-10,-7,-52,0,-23,-11,12,-5,26,-21,0,30,-61,9,-16,-2,-72,34,10,2,0,-16,19,73,-12,3,2,14,-1,15,-8,-20,-3,-18,-1,30,1,19,36,-5,-34,-47,-27,-8,-23,31,-127,19,29,17,15,14,7,-4,-51,32,-14,-2,7,26,14,9,5,41,72,24,-21,-22,-7,13,-29,13,4,41,-2,-25,26,9,0,-12,-10,55,-33,-5,49,25,-18,23,11,-35,-12,-24,5,-8,10, 
  /* [7][0][][] */ 19,12,41,-21,-10,-1,-5,-21,-3,-16,-18,-17,-12,-88,20,10,-3,-28,-20,-12,9,-15,-36,-4,-18,-10,-2,-18,8,12,5,4,-9,4,-11,-14,8,-12,-26,21,8,-13,-19,34,-8,17,-18,73,-6,22,-15,-27,-30,1,-4,-51,40,-2,-5,5,1,6,-13,-5,-24,37,13,-31,-7,-10,6,43,-7,-6,-12,2,49,11,-7,-23,3,-36,40,1,-31,127,0,2,-37,-23,-5,22,-26,-4,-5,8, 
  /* [8][0][][] */ -76,54,-61,6,43,-7,-12,33,17,73,-52,15,14,43,70,-12,0,29,-91,14,15,31,-27,-2,-37,-30,26,14,49,-92,0,0,33,3,8,-4,-13,35,-44,44,13,9,12,-127,-47,-6,54,-24,-60,24,-2,73,-118,77,17,5,1,-23,-22,-19,3,-37,9,23,-38,41,34,-30,-2,1,27,89,-30,31,37,41,-10,-94,-8,-43,-12,-21,30,12,-66,11,15,-42,1,41,-25,1,39,-19,-19,-16, 
  /* [9][0][][] */ 28,-55,-34,-38,11,15,-25,12,20,-20,-2,9,-50,-25,3,17,-10,-1,41,-24,-28,2,-30,-42,34,3,22,-16,-26,-38,-14,-1,-11,14,26,36,-1,36,-34,15,8,17,-23,-85,9,-6,22,-127,-27,7,-5,20,-14,1,-18,6,-36,21,-14,13,10,8,8,31,18,102,34,46,7,-16,11,-18,-13,3,-29,2,65,-9,10,12,-18,-5,8,-43,-4,23,-12,5,-43,27,-39,5,3,7,6,-17, 
  /* [10][0][][] */ 29,39,-22,37,71,-114,-6,-24,4,47,25,-7,-8,24,11,-75,25,40,-25,36,-89,-16,-6,-33,-62,-27,-45,48,18,5,9,39,-5,-13,33,-10,82,-27,-10,-11,-18,63,47,-23,-53,-9,-33,6,-26,-19,-41,-3,-16,-16,10,-8,14,27,-21,-11,3,10,-17,22,4,42,51,35,24,-1,28,55,-56,-22,-59,-7,-2,29,-17,12,37,-11,-65,-33,68,-46,94,-6,-14,15,28,-17,75,37,-14,-127, 
  /* [11][0][][] */ 46,37,-26,25,-2,11,53,6,-3,-19,-25,-14,-3,5,28,8,1,-9,-96,-10,-1,9,6,-5,-38,-21,-8,-1,3,21,4,-3,-2,2,10,22,13,10,-6,16,5,28,55,-90,25,-36,3,-5,-127,11,8,-44,19,14,-11,11,-13,-15,3,7,16,-20,-10,10,-51,49,-17,13,19,-5,23,13,-52,-26,9,25,-7,-30,-52,3,9,-5,86,43,11,-10,-9,-6,4,19,-17,-4,-4,4,-21,16, 
  /* [12][0][][] */ -33,1,6,1,-28,37,14,3,127,8,-12,8,-1,0,-38,-39,19,22,5,67,57,33,-3,-22,3,6,12,-26,-98,8,26,-36,0,-8,-13,-17,15,5,39,-11,-41,-17,-4,16,1,23,11,-2,15,7,-40,11,11,2,4,-3,61,-21,13,16,13,-15,12,-8,-1,32,-37,-3,1,6,-18,-32,10,7,-62,3,27,-9,6,-63,-11,6,40,41,-18,-9,-23,-20,3,13,1,48,-12,-24,12,10, 
  /* [13][0][][] */ 31,-13,-25,32,29,-4,6,3,-9,0,7,-5,11,-8,9,-12,19,-73,-38,10,-12,-19,7,3,12,9,-2,-5,-9,-32,-5,18,4,7,6,43,17,-3,5,14,-4,11,22,35,17,20,-14,-127,18,-1,3,4,-18,-6,17,7,-7,14,22,16,8,17,-7,7,-14,-21,-19,-50,8,13,-10,-30,-10,34,-7,19,-22,4,13,-4,28,-14,-13,15,14,24,8,16,-4,2,20,-6,2,12,-10,-7, 
  /* [14][0][][] */ -116,-43,19,58,35,-27,-31,8,-14,8,-14,20,60,3,-127,-6,74,-23,-13,28,-16,-9,45,18,-105,2,38,-16,-36,-77,-27,-6,-9,-3,31,-65,32,34,2,21,27,37,3,-29,14,125,78,57,-120,57,8,32,-46,-9,40,-4,8,10,60,52,30,53,7,48,-5,-11,-47,45,11,76,-59,-96,-88,-2,-6,51,-7,35,89,-5,56,9,41,29,46,16,45,41,33,45,75,-9,-2,28,23,-32, 
  /* [15][0][][] */ 87,-20,43,8,-8,62,28,-20,-18,47,5,-1,-96,-6,-17,32,5,36,53,-20,6,20,-91,64,29,4,39,-4,29,50,-62,-72,7,-53,42,8,38,-38,-58,-107,-3,34,3,33,-7,55,-30,-30,97,-36,-54,20,38,-125,62,-104,8,-60,16,24,-127,-6,13,26,75,-17,-47,46,-33,65,-20,25,42,22,18,3,23,-55,63,-20,-18,-8,43,81,-16,5,-1,-52,-1,-9,69,-4,-68,49,24,-10, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.019208811223506927, 0.010843954980373383, 0.009953787550330162, 0.010045561008155346, 0.013649731874465942, 0.012298585847020149, 0.014350402168929577, 0.014582999050617218, 0.0076843532733619213, 0.013687617145478725, 0.015076096169650555, 0.03050285205245018, 0.016624122858047485, 0.020048603415489197, 0.016380328685045242, 0.011766784824430943, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10454, -9460, 3271, 49829, -1911, -4531, -9778, 2273, -2572, 1131, 2599, -2140, 1609, -3757, 5969, -5753, -1349, 17550, 25179, 1930, 5302, -3312, 825, 551, 17407, 22, -604, -4126, -5786, -7887, 6438, -9226, -35, -1903, -928, 12926, 1477, -4055, 19680, 99, -747, 1814, -9572, -7793, -7102, 68306, 23, 13377, 29286, -13042, -485, 6253, 7004, -157, -5993, 2022, -12078, 1620, 1589, -7140, -1727, -1043, -13088, -825, 1634, 14835, 28251, 18425, -12138, 146, -9700, -762, 47330, 10845, -106, 186, 18186, 33839, -902, -9187, -1691, -8698, 2242, -2760, 398, 940, 1675, -535, 1617, -2796, -141, -515, -62, -615, 67, 48479, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018759413796942681, 9.8654061730485409e-05, 0.00027363051776774228, 4.3754687794717029e-05, 0.0001482405059505254, 0.00016108930867630988, 0.00035553504130803049, 7.2592207288835198e-05, 0.00013672056957148015, 0.00040962599450722337, 0.00019259657710790634, 0.00030485677416436374, 9.7056719823740423e-05, 0.00046400292194448411, 0.00016833102563396096, 0.00013571917952504009, 0.00010848657257156447, 0.00032697990536689758, 6.0779668274335563e-05, 0.00032352335983887315, 3.9161179302027449e-05, 0.00018373173952568322, 0.00017450840095989406, 0.00038024285458959639, 0.00020280864555388689, 0.00026255613192915916, 0.00012888367928098887, 0.00017253414262086153, 0.0001610009785508737, 0.00010234299406874925, 0.00012436829274520278, 0.00015576102305203676, 0.00012954433623235673, 0.00011049292515963316, 0.00018312563770450652, 0.00018167127564083785, 0.0004383027262520045, 0.00012052927922923118, 5.4661421017954126e-05, 0.00015894317766651511, 0.00017577187099959701, 0.00030454469379037619, 0.00036795044434256852, 0.00014720731996931136, 0.00018290244042873383, 6.0038972151232883e-05, 0.00024088744248729199, 0.00026064025587402284, 8.9538938482291996e-05, 0.00018321775132790208, 0.00015496496052946895, 0.00019989498832728714, 0.00023789318220224231, 0.00024890011991374195, 0.00024453815422020853, 0.00046433639363385737, 0.00032767251832410693, 0.0001998803491005674, 0.00012550569954328239, 7.8020682849455625e-05, 0.00031399563886225224, 0.00013528449926525354, 0.00029230705695226789, 0.00011695447028614581, 0.00020671803213190287, 0.00019535873434506357, 9.4434544735122472e-05, 9.4869494205340743e-05, 0.00036537757841870189, 0.00026441123918630183, 0.00018944067414849997, 0.00012447276094462723, 0.0001217844765051268, 0.00015763538249302655, 0.00014323473442345858, 0.00027487901388667524, 0.00050003809155896306, 5.4224998166318983e-05, 0.00027238987968303263, 0.00021619196922983974, 0.0001788758672773838, 0.00023692443210165948, 8.5573839896824211e-05, 0.00014856159396003932, 0.00012010408681817353, 9.0671303041744977e-05, 0.0001291933876927942, 0.00018501853628549725, 0.00020968484750483185, 0.00013001990737393498, 0.00022750420612283051, 0.00010354304686188698, 0.00014745746739208698, 0.00042457252857275307, 0.018503056839108467, 8.2081969594582915e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-20,104,-17,23,-63,-54,17,-6,100,-9,4,-7,-5,54,5,16,-33,4,73,3,32,-34,2,17,44,48,20,13,25,47,-7,27,10,-15,4,49,-57,-26,20,9,27,18,-85,-55,26,-5,-11,-20,-8,-6,49,5,-8,2,-2,-35,29,-30,27,-3,127,27,-14,-11,12,-51,66,36,2,-8,78,-31,69,4,16,-127,30,65,1,15,127,-13,38,28,-29,-19,35,-7,-13,81,2,19,-2,12, -48,11,-8,9,52,-8,-11,-127,38,13,-127,-4,-16,-12,4,92,18,-31,-13,-15,77,-96,127,26,-62,-32,-105,-15,26,36,-48,18,118,12,-14,-1,-24,127,-64,-127,9,-19,-30,14,46,-127,127,-44,-76,51,48,7,39,-64,32,56,37,42,-99,84,127,34,3,-21,43,-38,-94,0,38,-30,-19,47,-48,-47,105,-3,-30,-60,-32,64,-66,62,-16,9,-11,47,54,-41,-28,53,-12,72,-127,-31,23,-127, 0,-5,-23,-74,8,18,37,23,-4,-2,5,62,0,-12,-11,5,-12,17,-15,18,5,25,24,-32,1,-31,9,12,-7,6,47,-79,44,17,9,-23,11,4,-32,-21,7,2,-16,8,22,-31,21,1,7,-7,5,-5,4,6,-5,8,-7,45,7,-2,11,-18,2,-17,-26,-18,32,-48,-105,-7,40,-17,-127,-22,-12,17,10,-11,6,11,-13,23,-36,-3,-40,20,25,37,-24,-17,25,-11,19,6,-2,-45, 
  /* [0][1][][] */ -40,58,-18,38,-85,-16,-11,-44,26,94,-44,-21,-31,-24,-7,63,127,-25,-91,-14,58,-127,-29,15,-35,-48,-127,-6,37,36,-49,28,-127,-75,-56,4,64,-3,-49,47,-19,87,1,-3,34,-53,-12,-31,127,44,-4,21,44,9,-35,-17,32,9,-122,127,-36,-89,20,127,-60,-36,-84,126,-36,127,-19,53,-36,-53,36,9,-36,-69,127,47,127,36,6,-1,127,28,-98,48,-38,-35,-102,40,97,103,29,-59, 127,127,127,127,-46,-127,127,24,127,-127,17,-127,-108,127,127,127,-15,-127,-62,-127,127,23,-68,127,127,127,-56,-127,127,127,-127,127,-10,-127,-124,127,-127,-45,94,109,-127,-127,127,127,127,-119,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-104,-27,-69,-68,127,127,-70,127,127,-107,-127,127,-41,127,-127,-127,-127,125,-74,127,-43,127,78,127,-37,-127,-25,-107,-127,-127,-23,-127,-22,-127,-127,115, -24,65,-38,2,127,70,-22,50,6,23,-12,-5,-27,-31,-12,-8,-103,-22,-127,39,29,78,-13,-116,-33,-41,123,73,10,34,73,9,124,-48,127,-3,54,5,-94,14,36,23,-23,0,-23,-53,-13,-42,81,15,-12,40,-6,-4,-74,-14,24,20,127,-89,2,127,0,-36,-110,-28,-73,101,15,-17,111,24,-18,-54,11,48,-28,-7,-42,-4,-45,9,46,24,-89,35,127,-47,33,-23,127,-10,-113,35,34,19, 
  /* [0][2][][] */ -4,-40,-21,-61,-4,14,41,32,-1,9,-20,51,23,-34,-7,7,41,3,13,21,-8,31,-17,-26,2,-24,9,4,-9,-7,50,-74,-38,66,-27,-25,31,-34,-62,17,9,9,-34,19,13,-77,-11,-1,-9,6,16,-7,8,1,-21,7,-1,44,-48,34,-5,-13,4,17,-6,-10,21,-51,-55,12,-21,-12,-119,-31,0,18,15,-12,56,18,23,22,-40,15,12,25,-22,10,4,25,24,-6,20,40,-7,-31, -27,-11,-27,24,-44,74,-24,67,6,-6,54,-12,127,-7,-19,-16,-1,-40,-56,24,-22,80,-46,-112,-47,-47,100,70,13,44,55,-1,-123,62,-13,-23,-28,-26,-127,-3,45,-13,-14,37,-27,-45,-18,-47,-61,29,68,25,-11,-80,30,52,17,26,75,-54,20,-58,-8,0,19,-26,-127,-54,-10,-27,-62,24,36,-44,-30,-6,-43,24,-55,1,50,36,19,10,6,62,-94,127,16,127,-30,-19,114,-22,46,82, -10,-35,-25,29,13,65,-43,13,4,-6,1,13,12,-51,-9,-12,-43,-6,18,20,-24,6,-22,3,-3,19,-3,52,-3,-6,35,29,18,41,20,-23,-6,-26,-30,8,11,-12,22,10,-74,-31,-12,4,-2,-16,-1,-4,-8,8,-16,-4,-1,-50,14,-29,-21,49,9,-29,-10,-2,36,-53,46,7,53,-20,30,-54,-19,23,12,11,-5,23,-29,32,88,-14,-18,54,38,-9,110,12,3,-19,9,-23,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0079727508127689362, 0.0041927974671125412, 0.011629296466708183, 0.0018595742294564843, 0.0063002211973071098, 0.0068462956696748734, 0.015110238455235958, 0.0030851687770336866, 0.0058106239885091782, 0.017409104853868484, 0.0081853540614247322, 0.012956412509083748, 0.0041249105706810951, 0.019720124080777168, 0.0071540684439241886, 0.0057680648751556873, 0.0046106791123747826, 0.013896645978093147, 0.0025831358507275581, 0.0137497428804636, 0.0016643501585349441, 0.0078085986897349358, 0.0074166068807244301, 0.016160320490598679, 0.0086193671450018883, 0.011158635839819908, 0.0054775564931333065, 0.0073327007703483105, 0.0068425415083765984, 0.0043495772406458855, 0.0052856523543596268, 0.0066198431886732578, 0.0055056340061128139, 0.0046959491446614265, 0.0077828392386436462, 0.0077210287563502789, 0.018627865239977837, 0.0051224944181740284, 0.0023231103550642729, 0.0067550851963460445, 0.0074703041464090347, 0.012943149544298649, 0.015637893229722977, 0.0062563112005591393, 0.0077733537182211876, 0.0025516562163829803, 0.010237716138362885, 0.011077210307121277, 0.0038054047618061304, 0.0077867545187473297, 0.006586010567843914, 0.008495536632835865, 0.010110460221767426, 0.010578255169093609, 0.010392871685326099, 0.019734296947717667, 0.013926081359386444, 0.0084949145093560219, 0.0053339921869337559, 0.0033158790320158005, 0.013344815000891685, 0.0057495911605656147, 0.012423049658536911, 0.0049705649726092815, 0.0087855160236358643, 0.0083027463406324387, 0.0040134680457413197, 0.004031953401863575, 0.015528546646237373, 0.011237477883696556, 0.0080512287095189095, 0.0052900924347341061, 0.0051758401095867157, 0.0066995033994317055, 0.0060874759219586849, 0.011682357639074326, 0.0212516188621521, 0.0023045623674988747, 0.011576569639146328, 0.0091881584376096725, 0.007602224126458168, 0.010069288313388824, 0.0036368879955261946, 0.0063138678669929504, 0.005104423500597477, 0.003853530390188098, 0.0054907188750803471, 0.0078632878139615059, 0.0089116059243679047, 0.0055258460342884064, 0.0096689285710453987, 0.0044005792587995529, 0.0062669422477483749, 0.018044332042336464, 0.78637987375259399, 0.0034884836059063673, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 17084, 1642, 8098, -827, 5176, 6020, 18986, 6643, -1466, 17267, 8879, 1720, 8184, 40785, -436, -2719, 12902, 14364, 2189, -223, -1169, 16938, 5297, 4037, 8032, 5719, 5466, 5028, 107, -24, 7789, 11025, 23062, 1781, 9605, -620, 28206, 9438, 717, 4501, 818, 15071, 15232, 4526, 3819, 14054, 17605, 6578, 5687, 4406, 316, -954, 19930, 8543, 9582, 21177, -266, 9017, 3500, 4349, 15145, 6363, 3311, 6988, 6876, 5308, 6762, -1055, 19721, 8042, 12402, -1365, -1905, 3294, 1996, 3780, 23054, 14906, 15600, -2158, 6364, -6192, -2293, 712, 7704, 6202, 7677, 4370, 13675, 4842, 8778, 4994, 18597, 24120, -11761, 20172, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015198122127912939, 0.00022041515330784023, 0.00016643208800815046, 0.00068543473025783896, 0.00030546510242857039, 0.00015298351354431361, 0.00016467974637635052, 0.00052929396042600274, 0.00032083416590467095, 0.00010548018326517195, 0.0001599440147401765, 0.00048153070383705199, 0.00033846069709397852, 0.00011842819367302582, 0.00021820524125359952, 0.0002588029601611197, 0.00017056564684025943, 0.00016364647308364511, 0.00020923557167407125, 0.00051059969700872898, 0.00024529974325560033, 0.00014602985174860805, 0.00028736356762237847, 0.0001973457692656666, 0.00021907333575654775, 0.00036653000279329717, 0.00026346344384364784, 0.00017608264170121402, 0.00046009616926312447, 0.00031742022838443518, 0.00018517134594731033, 0.00016938481712713838, 8.5221981862559915e-05, 0.00060962740099057555, 0.00017506559379398823, 0.00042132934322580695, 8.0044599599204957e-05, 0.00027972148382104933, 0.00061204330995678902, 0.00021407892927527428, 0.00057834619656205177, 0.00012502609752118587, 0.00014053928316570818, 0.00016412907280027866, 0.00029657172854058444, 0.00023136350500863045, 0.00016243562276940793, 0.0002202650357503444, 0.0002799409267026931, 0.00020443268294911832, 0.00041886678081937134, 0.00069637229898944497, 0.0001334362750640139, 0.00018760196689981967, 0.00024244794622063637, 8.7126041762530804e-05, 0.00036996018025092781, 0.00019254222570452839, 0.00021918739366810769, 0.00037271055043675005, 0.00011165300384163857, 0.00021981830650474876, 0.00031265406869351864, 0.00039817558717913926, 0.00015064151375554502, 0.0002139644930139184, 0.00028955214656889439, 0.00033334133331663907, 0.00013589367154054344, 0.00014523122808896005, 0.00016139814397320151, 0.00035921498783864081, 0.00020714598940685391, 0.00039153615944087505, 0.00021610160183627158, 0.00033325623371638358, 0.00010148607543669641, 0.00030122173484414816, 0.00010662303975550458, 0.00056022900389507413, 0.00016938059707172215, 0.00033739555510692298, 0.00016197317745536566, 0.00037342667928896844, 0.00020445836707949638, 0.0002510503982193768, 0.00021343033586163074, 0.00031733245123177767, 0.00012319281813688576, 0.00033140339655801654, 0.00015902456652838737, 0.00033753598108887672, 0.00011318109318381175, 0.00011466536670923233, 0.00024912419030442834, 0.00016216564108617604, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 51,-30,127,109,64,-29,33,-18,111,-21,-59,-71,38,90,-55,-63, 
  /* [1][0][][] */ 28,104,-22,1,88,-12,23,17,48,89,-32,127,1,-44,121,-101, 
  /* [2][0][][] */ 11,-58,-2,-10,-51,48,-37,100,-84,-95,24,67,-15,-127,78,-91, 
  /* [3][0][][] */ 122,110,-5,32,-127,-15,-69,-26,9,-2,105,-68,-58,93,-43,-34, 
  /* [4][0][][] */ 4,-9,28,13,-20,31,-16,46,-62,-45,-11,-3,-5,-127,20,-3, 
  /* [5][0][][] */ 127,-37,-16,6,-9,-105,-29,22,3,16,-121,-2,27,1,-11,27, 
  /* [6][0][][] */ -124,-89,-6,102,-45,-12,-63,33,-127,-88,-86,-27,27,64,-14,101, 
  /* [7][0][][] */ -25,17,-84,47,37,-127,-20,49,6,-29,9,-1,5,21,-49,22, 
  /* [8][0][][] */ 27,-46,-17,-15,3,29,-53,-68,-16,14,-69,7,-127,-5,7,25, 
  /* [9][0][][] */ 19,-61,49,127,-8,37,5,-58,121,-83,10,-30,2,42,-81,20, 
  /* [10][0][][] */ -110,-88,3,-36,127,34,25,76,121,-67,-102,47,87,-103,-120,82, 
  /* [11][0][][] */ 44,-9,-127,14,45,22,-20,35,-16,-29,-7,-10,-5,15,-38,7, 
  /* [12][0][][] */ 107,-48,3,-2,0,-65,-49,-23,31,-11,-127,-15,-47,-15,9,52, 
  /* [13][0][][] */ 25,-53,0,-70,68,10,-78,-127,28,-70,25,5,33,-25,33,14, 
  /* [14][0][][] */ -44,38,-79,-40,95,-127,67,-52,49,40,-19,-83,23,114,-29,18, 
  /* [15][0][][] */ 23,-12,53,34,42,-41,-33,-20,19,-66,-63,-14,-127,-58,-7,56, 
  /* [16][0][][] */ -121,65,13,14,-5,82,29,87,-20,38,127,13,-8,16,13,-42, 
  /* [17][0][][] */ -5,-2,-42,-35,-36,4,39,74,-32,127,-23,11,-1,80,66,2, 
  /* [18][0][][] */ 9,127,-44,2,13,-3,50,-65,17,99,-57,113,3,-45,30,-101, 
  /* [19][0][][] */ 12,-17,37,23,9,45,-3,21,16,10,-47,-4,-127,4,-15,25, 
  /* [20][0][][] */ 87,-66,-16,-94,-37,29,36,-93,-57,24,-127,-45,25,-5,58,16, 
  /* [21][0][][] */ 47,-5,127,50,-27,57,34,8,-7,28,-27,-6,-8,92,-4,-10, 
  /* [22][0][][] */ 24,5,11,10,-19,-1,23,127,12,-1,15,28,5,40,22,23, 
  /* [23][0][][] */ -18,17,-82,6,15,-127,4,30,-4,-28,-6,-9,-63,5,1,39, 
  /* [24][0][][] */ 44,-66,-2,-62,48,5,-19,-4,29,34,64,83,-34,81,127,40, 
  /* [25][0][][] */ -127,-97,-43,-1,10,9,5,-45,-59,-2,-81,23,30,45,37,47, 
  /* [26][0][][] */ 1,8,38,-12,-19,16,-29,67,-90,-58,-12,17,15,-127,35,-9, 
  /* [27][0][][] */ -101,46,-45,25,40,-31,5,22,31,-33,127,25,-26,2,-17,-23, 
  /* [28][0][][] */ -18,-4,18,36,3,1,15,81,25,17,-27,-4,-127,-11,-14,35, 
  /* [29][0][][] */ -13,57,38,-40,37,-15,22,-27,-127,26,-28,1,0,30,-85,13, 
  /* [30][0][][] */ -5,-15,-127,-41,33,-69,-5,15,-14,-12,-4,-27,-43,-25,17,17, 
  /* [31][0][][] */ 120,-25,-127,1,29,5,-44,52,-27,-3,-66,-55,7,-15,-74,39, 
  /* [32][0][][] */ -120,50,24,53,9,110,30,40,29,4,127,9,-31,17,-8,-23, 
  /* [33][0][][] */ 6,-16,127,-18,-60,20,6,-29,1,4,-8,26,-8,27,34,20, 
  /* [34][0][][] */ -9,-20,-61,-123,22,-4,16,-21,-26,-47,-28,-127,-8,7,53,22, 
  /* [35][0][][] */ 8,-44,31,57,45,-20,18,-12,-125,46,-12,27,-12,127,-54,-35, 
  /* [36][0][][] */ -127,60,-44,-7,-21,47,63,110,-11,47,127,-23,11,13,14,-23, 
  /* [37][0][][] */ -43,15,127,-29,-85,-65,31,-43,12,15,-6,6,-2,-71,67,12, 
  /* [38][0][][] */ 19,-8,-8,20,41,-63,-61,4,-24,-26,79,-10,127,27,-16,1, 
  /* [39][0][][] */ -21,-8,-13,-35,-61,-91,65,127,-42,-5,-9,-42,4,61,47,57, 
  /* [40][0][][] */ 61,-5,-11,-16,0,84,-14,4,10,-10,9,3,127,13,-37,-20, 
  /* [41][0][][] */ -8,-11,-37,-127,25,-3,-25,-68,-3,-50,14,-43,-5,-11,-17,32, 
  /* [42][0][][] */ 63,56,11,116,-113,-15,-115,-8,-85,-75,72,-83,-60,127,-51,-2, 
  /* [43][0][][] */ 21,116,-22,127,25,24,43,-64,-34,77,2,22,3,-39,44,30, 
  /* [44][0][][] */ -11,-27,-127,29,62,79,-57,61,-12,-18,36,-17,11,-22,-62,4, 
  /* [45][0][][] */ -3,26,-18,-127,-17,-5,50,-12,-10,24,-28,11,1,-96,29,-25, 
  /* [46][0][][] */ 21,36,67,-12,15,12,-42,58,21,-44,-39,23,15,127,50,-22, 
  /* [47][0][][] */ 17,-18,29,-43,-31,13,-60,57,-15,-36,20,29,3,-127,36,15, 
  /* [48][0][][] */ 12,-15,12,-127,-2,-14,-9,11,17,-34,13,-10,10,52,-5,63, 
  /* [49][0][][] */ 28,-32,2,127,91,12,6,55,-62,16,43,41,-12,46,122,-6, 
  /* [50][0][][] */ -17,-12,63,-12,-3,127,-25,-50,44,-26,110,31,91,1,-9,-57, 
  /* [51][0][][] */ 32,44,9,19,12,3,-49,27,53,1,-3,127,20,38,26,-53, 
  /* [52][0][][] */ -17,74,127,11,11,-43,10,-65,-37,-2,-1,52,0,89,-123,-17, 
  /* [53][0][][] */ -9,-13,-53,-127,-49,10,21,-42,-17,50,6,6,20,-30,56,7, 
  /* [54][0][][] */ 2,17,-37,-62,22,15,-22,3,62,-26,6,-38,-16,127,29,34, 
  /* [55][0][][] */ 2,-35,-35,-11,20,-60,-20,-127,11,-106,-21,-4,-27,-72,-51,-17, 
  /* [56][0][][] */ 44,48,35,61,9,-25,16,127,20,-27,1,-31,74,-8,-54,32, 
  /* [57][0][][] */ 80,-13,127,-28,-65,-55,-8,-39,9,12,-93,33,48,-39,57,17, 
  /* [58][0][][] */ 93,96,13,119,-127,-11,-1,51,-4,27,82,-11,-69,-52,-36,-83, 
  /* [59][0][][] */ 127,-36,1,5,-15,-23,-13,9,-22,17,-113,-7,6,-2,-1,18, 
  /* [60][0][][] */ -127,38,-13,-7,12,8,24,29,5,5,88,2,-33,-7,14,-18, 
  /* [61][0][][] */ -108,54,13,29,15,7,-62,-54,127,-102,79,-23,63,-47,-90,-43, 
  /* [62][0][][] */ -27,-42,-127,49,55,107,-3,88,29,-57,34,-21,-71,-3,-99,-7, 
  /* [63][0][][] */ -33,6,127,-29,-46,-54,30,-24,11,10,7,6,-19,-42,69,7, 
  /* [64][0][][] */ 16,64,-19,19,51,4,98,-127,-25,105,16,-32,-16,-113,-7,57, 
  /* [65][0][][] */ 5,15,9,-15,63,6,-5,-127,-18,-53,-33,-40,-9,-32,42,9, 
  /* [66][0][][] */ -127,7,-14,11,-40,23,12,-37,-80,-32,-85,56,62,25,46,82, 
  /* [67][0][][] */ -9,-54,10,127,-1,-3,-32,40,72,24,10,-21,-1,-31,-88,-27, 
  /* [68][0][][] */ 10,-1,-11,127,-57,-18,-7,-33,-39,30,18,-25,-34,-68,-20,-52, 
  /* [69][0][][] */ 82,94,15,127,36,-3,69,-116,18,118,28,54,15,-25,35,-5, 
  /* [70][0][][] */ 8,-55,-14,-89,119,-55,41,9,97,-39,89,-75,2,112,90,127, 
  /* [71][0][][] */ 17,49,4,71,43,-127,-41,78,30,-93,15,5,13,-61,-55,35, 
  /* [72][0][][] */ -127,-78,-20,49,12,43,-26,13,-49,-35,-91,33,47,14,6,90, 
  /* [73][0][][] */ -19,-17,-10,49,11,-21,-5,-21,83,4,2,-5,26,127,-42,-40, 
  /* [74][0][][] */ 74,-32,23,-23,-35,-23,33,-14,-45,-3,-117,30,-127,-12,22,41, 
  /* [75][0][][] */ -8,-12,-23,127,-30,13,3,-23,-74,19,-14,-26,4,-56,-20,-39, 
  /* [76][0][][] */ -2,-3,-5,42,32,18,-21,-127,13,-123,1,16,-27,-22,31,-39, 
  /* [77][0][][] */ 127,-27,35,50,-33,-2,-35,-2,45,-4,-32,49,30,9,-54,30, 
  /* [78][0][][] */ -3,-11,60,4,20,-6,-60,39,47,-26,-46,-30,20,127,29,-36, 
  /* [79][0][][] */ -2,23,50,21,46,59,-53,-49,11,-42,69,-12,127,-20,-31,-39, 
  /* [80][0][][] */ -127,-98,-82,107,-2,38,42,-16,-73,21,-81,2,57,-80,-19,47, 
  /* [81][0][][] */ 57,-2,-83,34,127,93,-34,-48,2,-125,-20,-96,-28,-18,-100,37, 
  /* [82][0][][] */ 127,107,3,37,-113,-28,-69,-22,-76,-10,100,-58,-47,92,-8,-43, 
  /* [83][0][][] */ 127,44,17,-19,13,-15,-16,30,34,19,75,-27,-48,-25,-27,-83, 
  /* [84][0][][] */ 9,-67,-42,-15,54,35,-4,-127,-17,-61,22,10,-33,-8,-6,-26, 
  /* [85][0][][] */ -30,0,-48,-58,-9,-1,66,79,-19,127,0,-50,25,55,69,-16, 
  /* [86][0][][] */ 96,-26,5,1,0,-30,-12,-24,3,-1,-127,4,17,14,-8,21, 
  /* [87][0][][] */ -19,44,7,-47,-20,67,-29,54,-13,-28,35,11,10,-127,13,11, 
  /* [88][0][][] */ 17,-37,-82,-25,79,-10,-35,-127,6,-43,-21,-38,-44,-14,15,-38, 
  /* [89][0][][] */ 26,-15,21,-119,25,19,-47,127,84,-64,41,9,3,44,34,52, 
  /* [90][0][][] */ -10,4,-35,69,65,3,94,-83,73,127,-50,52,24,5,-22,-20, 
  /* [91][0][][] */ 38,-12,-46,-16,-6,-127,-10,-11,-7,0,-44,-7,34,-16,8,28, 
  /* [92][0][][] */ 30,11,127,69,50,9,8,58,-47,36,-63,24,19,94,-9,-14, 
  /* [93][0][][] */ 126,-39,-46,-18,-37,-52,18,45,-31,53,-127,-14,6,11,1,55, 
  /* [94][0][][] */ 16,-19,44,77,111,-32,-10,57,7,-15,-2,55,-6,127,-23,-77, 
  /* [95][0][][] */ -119,38,49,50,27,37,16,12,19,3,127,-7,-28,41,-22,-38, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00055795087246224284, 0.0008091843337751925, 0.00061100261518731713, 0.0025163562968373299, 0.0011214183177798986, 0.00056163046974688768, 0.0006045694462954998, 0.0019431350519880652, 0.0011778408661484718, 0.00038723705802112818, 0.0005871837493032217, 0.0017677872674539685, 0.0012425511376932263, 0.000434771558502689, 0.00080107134999707341, 0.00095011305529624224, 0.00062617770163342357, 0.00060077611124143004, 0.00076814205385744572, 0.0018745048437267542, 0.00090054026804864407, 0.00053610227769240737, 0.0010549642611294985, 0.00072449241997674108, 0.00080425827763974667, 0.0013455987209454179, 0.00096722249872982502, 0.00064643158111721277, 0.0016890971455723047, 0.0011653077090159059, 0.00067979790037497878, 0.00062184262787923217, 0.00031286547891795635, 0.0022380535956472158, 0.00064269779250025749, 0.0015467770863324404, 0.00029385837842710316, 0.0010269087506458163, 0.0022469230461865664, 0.00078592292265966535, 0.0021232147701084614, 0.00045899365795776248, 0.00051594543037936091, 0.00060254783602431417, 0.0010887690586969256, 0.00084937777137383819, 0.00059633090859279037, 0.00080863322364166379, 0.0010277143446728587, 0.00075050978921353817, 0.0015377366216853261, 0.0025565100368112326, 0.00048986898036673665, 0.00068872113479301333, 0.00089007074711844325, 0.00031985563691705465, 0.0013581914827227592, 0.00070685771061107516, 0.00080467702355235815, 0.0013682886492460966, 0.00040989861008711159, 0.00080699322279542685, 0.0011478102533146739, 0.0014617753913626075, 0.0005530325579456985, 0.00078550277976319194, 0.001062998897396028, 0.001223757048137486, 0.00049889052752405405, 0.00053317041601985693, 0.00059252209030091763, 0.0013187439180910587, 0.00076047080801799893, 0.0014374008169397712, 0.0007933485321700573, 0.0012234445894137025, 0.00037257393705658615, 0.0011058400850743055, 0.00039143269532360137, 0.0020567032042890787, 0.00062182714464142919, 0.0012386407470330596, 0.00059463316574692726, 0.0013709176564589143, 0.00075060408562421799, 0.00092165195383131504, 0.00078354182187467813, 0.0011649854714050889, 0.00045226336806081235, 0.0012166424421593547, 0.00058380828704684973, 0.0012391563504934311, 0.00041550848982296884, 0.00042095754179172218, 0.00091458047972992063, 0.00059533974854275584, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -35100, 3603, 1436, -7615, -65, -8126, -11234, -43489, 2118, 22455, 31656, -9893, -3037, -22690, 38606, -47811, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00065874319989234209, 0.00088113936362788081, 0.0010113420430570841, 0.0009975675493478775, 0.00074067706009373069, 0.0010145443957298994, 0.0012131581315770745, 0.00063981488347053528, 0.00074124120874330401, 0.00073879264527931809, 0.00087159423856064677, 0.00053910142742097378, 0.0011097018141299486, 0.0013388169463723898, 0.00057632330572232604, 0.00052707036957144737, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -12,-5,-21,10,25,-5,4,99,-50,13,38,-9,20,-19,-11,17,16,-10,-4,-1,64,-5,23,127,-17,82,-7,-17,23,-14,28,-22,-18,52,20,-43,14,49,15,-9,-101,-27,21,45,33,28,-122,-49, 
  /* [1][0][][] */ -36,-14,23,17,-28,10,4,54,-51,-35,5,-42,-20,-19,2,-1,-22,119,-8,19,10,11,-25,-15,28,-44,15,22,-25,-79,-36,23,-19,-10,33,0,-6,-40,0,19,-18,-31,127,14,6,2,26,-17, 
  /* [2][0][][] */ -22,-4,-13,-38,-3,-64,2,-19,-3,11,16,23,13,12,-15,8,-4,-22,-22,-11,-7,0,0,-127,-11,72,-13,5,-3,-19,-4,-9,-4,55,13,-2,23,14,28,3,-37,5,-20,-7,1,-14,15,9, 
  /* [3][0][][] */ -8,31,0,-32,-3,-2,0,-3,-21,-1,0,34,-127,7,-8,-3,2,3,-17,-1,-32,6,6,16,-8,-10,3,25,-11,17,2,16,3,3,16,18,-11,30,43,4,12,4,21,-29,8,-6,2,19, 
  /* [4][0][][] */ 34,-34,6,8,19,30,21,-21,-33,1,-10,-20,-2,11,-1,16,19,-10,-78,4,-7,13,16,70,0,-25,8,50,8,-72,16,5,15,-33,32,-127,10,38,1,21,-17,20,5,-25,-11,-22,7,5, 
  /* [5][0][][] */ 29,2,-20,61,-2,-6,5,26,4,-2,42,11,2,54,2,1,-24,21,28,2,11,4,1,-25,-1,-48,2,-20,-3,-11,3,7,68,-127,3,30,-12,-14,14,4,-92,58,22,-5,-8,-1,-99,-11, 
  /* [6][0][][] */ 24,-4,5,7,-12,-5,2,-14,-2,4,-1,7,-14,8,4,5,0,-9,127,7,7,8,14,-34,6,4,26,-14,-9,-6,-2,8,0,-9,30,-35,1,-45,67,12,0,-7,-5,7,-11,2,8,-11, 
  /* [7][0][][] */ -47,-9,-10,33,-12,81,-8,48,-2,32,-9,127,77,-3,-10,-7,-3,-26,-9,-12,-29,-9,-23,67,3,-39,-50,-29,-14,-16,-15,-15,3,3,-22,2,11,-60,101,-6,27,26,-63,-62,18,-13,1,5, 
  /* [8][0][][] */ -49,-45,-1,4,-6,5,-3,33,-1,-66,7,43,46,8,11,3,-14,58,-33,4,-47,20,-8,-14,0,3,7,45,-10,111,-9,17,-4,6,-17,-127,-110,65,35,24,17,-3,111,-25,12,26,18,33, 
  /* [9][0][][] */ -26,7,-6,28,17,-30,-7,1,55,-37,11,58,-57,6,12,-2,-7,16,-38,-24,49,5,-14,-18,0,11,45,-22,9,9,8,-4,-2,16,72,-103,-6,-127,-90,4,-30,27,52,6,6,7,-16,-41, 
  /* [10][0][][] */ -23,-8,-31,-127,41,86,9,-9,-4,36,26,8,49,-42,-34,18,34,-40,50,-33,31,-26,39,49,-50,-104,6,-30,46,30,46,-46,-28,-77,22,-8,17,-41,9,-37,-34,-62,-15,8,17,14,15,-32, 
  /* [11][0][][] */ -3,52,-8,59,32,-63,-80,-15,0,58,-15,2,-11,57,-2,-80,18,41,4,-10,-51,-110,10,1,12,-36,19,-18,51,-41,21,-86,42,-15,-34,-89,93,20,9,-127,-4,61,97,-73,-4,-51,27,37, 
  /* [12][0][][] */ 127,-1,-16,16,3,20,5,99,23,-10,-56,-20,-1,16,-7,-6,-10,9,-4,-7,5,0,0,19,-1,16,-1,4,-4,12,-2,0,4,-66,-9,12,-16,-18,-31,2,-16,-77,10,-127,-54,-12,82,-4, 
  /* [13][0][][] */ 8,4,-1,4,6,-9,0,2,-2,6,5,22,-6,4,6,-1,5,0,9,3,13,-13,7,-3,1,2,18,127,10,-6,5,-4,6,0,-36,19,10,-6,7,-16,-13,-2,2,4,0,-4,-10,-12, 
  /* [14][0][][] */ 58,-16,49,-66,50,32,44,-98,-50,-51,-1,127,-73,-3,66,11,50,27,-57,63,23,13,68,-20,23,57,-28,-112,27,-32,62,49,-2,64,-125,-52,-37,36,86,5,-40,11,56,1,0,5,16,-30, 
  /* [15][0][][] */ -9,-48,-79,-38,58,31,77,-51,-14,26,-15,-33,90,28,-105,64,60,58,78,-91,-105,-29,54,-15,-101,50,26,61,62,50,53,-53,24,67,98,127,-15,-119,-8,-39,94,65,118,-57,-5,-37,-21,66, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.027996586635708809, 0.037448421120643616, 0.042982038110494614, 0.042396619915962219, 0.031478773802518845, 0.043118134140968323, 0.051559220999479294, 0.027192132547497749, 0.031502749770879745, 0.03139868751168251, 0.037042755633592606, 0.022911811247467995, 0.047162327915430069, 0.056899718940258026, 0.024493740871548653, 0.022400489076972008, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 7109, 30984, -872, 36734, 4640, 127947, -2341, 43404, 6629, 28053, 26455, 3389, 3580, 32938, -1093, -1744, -579, 1676, 3664, -2060, 1841, -3184, -620, -21804, -5430, 39225, 131484, 105074, 3523, 5461, -2589, 910, 25087, -1218, 39715, 969, 44448, -1075, 63627, 1829, -1534, 71634, 1027, 2815, 49072, -490, 1162, 47227, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.7654764279723167e-05, 3.5933695471612737e-05, 0.00016295789100695401, 5.8386365708429366e-05, 0.00015259838255587965, 6.5347798226866871e-05, 0.00014809520507697016, 0.00013927777763456106, 6.7193810536991805e-05, 3.9309230487560853e-05, 5.4309821280185133e-05, 8.7631524365860969e-05, 4.072814408573322e-05, 4.1399500332772732e-05, 0.00017284663044847548, 0.00019216822693124413, 0.00017867822316475213, 6.2116370827425271e-05, 0.00010104979446623474, 0.00016187615983653814, 8.7224107119254768e-05, 0.00027368805604055524, 0.00010387471411377192, 0.00014417634520214051, 8.6274267232511193e-05, 0.00011737879685824737, 2.8059843316441402e-05, 6.6222739405930042e-05, 0.00011385016841813922, 0.00010716282849898562, 0.0001295928523177281, 0.00017727210070006549, 5.1140319555997849e-05, 0.00018872892542276531, 2.7827431040350348e-05, 5.3499497880693525e-05, 0.0001282293233089149, 0.00012145658547524363, 8.6513136920984834e-05, 0.00012777587107848376, 0.00013877659512218088, 7.9451710917055607e-05, 7.7926641097292304e-05, 8.7145868747029454e-05, 3.4669024898903444e-05, 0.00015076473937369883, 0.00010637141531333327, 3.1349743949249387e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-93,97,70,53,-33,106,-63,59,-89,-80,47,52,-42,-73,-90,101,79,49,78,67,-75,-82,50,-33,-40,-64,-64,-67,61,-63,-114,-13,41,68,64,-65,53,-50,-22,50,-74,57,61,-93,11,75,-33, 82,-96,127,85,-77,-67,-58,-84,95,-103,-64,74,80,-108,-96,90,-38,97,82,127,85,-116,53,71,-52,-76,-68,-80,55,79,-30,-127,-85,78,81,83,-82,82,-83,-16,75,-94,82,89,-73,-127,93,-104, 34,-46,70,37,18,-41,-48,-39,42,-31,5,33,29,-78,-55,-2,-54,37,34,71,33,-54,31,26,-28,-45,-44,-23,31,31,88,-89,-85,44,35,34,-30,39,-37,-10,40,-40,34,43,-5,-8,36,-74, 
  /* [0][1][][] */ 92,-112,-42,93,54,-82,127,-88,86,-114,-71,82,84,-110,-14,-127,127,109,74,-38,84,107,-127,73,73,-75,-93,-99,-127,86,-69,-9,-88,70,105,96,-84,79,-81,89,84,-101,87,91,-88,108,94,-92, 127,-127,-66,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-22,96,-65,127,127,-51,127,127,69,127,127,-127,-127,-127,53,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-77,-34,66,37,-63,-49,-62,56,-42,-60,57,48,-54,-16,10,-63,50,58,-30,57,65,50,63,65,-64,-62,-44,36,54,127,15,-62,69,48,49,-48,61,-59,56,60,-58,55,62,-62,-67,59,-56, 
  /* [0][2][][] */ 45,-51,-47,50,26,-53,63,-42,41,-73,-4,39,55,-73,83,-79,73,51,35,-30,27,-10,-77,30,-23,-43,-49,-49,-74,31,-41,89,-72,36,48,42,-26,37,-42,-86,47,-50,40,45,-22,16,40,-75, 72,-74,-49,81,-57,-63,-73,-67,51,-78,-66,60,73,-48,127,32,-46,59,62,-43,54,-17,41,67,-49,-66,-78,-61,31,60,-24,117,-55,63,57,58,-49,62,-66,-105,68,-68,60,62,-86,50,63,-53, 40,-40,-27,47,28,-20,-17,-33,15,-26,-51,27,31,4,68,23,-36,21,29,-32,28,0,39,41,-25,-28,-49,-24,33,33,62,66,0,33,15,22,-22,30,-28,-54,28,-32,26,29,-64,9,31,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028753273654729128, 0.0015271820593625307, 0.0069257100112736225, 0.002481420524418354, 0.0064854309894144535, 0.0027772814501076937, 0.0062940460629761219, 0.005919305607676506, 0.0028557369951158762, 0.0016706422902643681, 0.0023081672843545675, 0.0037243396509438753, 0.0017309461254626513, 0.0017594787059351802, 0.0073459818959236145, 0.0081671494990587234, 0.007593824528157711, 0.0026399458292871714, 0.0042946161702275276, 0.0068797366693615913, 0.0037070245016366243, 0.011631742119789124, 0.0044146752916276455, 0.006127494852989912, 0.0036666563246399164, 0.0049885986372828484, 0.0011925433063879609, 0.0028144663665443659, 0.0048386319540441036, 0.004554420243948698, 0.0055076959542930126, 0.0075340638868510723, 0.0021734635811299086, 0.0080209793522953987, 0.001182665815576911, 0.0022737286053597927, 0.0054497462697327137, 0.0051619047299027443, 0.0036768082063645124, 0.0054304744116961956, 0.0058980053290724754, 0.0033766976557672024, 0.0033118820283561945, 0.0037036994472146034, 0.0014734334545210004, 0.0064075011759996414, 0.0045207850635051727, 0.0013323641614988446, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 568, 906, 2315, 401, 8030, 19367, 2211, -10, -769, -543, 1265, 1003, 3192, 1185, 19730, 2648, 2089, -1010, -155, 3001, -1728, 11281, 8996, 10681, 4107, 275, 2962, 3945, 9120, -496, 7358, 5714, 627, -216, 4120, 3362, -1605, 200, -843, 5143, 1132, -611, -915, -12, 949, 3306, 904, 953, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00038355376455001533, 0.00077878503361716866, 0.0002458435483276844, 0.00036828612792305648, 0.00027336992206983268, 0.00020942423725500703, 0.00050002039643004537, 0.00028862871113233268, 0.00037507721572183073, 0.00083514070138335228, 0.00079802970867604017, 0.00030274211894720793, 0.00039080198621377349, 0.00065214803908020258, 0.00018160928448196501, 0.0004732673114631325, 0.00024088968348223716, 0.00040840552537702024, 0.00029475317569449544, 0.0003096690634265542, 0.0003503250190988183, 0.00022867757070343941, 0.00041002992657013237, 0.00014669232768937945, 0.00039095972897484899, 0.00029595769592560828, 0.0023511059116572142, 0.00047624242142774165, 0.00019235150830354542, 0.00043665143311955035, 0.00035435217432677746, 0.00020978940301574767, 0.00063496967777609825, 0.00025423508486710489, 0.00090429600095376372, 0.00054727081442251801, 0.00085339002544060349, 0.00041180397965945303, 0.00023225876793731004, 0.00035926973214372993, 0.00016609890735708177, 0.00021766654390376061, 0.00032601534621790051, 0.00035281325108371675, 0.0020503601990640163, 0.00041552563197910786, 0.00026647894992493093, 0.001219969242811203, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-2,-5,78,-37,42,28,-28, 
  /* [1][0][][] */ 34,77,49,26,12,-46,106,127, 
  /* [2][0][][] */ -42,-3,-4,-4,-127,-14,13,6, 
  /* [3][0][][] */ 98,-4,-12,-127,-120,19,32,-21, 
  /* [4][0][][] */ -127,43,-22,-7,68,-19,54,28, 
  /* [5][0][][] */ -110,-32,20,-12,-127,12,7,85, 
  /* [6][0][][] */ -20,-127,24,-18,17,0,1,39, 
  /* [7][0][][] */ -64,0,7,103,127,-35,-36,3, 
  /* [8][0][][] */ 79,6,6,-127,-3,-23,-49,-38, 
  /* [9][0][][] */ -4,-127,-3,-6,6,91,-63,88, 
  /* [10][0][][] */ -99,-1,-3,22,-127,70,67,-13, 
  /* [11][0][][] */ 124,5,38,18,-64,-42,-36,-127, 
  /* [12][0][][] */ 1,15,43,-5,9,-79,127,61, 
  /* [13][0][][] */ 66,-22,-3,-17,127,125,119,-42, 
  /* [14][0][][] */ 127,55,-6,23,-86,-11,-28,-29, 
  /* [15][0][][] */ -12,-127,15,-10,3,-2,9,41, 
  /* [16][0][][] */ -57,-15,7,-5,-127,8,7,-1, 
  /* [17][0][][] */ -22,104,-121,1,11,-127,107,-88, 
  /* [18][0][][] */ 127,-27,-46,14,-59,22,15,107, 
  /* [19][0][][] */ 127,-45,-21,-9,42,3,26,2, 
  /* [20][0][][] */ 127,20,-20,123,-3,36,5,-54, 
  /* [21][0][][] */ 3,38,-57,-1,-17,90,-127,-91, 
  /* [22][0][][] */ -127,19,30,-7,-38,0,-54,-27, 
  /* [23][0][][] */ -43,-57,0,25,-127,61,80,-14, 
  /* [24][0][][] */ 127,-12,-14,-10,-76,-1,-2,4, 
  /* [25][0][][] */ 27,-14,-1,-23,127,52,49,-32, 
  /* [26][0][][] */ -2,-94,10,-38,5,-127,81,-50, 
  /* [27][0][][] */ -19,-127,24,-13,-1,-59,35,-6, 
  /* [28][0][][] */ -110,43,-21,9,-15,-31,127,93, 
  /* [29][0][][] */ -10,44,13,7,-3,39,-108,-127, 
  /* [30][0][][] */ 127,-23,-5,5,-81,-2,-39,-20, 
  /* [31][0][][] */ -6,-36,56,-10,22,-107,127,77, 
  /* [32][0][][] */ -80,22,5,6,-127,-103,-98,53, 
  /* [33][0][][] */ -26,13,0,23,-127,-57,-48,19, 
  /* [34][0][][] */ 3,-127,47,-6,-3,86,-68,63, 
  /* [35][0][][] */ -25,-51,-127,-8,-2,-71,47,-52, 
  /* [36][0][][] */ 7,127,55,11,-13,8,-18,-34, 
  /* [37][0][][] */ -127,35,41,-19,56,-27,-13,-113, 
  /* [38][0][][] */ -127,-15,-50,-9,46,26,34,116, 
  /* [39][0][][] */ 4,-35,66,-1,18,-77,127,95, 
  /* [40][0][][] */ -32,-13,-7,-35,-127,107,115,-31, 
  /* [41][0][][] */ -127,43,4,-77,-88,-93,-91,52, 
  /* [42][0][][] */ -36,-127,-102,-10,-11,62,-118,-82, 
  /* [43][0][][] */ -70,12,-15,-127,99,59,69,2, 
  /* [44][0][][] */ 127,-6,20,-93,33,-33,-18,37, 
  /* [45][0][][] */ -25,-127,-3,-14,-5,-70,89,11, 
  /* [46][0][][] */ 113,-4,-3,-23,127,-37,-34,1, 
  /* [47][0][][] */ 127,-2,0,106,-4,28,10,-47, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00066521426197141409, 0.0013506814138963819, 0.0004263773444108665, 0.00063873495673760772, 0.00047411757986992598, 0.00036321373772807419, 0.00086720753461122513, 0.00050058157648891211, 0.00065051304409280419, 0.0014484215062111616, 0.0013840582687407732, 0.00052505906205624342, 0.0006777851958759129, 0.0011310492409393191, 0.00031497303280048072, 0.00082080846186727285, 0.00041778566082939506, 0.00070831581251695752, 0.00051120348507538438, 0.00053707277402281761, 0.00060758419567719102, 0.00039660563925281167, 0.00071113306330516934, 0.00025441500474698842, 0.0006780587718822062, 0.00051329255802556872, 0.0040776273235678673, 0.00082596833817660809, 0.00033360373345203698, 0.00075730390381067991, 0.0006145686493255198, 0.00036384706618264318, 0.0011012559989467263, 0.0004409311804920435, 0.0015683606034144759, 0.00094915606314316392, 0.0014800721546635032, 0.00071420986205339432, 0.00040281665860675275, 0.00062309741042554379, 0.00028807268245145679, 0.000377508724341169, 0.00056542287347838283, 0.00061189965344965458, 0.0035560303367674351, 0.00072066450957208872, 0.00046216623741202056, 0.002115846611559391, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -41874, 27362, -14122, -13608, 19384, -5975, 33445, 44685, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00048342900117859244, 0.00064410193590447307, 0.001476503093726933, 0.0016683489084243774, 0.00081447826232761145, 0.00059047073591500521, 0.00067976396530866623, 0.00094021251425147057, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -49,-14,-32,11,2,-28,-5,6,-114,127,-38,107,118,4,69,-17,-10,-27,3,7,-11,-4,-20,-31,20,-93,14,66,-12,12,15,-34,-7,-72,107,16,-1,-2,-8,-14,113,-1,48,-26,-28,22,-20,-20, 
  /* [1][0][][] */ 1,30,127,2,-7,-23,1,-89,26,2,20,8,-22,9,-6,-127,9,-60,13,2,-30,35,22,-33,-19,-11,18,2,8,-6,13,-2,-6,16,19,11,-15,-37,64,-57,9,41,-9,24,-14,6,24,-4, 
  /* [2][0][][] */ 9,-51,15,-45,32,25,-5,-31,5,1,-4,16,-11,59,7,-3,-38,127,-22,-31,-17,22,-40,-11,120,2,3,-7,-31,-10,0,-38,-11,-13,0,12,-6,-4,-16,6,18,-20,-18,-2,5,24,-26,-40, 
  /* [3][0][][] */ 1,-88,-4,5,2,-4,-11,0,-7,-10,18,22,13,-9,49,4,-11,-23,3,24,-6,22,-23,4,7,50,2,8,-6,5,127,2,9,9,-1,-2,-22,-16,-10,14,-10,4,-10,25,-5,-1,-2,32, 
  /* [4][0][][] */ -95,5,-3,-1,-2,-39,3,6,39,-35,17,-16,-32,2,-11,-9,2,8,2,24,7,-30,12,1,-9,42,9,110,0,1,-9,-32,2,-127,-32,14,6,-9,-1,1,-52,-3,-9,14,-57,5,6,3, 
  /* [5][0][][] */ -20,25,22,4,-47,13,-2,46,20,8,10,8,-7,-45,8,34,-4,-81,19,0,40,-41,6,40,9,3,-73,-43,-35,-33,21,-2,-1,-62,1,-62,62,12,-43,16,24,-45,5,3,127,-14,-42,-5, 
  /* [6][0][][] */ -34,-23,-14,-3,39,-29,1,-25,-9,-10,36,-22,-12,42,-2,-57,0,4,-3,-23,-32,52,-4,-80,6,-8,-54,-65,27,46,-13,3,7,-61,-15,63,-66,-48,11,-61,-11,14,15,44,127,-31,41,16, 
  /* [7][0][][] */ 14,35,-73,28,-22,15,6,59,-7,-6,65,-35,6,-31,-11,-2,-16,-127,39,-40,61,41,19,-60,18,-19,22,0,-18,28,-15,7,5,38,-2,-26,-8,-52,-42,-68,-12,-29,38,63,-32,-21,-2,3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020545732229948044, 0.027374332770705223, 0.06275138258934021, 0.070904828608036041, 0.034615326672792435, 0.025095006451010704, 0.028889967128634453, 0.039959032088518143, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52720, -107, 9213, -269, 5347, -6160, 1200, 19257, 633, 30085, -2510, 21943, -5887, -915, 25455, 4276, 379, 16870, 32363, 11444, 4, -301, 458, 7699, -8186, 22499, 46111, 35432, 2793, 117, -1264, 1118, 560, 16982, -6922, 12887, -10876, 18690, -22423, 117948, 14872, 21511, 9438, -1713, 16427, 3456, 1305, -151, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034845605841837823, 0.00032899712095968425, 0.00017780611233320087, 0.00024541711900383234, 0.00014735173317603767, 0.00010154113988392055, 0.00097354635363444686, 0.00017983374709729105, 0.00018036062829196453, 0.00016001735639292747, 0.00011214126425329596, 0.00019605737179517746, 0.00034388113999739289, 0.00023333870922215283, 9.7957265097647905e-05, 0.00037068448727950454, 0.00019397045252844691, 0.00023664841137360781, 7.4617440986912698e-05, 0.00017114102956838906, 0.00023063528351485729, 0.0001959517685463652, 0.0002447552396915853, 0.00026323774363845587, 0.00016247478197328746, 0.00016522081568837166, 0.00064416631357744336, 9.5704024715814739e-05, 0.00021166983060538769, 0.0065723583102226257, 9.5675299235153943e-05, 0.00017181623843498528, 0.0015326350694522262, 0.00016959570348262787, 0.00020920948009006679, 0.00019001986947841942, 0.00041889061685651541, 0.00013677150127477944, 0.00028694033971987665, 2.0939534806529991e-05, 0.00022082202485762537, 5.9286401665303856e-05, 0.00017210518126375973, 0.00017885840497910976, 0.00014547421596944332, 0.00010785353515530005, 0.00022432327386923134, 0.00014870386803522706, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,109,4,81,-1,28,16,8,9,8,-9,-9,-45,9,-2,8,-23,-114,-6,-23,127,-10,-3,6,-5,8,-4,4,15,98,20,28,38,-28,2,34,-2,1,17,-67,-8,-9,17,2,-7,-10, 127,10,15,-127,28,87,11,11,124,127,7,43,-50,-24,5,8,127,-56,-59,-56,-100,25,-109,15,17,71,-31,-84,24,21,9,-123,5,-61,127,10,-39,-47,-6,115,-79,-97,-29,3,-34,-8,-127,22, -31,-3,7,15,0,65,4,17,28,8,-14,31,-14,-3,15,3,-103,29,-3,79,-31,-12,-18,-6,-5,-59,-3,29,-16,5,4,-21,8,-23,17,-19,0,47,41,-13,50,37,-15,11,-43,3,-2,-6, 
  /* [0][1][][] */ 126,7,1,-98,14,-26,35,-16,9,9,-12,53,-7,-1,18,-33,0,-49,-60,-86,10,-73,-124,-18,5,99,-15,-127,-8,33,12,-107,17,-53,-2,127,-3,58,-41,41,-62,-127,39,-88,-44,-14,-13,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-107,127,127,111,127,127,-127,-127,29,-127,-127,93,127,-127,127,-29,-41,127,-127,127,127,127,-80,127,127,127,-121,102,106, 54,5,48,-13,6,-61,44,18,-23,14,-104,-8,0,-40,127,4,62,-65,-70,86,14,-45,11,-33,1,6,-38,69,21,40,1,3,32,-44,9,67,-5,64,67,-11,-81,8,-84,-31,27,-16,-11,5, 
  /* [0][2][][] */ -53,-7,25,-17,7,34,-37,23,8,-23,12,33,6,-6,-38,18,5,22,-14,106,6,-32,-17,-12,-4,22,0,51,-9,3,47,-31,-18,-44,-32,-39,0,31,9,-22,9,-4,42,-37,-36,18,-11,17, 68,125,75,21,17,-20,124,36,19,-3,43,26,-5,-1,-91,25,-58,-56,-36,124,-37,49,11,19,31,-63,-40,30,78,0,127,22,85,-26,8,-35,-25,-17,-12,119,-27,-12,-40,45,21,-32,8,-127, -41,-4,6,-3,5,-5,-61,8,-18,-10,-40,-40,19,-9,-9,11,33,24,-8,-127,24,-10,4,-9,-7,11,-10,-55,-14,8,6,8,-20,87,-37,-23,-5,36,25,-61,4,8,-37,7,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014809382148087025, 0.013982377946376801, 0.0075567597523331642, 0.010430227033793926, 0.0062624486163258553, 0.0043154982849955559, 0.041375719010829926, 0.0076429340988397598, 0.0076653263531625271, 0.0068007376976311207, 0.0047660036943852901, 0.0083324378356337547, 0.014614948071539402, 0.0099168950691819191, 0.0041631837375462055, 0.015754090622067451, 0.0082437442615628242, 0.010057557374238968, 0.0031712411437183619, 0.0072734933346509933, 0.0098019996657967567, 0.0083279497921466827, 0.01040209736675024, 0.011187603697180748, 0.0069051780737936497, 0.0070218844339251518, 0.027377067133784294, 0.0040674209594726562, 0.0089959679171442986, 0.2793252170085907, 0.0040661999955773354, 0.0073021901771426201, 0.065136991441249847, 0.0072078173980116844, 0.0088914027437567711, 0.0080758444964885712, 0.017802851274609566, 0.0058127888478338718, 0.012194964103400707, 0.00088993017561733723, 0.0093849357217550278, 0.0025196720380336046, 0.0073144701309502125, 0.0076014818623661995, 0.0061826538294553757, 0.0045837750658392906, 0.0095337387174367905, 0.0063199144788086414, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 70616, 7548, 5940, 6838, 1432, 12692, -1989, -270, 877, 1899, 3268, 293, 1623, -845, 771, -1980, 4899, 11957, -248, 33064, 3622, 3574, 8043, -546, 3306, 4571, 25185, 11411, -92, -2839, 162, 2536, -2153, 10789, 2570, 7360, 7422, 4161, 22196, 2141, -1033, 2547, 1155, 3349, 4237, 2163, -1393, 2716, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.123007187852636e-05, 0.00030034536030143499, 0.00026082503609359264, 0.00047093076864257455, 0.0015758352819830179, 0.00039621375617571175, 0.00096200581174343824, 0.0011263011256232858, 0.00065167137654498219, 0.00072677829302847385, 0.00069014786276966333, 0.0005596306873485446, 0.00059480860363692045, 0.00056396657600998878, 0.0005810830625705421, 0.0018281824886798859, 0.00033254342270083725, 0.00035537724033929408, 0.0020507585722953081, 8.1959376984741539e-05, 0.0003311806358397007, 0.00028113464941270649, 0.00049364677397534251, 0.00093513162573799491, 0.00036875740624964237, 0.00025978271150961518, 0.00016107190458569676, 0.00031998925260268152, 0.00085582281462848186, 0.00092295941431075335, 0.00052036705892533064, 0.00032368508982472122, 0.00091933290241286159, 0.00020227098139002919, 0.00041081817471422255, 0.00025217997608706355, 0.00049318198580294847, 0.00032585239387117326, 0.00010605826537357643, 0.002123797545209527, 0.00056010443950071931, 0.0010905496310442686, 0.000409115687943995, 0.00044916608021594584, 0.00027793258777819574, 0.00050572730833664536, 0.00082750641740858555, 0.00098084914498031139, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,29,-5,-6,127,22,-47,-25, 
  /* [1][0][][] */ -9,-2,4,127,11,-8,9,17, 
  /* [2][0][][] */ 30,-127,-18,42,-7,-60,72,9, 
  /* [3][0][][] */ 127,-31,-7,15,-13,-29,26,3, 
  /* [4][0][][] */ 5,-51,127,-17,-8,-51,10,-92, 
  /* [5][0][][] */ 72,0,2,0,127,18,-13,-2, 
  /* [6][0][][] */ -19,101,-13,127,24,51,-73,-56, 
  /* [7][0][][] */ -2,127,-4,1,-4,-12,11,-4, 
  /* [8][0][][] */ 127,52,-1,3,-50,-23,2,-38, 
  /* [9][0][][] */ -127,14,5,20,53,14,-11,-2, 
  /* [10][0][][] */ -75,-5,12,127,41,26,-13,-6, 
  /* [11][0][][] */ -127,-1,14,-67,38,10,-27,-47, 
  /* [12][0][][] */ 127,21,-1,16,-44,-14,8,-39, 
  /* [13][0][][] */ -6,78,-127,-4,4,104,-70,80, 
  /* [14][0][][] */ -50,-28,-13,127,20,11,-8,-25, 
  /* [15][0][][] */ -5,127,2,-4,1,-14,8,-51, 
  /* [16][0][][] */ -20,-127,-11,-1,-2,-97,117,-28, 
  /* [17][0][][] */ 24,127,1,-14,7,79,-85,-15, 
  /* [18][0][][] */ -7,46,-127,4,6,54,-36,59, 
  /* [19][0][][] */ -70,9,5,6,-127,-4,28,32, 
  /* [20][0][][] */ -127,-17,1,3,66,-31,43,-3, 
  /* [21][0][][] */ -69,0,-4,-1,-127,-7,20,8, 
  /* [22][0][][] */ -127,-27,3,0,79,-20,31,56, 
  /* [23][0][][] */ -17,-20,-10,-10,-5,76,-127,-91, 
  /* [24][0][][] */ -7,42,-127,5,10,49,-19,73, 
  /* [25][0][][] */ 99,-36,-4,127,-81,-13,4,-54, 
  /* [26][0][][] */ 4,-21,-4,-1,-11,117,127,-25, 
  /* [27][0][][] */ 64,-12,2,17,127,25,38,-15, 
  /* [28][0][][] */ 0,127,-69,10,11,84,-29,124, 
  /* [29][0][][] */ -10,16,-5,-12,-3,87,-127,-90, 
  /* [30][0][][] */ 2,-7,-1,-127,-7,1,-4,-16, 
  /* [31][0][][] */ -69,6,1,2,-127,6,14,-1, 
  /* [32][0][][] */ -7,32,4,-127,-6,33,-86,-104, 
  /* [33][0][][] */ -66,0,-4,-3,-127,39,45,-1, 
  /* [34][0][][] */ -127,72,8,21,39,-19,4,4, 
  /* [35][0][][] */ -19,127,-21,-2,-2,-107,89,-21, 
  /* [36][0][][] */ 1,46,2,-31,-4,97,-127,-30, 
  /* [37][0][][] */ 30,-58,-10,24,21,-127,112,-18, 
  /* [38][0][][] */ 17,-127,13,4,4,69,-64,62, 
  /* [39][0][][] */ 5,-127,-14,-8,-5,-11,-51,-99, 
  /* [40][0][][] */ 113,56,9,-14,-61,85,-127,-110, 
  /* [41][0][][] */ 7,-127,21,4,-1,82,-55,126, 
  /* [42][0][][] */ 57,-3,-3,-127,-54,0,-3,-38, 
  /* [43][0][][] */ -95,-23,14,-127,54,16,-18,-13, 
  /* [44][0][][] */ -9,-29,-6,11,-23,95,127,-9, 
  /* [45][0][][] */ -127,-42,1,3,11,17,22,-25, 
  /* [46][0][][] */ 17,80,127,4,0,11,8,24, 
  /* [47][0][][] */ -7,2,12,127,10,3,1,-1, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00015002518193796277, 0.00073590257670730352, 0.00063907034927979112, 0.0011538688559085131, 0.0038610927294939756, 0.00097079819533973932, 0.0023570950143039227, 0.0027596494182944298, 0.0015967172803357244, 0.0017807433614507318, 0.0016909920377656817, 0.0013712004292756319, 0.0014573928201571107, 0.0013818241422995925, 0.0014237627619877458, 0.0044793905690312386, 0.00081479386426508427, 0.00087074103066697717, 0.0050247441977262497, 0.00020081587717868388, 0.00081145478179678321, 0.00068883271887898445, 0.0012095273705199361, 0.0022912481799721718, 0.00090352498227730393, 0.00063651648815721273, 0.00039465643931180239, 0.00078403379302471876, 0.0020969267934560776, 0.002261423971503973, 0.0012749971356242895, 0.00079308933345600963, 0.0022525384556502104, 0.00049560191109776497, 0.0010065817041322589, 0.00061788834864273667, 0.001208388595841825, 0.00079839961836114526, 0.00025986268883571029, 0.0052037029527127743, 0.0013723612064495683, 0.0026720515452325344, 0.0010024103103205562, 0.0011005413252860308, 0.00068098708288744092, 0.0012391268974170089, 0.0020275462884455919, 0.0024032648652791977, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5457, -26579, 23500, 22492, 1721, 766, 39269, 12037, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011129190679639578, 0.00078856106847524643, 0.0014424565015360713, 0.0012522580800577998, 0.0012555504217743874, 0.0012123265769332647, 0.00079306709812954068, 0.00070138747105374932, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,1,10,-95,9,26,7,5,2,5,4,-4,100,0,1,4,0,-7,-7,-1,79,-3,1,6,32,38,12,11,4,6,2,-127,12,5,-2,-1,-27,0,-17,32,7,-25,-9,6,2,-1,3,3, 
  /* [1][0][][] */ -34,-7,-2,-8,41,25,-27,74,18,8,-29,-22,14,0,19,34,0,40,15,-49,1,20,127,22,-27,0,56,5,19,-4,15,-11,15,-8,-11,-20,8,-53,10,6,-10,-8,-81,-5,-33,10,-47,-98, 
  /* [2][0][][] */ -57,17,2,13,43,-10,30,26,-10,56,7,-3,0,0,6,54,0,13,-127,22,-3,14,7,-18,-34,3,35,6,10,28,20,1,5,-11,-7,-13,11,7,6,2,36,-10,-30,3,24,-55,24,12, 
  /* [3][0][][] */ 1,0,0,9,-5,30,0,-4,66,18,-2,-1,27,0,-30,-7,0,-1,-8,1,-3,1,5,-19,-11,-8,-9,-1,-8,-2,-2,-8,-48,46,-54,-2,4,0,3,-127,1,5,1,-53,-1,-3,0,7, 
  /* [4][0][][] */ 2,-2,80,32,1,-18,-2,-1,4,-2,-4,-9,-77,0,-10,3,0,10,4,-1,67,3,3,-3,-13,33,-4,48,-8,-2,-1,96,4,6,-2,-4,14,-12,-10,-19,-5,-127,2,3,-2,-1,-1,-1, 
  /* [5][0][][] */ -6,45,3,-9,3,44,26,11,-21,27,8,52,24,0,-127,-1,0,12,-38,20,-11,9,-13,41,-21,-3,28,-3,-14,22,21,-19,52,28,-37,-6,4,17,-47,17,25,-12,-11,28,20,60,21,22, 
  /* [6][0][][] */ -24,-57,4,8,39,-44,-20,8,25,-26,-14,89,-3,0,-127,42,0,-7,51,-17,-4,3,24,-35,29,-2,-4,-12,48,-12,-10,-3,92,-34,29,1,-2,-9,-71,-21,-13,-14,-5,-28,-21,-84,-20,-27, 
  /* [7][0][][] */ -113,-22,-9,10,127,21,64,30,15,6,23,-31,-28,0,86,103,0,14,3,60,-11,0,-32,42,16,3,43,5,51,64,58,-6,-12,-13,-19,-25,5,25,24,32,75,5,-28,-14,60,-1,61,73, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.047299060970544815, 0.033513844013214111, 0.061304397881031036, 0.053220968693494797, 0.053360894322395325, 0.051523879170417786, 0.033705350011587143, 0.029808966442942619, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 57061, 57809, 61701, 43544, 227, 14116, 2846, 32155, 31217, 18949, 25668, 2408, -46690, -127, 42929, 1050, -204, 46787, 3204, 1857, -15255, -5615, 58289, 30617, -23878, 36539, 54745, 23395, -2701, 16992, -6837, -50547, 10956, 119893, 31287, 1436, 64645, -310, 165961, -23814, 15367, -27553, 3776, 97406, -2043, 75324, 986, -23064, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010633594501996413, 6.7971930548083037e-05, 0.00017027967260219157, 0.00010240203846478835, 0.00016972058801911771, 0.00017680160817690194, 0.0001870840642368421, 5.3404608479468152e-05, 7.5734562415163964e-05, 3.8768081140005961e-05, 4.889062256552279e-05, 2.2796002667746507e-05, 0.00018278040806762874, 0.005541567225009203, 6.0517228121170774e-05, 0.00026578002143651247, 0.0027484172023832798, 1.2542314834718127e-05, 8.9481181930750608e-05, 0.00018473164527677, 0.00010715273674577475, 8.0420009908266366e-05, 0.00010018529428634793, 3.7849025829927996e-05, 0.00010365709022153169, 7.8498356742784381e-05, 2.0912400941597298e-05, 4.6484015911119059e-05, 0.00023614881501998752, 6.605114322155714e-05, 5.9458292525960132e-05, 0.00019899560720659792, 0.0002223211049567908, 7.4420572673261631e-06, 8.0538360634818673e-05, 0.00025022320915013552, 1.1030086170649156e-05, 0.00046473921975120902, 2.8450691388570704e-05, 8.4195104136597365e-05, 8.1003418017644435e-05, 0.00019553398306015879, 9.6571930043864995e-05, 8.5447318269871175e-06, 0.00019914894073735923, 7.7859513112343848e-05, 0.00026490181335248053, 8.2900354755111039e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-7,-17,7,-40,-79,-68,-27,-51,9,65,34,-71,114,-43,-113,-84,37,-6,-1,-70,-111,-79,-34,-124,-64,-21,71,15,95,26,-127,-89,-7,54,18,48,-127,79,-76,-14,104,-109,-2,-35,-87,106, 76,12,-28,-29,58,-127,-127,-81,60,-76,-116,108,37,-82,-1,62,-52,-113,59,7,11,-112,-127,-70,-4,-127,-120,-40,-54,20,-56,54,29,-127,65,84,14,72,-92,127,-127,6,124,-127,2,-23,-127,94, -32,42,6,-5,-65,-109,-59,-17,86,-8,-127,38,8,-71,-100,-11,-127,-25,28,12,-15,-76,-36,-24,-11,-29,-58,-12,-10,17,-24,9,106,-87,70,32,14,36,-4,16,-79,4,7,-78,-17,5,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-44,-10,54,98,-105,-26,-108,-20,112,90,-64,27,-97,-121,-94,90,-77,42,-88,-102,-127,42,-119,-78,-39,127,-60,127,83,-43,-84,-14,84,-35,-76,-107,90,41,59,104,-109,-91,-117,82,120, 127,-82,-127,-127,127,41,94,-127,100,-127,-111,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-120,127,-100,-127,-127,-119,-127,-71,127,28,-111,127,127,-68,-127,-97,90,60,127,127,-116,-112,-127,125,127, -53,31,-62,-84,-120,-23,31,-38,127,-20,-76,35,56,-70,-25,-44,-37,-29,54,-72,57,-80,-39,-24,48,-5,-46,-60,15,-89,-35,19,30,-99,117,23,-36,-62,1,-14,36,54,9,-75,-57,-37,65,36, 
  /* [0][2][][] */ -61,-107,-34,-34,0,34,-5,-34,-38,-59,-15,59,76,-127,-127,-64,-43,-18,65,75,51,-32,-13,-60,33,-55,-10,-59,75,28,77,61,107,-26,-38,-9,-96,35,-18,30,9,38,16,-56,95,-77,4,31, 87,-73,-88,-85,81,19,7,-47,48,-71,-32,55,83,-26,16,92,-24,-31,78,118,81,-52,-18,-58,93,-68,-18,-99,-50,39,-45,111,-18,-48,67,6,-127,50,-15,-2,10,32,16,-66,127,-100,-12,40, -28,29,-42,-36,-80,-19,22,-11,59,-5,-13,32,31,-43,111,-29,-93,-5,31,60,74,-27,-1,-3,43,2,-4,-64,-14,28,-20,39,-90,-43,65,3,-20,21,27,-39,6,35,-5,-14,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0045192777179181576, 0.0028888068627566099, 0.0072368858382105827, 0.0043520866893231869, 0.007213125005364418, 0.0075140679255127907, 0.0079510724171996117, 0.002269695745781064, 0.0032187188044190407, 0.0016476433956995606, 0.0020778514444828033, 0.00096883007790893316, 0.007768167182803154, 0.23551659286022186, 0.0025719820987433195, 0.011295650154352188, 0.1168077290058136, 0.00053304835455492139, 0.0038029500283300877, 0.00785109493881464, 0.0045539913699030876, 0.0034178504720330238, 0.0042578750289976597, 0.0016085836105048656, 0.0044054263271391392, 0.0033361802343279123, 0.00088877702364698052, 0.001975570572540164, 0.01003632415086031, 0.0028071734122931957, 0.0025269773323088884, 0.0084573132917284966, 0.009448646567761898, 0.00031628741999156773, 0.0034228803124278784, 0.010634485632181168, 0.00046877865679562092, 0.019751416519284248, 0.0012091543758288026, 0.0035782919730991125, 0.0034426453057676554, 0.0083101941272616386, 0.0041043069213628769, 0.00036315107718110085, 0.0084638297557830811, 0.0033090293873101473, 0.011258327402174473, 0.0035232650116086006, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3253, 66, 8181, 5341, 5622, 5606, 8216, -36, 7, -256, 1930, 371, 10162, -67394672, 2754, 18028, -54404472, -92, -393, 8496, 3347, -17, 43, 355, 3060, -675, 52, 624, 3736, 1429, 1950, 12049, 3176, 267, 246, -1431, 235, 3313, -118, 11098, 1819, 10947, -223, -72, 9962, 163, 6493, 3411, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00064344960264861584, 0.00056579161901026964, 0.00038769791717641056, 0.00035136006772518158, 0.00035548966843634844, 0.00037206377601251006, 0.0004663333238568157, 0.0018000917043536901, 0.00051036727381870151, 0.00296783447265625, 0.00076383509440347552, 0.0022897324524819851, 0.00021731543529313058, 2.4064761294795289e-09, 0.00095281645189970732, 0.00018356516375206411, 2.4064761294795289e-09, 0.008027602918446064, 0.00052724959095939994, 0.00045435712672770023, 0.00032070191809907556, 0.0057233334518969059, 0.00041479209903627634, 0.0018109403317794204, 0.0012372029013931751, 0.000801761110778898, 0.0027929970528930426, 0.002007974311709404, 0.00030088791390880942, 0.0020531166810542345, 0.0015222425572574139, 0.00019389062072150409, 0.00023982139828149229, 0.012057803571224213, 0.00060537521494552493, 0.00084634061204269528, 0.0064889132045209408, 0.00038435988244600594, 0.0031258673407137394, 0.0003137977619189769, 0.0015590878902003169, 0.00020336316083557904, 0.00071219634264707565, 0.011431940831243992, 0.00050412083510309458, 0.00064220832427963614, 0.00043087889207527041, 0.00025878002634271979, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 13,-127,47,-45,26,-20,-47,25, 
  /* [1][0][][] */ 65,64,-25,-98,7,-16,-74,127, 
  /* [2][0][][] */ 32,3,-43,120,56,127,46,93, 
  /* [3][0][][] */ 81,71,-84,127,-99,-5,-6,17, 
  /* [4][0][][] */ -34,-106,67,8,5,30,-44,-127, 
  /* [5][0][][] */ 17,2,-38,43,5,-29,41,127, 
  /* [6][0][][] */ 63,-22,-127,-85,119,18,50,-31, 
  /* [7][0][][] */ 127,19,24,-21,29,-5,88,-65, 
  /* [8][0][][] */ 18,-101,11,108,2,21,-8,-127, 
  /* [9][0][][] */ 97,-127,8,2,-9,11,-114,89, 
  /* [10][0][][] */ -127,-38,-124,20,-15,5,-111,58, 
  /* [11][0][][] */ -19,-46,-9,-109,-127,-32,45,-14, 
  /* [12][0][][] */ 18,5,-36,65,-77,-22,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-34,-4,9,43,127,44,43, 
  /* [15][0][][] */ 43,7,20,-127,69,42,-59,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 12,23,127,23,-29,-8,32,28, 
  /* [18][0][][] */ 82,-127,20,34,-2,21,-113,3, 
  /* [19][0][][] */ -127,-14,33,77,-63,-61,-99,70, 
  /* [20][0][][] */ 34,30,-45,117,-26,-127,-4,62, 
  /* [21][0][][] */ 55,21,127,11,-16,-12,70,12, 
  /* [22][0][][] */ -82,-20,-127,6,8,12,-101,1, 
  /* [23][0][][] */ -104,127,-16,-23,9,-7,127,-83, 
  /* [24][0][][] */ 3,-60,-50,85,-6,-64,103,127, 
  /* [25][0][][] */ 9,40,30,26,127,118,-77,-48, 
  /* [26][0][][] */ -88,-30,-127,-1,6,15,-92,-3, 
  /* [27][0][][] */ 4,-28,-27,4,-38,127,62,50, 
  /* [28][0][][] */ -1,-22,-24,37,21,127,55,64, 
  /* [29][0][][] */ 90,35,127,4,-21,-12,86,-9, 
  /* [30][0][][] */ -80,127,-25,-24,9,-8,103,-47, 
  /* [31][0][][] */ -41,-95,-20,5,27,-74,127,110, 
  /* [32][0][][] */ 7,5,-50,113,-9,102,85,127, 
  /* [33][0][][] */ 0,61,-11,-109,12,-12,-6,127, 
  /* [34][0][][] */ -19,82,-3,-102,32,-8,14,127, 
  /* [35][0][][] */ 127,12,-9,-42,22,33,92,-41, 
  /* [36][0][][] */ -127,-11,20,55,-31,11,-106,80, 
  /* [37][0][][] */ -7,-25,-13,26,34,127,50,49, 
  /* [38][0][][] */ 12,22,7,82,127,-6,-22,34, 
  /* [39][0][][] */ 9,28,39,-121,28,-1,-43,127, 
  /* [40][0][][] */ 98,30,127,3,-10,-7,92,-6, 
  /* [41][0][][] */ 4,-30,-28,80,56,127,70,105, 
  /* [42][0][][] */ -81,-4,127,24,-33,18,-24,56, 
  /* [43][0][][] */ -14,-53,8,93,-16,2,16,-127, 
  /* [44][0][][] */ 36,-7,-66,-127,62,-28,-10,-102, 
  /* [45][0][][] */ -91,127,0,-54,12,-1,78,-56, 
  /* [46][0][][] */ -127,-25,37,23,-28,33,-88,41, 
  /* [47][0][][] */ 103,22,127,3,31,-20,122,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010526870610192418, 0.00092563813086599112, 0.00063427590066567063, 0.00057482696138322353, 0.00058158300817012787, 0.0006086983485147357, 0.00076292385347187519, 0.0029449597932398319, 0.00083496363367885351, 0.0048553934320807457, 0.0012496383860707283, 0.003746014554053545, 0.00035552922054193914, 3.937008052901092e-09, 0.0015588129172101617, 0.0003003136080224067, 3.937008052901092e-09, 0.013133201748132706, 0.0008625831687822938, 0.00074333074735477567, 0.00052467006025835872, 0.0093634044751524925, 0.00067860214039683342, 0.0029627082403749228, 0.002024070592597127, 0.0013116855407133698, 0.004569358192384243, 0.0032850569114089012, 0.00049225427210330963, 0.0033589100930839777, 0.0024903970770537853, 0.00031720611150376499, 0.000392349116737023, 0.019726632162928581, 0.00099039718043059111, 0.0013846178771927953, 0.010615897364914417, 0.00062881485791876912, 0.0051139360293745995, 0.00051337486365810037, 0.0025506762322038412, 0.00033270323183387518, 0.0011651570675894618, 0.018702717497944832, 0.00082474446389824152, 0.0010506563121452928, 0.00070492021040990949, 0.00042336550541222095, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1046, -43858, -8413, -12136, -32722, -2117, -23207, -26080, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021146168000996113, 0.0023874365724623203, 0.0024195080623030663, 0.0012023643357679248, 0.0012269433354958892, 0.0023271837271749973, 0.0018486140761524439, 0.0011331903515383601, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,2,-1,127,0,-1,0,-1,-124,-92,-5,0,123,-1,0, 
  /* [1][0][][] */ 0,-29,0,88,74,15,21,6,1,-4,127,-43,0,31,-11,0, 
  /* [2][0][][] */ 0,-1,-1,-12,-57,5,11,3,-1,4,-17,0,0,127,-8,0, 
  /* [3][0][][] */ 0,-9,-20,-127,79,22,67,15,1,61,-1,40,0,-1,20,0, 
  /* [4][0][][] */ 0,47,-25,35,-56,34,127,12,1,-60,18,-9,0,-6,13,0, 
  /* [5][0][][] */ 0,-16,-11,1,-24,-24,-10,16,1,8,-5,-43,0,-6,127,0, 
  /* [6][0][][] */ 0,16,-1,3,47,-23,-25,-9,-2,-105,109,61,0,127,57,0, 
  /* [7][0][][] */ 0,16,-15,127,5,-6,16,6,1,66,-52,75,0,-7,50,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.089871212840080261, 0.10146605223417282, 0.10282909125089645, 0.051100481301546097, 0.052145089954137802, 0.098905310034751892, 0.078566096723079681, 0.04816059023141861, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 20751, 26168, 8495, 8357, 73487, 12438, 41391, 9704, 4575, 28022, 15195, -445, 25089, 11326, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00012408439943101257, 0.00015386541781481355, 0.00041484372923150659, 0.0002003174158744514, 4.5154167310101911e-05, 0.00041744569898582995, 9.413633233634755e-05, 8.4186402091290802e-05, 0.00037921351031400263, 0.00022508294205181301, 0.00083738582907244563, 0.00072724185883998871, 0.00027559648151509464, 0.00018397817621007562, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-127,39,-67,80,-76,-91,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,90,-2,-72,68,-95,78,-95,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-8,-25,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,34,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-39,52,-77,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,15,9,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0052735866047441959, 0.0065392800606787205, 0.017630858346819878, 0.0085134897381067276, 0.0019190520979464054, 0.01774144172668457, 0.0040007941424846649, 0.0035779220052063465, 0.01611657440662384, 0.0095660248771309853, 0.03558889776468277, 0.030907778069376945, 0.011712850071489811, 0.0078190723434090614, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 13006, -61394, 17308, 208746, 12946, 27036, 4920, 85142, 25961, 17668, 258229, -1073741824, 31456, 30957, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023637892445549369, 0.00028176960768178105, 5.2193383453413844e-05, 1.5236095350701362e-05, 0.0002906951995100826, 0.00011852831812575459, 0.0003896845446433872, 3.4243735171912704e-06, 6.973445852054283e-05, 0.00016412667173426598, 2.2134161554276943e-05, 1.1533876076441629e-09, 0.00012832452193833888, 0.00010522580123506486, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-5,29, -5,-24,14, -127,-121,-66, 
  /* [1][1][][] */ 1,-7,-3, -23,1,-7, -1,-33,3, 
  /* [1][2][][] */ -5,15,-3, -6,5,-5, 37,-21,10, 
  /* [2][0][][] */ 30,-5,-5, 80,118,7, 40,-39,7, 
  /* [2][1][][] */ 9,11,-2, 68,127,-27, 19,-6,-7, 
  /* [2][2][][] */ 48,-67,19, 71,-47,-24, 31,-56,13, 
  /* [3][0][][] */ 8,34,4, 33,94,20, 4,8,-1, 
  /* [3][1][][] */ 22,37,7, 67,127,25, -10,-15,7, 
  /* [3][2][][] */ 8,6,6, 28,28,9, 3,0,6, 
  /* [4][0][][] */ 48,83,-5, 23,93,-8, -10,15,2, 
  /* [4][1][][] */ 54,104,55, 32,127,29, 35,58,-15, 
  /* [4][2][][] */ 58,82,33, 41,120,6, -26,22,18, 
  /* [5][0][][] */ 5,-2,-120, -5,-3,-102, -3,30,-24, 
  /* [5][1][][] */ 2,-45,-127, 2,-43,-109, 2,15,-20, 
  /* [5][2][][] */ -1,8,-16, 6,1,-7, 5,16,-7, 
  /* [6][0][][] */ 27,-62,37, 50,-87,42, 11,-19,11, 
  /* [6][1][][] */ 39,-95,64, 67,-127,75, 9,-27,19, 
  /* [6][2][][] */ 21,-34,14, 15,-44,26, -14,7,-2, 
  /* [7][0][][] */ -29,17,6, -102,-37,4, -25,22,1, 
  /* [7][1][][] */ -16,-11,0, -127,-94,-6, -7,-6,5, 
  /* [7][2][][] */ -22,30,-6, -13,10,1, -21,25,0, 
  /* [8][0][][] */ 60,46,27, 83,71,47, 85,12,-8, 
  /* [8][1][][] */ 50,30,13, 127,53,34, 60,-16,-36, 
  /* [8][2][][] */ 68,-8,-19, 93,29,-1, 28,5,-11, 
  /* [9][0][][] */ -22,-4,8, -15,-7,-1, 2,3,-11, 
  /* [9][1][][] */ 96,115,-8, 73,127,15, -8,19,25, 
  /* [9][2][][] */ -27,-25,15, 3,-31,0, 8,1,-22, 
  /* [10][0][][] */ -24,-82,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -58,-102,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,0,8, 
  /* [11][0][][] */ -5,-16,8, 17,-32,13, 16,-87,-42, 
  /* [11][1][][] */ -36,-33,-10, -26,-52,-27, -7,-49,-43, 
  /* [11][2][][] */ 0,-30,-67, 118,127,68, -29,20,-37, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -52,-99,-18, -63,-112,-26, -10,-18,-7, 
  /* [13][1][][] */ 61,114,14, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -9,-20,2, 0,-19,-3, -1,3,-5, 
  /* [14][0][][] */ 44,-9,-41, 77,-30,-54, 30,-13,-23, 
  /* [14][1][][] */ 89,-20,-78, 127,-44,-93, 58,-21,-40, 
  /* [14][2][][] */ 53,-12,-49, 73,-25,-57, 23,-9,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.4215258892800193e-07, 0.061729073524475098, 0.07358260452747345, 0.013630018569529057, 0.0039788237772881985, 0.075913473963737488, 0.030953027307987213, 0.1017640084028244, 0.00089425657643005252, 0.018210776150226593, 0.042860791087150574, 0.0057802163064479828, 3.0120091309981945e-07, 0.033511251211166382, 0.027479147538542747, 3.2470055089106609e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.61124491691589355, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,64,64,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,65,65,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.40813195705413818, } };
const TfArray<1, int> quant50_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45527079701423645, } };
const TfArray<1, int> quant53_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.57658678293228149, } };
const TfArray<1, int> quant54_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.27239176630973816, } };
const TfArray<1, int> quant58_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19718515872955322, } };
const TfArray<1, int> quant61_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29548230767250061, } };
const TfArray<1, int> quant62_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23451244831085205, } };
const TfArray<1, int> quant65_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.44151318073272705, } };
const TfArray<1, int> quant66_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.067845441401004791, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,16,16,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.070976167917251587, } };
const TfArray<1, int> quant69_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,16,16,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension44, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension46, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension47, 196608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 202800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension49, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 98304), (TfLiteIntArray*)&g0::tensor_dimension50, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension51, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension53, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension55, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension57, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64560), (TfLiteIntArray*)&g0::tensor_dimension58, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension59, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension61, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension62, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension63, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28672), (TfLiteIntArray*)&g0::tensor_dimension65, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension66, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension68, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1024), (TfLiteIntArray*)&g0::tensor_dimension69, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
