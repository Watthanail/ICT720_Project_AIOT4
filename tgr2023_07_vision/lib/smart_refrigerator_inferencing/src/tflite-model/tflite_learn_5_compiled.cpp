/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.04.2024 10:59:28

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410784;
#else
constexpr int kTensorArenaSize = 1409760;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 18206, -32614, -27286, -23294, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00032737656147219241, 0.00021755803027190268, 0.00026100629474967718, 0.00029667324270121753, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 7,-36,-65,-30,127,-37,-6,-36,86,-26,52,72,-61,-31,28,0,5,-91,-77,-22,-11,36,-40,75,15,8,-9,13,74,-44,32,8, 
  /* [1][0][][] */ 57,78,-95,-12,-55,44,127,43,-57,-74,-102,37,98,-54,105,-123,125,-94,16,-59,13,-90,-105,-15,-10,-89,65,-64,-82,-117,-17,-26, 
  /* [2][0][][] */ -29,103,13,74,-48,-10,84,32,-77,-99,77,-54,-82,70,-127,61,46,82,80,-88,-22,9,-30,-22,28,-35,81,-85,-40,18,63,57, 
  /* [3][0][][] */ 72,-65,66,12,-26,92,35,-9,0,-86,31,82,66,-3,-127,-15,87,-63,84,13,-95,1,-33,-17,70,-6,-76,72,-98,90,27,47, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0045270770788192749, 0.003008468309417367, 0.003609286155551672, 0.0041025010868906975, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -41, -96, -29, -210, 716, -62, -182, -222, 460, 434, 229, -123, -27, -661, 1393, -339, -183, -14, -245, 243, 21, 691, 1175, 61, -396, -276, -258, -132, 1795, 96, -216, -324, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0831175283528864e-05, 5.0661517889238894e-05, 4.5007775042904541e-05, 4.2593073885655031e-05, 5.1696802984224632e-05, 4.148013613303192e-05, 4.0285445720655844e-05, 4.6324428694788367e-05, 4.4375738070812076e-05, 4.9371636123396456e-05, 4.345099296187982e-05, 3.7934518331894651e-05, 5.2075611165491864e-05, 4.1708044591359794e-05, 5.1548518968047574e-05, 4.255452222423628e-05, 4.3809079215861857e-05, 4.8252772103296593e-05, 4.1038398194359615e-05, 4.0568407712271437e-05, 4.5272849092725664e-05, 4.9291618779534474e-05, 4.5369295548880473e-05, 4.5212262193672359e-05, 4.2304465750930831e-05, 4.1436847823206335e-05, 5.0866878154920414e-05, 4.6291061153169721e-05, 5.9992362366756424e-05, 4.5306875108508393e-05, 4.1879593482008204e-05, 4.0408398490399122e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -24,-72,110,21,106,-28,-93,-87,71,-89,-116,-6,75,23,-44,51,-65,-49,-70,-83,-69,-108,3,119,-125,20,77,-56,111,-30,-15,-84,105,-81,-74,45,-127,-93,-75,31,74,-97,-118,111,40,-112,109,-22,25,-82,-10,104,-77,-75,-106,123,16,74,107,-118,-60,77,-54,39,-14,13,76,103,38,90,96,-123,113,-109,39,89,-127,13,-64,9,52,32,114,3,-68,-49,-86,107,34,121,-33,-86,15,48,35,15, 
  /* [1][0][][] */ -80,30,-69,-9,-59,68,31,9,68,-110,-89,81,34,-24,21,61,97,-26,38,127,-35,-7,27,19,23,24,-38,87,27,30,86,-46,41,96,-45,28,37,65,-12,-52,-44,9,-6,-83,-23,43,-15,-40,-27,-44,77,62,21,86,-53,-47,10,94,73,72,-53,100,-52,-67,-50,40,62,35,120,39,5,12,-95,83,-46,36,99,-47,-35,63,-57,69,-58,-92,29,98,-52,-37,77,82,96,7,81,84,45,12, 
  /* [2][0][][] */ 65,18,-66,84,-14,-52,87,103,-109,85,-35,106,83,-5,62,-100,-47,-52,36,19,-92,-11,119,27,-33,90,99,14,-60,63,87,67,-66,-36,-69,-121,-78,73,106,-17,-127,-92,-8,9,-105,109,-37,-77,85,44,124,-70,-29,39,5,-1,-82,121,-65,23,-11,56,-10,74,98,31,51,94,-91,42,29,-83,55,-80,22,31,-51,-12,7,-11,29,-70,6,-33,-8,-84,-5,-46,93,111,-38,-15,-38,-84,-32,-82, 
  /* [3][0][][] */ 51,0,29,-40,-88,58,-117,42,37,9,61,5,77,100,68,16,115,98,-55,25,120,-93,-64,-119,-35,-105,-81,108,65,-78,97,4,-64,-44,-35,-14,-91,-20,43,50,-22,-94,-89,7,64,42,-47,-83,58,-52,34,21,111,17,97,-116,-127,-107,-105,-49,-98,44,-16,78,57,-26,-66,-40,-13,-65,9,100,29,-126,48,-52,53,97,94,-77,-82,-115,41,101,34,51,-36,-106,-76,56,-6,-114,111,-96,-73,34, 
  /* [4][0][][] */ 33,108,20,47,-20,26,39,10,49,101,5,58,-16,-24,6,-41,8,10,-77,-16,90,-59,94,35,-1,-2,67,-28,-29,-5,-49,-58,62,105,23,-63,2,2,-105,43,-33,-40,-43,-57,39,88,33,60,27,-39,-71,-71,-75,37,-64,7,44,-81,24,30,-20,-13,-31,-49,-40,51,17,-36,1,-66,-57,-67,-33,16,127,61,40,9,6,-37,9,-29,-95,-32,14,70,84,-6,-98,-55,38,7,21,81,-107,3, 
  /* [5][0][][] */ 123,-105,75,88,50,-121,26,71,110,-113,-3,-76,38,109,31,33,60,45,-84,88,38,52,17,-26,-118,-67,-23,-101,47,1,22,-102,-30,-6,-63,8,-127,-41,69,25,-94,-55,33,104,-45,27,36,-54,-111,90,48,41,42,0,33,-13,112,56,-72,-42,51,-77,52,-70,-21,102,-29,33,75,-9,116,-67,-43,69,-27,-76,-2,-52,11,68,107,47,42,121,-88,85,-5,39,75,-105,106,87,-15,8,74,-86, 
  /* [6][0][][] */ 13,-50,114,83,-101,-63,-2,80,-13,-96,8,-98,92,64,122,-122,47,1,10,126,-75,-127,115,63,-70,-82,-14,-65,-17,-113,56,-73,-93,-125,-54,-108,-14,51,-101,89,99,64,32,-13,-116,122,-85,-43,-91,40,-33,-54,75,-53,108,-24,7,2,-60,123,-89,1,84,-65,-42,77,106,-49,111,4,-113,5,62,-72,-92,-46,-70,-111,-60,-33,42,-27,50,-18,-72,-91,-36,-87,99,107,106,7,-43,-65,95,-13, 
  /* [7][0][][] */ 90,60,-46,-45,-82,108,-23,2,106,-13,-93,4,38,-83,39,70,48,14,4,127,52,27,-11,74,-73,98,28,44,-61,113,-19,38,16,23,41,92,-106,87,-4,-27,91,-72,85,62,48,3,101,-102,42,-29,-119,-53,-16,86,21,23,101,-76,17,-53,9,-8,80,-103,-58,-48,57,19,-72,28,53,82,77,24,52,48,-41,43,-97,36,88,-35,-24,-66,81,27,-99,97,80,10,88,47,-42,-36,10,-46, 
  /* [8][0][][] */ 33,45,-24,-79,76,29,-64,-19,16,61,50,110,21,-37,-71,-67,-61,98,-60,-22,31,-13,90,117,-102,84,58,90,-72,-12,-83,99,101,-29,65,6,127,-1,-20,71,78,105,-107,-107,-2,-31,-27,109,32,-113,-64,-15,-68,-19,-31,-93,63,94,-106,104,102,51,31,102,-40,-45,-10,98,-123,45,40,-2,75,62,20,34,-70,117,89,88,35,83,-102,-87,30,47,73,-52,33,-39,-86,90,-88,-113,-69,44, 
  /* [9][0][][] */ -1,27,105,40,105,-83,-37,-103,38,74,-5,72,-16,-77,-82,-13,30,8,-83,-46,12,94,-77,-82,112,-13,-5,29,1,2,-73,85,42,0,25,3,-17,20,-31,-41,50,-49,56,-53,71,19,-81,54,43,9,-69,-12,70,-64,-42,87,88,-40,0,4,-89,127,109,-70,-57,11,98,32,-34,95,121,-78,13,66,-79,-75,-65,-81,-30,102,32,24,96,13,-30,-79,39,-19,90,34,-34,107,86,18,58,-32, 
  /* [10][0][][] */ -80,69,97,-67,-39,107,114,29,31,15,28,-60,77,80,-32,27,-23,80,-80,-89,-16,35,63,-62,23,67,-109,-96,-31,88,-82,-87,75,92,127,60,-32,6,-42,43,-32,112,-103,-28,-111,-47,-6,-53,-15,32,45,25,88,16,-61,-60,-113,4,45,-33,-15,88,123,57,114,-65,-89,-13,19,-18,-85,-77,96,52,-95,116,6,67,74,3,89,10,61,113,-90,75,108,-15,46,27,7,-83,-50,-21,-24,-63, 
  /* [11][0][][] */ 120,4,-20,117,123,48,59,33,124,92,-89,121,-9,-93,28,-75,-69,-127,72,39,34,82,24,-125,-122,-116,-31,75,83,-19,21,-16,-110,-83,55,40,-77,82,-34,-70,-34,117,-90,5,-54,-69,-106,-105,80,115,115,54,-104,-105,17,19,-76,-64,-44,-101,-91,85,85,6,35,99,-67,29,84,59,-94,-81,43,113,-120,55,-74,35,-53,94,-124,-30,-76,-50,48,-96,12,-23,-108,-11,3,-113,-94,-45,-95,-60, 
  /* [12][0][][] */ 41,49,-47,8,92,10,-29,43,-55,62,-11,11,-9,22,40,-73,-88,-41,-54,-60,32,-8,12,86,-60,-46,77,-90,69,-22,-24,104,-61,-62,-28,9,-15,-60,8,38,97,36,-96,-29,-16,-65,-27,99,-33,-127,-44,93,24,-9,-65,94,1,-52,23,51,75,84,6,34,101,28,-37,101,47,79,40,74,70,95,-7,-6,-48,27,-96,-83,-48,88,54,22,-32,29,43,96,-70,-93,61,38,90,-32,17,68, 
  /* [13][0][][] */ 95,-75,91,84,99,108,70,47,61,-116,-3,-33,76,58,54,-55,-127,-78,-82,25,51,-42,109,-65,-75,33,6,17,-86,-100,70,27,33,90,-31,28,-90,-45,9,59,-80,65,-67,-3,-55,13,-16,-44,23,108,-42,-123,-111,16,88,-99,-63,18,-18,-85,-44,121,-90,19,-65,-80,-109,77,-44,-23,95,-17,-97,33,-93,-55,-110,57,70,-78,40,-104,74,4,-99,-111,85,110,-28,-69,-68,52,109,-56,53,-7, 
  /* [14][0][][] */ -21,-52,105,75,95,-5,17,-90,-47,-9,86,95,-8,-47,-41,-64,-16,-17,12,45,-17,59,29,83,-83,-58,6,54,-84,-109,-53,50,112,0,-8,30,118,118,32,-77,19,-59,52,95,90,-89,70,-44,127,29,40,51,73,0,9,43,2,-22,49,98,7,-51,-11,78,-75,5,95,-83,-73,-55,-59,117,15,86,73,-35,47,-53,75,53,56,-6,-96,-39,-72,-43,-84,92,106,16,94,-39,92,84,-36,83, 
  /* [15][0][][] */ 7,-30,-34,66,87,-93,57,-105,53,-5,-77,12,104,-5,-97,-117,88,7,-78,7,45,14,69,105,74,61,37,96,25,59,60,-110,-4,1,-65,-7,-70,107,102,-72,11,108,-53,-30,18,-85,-50,-86,-15,-61,-5,25,-88,-106,-56,-19,70,58,-42,108,-57,-63,-6,110,-31,93,-77,1,-67,2,70,-78,19,-22,57,-113,-2,51,101,71,-87,56,-110,-69,-127,-39,-96,32,83,66,-109,-50,48,126,-110,110, 
  /* [16][0][][] */ -61,-8,94,-56,36,111,-54,49,49,42,-106,65,-5,-42,-54,-60,103,68,73,69,113,75,-41,51,-42,54,-72,57,-93,5,43,15,-101,71,57,50,-41,53,-33,-65,22,-45,70,90,58,105,102,-11,-59,-103,14,118,-34,105,68,49,24,92,66,12,127,101,44,64,63,16,-38,93,56,97,-30,-4,31,85,59,82,-9,93,-108,-25,15,-79,64,20,10,97,101,15,82,14,-17,101,75,-41,-75,31, 
  /* [17][0][][] */ 9,-90,14,77,-54,-99,-59,-85,38,-94,77,32,74,45,-102,57,40,56,80,94,-85,-11,15,-48,38,63,-78,10,96,-18,-31,66,-34,-4,28,15,-41,102,-86,-29,-76,-34,8,-9,4,17,86,-92,71,94,-26,34,-14,94,93,-87,-84,98,-69,-88,17,-79,60,68,-49,-58,39,-94,-63,22,96,25,15,-115,-44,53,123,-43,37,-56,15,-22,-77,-85,-95,62,80,-20,23,76,-79,-127,-14,108,26,25, 
  /* [18][0][][] */ -107,99,108,-72,-14,-127,-111,-2,-6,74,-114,-54,-52,32,57,-61,16,-29,44,-34,100,-52,17,-86,13,-106,-21,109,23,26,-4,50,42,-29,-117,-115,-39,30,-46,63,-48,-6,-61,-14,-125,14,17,-12,14,-40,72,29,-125,-6,-5,81,-45,30,-33,-124,87,101,11,30,-82,-125,-37,85,58,-96,-83,107,-106,-44,-103,-111,58,53,-6,-75,-63,-7,-36,-69,101,-40,70,72,-119,-81,-78,116,91,-69,41,-35, 
  /* [19][0][][] */ 74,21,93,47,118,-81,114,114,105,-30,40,-6,-64,46,-57,69,73,-114,108,58,-18,97,-43,29,92,-65,55,-70,-100,-123,-47,41,102,-97,79,-23,10,-81,-36,-87,46,-125,-104,24,-108,36,88,-94,-7,34,26,54,-34,-4,12,14,30,114,29,-26,70,-46,122,58,-75,-5,-13,16,-23,31,114,-66,-28,-127,-77,-70,-44,-99,26,122,60,-97,-1,98,-93,5,23,-15,98,34,-20,83,-51,100,82,-63, 
  /* [20][0][][] */ -17,84,70,87,-75,82,19,47,17,14,-79,10,-11,82,44,-65,-45,-16,-56,12,22,-40,-70,-67,87,-74,-95,51,23,37,-41,116,90,52,-27,73,46,-23,-27,-103,-74,-27,-68,-98,-4,-59,-62,102,59,-96,-101,30,43,126,54,3,97,64,112,84,103,-46,-70,-19,-32,-58,-47,12,-74,-49,-70,78,-66,-55,37,21,113,75,105,127,85,6,72,-27,61,110,-14,74,17,93,40,75,24,32,-7,34, 
  /* [21][0][][] */ 70,76,82,-93,79,-40,78,13,-11,-48,-49,47,-20,31,-33,-67,-71,-20,36,-41,91,-29,78,-56,55,-61,-9,77,21,31,-2,-15,0,21,-59,-100,127,87,-110,-20,-2,11,30,4,-90,-69,-71,83,-23,-41,3,91,37,55,-77,4,-52,49,-27,118,23,-54,35,2,61,34,-18,-58,-110,-1,64,55,41,-34,63,73,-82,-6,66,92,18,88,26,-60,33,-61,60,-71,-90,76,91,-98,-47,-27,59,-39, 
  /* [22][0][][] */ 28,-16,-25,-77,53,-45,121,48,-80,99,-47,-70,115,-106,-93,-70,60,109,-88,-77,106,-46,59,52,99,-20,-72,124,-61,-70,-61,-90,58,77,20,39,53,-8,-69,-103,14,14,19,109,62,-111,87,-14,-35,-49,21,-36,-55,-76,-45,38,18,-26,-4,-14,95,-71,-79,-100,-70,32,-84,-21,81,114,39,14,-38,-7,83,-45,44,-12,86,127,115,-108,-44,-119,93,106,108,-22,-40,41,-11,109,8,57,-44,100, 
  /* [23][0][][] */ 62,-79,7,58,93,-109,2,-96,57,-57,80,69,18,-108,17,-40,82,-33,-93,83,86,-77,99,-33,-14,-19,75,20,59,40,66,-36,-35,43,17,39,93,-10,-110,1,-101,-1,6,-104,-65,-91,109,23,76,-109,-83,-56,71,-59,-54,90,-78,-21,87,40,-110,-85,-64,-19,30,33,-111,-110,38,-18,107,-71,-10,-41,-32,-90,33,-20,87,127,-55,-56,18,-105,87,2,107,-25,-90,36,99,56,90,-56,-44,72, 
  /* [24][0][][] */ -86,-59,-116,-78,-92,-120,-80,-103,59,110,76,36,106,53,-50,-127,-93,35,17,-59,88,-91,-66,-48,47,-38,65,48,98,49,-5,-71,-3,2,45,20,-64,-96,54,-31,-84,-111,96,-5,13,-47,36,64,-97,-58,-31,7,62,53,60,-85,-14,70,20,-8,82,-16,28,89,-107,89,-57,-99,-113,45,-68,-37,-49,34,87,94,55,-86,-116,-92,-91,-104,-74,-126,-7,56,-23,-111,17,-119,-3,-81,-28,20,-104,24, 
  /* [25][0][][] */ -90,-64,-90,-15,91,-75,-114,49,44,-122,-47,18,81,-7,-122,-30,-83,79,30,-120,69,80,-19,-68,8,-58,-112,33,71,-95,34,114,114,-120,39,69,95,-68,-31,-25,-93,93,-117,-3,94,37,62,30,-112,99,-55,-1,38,-17,-73,14,-27,50,-115,71,127,37,50,42,-5,71,-26,-13,-100,-13,-30,-124,31,-124,71,16,69,69,8,21,44,47,-35,79,-86,-56,-113,-100,-24,-44,102,34,-125,-5,-8,-90, 
  /* [26][0][][] */ 9,-90,-27,-24,-109,-7,-15,-25,-94,-127,86,65,-91,-57,12,-3,103,44,-57,-20,2,55,78,-3,41,60,7,39,33,37,-82,10,-36,-42,-111,-75,-57,87,-56,86,-72,92,69,21,-45,71,-24,94,-26,59,-34,86,19,-18,10,-103,67,55,70,22,-13,-68,46,-12,94,-4,-55,37,-40,91,47,76,57,-70,-74,0,68,-102,-86,20,-10,54,51,-68,76,-8,-32,32,-73,108,33,2,-41,109,57,96, 
  /* [27][0][][] */ 29,8,-57,-100,-104,-50,-64,-8,33,85,36,-105,-18,56,74,-37,58,-21,73,-86,-79,8,-28,-18,-108,45,-90,-3,54,41,-29,-9,56,62,-92,-81,-90,-60,-98,94,-88,13,23,19,86,24,64,90,79,58,69,-68,-78,-83,-2,-20,107,-24,-124,-76,-47,-79,-13,53,36,-45,-104,111,37,4,-100,5,63,-58,-15,-77,46,-63,83,89,79,-26,127,-41,-72,-60,-34,30,-39,-3,-31,-37,48,18,88,50, 
  /* [28][0][][] */ 58,47,111,51,-74,-30,-35,-62,-5,-49,78,83,-77,-60,48,103,103,127,-45,48,-13,54,-40,-26,-32,75,-15,4,-45,-43,11,-9,-60,48,71,90,75,-55,-54,41,99,65,-32,54,-33,-3,22,61,53,-37,-92,-32,-67,43,52,34,63,-21,76,63,-28,-6,-85,14,29,75,20,71,-61,48,-66,-17,57,49,16,-34,-72,0,-26,80,-30,-62,67,-27,83,-54,64,-54,-72,-32,0,-45,-31,74,-79,-39, 
  /* [29][0][][] */ 76,38,52,-51,-76,17,-104,25,80,-4,-78,-87,106,-86,-55,-40,-84,71,31,-91,-60,-25,64,19,-42,18,-37,-20,-90,-18,112,-15,52,-11,-52,-63,-3,85,4,101,39,95,-57,98,-19,101,-58,-24,10,-3,97,-71,86,-109,96,38,-87,83,-55,118,-98,85,-63,-38,-40,-62,58,98,84,-96,55,-69,127,62,56,32,111,-46,-22,13,-5,-62,18,-58,59,123,51,69,-22,96,54,71,-92,28,13,41, 
  /* [30][0][][] */ 22,-73,-67,35,-101,22,-70,-22,115,-22,-6,-44,-103,24,56,11,-10,31,94,-109,37,-107,-120,10,-117,21,-75,117,-16,-111,-99,4,-88,-76,-123,-63,11,-22,-7,20,85,-84,-21,96,102,-53,97,56,-76,76,17,-107,95,-55,-15,101,-82,-57,-87,-56,-105,-9,-81,-30,-111,-96,-101,89,-62,105,48,-40,-92,105,36,-91,-61,-77,-81,-63,23,29,-108,-24,-114,23,-115,108,-43,-127,75,56,-27,-8,6,-78, 
  /* [31][0][][] */ 91,-97,28,100,57,65,-69,-96,-42,-18,-84,-97,102,-126,-56,118,-66,-104,29,40,75,33,-36,112,43,-126,33,33,-79,-82,48,118,11,22,-105,-4,101,-32,-58,-120,65,-76,-26,38,0,-51,-40,27,67,27,103,-25,-121,-61,-89,12,-120,69,3,121,-35,-12,98,-89,86,123,-54,-84,78,-119,-127,11,-99,-54,2,1,-62,-53,49,85,-82,-36,67,83,58,104,-101,23,23,-51,-98,-67,17,112,2,-17, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017353248549625278, 0.002153114415705204, 0.0019128303974866867, 0.0018102056346833706, 0.0021971140522509813, 0.0017629057401791215, 0.0017121314303949475, 0.0019687882158905268, 0.0018859688425436616, 0.0020982944406569004, 0.0018466671463102102, 0.0016122170491144061, 0.0022132133599370718, 0.001772591844201088, 0.002190812025219202, 0.0018085672054439783, 0.0018618858885020018, 0.0020507427398115396, 0.001744131906889379, 0.0017241572495549917, 0.001924096024595201, 0.002094893716275692, 0.0019281950080767274, 0.0019215211505070329, 0.0017979397671297193, 0.0017610660288482904, 0.002161842305213213, 0.0019673700444400311, 0.0025496752932667732, 0.0019255421357229352, 0.0017798827029764652, 0.0017173569649457932, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1794, 4012, 9689, 2952, -2533, -3919, 22216, 1934, 2821, -1518, 9660, -179, -9069, 1949, 15352, 6529, 10824, 5519, -3543, -5863, 4083, 34759, 16516, 14396, 1028, 902, 5699, 2627, 2247, -4592, 5879, -2359, -229, 3647, 169, 996, 10549, 4260, -1846, 6231, 7544, 5790, 6620, 11127, 4045, 5611, 1514, 11331, 4485, -5322, -5814, 502, -260, -923, 2511, -28, 145, -824, -5152, 9125, -846, 1206, -1065, -1571, -4283, 7162, 25285, 2225, -2786, 956, 1581, 1971, 2329, -1522, 700, 8776, -400, 15965, 17651, -661, 13383, 2260, -530, 1125, 11673, 7468, 3658, 1178, 6567, 4122, -374, -7915, 810, -2179, -2080, -2149, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00034298800164833665, 0.00039536636904813349, 0.00024841213598847389, 0.00030027359025552869, 0.00039709592238068581, 0.00038152618799358606, 0.00014922715490683913, 0.00036437177914194763, 0.00021122480393387377, 0.0004135244817007333, 0.00020805647363886237, 0.00026373041328042746, 0.0002861355897039175, 0.0014240228338167071, 0.00020041776588186622, 0.00017893305630423129, 0.00017211851081810892, 0.00026516715297475457, 0.00055610359413549304, 0.0002863378613255918, 0.0001503747480455786, 7.8068580478429794e-05, 0.00018537446158006787, 0.00011675637506414205, 0.00018932556849904358, 0.00055815948871895671, 0.00052143534412607551, 0.00041858555050566792, 0.00021824498253408819, 0.00042346894042566419, 0.00024679230409674346, 0.00032935501076281071, 0.00019612979667726904, 0.00031644047703593969, 0.00030485057504847646, 0.00028279933030717075, 0.00018410416669212282, 0.00025157697382383049, 0.0003510783426463604, 0.00028286039014346898, 0.00017161476716864854, 0.00044655046076513827, 0.00022525909298565239, 0.00020858267089352012, 0.00047235036618076265, 0.00017807347467169166, 0.0003387925389688462, 0.00019242726557422429, 0.00030564982444047928, 0.00024440797278657556, 0.00026258578873239458, 0.00019759510178118944, 0.00058093061670660973, 0.00031222542747855186, 0.00030617925222031772, 0.00045385208795778453, 0.00054850033484399319, 0.00031008452060632408, 0.00029323087073862553, 0.00020588860206771642, 0.00085015164222568274, 0.00052419112762436271, 0.00027377228252589703, 0.00049533398123458028, 0.00043798546539619565, 0.00026801860076375306, 8.6153973825275898e-05, 0.00018101563910022378, 0.00041435769526287913, 0.00033298853668384254, 0.00023712062102276832, 0.00026300700847059488, 0.00057582807494327426, 0.000268577627139166, 0.00027627410599961877, 0.00024487782502546906, 0.00031743821455165744, 0.00011573336814763024, 0.00010384860070189461, 0.00020081689581274986, 0.00011040616664104164, 0.00014772434951737523, 0.00017088757886085659, 0.00021063083840999752, 0.00015584701031912118, 0.00031724566360935569, 0.00064560997998341918, 0.00020162283908575773, 0.00010670740448404104, 0.0004905961686745286, 0.0002783212112262845, 0.0002483194402884692, 0.00025602677487768233, 0.00045950795174576342, 0.00029289128724485636, 0.00018202122009824961, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -25,117,-8,-127,-42,-38,-9,-47,-22,15,-16,89,48,-62,-15,70, 
  /* [1][0][][] */ -49,33,-74,0,-32,-27,23,-83,79,44,-69,26,20,8,19,-127, 
  /* [2][0][][] */ 23,32,-27,44,70,19,-52,-59,127,-30,-8,-1,-27,120,-103,50, 
  /* [3][0][][] */ 73,-65,6,-127,23,-50,-10,1,113,26,101,52,-49,75,48,113, 
  /* [4][0][][] */ -78,95,19,34,5,-14,12,81,-6,38,22,-12,-127,-28,9,72, 
  /* [5][0][][] */ -1,100,116,22,42,65,-61,84,-80,84,-29,-68,67,-46,-127,-8, 
  /* [6][0][][] */ 26,-47,121,-120,29,18,-40,109,-84,-127,55,-50,13,109,-29,55, 
  /* [7][0][][] */ 29,127,-27,-56,79,-4,25,-29,99,75,-40,4,48,-21,47,68, 
  /* [8][0][][] */ 17,-71,13,-82,31,-61,33,-61,21,50,63,-10,33,127,66,78, 
  /* [9][0][][] */ 12,-45,-9,127,36,1,44,-45,-65,123,35,-15,-13,-47,-5,-1, 
  /* [10][0][][] */ -24,-7,-51,-127,-8,27,-32,24,44,-43,41,-2,-46,-32,-1,-2, 
  /* [11][0][][] */ 3,6,36,-8,97,-23,98,-72,-99,50,6,40,-17,127,-63,-56, 
  /* [12][0][][] */ 49,-6,-111,-11,24,-69,42,6,5,62,-70,-53,-38,127,-48,33, 
  /* [13][0][][] */ -20,11,-25,7,1,-127,-1,22,1,-9,3,-8,12,-14,16,14, 
  /* [14][0][][] */ 35,-6,102,-46,76,-10,-127,-119,-35,-61,24,-11,0,-77,11,-38, 
  /* [15][0][][] */ -95,-7,-21,-56,-7,37,127,43,-31,23,90,-68,9,87,105,-28, 
  /* [16][0][][] */ 13,63,127,78,9,24,89,52,-97,5,-48,-41,-5,16,48,-105, 
  /* [17][0][][] */ -37,-93,-9,26,-77,-19,-47,21,-127,-32,10,-52,4,45,62,-32, 
  /* [18][0][][] */ 4,50,-3,49,35,-6,22,-12,76,18,-28,-34,26,127,63,40, 
  /* [19][0][][] */ 36,-5,41,10,114,-9,-73,-57,-107,-60,-35,-127,-38,-52,28,-47, 
  /* [20][0][][] */ 72,-36,-57,-31,24,-127,3,3,-38,61,-88,-6,-10,2,7,-13, 
  /* [21][0][][] */ 100,-36,88,-22,18,7,-14,118,-17,-95,87,51,-31,127,29,111, 
  /* [22][0][][] */ -15,77,-22,127,-39,-7,116,82,-21,16,-21,9,15,10,32,14, 
  /* [23][0][][] */ 95,16,99,-117,73,-45,-8,57,14,46,-8,9,-6,-36,-127,86, 
  /* [24][0][][] */ -127,23,-6,-23,3,124,28,-27,0,14,98,-11,-75,16,65,-37, 
  /* [25][0][][] */ 30,22,18,21,9,18,72,-44,-4,-127,-12,-25,-5,-23,26,8, 
  /* [26][0][][] */ -38,-24,-2,5,-56,-7,-47,-34,-98,-45,10,-6,17,127,-43,80, 
  /* [27][0][][] */ -9,35,1,73,39,-22,-20,-31,54,7,-32,-13,0,127,-5,0, 
  /* [28][0][][] */ 15,58,62,59,127,-14,28,25,-83,-12,-45,-50,10,77,66,-45, 
  /* [29][0][][] */ 0,9,-7,10,14,-1,22,46,-28,-9,-18,-127,14,-4,-1,-5, 
  /* [30][0][][] */ -22,102,-46,78,-32,-27,58,-127,-47,53,-25,-17,76,27,82,107, 
  /* [31][0][][] */ -45,-38,5,-54,5,5,-80,-106,7,90,4,-127,-44,-47,16,38, 
  /* [32][0][][] */ -127,-81,-18,66,45,51,-19,11,6,-35,-103,44,60,11,48,57, 
  /* [33][0][][] */ -17,-43,-38,-8,-108,13,-92,0,65,4,13,-69,28,-97,127,3, 
  /* [34][0][][] */ 43,-14,73,24,49,42,-52,74,-82,-46,95,24,-5,-12,-27,127, 
  /* [35][0][][] */ -19,24,-69,10,-3,-44,9,-127,73,84,-68,12,-6,19,102,-117, 
  /* [36][0][][] */ -41,-4,2,127,21,56,85,-3,14,0,-1,21,-45,75,-85,-88, 
  /* [37][0][][] */ 8,9,34,-71,9,-2,-33,-33,-84,-20,-7,-50,1,-127,74,-62, 
  /* [38][0][][] */ 34,98,-25,-53,127,-12,27,-32,115,68,-26,23,21,-32,30,49, 
  /* [39][0][][] */ -26,83,-8,-127,-10,4,-25,41,41,-65,-34,-28,31,59,40,52, 
  /* [40][0][][] */ 16,-32,17,-102,10,-30,-6,-40,-121,29,-14,4,-17,-127,73,-37, 
  /* [41][0][][] */ -13,-15,-33,-15,-5,-23,18,-9,-29,9,-50,-27,-127,20,32,9, 
  /* [42][0][][] */ 127,88,-15,-24,-65,-49,-18,-44,2,22,81,-69,-66,41,119,-116, 
  /* [43][0][][] */ 11,127,-52,-13,75,-36,112,-12,33,59,-52,5,42,-110,-75,-10, 
  /* [44][0][][] */ -13,-38,17,-36,59,-16,-124,-127,-22,27,11,38,-23,-39,62,-66, 
  /* [45][0][][] */ -12,88,-124,-37,44,-80,69,-62,-7,21,-12,-127,73,-48,72,0, 
  /* [46][0][][] */ 19,3,-15,-95,-4,5,14,-25,-111,-19,9,22,-14,-127,56,-13, 
  /* [47][0][][] */ 19,39,21,-14,127,-12,-35,9,-49,47,5,32,-5,6,117,-39, 
  /* [48][0][][] */ -127,-87,-28,39,51,33,-5,-25,2,-19,-98,47,47,27,65,30, 
  /* [49][0][][] */ 26,10,84,71,111,11,61,51,-127,-59,-43,-85,18,116,33,-59, 
  /* [50][0][][] */ 23,8,-112,-21,23,-127,-9,1,-31,-47,-5,-31,68,-26,-30,46, 
  /* [51][0][][] */ 15,35,41,9,36,-4,-13,12,-127,61,7,-112,5,-112,-12,83, 
  /* [52][0][][] */ 22,73,-1,52,45,-30,32,22,44,105,-30,-70,20,127,73,13, 
  /* [53][0][][] */ 4,-40,-13,-26,-74,-16,-69,-3,33,12,20,-63,24,-103,127,15, 
  /* [54][0][][] */ 70,11,-43,0,127,70,-103,-32,-103,3,-49,-107,15,-53,1,-23, 
  /* [55][0][][] */ 71,-18,1,-8,36,-45,-87,-127,-41,-66,-84,28,0,-32,0,17, 
  /* [56][0][][] */ -15,-1,25,-22,1,-32,-108,56,-4,127,6,-8,18,7,7,0, 
  /* [57][0][][] */ -3,39,-34,-18,-32,-47,127,88,-26,8,-9,-20,49,16,105,0, 
  /* [58][0][][] */ 48,4,-127,21,116,90,-52,28,-53,-55,3,-4,-38,38,14,-23, 
  /* [59][0][][] */ -101,83,126,28,-83,-71,126,127,22,23,24,-23,-3,4,70,-28, 
  /* [60][0][][] */ 29,-13,-72,-21,16,-127,-37,-1,-12,2,-11,-5,23,-8,13,19, 
  /* [61][0][][] */ 25,4,32,127,91,14,32,17,-107,-5,22,35,0,25,46,-36, 
  /* [62][0][][] */ -40,127,4,-39,-13,-6,-39,51,-26,-37,-65,-54,0,-74,-33,-17, 
  /* [63][0][][] */ -45,27,-29,127,-81,19,-76,-30,-63,-22,-25,-19,28,66,21,40, 
  /* [64][0][][] */ 9,6,-4,43,-5,20,8,80,18,12,-17,-33,9,-127,49,0, 
  /* [65][0][][] */ -4,-26,15,-127,48,-45,67,-26,-9,57,2,-102,-15,-10,22,-29, 
  /* [66][0][][] */ 53,-9,76,-30,21,-7,8,127,-5,-73,49,16,-8,105,39,93, 
  /* [67][0][][] */ 8,71,-24,-127,-6,-15,-40,38,78,-93,-43,1,47,67,59,60, 
  /* [68][0][][] */ -37,58,127,14,3,-3,3,4,-46,-25,-21,-44,19,-17,101,-33, 
  /* [69][0][][] */ 127,76,-9,-12,-69,-41,-14,-37,7,27,85,-56,-65,46,74,-76, 
  /* [70][0][][] */ 32,24,-56,-12,-12,14,75,127,-32,84,-30,9,28,50,-30,41, 
  /* [71][0][][] */ 3,-12,1,8,8,-76,-13,12,-30,15,-64,0,-127,-3,46,31, 
  /* [72][0][][] */ 20,36,-127,11,20,9,38,105,-38,-29,5,-14,36,15,-10,29, 
  /* [73][0][][] */ -35,32,62,1,52,-50,-99,-127,15,-59,40,-21,5,-44,47,-14, 
  /* [74][0][][] */ -2,15,36,127,5,-7,-90,86,-46,25,-52,64,2,-124,14,-91, 
  /* [75][0][][] */ -11,67,-44,6,33,-17,47,-3,126,15,-12,-44,39,127,-24,18, 
  /* [76][0][][] */ -1,-14,3,20,-6,-13,-15,58,16,-30,-13,-127,-8,-4,24,-11, 
  /* [77][0][][] */ -29,32,-20,127,-40,-4,70,88,25,37,4,54,-2,2,-40,21, 
  /* [78][0][][] */ -11,-13,23,-92,25,-10,-46,44,27,-53,13,-17,25,127,-6,17, 
  /* [79][0][][] */ -4,-94,-127,-78,-118,-12,37,-94,114,32,18,73,46,30,60,-62, 
  /* [80][0][][] */ -24,33,125,-112,37,-69,28,-83,-91,51,-67,-113,49,127,67,-17, 
  /* [81][0][][] */ -42,37,-124,22,77,-127,-26,44,-1,-38,64,-5,16,1,18,-13, 
  /* [82][0][][] */ 127,10,-4,14,24,-124,-8,21,-17,-6,-101,-17,114,4,3,32, 
  /* [83][0][][] */ -34,91,-112,-74,-16,-28,54,-108,60,52,-54,-92,29,40,20,127, 
  /* [84][0][][] */ -49,7,66,-17,-22,4,51,-127,-11,36,-2,-68,18,50,76,-47, 
  /* [85][0][][] */ -66,127,29,-116,-54,-38,-14,5,-47,6,-63,5,11,-15,-70,-18, 
  /* [86][0][][] */ 2,11,-24,-2,-25,-24,127,30,-1,-13,-5,20,21,22,65,-1, 
  /* [87][0][][] */ -13,-34,3,-127,13,-54,33,-16,-5,19,-11,-105,-28,4,-1,-22, 
  /* [88][0][][] */ 91,8,43,-17,48,-127,14,44,-61,14,-97,-64,37,14,67,35, 
  /* [89][0][][] */ 16,-16,-30,-35,22,-8,-18,-6,-48,0,33,-91,127,0,32,-69, 
  /* [90][0][][] */ 14,-62,41,-70,68,-21,-70,74,66,-83,-35,-22,-24,127,33,-111, 
  /* [91][0][][] */ -26,-9,-20,-54,14,-24,-53,-109,4,52,-20,-127,-49,5,-17,10, 
  /* [92][0][][] */ -19,20,41,14,7,-127,4,-2,-2,-15,4,-17,-11,-22,25,1, 
  /* [93][0][][] */ 43,-17,127,-16,-53,54,34,-25,-37,23,-62,-23,-21,1,46,1, 
  /* [94][0][][] */ 28,13,-20,-24,34,-15,-2,-13,-46,-16,11,-74,127,-35,43,-35, 
  /* [95][0][][] */ 127,69,0,25,-75,-36,-74,-16,-13,13,80,-31,-65,20,70,-83, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00094069563783705235, 0.0010843510972335935, 0.00068130722502246499, 0.00082354503683745861, 0.0010890946723520756, 0.0010463923681527376, 0.00040927767986431718, 0.00099934381432831287, 0.00057931547053158283, 0.0011341524077579379, 0.00057062582345679402, 0.00072331988485530019, 0.00078476942144334316, 0.0039055943489074707, 0.00054967554751783609, 0.00049075053539127111, 0.00047206060844473541, 0.00072726036887615919, 0.001525196828879416, 0.00078532419865950942, 0.00041242511360906065, 0.0002141146978829056, 0.00050841702613979578, 0.00032022173400036991, 0.00051925354637205601, 0.0015308354049921036, 0.0014301140327006578, 0.0011480331886559725, 0.00059856934240087867, 0.0011614265386015177, 0.00067686464171856642, 0.00090330513194203377, 0.00053791515529155731, 0.0008678851299919188, 0.00083609804278239608, 0.000775619235355407, 0.0005049330648034811, 0.00068998726783320308, 0.00096288457280024886, 0.00077578669879585505, 0.0004706790205091238, 0.0012247310951352119, 0.00061780656687915325, 0.00057206902420148253, 0.0012954911217093468, 0.00048839300870895386, 0.00092918891459703445, 0.00052776042139157653, 0.00083829008508473635, 0.00067032524384558201, 0.00072018057107925415, 0.00054193398682400584, 0.0015932886162772775, 0.00085632468108087778, 0.00083974219160154462, 0.0012447568587958813, 0.0015043437015265226, 0.00085045292507857084, 0.00080422929022461176, 0.00056468014372512698, 0.0023316673468798399, 0.0014376721810549498, 0.00075086124707013369, 0.0013585271080955863, 0.0012012403458356857, 0.00073508091736584902, 0.00023629009956493974, 0.00049646233674138784, 0.0011364376405254006, 0.00091327063273638487, 0.00065033859573304653, 0.00072133581852540374, 0.0015792942140251398, 0.00073661410715430975, 0.00075772288255393505, 0.00067161384504288435, 0.00087062153033912182, 0.00031741597922518849, 0.00028482024208642542, 0.00055077020078897476, 0.00030280533246695995, 0.00040515602449886501, 0.00046868459321558475, 0.00057768641272559762, 0.00042743360972963274, 0.00087009347043931484, 0.001770681468769908, 0.00055298063671216369, 0.00029266093042679131, 0.0013455329462885857, 0.00076333736069500446, 0.00068105303216725588, 0.00070219155168160796, 0.0012602689675986767, 0.00080329796764999628, 0.00049922027392312884, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9128, 19485, -32932, -16032, -13884, 9166, 27309, -69369, 4641, 18262, 20651, 28330, -6127, 12268, -14539, 20547, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00063910795142874122, 0.00039276201277971268, 0.00021693677990697324, 0.00021538324654102325, 0.00039893831126391888, 0.00030665617669001222, 0.00038699398282915354, 0.00023571854399051517, 0.0002294439182151109, 0.00025081349303945899, 0.0005348541890271008, 0.00055332336341962218, 0.00040632547461427748, 0.00022294592054095119, 0.00040568568510934711, 0.00047995397471822798, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -11,-21,-2,-30,15,-19,-54,1,21,6,-5,12,-6,-11,-38,9,-1,0,-6,-10,1,-8,12,-1,-4,26,11,127,31,-41,39,-15,5,26,-6,-10,-9,25,-62,-3,-23,-7,0,52,18,16,20,-18,19,1,-8,15,22,-31,-10,104,16,8,-41,-37,-9,21,13,-26,-41,-64,-16,34,9,8,22,-16,-6,-33,-8,-25,-27,1,-10,10,-21,-18,24,21,5,-3,-11,-104,-4,-20,-9,6,39,-31,-35,-9, 
  /* [1][0][][] */ 59,-88,-74,-73,122,-24,51,49,-13,-75,-39,-19,20,-26,-73,39,-51,1,43,30,18,104,-10,-64,-4,-7,9,-107,34,-16,-83,36,-12,72,-4,-17,-6,15,-45,28,-31,21,-31,-17,-33,102,17,-53,13,-78,6,-41,-16,18,55,31,-35,-20,-63,-46,25,-27,38,-49,-82,102,-11,-23,-5,-30,-15,20,46,-112,-30,-10,14,-91,18,27,-20,-13,32,-7,-28,62,-16,21,30,-40,-27,37,4,7,31,127, 
  /* [2][0][][] */ -3,60,-127,10,87,59,27,80,29,-117,-5,-16,-3,22,32,29,24,19,-40,79,6,-46,90,5,57,68,-15,-17,34,-5,63,-55,14,-2,-26,48,-105,-93,62,34,19,-50,15,9,42,-14,-18,101,-19,32,-30,21,78,30,-28,95,60,5,47,-11,5,19,11,-20,31,-7,-4,-2,-37,-10,10,-44,-23,-65,22,74,105,65,23,-10,17,-44,-1,4,-56,19,3,29,-9,-8,3,-38,15,-12,-65,-16, 
  /* [3][0][][] */ 47,28,65,6,46,-11,37,-29,-7,-71,-7,-57,-7,52,55,82,28,10,36,34,127,-34,28,21,67,-43,-15,44,34,29,0,69,-112,14,45,8,-29,-41,33,20,-55,7,68,-22,13,38,-51,-52,-47,-29,-31,36,7,-76,14,13,-77,80,72,47,23,125,-28,-46,30,69,-9,-35,31,-22,17,-67,70,-25,49,4,18,22,62,35,-19,-76,4,-6,-45,17,26,40,40,15,36,26,50,105,54,-56, 
  /* [4][0][][] */ 37,-7,28,6,127,20,-25,-28,-29,-44,-8,-19,-45,34,-6,48,43,-80,-36,82,-44,13,39,-37,-11,24,33,-47,21,-3,52,-50,73,21,-31,-7,47,30,-22,18,-20,-29,-16,3,-12,-38,-10,-26,43,15,-31,25,-4,-30,13,-6,17,-10,-31,12,-13,40,78,20,38,47,-9,-14,-32,-3,42,58,2,-63,-34,-26,57,26,63,-31,-23,-9,9,-11,-49,15,18,54,-65,15,0,-23,9,16,20,-11, 
  /* [5][0][][] */ -7,0,-40,7,17,-14,51,-37,-33,-39,-40,-18,-8,31,9,14,-24,7,27,-1,45,-6,-69,81,20,-39,-2,-83,-6,22,23,43,-13,-4,20,-49,10,8,29,8,-7,14,13,-64,-1,-11,-3,16,-16,-18,7,-36,-14,-5,4,-73,-9,15,-10,26,86,49,-30,36,-15,54,-12,96,-2,89,29,31,22,12,-15,78,-35,-2,33,0,-12,-34,-12,17,-25,14,3,127,14,40,6,-24,13,16,-54,3, 
  /* [6][0][][] */ 24,-77,15,-45,-31,29,43,20,-3,16,-23,-87,-34,-18,-20,28,7,-20,-6,-14,-13,91,5,16,-26,-39,-7,-24,-8,-4,28,3,60,47,54,-6,-33,-12,16,-91,-25,106,-5,-67,24,-29,-18,-19,-35,21,-32,46,-7,-53,2,-11,20,-55,-23,13,-4,81,45,-78,28,-43,-7,-3,4,-1,127,-3,-35,-5,-30,25,-89,-32,1,-1,21,36,5,-13,-9,28,56,8,26,21,35,-17,-31,-13,-34,-18, 
  /* [7][0][][] */ 10,127,15,30,120,32,68,-23,-11,-17,24,-46,-29,19,37,40,31,-28,24,22,51,-6,28,15,3,-13,4,21,24,-4,12,22,53,-20,-19,20,3,-10,8,88,-58,49,20,-18,-11,-7,25,-54,-35,-50,31,-14,-6,-21,-11,56,87,25,-24,11,3,-5,20,-23,-52,83,-27,-61,-6,-62,26,58,-6,-27,0,7,74,63,26,1,-62,-48,-25,-1,2,64,20,-25,-5,33,-46,-22,-54,7,40,-20, 
  /* [8][0][][] */ -11,0,68,13,-127,-6,51,-23,6,85,47,19,-8,11,41,10,-76,2,18,14,-43,-11,-109,68,12,-43,55,-26,-3,12,2,66,68,-41,0,6,-21,-23,26,34,9,-22,40,-6,-60,-15,27,28,-102,-3,6,16,-72,-38,-36,15,-10,-60,-63,-12,9,-48,-43,-7,-6,83,-12,-48,7,-14,-59,-13,25,55,58,-29,-41,-33,12,6,-67,-4,-6,-10,22,13,66,55,27,-31,71,40,15,-22,47,15, 
  /* [9][0][][] */ 32,-100,-28,17,91,68,-32,-36,36,-49,72,106,-21,29,84,-68,27,-22,-14,52,-71,-98,51,-8,-19,50,15,23,-23,1,1,-42,26,-3,-113,37,31,33,-54,90,55,-92,1,119,-31,-5,-77,-27,-2,20,-27,-57,66,17,-51,-53,-18,69,15,-7,-10,-84,-38,127,-86,7,24,-19,-10,50,-83,-76,12,4,27,8,71,-77,13,9,5,-27,20,26,-9,-82,-7,-24,-20,-33,-43,27,-42,-4,-2,-46, 
  /* [10][0][][] */ -53,-15,-54,-33,-10,-10,79,-22,41,3,27,38,13,-6,-1,-4,-1,40,-25,-15,-2,5,3,15,-7,-1,5,-117,18,-46,81,-48,5,3,4,5,1,21,30,-9,15,-37,29,-48,10,2,36,58,1,47,-21,-4,-51,-8,-22,-57,13,17,1,-32,35,9,1,14,-28,102,-8,-35,24,-36,3,-25,-21,-7,9,68,16,56,-28,21,-21,-7,7,35,-4,-34,-4,127,1,5,25,-9,35,-26,49,-51, 
  /* [11][0][][] */ -103,23,30,-10,25,-47,-4,-5,-81,-16,-9,28,25,22,-14,-5,30,-8,-73,-35,27,-45,-18,7,81,-4,59,-5,-32,26,-38,21,-14,32,-3,5,-5,0,46,11,-4,6,5,-5,70,-1,75,53,58,47,-10,25,4,-75,23,-42,-127,-19,-17,-40,-6,-22,-28,23,-20,-13,8,4,5,26,-24,45,-28,11,37,-2,-39,113,-97,53,-15,-12,-57,-74,111,-9,43,1,3,54,-1,-85,-14,25,-21,-5, 
  /* [12][0][][] */ -1,-14,-23,0,63,18,-15,-12,-22,44,22,-31,10,-23,34,-5,-38,-28,10,-28,-9,31,-48,51,-25,10,-15,71,-12,38,-59,14,-9,50,12,20,-37,-7,-17,10,-13,-10,1,-35,-11,-10,8,-32,-17,-18,-14,-57,-2,-4,-1,-28,-10,-10,-1,31,-5,4,7,30,33,-80,-6,76,-24,-127,8,57,-3,6,5,92,-6,-34,-7,-2,-13,30,-52,-13,35,5,11,-53,6,16,-5,27,-58,16,1,30, 
  /* [13][0][][] */ -84,71,-9,14,-78,2,-5,-12,-57,-13,29,14,72,19,-3,6,-33,17,-35,-10,13,21,36,-58,56,8,-22,-5,12,-32,-43,-82,-90,-33,-3,8,-23,22,52,-15,-35,127,-4,-30,25,-10,-12,8,58,-19,33,54,53,-53,78,-42,3,61,49,13,6,61,-23,9,-15,-34,1,25,10,-1,45,-126,-2,-40,-96,1,47,35,-35,-47,46,-36,5,-33,47,-28,98,-13,2,3,-7,30,47,-29,-5,1, 
  /* [14][0][][] */ -21,15,-39,-50,28,-10,-21,30,-65,11,13,11,-27,-64,-100,-27,-76,-8,84,4,32,25,39,-114,-48,23,-48,-19,19,-29,-15,-34,-61,-36,17,2,-18,-3,-11,0,-8,71,-84,6,-46,42,11,-23,124,-33,35,0,45,66,-112,59,15,31,-127,3,5,36,64,29,26,14,20,5,-37,22,71,28,46,-10,-30,27,72,-101,-59,-86,3,-31,-3,58,43,-50,-49,-10,-37,12,5,73,3,54,15,-11, 
  /* [15][0][][] */ -45,-77,3,-38,3,26,1,-49,-42,15,-4,-25,35,-19,51,-23,-94,-14,-23,17,-4,29,-72,-33,-10,-10,-4,-4,-14,-15,37,-74,-17,46,18,14,-10,27,-88,2,28,-57,7,13,-35,-55,39,28,43,7,-20,-127,-6,24,3,4,-3,-12,-12,39,16,-13,35,-5,-4,7,-26,-6,-31,24,-4,43,-46,11,8,-33,-51,20,19,-2,16,37,0,52,-7,-47,-23,-20,-33,59,51,68,-30,-22,9,-9, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.027162086218595505, 0.016692385077476501, 0.009219813160598278, 0.0091537879779934883, 0.016954878345131874, 0.013032887130975723, 0.016447244212031364, 0.010018037632107735, 0.009751366451382637, 0.010659572668373585, 0.022731302306056023, 0.023516243323683739, 0.0172688327729702, 0.0094752013683319092, 0.017241641879081726, 0.020398043096065521, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 16737, 61911, 161, -325, 14730, -5189, -685, -1613, 5027, 12860, -2658, -798, 1182, 5208, 4820, -10612, -4601, -168, -1365, 11673, -12342, 27248, -6675, 6579, 30037, 282, -6439, 17190, 16471, -19173, 257, 21327, 23882, -9088, 2169, 309, 684, -1188, 1133, -9297, -6527, -1601, -1878, -347, 32902, -3172, 13555, 958, -12382, 1305, -123, -513, -3114, 15091, -4251, 11349, 14457, -555, 39075, 1295, -8523, -1647, -1280, -737, -1745, 10846, -1602, -6053, -2374, 3042, -641, -7634, 575, 91, -2965, -6386, -1750, -1025, 41686, -7574, -6235, -13255, -38, -1780, 59022, -17092, -10321, -25784, -5023, 8337, -408, 38024, -137, -2561, -1897, -896, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00014999367704149336, 9.6383482741657645e-05, 0.00014546650345437229, 0.00028505842783488333, 0.00027900413260795176, 0.00015548136434517801, 5.7173663662979379e-05, 9.2197762569412589e-05, 0.00033983195316977799, 0.00018724173423834145, 0.00025142540107481182, 0.00013032824790570885, 0.0003770771436393261, 0.00023090252943802625, 0.0005340178613550961, 0.00013294610835146159, 0.00018212416034657508, 0.0002270727272843942, 0.00021266880503389984, 9.3810907856095582e-05, 6.1662482039537281e-05, 4.4000498746754602e-05, 0.0001743614993756637, 0.00010485073289601132, 8.4260354924481362e-05, 0.00016657188825774938, 0.00018615763110574335, 0.00018225747044198215, 7.8992467024363577e-05, 0.00055411894572898746, 0.00055056193377822638, 0.00022771750809624791, 0.00011417023051762953, 0.00017279060557484627, 0.00028769052005372941, 0.00039566686609759927, 0.00043157089385204017, 0.00025199397350661457, 0.00037209055153653026, 8.2300059148110449e-05, 0.00026597842224873602, 0.00029252920649014413, 0.00047578953672200441, 0.00012018828419968486, 0.00037576293107122183, 0.00012427385081537068, 0.00010794260015245527, 0.0003479171427898109, 0.0010554105974733829, 0.00014869339065626264, 0.00041647514444775879, 0.00018805907166097313, 0.00018071829981636256, 0.00019086978863924742, 0.00020200858125463128, 0.0001373474660795182, 0.00020531879272311926, 0.0005796208861283958, 4.6138939069351181e-05, 0.00020224327454343438, 0.00033164749038405716, 0.00038850659620948136, 0.0001595427020220086, 0.00016309230704791844, 0.00014775095041841269, 0.00016110602882690728, 0.00026039668591693044, 0.00037181749939918518, 0.00021813098283018917, 0.00013106777623761445, 0.00027469141059555113, 0.00011702010669978335, 0.00034631334710866213, 0.00015412802167702466, 0.00025188652216456831, 0.00029293244006112218, 0.00016486096137668937, 7.5349998951423913e-05, 6.2380197050515562e-05, 0.0001779841841198504, 0.00024343004042748362, 0.00027040744316764176, 0.00020779983606189489, 0.00039327921695075929, 6.0871374444104731e-05, 8.1319252785760909e-05, 8.8516993855591863e-05, 0.00068103190278634429, 0.00027461120043881238, 0.00014409080904442817, 0.00043548495159484446, 3.1861160096013919e-05, 0.00017062290862668306, 0.00011549820192158222, 0.00036613224074244499, 0.00035157980164512992, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -49,-73,-12,127,22,70,81,-56,-12,-17,-16,3,-31,2,36,0,-6,-44,28,20,21,-127,127,9,-85,11,51,-28,-124,-127,41,25,11,30,62,-20,-31,-10,33,-4,-12,29,-104,84,23,-62,33,40,-17,50,-23,20,6,-6,13,50,-92,-49,-60,-23,-10,3,12,41,66,-24,74,13,-9,16,21,127,23,26,26,-4,-9,20,127,-4,-14,13,-27,21,120,19,-75,-16,-1,-32,-17,-48,3,-27,-16,29, 127,-127,71,108,-44,127,39,-113,70,5,-19,127,127,-92,-13,15,11,127,127,-115,127,-69,80,66,-122,-113,-68,-34,-57,45,-60,-20,-88,53,-127,-86,-44,-14,-50,64,1,127,127,90,-55,-105,-112,-53,-14,-127,44,85,69,-32,44,86,-46,42,-81,-118,-45,-41,-59,66,71,-58,29,30,-81,32,-17,89,119,127,14,17,2,61,-32,57,65,125,127,-22,-8,76,-108,127,-127,-97,3,-127,-89,-127,-38,107, -78,-18,29,-84,14,-27,68,-4,80,-34,-29,26,-18,-4,-8,-13,-6,-16,9,-7,-23,-119,33,-2,-127,102,8,-54,118,48,-14,10,2,21,14,-30,-11,35,24,14,25,14,-121,78,16,-13,32,12,-14,12,-16,5,-6,1,-4,25,-72,7,-28,49,3,41,39,2,-8,-37,-30,23,10,6,-1,42,10,-24,-2,4,-10,-1,-82,3,-21,-22,-15,5,-104,12,-34,-23,-57,28,-28,-46,31,-25,-14,4, 
  /* [0][1][][] */ -65,-76,71,-38,-49,92,27,127,-50,-21,0,-114,23,-110,77,32,-1,-62,-17,89,57,-85,48,51,-88,-9,127,-20,-25,65,125,-99,-127,91,-86,-58,-38,35,-25,101,-47,-25,-2,52,-47,127,-23,60,15,94,21,-2,17,-54,28,32,127,123,-68,-88,127,-27,-32,127,69,-36,-17,0,126,38,127,92,-41,102,-2,15,15,14,-34,9,-42,127,-81,114,-1,33,-52,30,79,-127,-34,-10,127,-70,-24,2, 68,126,52,-114,127,82,98,38,-127,127,127,-40,-66,-127,-127,127,127,-65,-125,-52,107,105,-120,127,-104,-90,-43,127,-127,110,-127,-127,-86,127,112,127,127,-127,-104,127,-63,-97,109,-127,-127,-31,-127,-127,127,-111,87,44,127,127,127,-127,104,-127,-127,127,18,-78,-127,-101,-127,127,-127,127,-127,-127,-105,-80,-127,-77,127,127,-127,127,-79,127,127,35,-43,-127,57,127,96,45,127,17,127,9,-70,37,127,-127, -55,-20,-49,38,-58,-102,45,-22,17,-32,-28,97,0,90,13,13,-2,63,-6,127,4,-106,-36,6,-77,109,-70,-18,-70,-16,18,-61,-69,46,5,-17,-31,48,-62,46,127,-2,-44,40,-39,-53,12,43,8,119,-11,7,-35,-71,4,21,91,2,2,19,-35,127,100,-49,-44,14,37,-10,-79,121,-14,-77,-3,-54,-13,-18,28,21,79,-37,-69,-34,60,19,-43,-13,70,22,12,67,-47,16,-43,100,-27,-2, 
  /* [0][2][][] */ -72,-4,-5,-23,11,-51,84,28,55,-27,-38,1,14,21,-27,4,-5,66,8,2,-48,-101,6,-9,-25,-55,35,-66,86,40,27,25,14,-5,-15,-47,-8,38,2,2,-13,-5,-64,108,1,35,13,33,-15,-30,12,-19,23,-3,10,16,-69,25,-19,13,15,3,-15,-4,-1,-43,-49,14,-31,12,26,31,13,-18,31,9,18,9,-81,-12,-7,-4,16,18,-127,10,14,-44,-59,-48,-28,-55,8,57,-20,-6, 121,30,-127,-36,-74,-28,51,34,-64,-27,-21,-105,-79,110,-13,40,4,-51,-9,-127,103,-58,-34,1,-106,127,-50,22,-41,-20,-8,-6,-62,25,26,5,-24,-29,127,56,13,-13,70,-27,-41,75,-65,-45,-32,-5,-127,-127,-51,-26,3,41,-61,-6,4,38,-6,-16,15,-47,-54,35,62,-24,117,105,-23,-65,12,-54,5,8,98,8,50,22,14,-92,-49,5,0,10,127,39,-63,42,-19,-109,40,79,-10,28, -59,5,-19,27,13,-73,-127,8,-15,-6,-17,6,11,-25,19,2,-5,-16,7,20,-45,-86,21,0,12,-91,20,5,-54,-38,-6,16,41,-12,-8,-24,-37,6,46,-38,25,-1,-53,-22,1,69,23,17,-9,-1,12,-8,17,4,-1,-2,-61,-12,0,-40,-12,12,97,-11,33,1,-3,28,-1,8,-2,26,-18,15,3,18,41,7,77,-13,4,-3,-4,-13,68,5,42,-40,59,44,-18,-57,-8,3,-15,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0063747311942279339, 0.0040962980128824711, 0.006182326003909111, 0.012114983052015305, 0.011857675388455391, 0.0066079581156373024, 0.0024298806674778461, 0.0039184046909213066, 0.014442858286201954, 0.00795777328312397, 0.010685579851269722, 0.0055389502085745335, 0.016025777906179428, 0.0098133571445941925, 0.022695757448673248, 0.005650209728628397, 0.0077402763999998569, 0.0096505908295512199, 0.0090384241193532944, 0.0039869635365903378, 0.002620655344799161, 0.0018700212240219116, 0.0074103637598454952, 0.0044561559334397316, 0.0035810649860650301, 0.0070793051272630692, 0.0079116988927125931, 0.0077459425665438175, 0.0033571799285709858, 0.023550054058432579, 0.023398881778120995, 0.0096779940649867058, 0.0048522348515689373, 0.0073436005041003227, 0.012226847000420094, 0.016815841197967529, 0.018341762945055962, 0.010709743946790695, 0.015813848003745079, 0.0034977523609995842, 0.011304083280265331, 0.012432491406798363, 0.020221054553985596, 0.0051080021075904369, 0.015969924628734589, 0.0052816388197243214, 0.0045875604264438152, 0.014786478132009506, 0.044854950159788132, 0.0063194688409566879, 0.017700193449854851, 0.0079925106838345528, 0.0076805274002254009, 0.0081119658425450325, 0.0085853645578026772, 0.0058372672647237778, 0.0087260482832789421, 0.02463388629257679, 0.0019609048031270504, 0.0085953390225768089, 0.014095017686486244, 0.016511529684066772, 0.0067805647850036621, 0.0069314227439463139, 0.0062794154509902, 0.006847006268799305, 0.011066858656704426, 0.01580224372446537, 0.0092705665156245232, 0.0055703804828226566, 0.011674384586513042, 0.0049733542837202549, 0.014718317426741123, 0.0065504410304129124, 0.010705176740884781, 0.012449628673493862, 0.0070065907202661037, 0.00320237479172647, 0.0026511582545936108, 0.0075643276795744896, 0.010345776565372944, 0.011492316611111164, 0.0088314926251769066, 0.016714366152882576, 0.0025870334357023239, 0.0034560682252049446, 0.0037619723007082939, 0.028943855315446854, 0.01167097594588995, 0.0061238594353199005, 0.018508110195398331, 0.0013540992513298988, 0.0072514736093580723, 0.0049086734652519226, 0.015560620464384556, 0.014942141249775887, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 3203, 7610, 9168, 28538, 18425, -3631, -1664, 7108, 24938, -4596, 11837, 2352, 12556, 13131, 23741, 1901, 1892, 7405, 12192, 7289, -427, 745, 11896, -1069, 4550, -216, 14677, 10555, 4994, 59959, 37156, 17138, 7897, -781, 8615, 2528, 1890, 4035, 19163, -1113, 9221, 12863, 33278, -3304, 30612, 9136, 5119, 14434, 74800, 11341, -495, 9877, -3771, -376, -1952, 5519, -460, 12372, 4553, 8883, 6311, 10702, 8353, 3413, 12812, 10162, 4192, -6091, 8757, -2435, 4932, 8913, 20024, 6117, -3814, -5750, 6383, 267, 2862, -1023, 18464, 9622, 4974, 13743, 3224, 170, 10688, 80652, 9141, 11811, 6703, -219, 8801, 11754, 8341, 14956, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00015684422396589071, 0.00018936862761620432, 0.00020295109425205737, 8.1253725511487573e-05, 0.00015908910427242517, 0.00027164453058503568, 0.00046067577204667032, 0.00022500248451251537, 9.2571193818002939e-05, 0.00028746546013280749, 0.00023050590243656188, 0.00036404814454726875, 0.00010275526437908411, 0.00018158853345084935, 9.9402132036630064e-05, 0.00032396364258602262, 0.00022882230405230075, 0.00016718819097150117, 0.00018248395645059645, 0.0001619683753233403, 0.00029920932138338685, 0.00054920860566198826, 0.00016571742889937013, 0.00059532304294407368, 0.00057733943685889244, 0.00021396776719484478, 0.00015478373097721487, 0.0001401929184794426, 0.00033332078601233661, 5.8807385357795283e-05, 7.5325369834899902e-05, 0.00014316719898488373, 0.00020852101442869753, 0.00040366104803979397, 0.00023028909345157444, 0.00023664784384891391, 0.00027568114455789328, 0.00035274040419608355, 0.00013802967441733927, 0.00052726175636053085, 0.00019740786228794605, 0.0001271604560315609, 8.1510188465472311e-05, 0.00033469535992480814, 0.00010821042087627575, 0.00016234612849075347, 0.00032946726423688233, 0.00018380115216132253, 5.4718486353522167e-05, 0.00018824158178176731, 0.00029546942096203566, 0.00017756089800968766, 0.000292266282485798, 0.00023741008772049099, 0.00049235019832849503, 0.00019355324911884964, 0.00021593882411252707, 0.00015203360817395151, 0.00046296094660647213, 0.0001730374206090346, 0.00025790886138565838, 0.00012271493324078619, 0.00017084302089642733, 0.00029100404935888946, 0.00019481296476442367, 0.00019412611436564475, 0.00030772027093917131, 0.00021916885452810675, 0.00019520755449775606, 0.00029969241586513817, 0.0002150711661670357, 0.00017555621161591262, 0.0001051243525580503, 0.00017128845502156764, 0.00039817488868720829, 0.00023031311866361648, 0.00025919728795997798, 0.0003150652046315372, 0.00027695298194885254, 0.00035571344778873026, 0.00011047317821066827, 0.00017520431720186025, 0.00017570545605849475, 0.00014365534298121929, 0.00037746666930615902, 0.0002276255254400894, 0.00021702177764382213, 4.7767756768735126e-05, 0.00015623774379491806, 0.00018809681932907552, 0.00019193722982890904, 0.00044409232214093208, 0.0001665888266870752, 0.00013892278366256505, 0.0001378927263431251, 0.00011308930697850883, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -28,83,-48,89,3,0,22,-18,27,38,-44,127,7,-126,20,-84, 
  /* [1][0][][] */ 26,95,-13,-55,76,-85,127,-109,11,86,-51,-46,31,-37,20,50, 
  /* [2][0][][] */ -72,41,-2,-6,24,-18,58,127,-36,23,113,-71,-33,33,28,-12, 
  /* [3][0][][] */ -51,17,50,45,-33,8,87,127,12,90,-103,4,47,-45,-30,-17, 
  /* [4][0][][] */ -27,-26,9,84,-65,104,-28,31,36,-21,29,41,-8,2,-127,-63, 
  /* [5][0][][] */ -13,-63,74,12,18,-6,12,79,-78,127,-49,-114,-5,57,-77,-33, 
  /* [6][0][][] */ 16,-13,17,-31,44,81,-89,-79,-10,14,65,-3,127,2,14,-35, 
  /* [7][0][][] */ 51,19,127,-31,-51,-65,26,0,-73,31,-71,-82,6,-14,86,-4, 
  /* [8][0][][] */ 23,-9,60,98,-32,79,-11,29,-13,-9,-24,-77,-5,-14,-127,-84, 
  /* [9][0][][] */ 22,-87,71,10,61,-39,-27,0,85,-39,113,-47,-77,2,-127,-36, 
  /* [10][0][][] */ -13,-52,10,-51,-117,-5,1,64,62,127,11,-64,5,72,90,19, 
  /* [11][0][][] */ 34,-60,12,-70,4,-4,-106,-127,-30,38,-23,-1,-10,-4,8,-70, 
  /* [12][0][][] */ 2,-23,-7,-64,-43,-76,-46,6,-59,-68,-19,-5,28,127,73,65, 
  /* [13][0][][] */ -43,-116,-77,40,-63,-26,0,-63,43,74,-32,25,6,5,127,-8, 
  /* [14][0][][] */ -39,-40,60,21,6,22,2,110,29,72,34,-6,10,45,-48,127, 
  /* [15][0][][] */ 11,-50,3,60,26,-3,83,-11,5,-127,26,-36,1,-26,-3,-33, 
  /* [16][0][][] */ 32,-60,-82,20,-17,14,32,-43,127,60,68,17,-2,108,33,97, 
  /* [17][0][][] */ -57,-83,-8,108,80,55,-4,-38,127,-56,-17,-11,24,79,-77,37, 
  /* [18][0][][] */ -20,46,18,25,-86,16,-9,28,-50,-23,-45,-76,21,-127,55,-16, 
  /* [19][0][][] */ 28,-86,48,-117,44,-18,-125,39,75,-127,63,-10,-8,67,38,108, 
  /* [20][0][][] */ 38,-28,47,-76,-29,36,0,72,-4,-25,103,-21,-14,-21,-10,127, 
  /* [21][0][][] */ -42,-48,-63,-11,25,9,-113,5,0,119,-17,98,-127,29,36,4, 
  /* [22][0][][] */ 27,-8,53,-8,21,-40,-12,-33,-127,34,-11,-76,-35,-17,84,-64, 
  /* [23][0][][] */ 24,-2,5,-18,1,14,-26,-3,0,-10,59,-8,127,7,1,-60, 
  /* [24][0][][] */ -26,-33,16,-76,-80,5,42,24,-43,22,-12,-104,2,-127,53,28, 
  /* [25][0][][] */ -109,-19,4,-22,58,-93,-64,-127,-20,44,-31,7,-81,-34,-43,-67, 
  /* [26][0][][] */ 18,-56,79,-83,116,-63,10,-8,127,-48,91,31,-17,93,-9,59, 
  /* [27][0][][] */ 88,-53,18,-22,-56,-32,2,-29,-30,36,-127,31,1,-11,13,42, 
  /* [28][0][][] */ -127,-34,-91,-58,65,-12,36,-61,-12,25,-75,42,58,2,-77,4, 
  /* [29][0][][] */ -90,-49,-3,127,14,-6,10,-74,-14,-8,-98,45,29,-77,32,-67, 
  /* [30][0][][] */ 40,-60,127,-62,37,68,-74,76,-3,-89,90,-15,-72,9,-68,31, 
  /* [31][0][][] */ 16,-67,-31,-42,-17,-24,15,-24,-13,28,78,17,-14,80,45,127, 
  /* [32][0][][] */ -14,70,-31,31,-127,36,-60,-31,-60,-27,5,44,13,45,32,54, 
  /* [33][0][][] */ 33,-21,1,127,33,-26,20,-31,-57,53,55,-10,11,-6,22,102, 
  /* [34][0][][] */ 50,-31,15,-12,95,-66,-127,-31,-46,102,-64,0,-30,-10,-23,18, 
  /* [35][0][][] */ 65,19,-26,0,19,-127,-34,-20,-11,-6,-67,11,70,27,9,18, 
  /* [36][0][][] */ 22,2,-127,13,46,9,-24,20,-29,-13,-7,0,1,11,-6,10, 
  /* [37][0][][] */ 18,22,127,5,-60,33,32,-50,-22,35,-49,16,28,-12,-33,-6, 
  /* [38][0][][] */ -127,-21,5,5,-10,98,-3,-5,35,-10,95,8,-25,13,4,-14, 
  /* [39][0][][] */ -29,-14,23,51,35,-15,-127,38,5,20,4,-28,2,-36,0,-16, 
  /* [40][0][][] */ 26,-7,-65,127,-42,23,23,36,-70,-48,-26,92,-7,50,-26,-30, 
  /* [41][0][][] */ -9,51,-51,-14,-39,40,127,114,-98,89,-16,-25,35,94,17,-6, 
  /* [42][0][][] */ 49,-6,-19,-53,-8,59,-27,106,14,-117,127,19,7,-31,-56,-11, 
  /* [43][0][][] */ -21,40,58,-31,46,-12,-79,-49,-33,23,-33,-44,-127,-14,35,-38, 
  /* [44][0][][] */ 16,3,-23,-17,11,-33,9,-34,127,-6,27,22,30,86,23,29, 
  /* [45][0][][] */ -11,-127,-9,-95,43,-30,18,50,15,-67,-9,-37,24,87,6,124, 
  /* [46][0][][] */ -67,-4,-24,127,-74,-7,8,-72,-102,61,-9,12,-19,30,18,-41, 
  /* [47][0][][] */ -48,-38,-88,99,-18,27,-21,-11,24,61,79,127,-32,14,39,26, 
  /* [48][0][][] */ -19,-29,34,-127,24,-10,-24,2,-63,7,33,2,-15,86,124,51, 
  /* [49][0][][] */ -35,-30,26,127,7,24,-17,-3,14,11,-36,-16,-51,-64,-16,-122, 
  /* [50][0][][] */ -8,87,28,-124,61,26,-20,28,127,13,-26,15,18,-46,34,-32, 
  /* [51][0][][] */ 24,7,14,7,55,-19,-73,-127,21,-92,-11,24,21,-5,-27,24, 
  /* [52][0][][] */ -6,7,-16,64,26,6,-58,123,-85,127,-20,-19,81,77,9,-57, 
  /* [53][0][][] */ -32,105,-33,-70,-62,20,32,-30,-63,-37,-56,89,7,-127,-92,-12, 
  /* [54][0][][] */ -7,7,22,43,54,-28,1,-50,-7,45,-13,-30,-4,127,-55,-29, 
  /* [55][0][][] */ -56,127,84,-6,65,-5,-6,1,-64,13,28,-52,7,-28,77,-32, 
  /* [56][0][][] */ 48,28,-22,-111,37,-22,2,45,55,-20,17,127,22,13,62,90, 
  /* [57][0][][] */ 10,-9,-6,50,-29,-1,29,127,-20,2,-3,-29,8,20,10,-9, 
  /* [58][0][][] */ -7,127,35,-103,20,35,-2,39,95,-28,3,60,9,-97,53,100, 
  /* [59][0][][] */ 32,53,36,-107,-38,-2,12,-2,31,19,19,-89,-15,-127,-80,1, 
  /* [60][0][][] */ 48,-22,106,-76,-36,127,30,-21,-7,25,-30,-19,37,2,67,14, 
  /* [61][0][][] */ -29,-33,-14,-17,-20,71,127,90,-18,44,-7,9,27,93,57,-55, 
  /* [62][0][][] */ 14,-2,-31,-57,-11,-16,-81,-32,-51,-127,-46,-109,84,-92,62,91, 
  /* [63][0][][] */ 12,-31,26,-61,32,-6,-75,-127,-36,71,-6,29,43,-2,19,-53, 
  /* [64][0][][] */ -34,1,44,37,71,-9,-22,-127,22,-87,6,-35,2,-17,1,16, 
  /* [65][0][][] */ -127,47,24,-94,23,47,63,-67,-86,27,33,-17,24,13,-15,-23, 
  /* [66][0][][] */ 54,16,127,11,-76,-13,-39,72,-34,2,87,-106,0,73,-87,-12, 
  /* [67][0][][] */ 40,-14,-33,100,84,-59,-71,-120,44,-111,-67,-52,-127,-3,-103,3, 
  /* [68][0][][] */ -27,-53,-72,106,-82,-78,37,-127,-68,11,88,-28,-90,36,110,-106, 
  /* [69][0][][] */ -60,28,-79,53,-33,-127,-7,50,64,29,91,12,76,42,-1,-19, 
  /* [70][0][][] */ 36,3,-17,-27,-28,21,127,88,-11,21,-27,-5,33,73,31,-2, 
  /* [71][0][][] */ 12,22,-46,-84,39,-42,9,76,-23,-51,-37,-12,28,-127,69,35, 
  /* [72][0][][] */ 16,90,15,72,22,-20,-77,-127,2,40,-62,-11,73,48,54,32, 
  /* [73][0][][] */ -30,-127,-54,-83,-100,-30,83,-16,-38,13,-63,-18,30,-70,36,15, 
  /* [74][0][][] */ -32,28,52,98,-9,18,-127,99,25,-39,-52,-42,-2,-3,-29,-15, 
  /* [75][0][][] */ -17,32,-44,-33,-16,75,76,127,8,27,3,-84,-111,83,48,67, 
  /* [76][0][][] */ 33,-51,12,-27,69,-78,-99,-57,-39,5,3,-64,2,-4,127,-44, 
  /* [77][0][][] */ -10,-12,-79,-20,-62,-37,4,-23,127,13,-82,24,28,61,37,-107, 
  /* [78][0][][] */ -62,-126,1,71,92,76,-3,51,-43,-109,-127,29,67,-31,95,69, 
  /* [79][0][][] */ 36,-22,34,-32,127,18,33,25,95,17,13,43,6,-21,15,-44, 
  /* [80][0][][] */ -19,-31,63,-93,-11,-29,-2,19,-64,-28,5,-26,-5,127,-23,39, 
  /* [81][0][][] */ 40,-45,82,8,-7,27,-11,-16,-4,20,-11,-67,2,58,-127,49, 
  /* [82][0][][] */ -127,-26,57,-78,0,-5,-13,-59,-28,-49,-49,-55,-18,-97,-100,-7, 
  /* [83][0][][] */ 24,13,-23,-59,-56,2,1,36,-92,-36,-14,-127,58,-96,-43,38, 
  /* [84][0][][] */ 127,33,30,38,-20,4,-39,32,-44,-43,94,-37,-23,21,94,-73, 
  /* [85][0][][] */ -23,-30,9,-40,44,21,-72,98,-77,-127,-59,-61,-30,71,118,-111, 
  /* [86][0][][] */ -15,18,48,36,-24,127,-101,37,-60,-81,72,-4,-23,-120,-40,-13, 
  /* [87][0][][] */ 127,-23,7,-6,-53,-61,13,-31,5,35,-67,-20,49,-15,33,20, 
  /* [88][0][][] */ 58,53,-19,8,17,-26,-21,-21,79,18,33,63,-19,-26,71,-127, 
  /* [89][0][][] */ 65,79,-127,-9,-32,-31,36,-68,90,58,11,-48,-29,15,-18,-120, 
  /* [90][0][][] */ -13,3,-6,-90,-89,33,107,-43,57,-87,18,-127,-16,-41,-56,-63, 
  /* [91][0][][] */ -34,-22,-31,-73,-48,19,5,-73,-24,73,111,127,-34,-30,24,85, 
  /* [92][0][][] */ 9,-8,37,8,65,27,-115,-127,67,-77,26,-23,-87,-4,-11,-51, 
  /* [93][0][][] */ 64,-2,56,-127,-43,27,-62,55,88,-121,105,-3,-72,126,-62,7, 
  /* [94][0][][] */ -112,51,-127,16,95,-125,-24,-3,24,-77,95,-15,17,34,-17,20, 
  /* [95][0][][] */ -72,92,11,-127,23,-20,-35,0,13,-39,-63,-51,-21,21,-73,-26, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00050202093552798033, 0.00060612376546487212, 0.00064959801966324449, 0.00026007377891801298, 0.00050920626381412148, 0.00086946925148367882, 0.0014745132066309452, 0.00072017923230305314, 0.00029629829805344343, 0.00092010828666388988, 0.00073779438389465213, 0.0011652312241494656, 0.00032889508293010294, 0.00058122153859585524, 0.00031816249247640371, 0.0010369302472099662, 0.00073240557685494423, 0.0005351295112632215, 0.00058408756740391254, 0.00051842210814356804, 0.00095769762992858887, 0.0017578856786713004, 0.00053042190847918391, 0.0019054870354011655, 0.0018479257123544812, 0.00068485975498333573, 0.00049542577471584082, 0.00044872405123896897, 0.0010668803006410599, 0.00018822839774657041, 0.00024109851801767945, 0.00045824403059668839, 0.00066742597846314311, 0.0012920226436108351, 0.00073710043216124177, 0.00075745326466858387, 0.00088238948956131935, 0.0011290378170087934, 0.00044180004624649882, 0.0016876390436664224, 0.00063185545150190592, 0.00040701028774492443, 0.00026089465245604515, 0.0010712799848988652, 0.00034635572228580713, 0.00051963119767606258, 0.0010545460972934961, 0.0005883036064915359, 0.00017514081264380366, 0.00060251634567975998, 0.00094572704983875155, 0.00056833005510270596, 0.00093547458527609706, 0.00075989303877577186, 0.0015758954687044024, 0.00061951775569468737, 0.00069116865051910281, 0.00048662329209037125, 0.0014818274648860097, 0.00055385148152709007, 0.0008255046559497714, 0.00039278119220398366, 0.0005468277377076447, 0.00093143450794741511, 0.00062354980036616325, 0.0006213513552211225, 0.00098493916448205709, 0.00070150720421224833, 0.00062481279019266367, 0.00095924385823309422, 0.00068839144660159945, 0.00056191353360190988, 0.00033647796954028308, 0.00054825347615405917, 0.0012744627892971039, 0.00073717732448130846, 0.00082962866872549057, 0.0010084485402330756, 0.00088646041695028543, 0.0011385538382455707, 0.00035359826870262623, 0.00056078721536323428, 0.0005623912438750267, 0.00045980644063092768, 0.0012081806780770421, 0.00072857498889788985, 0.0006946349167264998, 0.00015289318980649114, 0.00050007971003651619, 0.00060205301269888878, 0.00061434524832293391, 0.0014214335242286325, 0.00053321104496717453, 0.00044465868268162012, 0.00044136171345598996, 0.00036197187728248537, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -635, 3132, -196, 29215, 28561, 5458, -9159, -5330, 7643, 5011, 31260, 12076, -14569, 17165, 44142, -32419, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00035168550675734878, 0.00033998084836639464, 0.00026410128339193761, 0.00022450447431765497, 0.0003149208496324718, 0.00036607228685170412, 0.00024759411462582648, 0.00038664662861265242, 0.00023682326718699187, 0.00019134492322336882, 0.00032278106664307415, 0.0006301273824647069, 0.00044665217865258455, 0.00029368349350988865, 0.00044208150939084589, 0.00036281382199376822, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -18,10,-10,16,48,76,-38,-37,44,-6,7,7,-14,9,21,84,7,-9,-12,-21,89,-78,10,-26,-16,-23,-33,-114,-8,-11,57,32,127,-32,15,8,-9,-19,-26,17,-17,19,25,-31,0,-17,-9,22,5,17,9,-4,-29,-1,8,-30,53,37,-22,-37,-63,31,-3,-27,21,6,55,18,26,10,13,-29,-83,11,-19,-7,-12,-103,25,-14,30,-1,-68,-49,27,-23,6,37,-3,8,33,-44,5,41,-19,126, 
  /* [1][0][][] */ 29,-72,26,68,15,-37,-11,-22,-24,-69,-19,38,8,-45,-43,-23,-58,1,4,-8,-34,-96,-68,8,127,-39,-41,-10,-34,73,-4,14,-3,-6,-17,7,-27,-4,33,-9,31,-55,67,-34,-41,6,45,-16,28,26,-2,-24,40,-65,27,-50,36,10,-17,-65,38,-50,14,-51,-3,-82,27,36,33,51,-27,-1,-102,51,-8,43,16,69,43,-14,4,-24,-57,23,-73,53,3,37,-46,18,27,12,38,-15,20,22, 
  /* [2][0][][] */ 11,16,-1,-25,2,-30,3,25,48,0,10,45,15,13,57,16,-21,-19,4,19,-36,-53,7,-31,-22,-18,-13,38,-9,17,93,-56,0,-46,-15,27,7,127,-30,4,-12,-14,-13,51,-9,-36,-45,34,25,23,-30,-18,36,11,-3,-23,-33,-1,-19,22,-16,17,83,90,3,-72,24,-71,-1,-11,-24,0,-27,1,-39,20,5,47,-7,15,1,79,18,-7,10,9,-1,24,17,35,3,-73,-47,-8,-3,33, 
  /* [3][0][][] */ -31,-13,-55,31,43,-43,18,-2,7,37,1,4,5,14,55,-30,25,-34,-7,15,-32,12,2,18,9,7,6,9,39,-51,34,-18,30,4,-17,16,-16,-10,-29,38,16,-53,29,-10,18,0,11,42,-127,41,4,32,-108,-24,-24,-23,24,10,26,56,11,24,35,23,-27,-67,-40,18,55,14,-5,34,-56,-23,-28,-36,-26,-65,36,-37,43,-18,18,57,69,49,19,-10,21,-45,9,5,-26,14,-3,-48, 
  /* [4][0][][] */ -16,-30,37,-69,4,10,-51,-10,-23,-44,-32,5,15,58,-1,17,61,-14,15,-23,-19,3,31,-19,-7,-2,33,-2,7,-10,10,-33,-24,-18,23,1,11,-12,0,-13,24,4,-102,-40,31,-1,-6,-25,-6,87,-37,-8,-28,-34,14,-37,11,-29,10,38,19,10,6,-9,27,-125,26,6,-52,37,4,-5,-14,39,-22,24,-29,54,52,10,16,-5,127,-45,33,-18,0,-11,59,19,-18,30,-12,38,-12,-23, 
  /* [5][0][][] */ -6,-2,-14,-1,-10,-38,15,96,56,-3,-9,-33,-15,33,48,20,-24,-11,-2,-7,-37,20,12,-27,7,2,13,73,49,12,44,55,-66,39,-24,-11,-30,-60,-45,-9,-27,-21,-24,3,50,1,10,32,9,12,-8,8,-27,0,-15,4,-40,-27,16,35,-68,10,-18,-26,13,34,-27,-14,-11,7,-16,11,24,-14,8,-3,-7,19,9,101,8,-43,22,31,20,12,11,-18,-13,-30,20,-109,-43,-25,-1,-127, 
  /* [6][0][][] */ -20,-10,-10,-37,8,-15,-10,34,-3,8,-28,8,20,-48,-9,-19,-4,-48,29,-5,10,12,-37,9,106,-15,-4,-23,9,1,15,-10,-34,-11,-39,7,19,-13,11,20,10,-38,-37,-26,-20,-12,19,-127,17,44,17,22,4,-7,-19,-78,48,-13,5,3,25,5,-16,-1,21,65,38,-3,-34,-5,9,-17,-4,33,43,-31,-30,41,23,2,-38,-24,72,-24,-11,65,30,-3,23,1,-25,-5,-21,18,-7,26, 
  /* [7][0][][] */ 3,13,43,-10,-4,-16,0,-10,8,-6,-26,1,-8,-70,21,-13,-13,-20,-21,-4,5,-20,-37,-5,-11,-4,11,-25,-7,6,4,-21,-30,-6,-21,-21,-13,-22,-41,16,31,-19,-16,35,-11,31,-10,79,-3,16,-9,-19,-37,17,-12,-77,10,-3,2,-9,-17,10,-19,-13,-14,57,22,-25,-3,-9,-4,46,-15,-11,-25,-17,31,-3,6,-16,-17,-40,42,5,-15,127,-5,17,-37,-3,13,-5,-31,-10,-1,14, 
  /* [8][0][][] */ -56,29,-26,14,44,5,-13,19,14,77,-23,-5,38,24,53,-45,-10,36,-72,25,47,51,-7,3,-38,-6,12,16,36,-63,-23,12,26,1,-2,20,-7,21,-42,14,16,23,7,-127,-38,-32,38,-23,-44,25,-5,42,-103,64,4,-1,8,-3,-19,-9,13,-49,1,11,-14,44,11,-36,5,-10,29,75,11,14,60,24,6,-67,-8,-25,5,-21,41,-2,-48,25,1,-41,-12,14,-23,45,35,-25,-10,0, 
  /* [9][0][][] */ 21,-68,-50,-50,32,26,0,9,33,-8,1,-8,-62,-25,4,46,-11,19,42,-21,-33,8,-64,-56,34,31,30,14,-46,-68,-15,8,8,13,41,30,1,67,-42,53,-11,38,-21,-122,37,-36,16,-127,-40,5,-9,26,-5,-4,14,31,-40,32,-8,33,37,28,41,43,-1,98,35,48,28,-1,12,-17,-6,-22,-24,30,96,19,17,35,-6,18,0,-66,21,3,-10,-29,-62,34,-35,21,16,6,-4,-24, 
  /* [10][0][][] */ 29,61,-8,22,65,-127,-16,-30,13,65,21,6,3,-10,13,-80,-3,40,-6,55,-71,-5,-28,-39,-84,-34,-54,68,8,-6,20,40,-16,-1,9,-36,86,-23,-5,10,-40,68,23,-33,-49,-33,-43,14,-6,-28,-56,-21,-7,-8,-4,10,-6,20,-20,4,-29,20,6,32,12,41,55,9,26,-14,25,54,-50,-33,-36,-8,-1,11,-12,7,20,17,-96,-34,75,-33,92,-13,-39,22,13,5,80,43,-13,-115, 
  /* [11][0][][] */ 51,28,-13,8,-4,29,52,-7,6,3,-16,-20,1,13,30,-13,0,-8,-109,-1,16,26,23,-4,-42,-12,-10,26,10,15,-13,13,5,13,11,29,27,-6,-4,3,-4,40,47,-95,24,-47,-2,12,-127,9,22,-63,30,18,-10,32,-7,-9,23,11,24,-18,-5,9,-45,63,-17,-10,19,-3,35,19,-24,-47,20,33,5,-30,-47,15,42,4,84,46,16,-28,-11,-11,-7,-8,-14,30,6,-1,-15,26, 
  /* [12][0][][] */ -27,2,2,6,-22,49,-1,23,127,-5,-13,3,-14,20,-42,-45,37,26,6,50,42,23,4,-29,20,16,10,-54,-85,15,27,-57,11,-23,-32,-1,3,-9,17,-20,-22,-36,8,-1,-23,46,3,-16,13,10,-16,16,-4,-7,-10,-22,74,-6,2,0,18,-25,-8,-17,-13,52,-45,29,-11,15,-27,-29,17,27,-82,-9,36,-20,15,-79,-14,-1,42,38,-28,-8,-7,-12,17,12,-6,33,-34,-11,14,17, 
  /* [13][0][][] */ 22,-5,-24,28,16,-17,9,-8,4,12,10,1,14,-31,4,-27,16,-82,-40,17,-4,-28,39,-4,-10,5,-13,-7,-29,-48,5,25,-6,7,3,54,24,-17,-11,13,-3,20,18,50,9,29,-6,-127,33,-4,7,6,-10,9,6,-6,-20,21,24,11,-8,30,-6,9,-3,-16,-21,-78,9,10,-4,-34,-17,35,-16,19,-41,-12,13,-3,33,-6,-24,27,27,41,12,24,14,15,23,-12,-9,11,-6,-22, 
  /* [14][0][][] */ -112,-66,32,38,21,-26,-42,15,-39,-9,-9,38,46,-15,-124,19,73,-9,5,18,-20,-30,6,1,-127,-5,36,-29,-53,-72,3,-4,-21,-21,27,-82,15,58,-15,47,9,33,-8,-53,13,125,67,39,-88,58,-22,28,-44,-7,12,-27,29,-5,37,41,25,40,4,58,14,-36,-53,77,-12,49,-48,-66,-78,29,-27,9,-6,32,98,-7,32,23,20,28,14,28,50,43,60,70,41,-27,-16,25,13,-24, 
  /* [15][0][][] */ 84,4,42,2,-14,94,22,-19,3,60,6,22,-85,-21,-31,28,24,32,43,-24,36,-6,-83,44,23,24,33,4,39,42,-63,-81,14,-66,31,25,46,-56,-28,-127,4,3,28,35,-31,38,-13,-53,85,-32,-27,5,39,-111,41,-95,23,-47,11,12,-94,-7,13,3,61,-11,-28,48,-35,70,0,-2,63,32,21,-5,19,-55,40,-10,16,-11,34,91,-29,-6,24,-32,-1,-3,41,11,-53,40,27,19, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.014946633949875832, 0.014449185691773891, 0.01122430432587862, 0.0095414398238062859, 0.013384136371314526, 0.015558072365820408, 0.010522750206291676, 0.01643248088657856, 0.010064988397061825, 0.0081321587786078453, 0.013718195259571075, 0.026780413463711739, 0.018982717767357826, 0.012481548823416233, 0.018788464367389679, 0.015419586561620235, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11118, -9578, 3594, 69680, -1307, -5227, -7119, 4805, -3230, 837, 2999, -1346, -1811, -417, 5202, -6694, 403, 17054, 28915, 3064, 3556, -3637, -348, 1309, 15039, -53, -559, -3297, -6330, -9206, 3809, -8366, 1719, -610, -1242, 14490, 368, -2632, 20133, 180, -769, 725, -8282, -7611, -6529, 72452, 6, 17546, 27522, -13590, 27, 8598, 5730, 91, -6327, 2280, -14769, 2331, 2748, -6162, -249, -1157, -13339, 691, 2512, 14081, 31332, 16921, -10852, 531, -7925, -1278, 36924, 12635, -38, -106, 19785, 35263, -1173, -4731, -633, -5939, 898, -2704, 153, -1587, 524, -1181, 1214, -1684, 1187, -2072, 1951, -1759, 52, 44663, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0002072678180411458, 0.00011107828322565183, 0.00025491096312180161, 3.1274052162189037e-05, 0.00016210786998271942, 0.00017674597620498389, 0.00034680927637964487, 8.3848244685214013e-05, 0.0001156979997176677, 0.00049383123405277729, 0.00018116622231900692, 0.00039590036612935364, 0.00010004896466853097, 0.00053830759134143591, 0.00018344371346756816, 0.00012052639795001596, 0.00010709299385780469, 0.00027189086540602148, 5.6274664530064911e-05, 0.00017039227532222867, 4.1539249650668353e-05, 0.0002303735091118142, 0.00015359610551968217, 0.00036844064015895128, 0.00026132413768209517, 0.00025229863240383565, 0.00014505567378364503, 0.00024342225515283644, 8.8654138380661607e-05, 7.9133198596537113e-05, 0.00014871649909764528, 0.00018487103807274252, 0.00015277194324880838, 0.00010631082113832235, 0.00021925779583398253, 0.00016361731104552746, 0.00042760666110552847, 0.00012984995555598289, 5.3411975386552513e-05, 0.0001745368936099112, 0.00022792253002990037, 0.00037393494858406484, 0.0003698806103784591, 0.00015392596833407879, 0.00019979930948466063, 5.5537027947138995e-05, 0.00024493984528817236, 0.0001995540369534865, 9.1130023065488786e-05, 0.00016927388787735254, 0.00023801749921403825, 0.00015510202501900494, 0.00027136335847899318, 0.00029257274582050741, 0.00024713115999475121, 0.00053053011652082205, 0.00024805410066619515, 0.00020818653865717351, 0.00010026079689851031, 8.0641977547202259e-05, 0.00037210492882877588, 0.0001670329220360145, 0.00027305979165248573, 0.00014105216541793197, 0.00021471800573635846, 0.00022938153415452689, 8.2686332461889833e-05, 9.5258044893853366e-05, 0.00037849249201826751, 0.00024147327349055558, 0.00025196225033141673, 9.7777578048408031e-05, 0.00015949062071740627, 0.0001363444171147421, 0.00015736724890302867, 0.00026598569820635021, 0.00054272107081487775, 6.2227241869550198e-05, 0.00030249616247601807, 0.00041351502295583487, 0.00016796206182334572, 0.00035307233338244259, 0.000105103368696291, 0.00011519796680659056, 0.00013974681496620178, 0.00010143104736926034, 0.0001362102193525061, 0.00018521188758313656, 0.00024579724413342774, 0.0001476378965890035, 0.00021242942602839321, 0.00014316759188659489, 0.00016726467583794147, 0.00063039711676537991, 0.024438973516225815, 9.3433758593164384e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,8,-18,106,-17,24,-66,-54,15,-6,99,-10,5,-7,-3,65,7,15,-35,1,71,0,34,-36,1,18,40,48,23,16,21,49,-6,24,12,-13,5,51,-60,-25,20,11,25,18,-84,-52,26,-5,-11,-20,-10,-9,48,5,-8,2,-1,-37,24,-33,23,0,127,28,-13,-12,6,-53,66,34,9,-8,77,-32,73,4,17,-127,31,61,-1,19,127,-15,39,29,-26,-21,34,-7,-17,85,0,19,-3,14, -49,15,-8,9,50,-9,-12,-127,36,12,-127,-2,-15,-14,5,100,16,-32,-14,-17,75,-95,127,25,-60,-31,-106,-18,29,38,-51,20,117,10,-13,0,-25,127,-65,-127,7,-17,-33,12,46,-127,127,-45,-76,54,47,4,37,-64,33,56,38,40,-103,86,127,35,5,-22,41,-40,-97,-1,39,-32,-15,47,-49,-49,112,-4,-29,-59,-32,61,-69,63,-15,7,-10,48,57,-40,-27,50,-15,73,-127,-32,22,-127, -2,1,-22,-75,6,22,35,18,-3,-2,3,62,1,-11,-11,12,-15,14,-18,14,8,26,26,-33,0,-33,7,11,-5,6,43,-81,40,15,10,-22,12,4,-35,-21,6,5,-19,7,21,-30,20,0,8,-5,5,-7,4,5,-4,10,-5,41,3,-1,13,-17,3,-18,-28,-20,29,-53,-108,-10,46,-18,-127,-24,-7,15,9,-14,7,10,-15,22,-33,-3,-39,22,26,35,-24,-17,23,-8,14,7,-2,-47, 
  /* [0][1][][] */ -41,57,-16,39,-86,-12,-13,-44,24,94,-44,-22,-28,-24,-6,65,127,-24,-88,-15,60,-127,-26,14,-36,-46,-127,-5,40,37,-50,28,-127,-77,-52,4,67,-6,-49,49,-19,89,1,0,34,-51,-13,-32,127,43,-5,18,44,10,-35,-19,34,9,-127,127,-39,-86,19,127,-59,-35,-87,126,-41,127,-14,54,-35,-58,37,9,-34,-71,127,47,127,36,7,-3,127,27,-98,46,-38,-36,-105,43,95,104,27,-62, 127,127,127,127,-46,-127,127,23,127,-127,18,-127,-101,127,127,127,-18,-127,-56,-127,127,25,-66,127,127,127,-57,-127,127,127,-127,127,-10,-127,-122,127,-127,-49,92,112,-127,-127,127,127,127,-120,-112,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-44,42,-109,-29,-71,-72,127,127,-66,127,127,-108,-127,127,-44,127,-127,-127,-127,123,-75,127,-46,127,84,127,-38,-127,-26,-105,-127,-127,-24,-127,-22,-127,-127,124, -24,68,-38,2,127,73,-25,45,6,24,-15,-6,-22,-29,-13,-10,-107,-23,-127,36,35,80,-10,-119,-36,-41,120,69,11,37,72,6,118,-50,127,-3,57,4,-89,15,35,27,-23,3,-21,-53,-14,-42,83,18,-12,37,-4,-5,-73,-13,29,19,122,-90,0,127,-1,-38,-112,-30,-75,98,13,-19,112,27,-19,-59,15,48,-30,-9,-42,-2,-48,6,50,25,-87,34,127,-44,31,-21,127,-7,-117,36,33,18, 
  /* [0][2][][] */ -6,-37,-22,-58,-6,15,39,30,-1,10,-21,55,26,-35,-9,4,40,4,-2,19,-10,31,-15,-27,1,-23,11,6,-7,-6,51,-74,-42,65,-25,-27,33,-39,-61,21,11,10,-38,16,12,-82,-10,-1,-7,7,17,-10,8,1,-20,6,2,42,-51,31,-11,-11,1,14,-9,-11,21,-51,-58,11,-22,-12,-115,-38,-1,19,14,-12,62,17,21,19,-37,15,13,23,-20,10,4,25,19,-2,17,43,-8,-33, -28,-9,-28,24,-44,76,-26,64,7,-7,53,-11,127,-8,-19,-20,-3,-39,-67,21,-21,80,-44,-115,-47,-46,100,65,16,46,56,-2,-123,62,-14,-23,-28,-30,-127,-2,46,-12,-17,32,-26,-48,-19,-48,-59,30,69,21,-11,-81,30,51,21,25,72,-58,19,-60,-11,-3,18,-26,-127,-51,-9,-27,-64,23,36,-48,-30,-6,-46,21,-55,2,48,33,23,12,5,61,-94,127,15,119,-34,-16,111,-20,45,86, -9,-31,-27,28,13,68,-48,10,4,-6,-2,16,16,-51,-13,-12,-50,-6,6,16,-22,9,-20,2,-6,19,-5,48,2,-1,36,28,14,41,22,-24,-5,-31,-28,11,13,-9,22,6,-73,-39,-12,4,1,-17,0,-6,-7,7,-15,-4,4,-52,9,-32,-25,53,8,-29,-14,-4,33,-53,48,4,50,-20,30,-58,-18,23,9,10,-4,21,-32,31,92,-12,-17,52,40,-6,112,14,0,-17,4,-20,-7,-54, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.008808881975710392, 0.0047208270989358425, 0.01083371601998806, 0.0013291472569108009, 0.0068895844742655754, 0.0075117037631571293, 0.014739394187927246, 0.0035635503008961678, 0.0049171647988259792, 0.020987827330827713, 0.0076995640993118286, 0.016825765371322632, 0.0042520808055996895, 0.022878071293234825, 0.0077963573858141899, 0.0051223719492554665, 0.0045514521189033985, 0.011555361561477184, 0.0023916731588542461, 0.0072416714392602444, 0.0017654180992394686, 0.0097908740863204002, 0.0065278345718979836, 0.015658726915717125, 0.011106275953352451, 0.010722692124545574, 0.0061648660339415073, 0.010345445945858955, 0.0037678007502108812, 0.0033631608821451664, 0.0063204509206116199, 0.0078570190817117691, 0.0064928075298666954, 0.0045182099565863609, 0.0093184560537338257, 0.0069537353701889515, 0.018173282966017723, 0.0055186226963996887, 0.0022700089029967785, 0.0074178180657327175, 0.0096867075189948082, 0.015892235562205315, 0.015719925984740257, 0.006541853304952383, 0.0084914704784750938, 0.0023603236768394709, 0.010409943759441376, 0.0084810461848974228, 0.0038730259984731674, 0.0071941399946808815, 0.010115743614733219, 0.0065918359905481339, 0.01153294276446104, 0.012434341944754124, 0.010503074154257774, 0.022547530010342598, 0.010542299598455429, 0.0088479276746511459, 0.0042610839009284973, 0.003427283838391304, 0.015814458951354027, 0.0070988992229104042, 0.011605041101574898, 0.0059947166591882706, 0.0091255148872733116, 0.0097487149760127068, 0.0035141690168529749, 0.004048466682434082, 0.016085930168628693, 0.010262614116072655, 0.010708395391702652, 0.0041555468924343586, 0.0067783510312438011, 0.0057946373708546162, 0.0066881077364087105, 0.011304392479360104, 0.02306564524769783, 0.0026446576230227947, 0.01285608671605587, 0.017574388533830643, 0.0071383873000741005, 0.015005573630332947, 0.0044668931514024734, 0.0048959134146571159, 0.0059392396360635757, 0.0043108193203806877, 0.005788933951407671, 0.0078715048730373383, 0.010446382686495781, 0.0062746102921664715, 0.0090282503515481949, 0.0060846228152513504, 0.0071087488904595375, 0.026791876181960106, 1.0386563539505005, 0.0039709345437586308, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 13184, 1292, 8945, -864, 5454, 3797, 18925, 10160, -1109, 19372, 7413, 3158, 7997, 39737, -209, -2079, 10347, 15196, 2128, -190, -974, 12760, 3851, 3377, 9195, 5345, 4004, 5254, 131, 0, 7608, 12463, 15765, 2188, 7288, -533, 12871, 11674, 1583, 6149, 777, 12676, 19095, 4310, 5005, 14134, 15132, 3482, 6585, 3097, 234, -588, 30122, 7666, 6696, 13360, -290, 6900, 3686, 6038, 13372, 12962, 3032, 7838, 5409, 6584, 5439, -901, 20728, 7601, 8895, -1908, -1580, 3735, 1903, 4250, 25861, 13944, 13009, -3380, 5743, -5356, -1987, 698, 6428, 9159, 8328, 3456, 16247, 3402, 10268, 3701, 15977, 29980, -11242, 14876, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00020123440481256694, 0.00022837800497654825, 0.00014497416850645095, 0.00066611333750188351, 0.00029251014348119497, 0.00023394115851260722, 0.00016804375627543777, 0.00034685918944887817, 0.00042621788452379405, 9.3250600912142545e-05, 0.00019311615324113518, 0.00026507623260840774, 0.00033956678817048669, 0.00012042014714097604, 0.00020959961693733931, 0.00035599552211351693, 0.00021314568584784865, 0.00015193590661510825, 0.00019468343816697598, 0.00054204312618821859, 0.00031240429962053895, 0.00019691755005624145, 0.00037119752960279584, 0.00023391179274767637, 0.00018934741092380136, 0.00039342537638731301, 0.0003586059610825032, 0.00017823932284954935, 0.00054411840392276645, 0.000324899738188833, 0.0001906669931486249, 0.00015007927140686661, 0.00012235576286911964, 0.00049379270058125257, 0.00022554445604328066, 0.00050692388322204351, 0.00017787140677683055, 0.00022123449889477342, 0.00028945392114110291, 0.00014079359243623912, 0.00055654637981206179, 0.00014886041753925383, 0.0001156152575276792, 0.00017651201051194221, 0.00022390017693396658, 0.0002319392078788951, 0.00018893498054239899, 0.00040641534724272788, 0.00024572867550887167, 0.00027684640372171998, 0.00058514683041721582, 0.0010983955580741167, 9.0438450570218265e-05, 0.00021444652520585805, 0.0003372622886672616, 0.00013687559112440795, 0.00042603316251188517, 0.00025067327078431845, 0.0002207913639722392, 0.00026855748728848994, 0.0001258109841728583, 0.00010603255213936791, 0.00033975325641222298, 0.0003464128531049937, 0.00019391912792343646, 0.00018363530398346484, 0.00036609257222153246, 0.00030612942646257579, 0.00012999979662708938, 0.00015447531768586487, 0.00022765902394894511, 0.0002347521367482841, 0.00023436288756784052, 0.00037407639320008457, 0.00022583341342397034, 0.00030002580024302006, 9.3738679424859583e-05, 0.00031329557532444596, 0.0001226017193403095, 0.00036095513496547937, 0.00019117561168968678, 0.00038151710759848356, 0.00018498544523026794, 0.00041814034921117127, 0.00023935906938277185, 0.00017242107423953712, 0.00019393321417737752, 0.00037353698280639946, 0.00010343610483687371, 0.00046835359535180032, 0.00014067006122786552, 0.00043864944018423557, 0.00012998265447095037, 9.30729293031618e-05, 0.00026479765074327588, 0.00021962870960123837, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,-17,127,66,63,-3,31,9,45,-61,-46,-115,72,107,2,-54, 
  /* [1][0][][] */ 47,45,-41,25,55,-52,3,2,38,72,-64,127,4,-7,67,-99, 
  /* [2][0][][] */ -12,-26,-1,47,-71,27,-21,31,-12,-22,15,98,-27,-107,58,-127, 
  /* [3][0][][] */ 127,109,-17,22,-119,-6,-66,-31,-7,-11,103,-72,-56,72,-40,-22, 
  /* [4][0][][] */ -5,-24,42,33,-13,40,-12,59,-76,-43,1,17,12,-127,23,-9, 
  /* [5][0][][] */ 102,-11,13,-3,14,-127,-51,-7,-13,-1,-105,-11,48,-33,-42,39, 
  /* [6][0][][] */ -84,-46,-31,45,-35,22,-50,40,-127,-105,-46,-60,18,40,4,84, 
  /* [7][0][][] */ -31,19,-80,68,70,-127,-62,53,30,-58,27,-13,-23,29,-63,-1, 
  /* [8][0][][] */ 20,-44,-8,1,20,48,-56,-64,0,15,-49,27,-127,-17,16,2, 
  /* [9][0][][] */ 1,-87,71,127,4,23,14,-73,103,-61,25,10,-10,56,-83,45, 
  /* [10][0][][] */ -127,-87,32,-55,82,9,50,43,98,-26,-31,13,74,-119,-51,64, 
  /* [11][0][][] */ 68,-42,-127,23,96,28,-4,82,-51,-57,-11,-23,6,-6,-61,-7, 
  /* [12][0][][] */ 125,-57,-26,-25,-48,-52,-43,-12,19,-12,-127,-41,-39,3,13,70, 
  /* [13][0][][] */ -6,-73,73,-27,75,39,-119,-127,51,-85,-13,-23,13,48,62,-59, 
  /* [14][0][][] */ -34,13,-104,-57,88,-127,64,-32,34,35,-14,-106,40,98,5,41, 
  /* [15][0][][] */ -5,12,43,35,25,-65,-33,-44,11,-35,-53,-18,-127,-35,-9,46, 
  /* [16][0][][] */ -127,48,20,65,-14,66,74,56,-30,46,107,25,-2,-10,-39,-80, 
  /* [17][0][][] */ -5,-9,-53,-36,-24,6,35,67,-24,127,-16,14,-10,91,75,-8, 
  /* [18][0][][] */ 21,81,-84,8,1,-31,18,-114,75,127,-95,122,15,9,22,-85, 
  /* [19][0][][] */ 14,-18,30,16,-1,67,-5,34,4,-6,-64,-14,-127,15,-8,43, 
  /* [20][0][][] */ 80,-64,14,-98,-35,-4,38,-75,-59,36,-127,-33,24,0,43,-18, 
  /* [21][0][][] */ 43,-20,127,65,-63,87,0,-1,11,37,2,-36,-45,95,24,-22, 
  /* [22][0][][] */ 2,33,33,4,-14,17,49,127,36,-21,78,39,2,48,61,38, 
  /* [23][0][][] */ -27,8,-80,1,15,-127,4,11,-19,-26,-12,-20,-65,9,7,30, 
  /* [24][0][][] */ 23,-68,6,-63,57,-11,-34,-18,22,26,70,99,-47,88,127,52, 
  /* [25][0][][] */ -127,-101,-59,1,39,-12,-7,-48,-42,-16,-80,3,17,52,40,60, 
  /* [26][0][][] */ 4,-5,42,-7,-8,25,-37,76,-78,-79,-6,-13,0,-127,46,-23, 
  /* [27][0][][] */ -103,46,-59,29,-11,-21,28,35,37,8,127,21,-53,2,6,-24, 
  /* [28][0][][] */ -11,-3,21,41,-4,4,4,79,33,19,-34,-11,-127,1,-8,35, 
  /* [29][0][][] */ -13,73,59,-53,37,-9,2,-9,-127,41,-27,-2,9,20,-77,18, 
  /* [30][0][][] */ -16,1,-127,-43,23,-20,7,21,-40,-23,12,-40,-53,-5,23,-5, 
  /* [31][0][][] */ 127,22,-87,8,58,-15,-41,62,10,-26,-93,-79,50,-35,-84,52, 
  /* [32][0][][] */ -127,46,47,35,5,57,30,9,29,21,111,26,-70,5,-8,-37, 
  /* [33][0][][] */ 6,-39,127,-22,-93,33,4,-43,31,14,-1,28,-11,56,64,21, 
  /* [34][0][][] */ -27,-50,-28,-127,12,-20,14,-38,41,-10,-17,-80,-30,-7,90,37, 
  /* [35][0][][] */ 12,-42,48,46,92,-28,12,-11,-119,34,-7,14,-12,127,-22,-45, 
  /* [36][0][][] */ -95,12,-20,-17,7,18,35,85,-18,34,127,9,-12,27,11,-7, 
  /* [37][0][][] */ -46,10,127,-21,-90,-71,35,-61,16,31,6,3,-22,-74,70,7, 
  /* [38][0][][] */ -7,-28,-11,30,36,-43,-97,-8,-17,-26,123,-19,127,60,-1,2, 
  /* [39][0][][] */ -37,-30,-55,-111,-7,-114,38,95,1,-59,18,-23,12,69,84,127, 
  /* [40][0][][] */ 60,-8,-21,16,-19,69,-9,12,16,5,1,6,127,12,-30,-26, 
  /* [41][0][][] */ -16,-28,-27,-127,6,-17,-21,-44,18,-36,23,-35,-10,8,-6,51, 
  /* [42][0][][] */ 72,26,-2,84,-106,-4,-101,28,-122,-104,50,-127,-3,108,-52,-1, 
  /* [43][0][][] */ 22,127,-23,93,30,53,53,-56,-24,72,5,15,9,-44,62,35, 
  /* [44][0][][] */ 20,-23,-127,25,42,100,-53,73,-21,-45,21,-48,20,-33,-70,9, 
  /* [45][0][][] */ -17,-1,12,-91,-13,-6,80,6,30,63,-11,35,-1,-127,28,-72, 
  /* [46][0][][] */ -14,44,54,-20,18,32,-89,29,19,-63,-18,14,-30,127,53,-47, 
  /* [47][0][][] */ 12,-8,13,-27,-17,-3,-57,51,7,-28,5,34,22,-127,42,2, 
  /* [48][0][][] */ 9,5,12,-127,-17,-12,1,12,8,-24,9,-14,-3,33,13,60, 
  /* [49][0][][] */ 22,-50,-25,118,113,8,10,68,-79,13,60,65,-14,28,127,3, 
  /* [50][0][][] */ -7,-11,53,-22,-26,127,-15,-20,30,-5,105,40,92,-28,2,-30, 
  /* [51][0][][] */ 33,41,17,13,26,16,-57,30,40,-4,15,127,26,47,40,-51, 
  /* [52][0][][] */ -20,91,124,-18,11,-74,2,-85,-23,-9,14,15,-40,101,-127,-17, 
  /* [53][0][][] */ -2,-12,-81,-127,-13,4,39,-42,-36,52,52,15,22,-39,15,-3, 
  /* [54][0][][] */ -8,-13,-16,-14,2,13,-2,4,72,20,14,-10,-29,127,30,8, 
  /* [55][0][][] */ 6,-54,-45,-15,-56,-57,-9,-127,-37,-52,-69,-4,-53,-104,-96,-16, 
  /* [56][0][][] */ 44,36,9,60,23,-30,15,127,8,-17,-2,-22,62,-16,-73,39, 
  /* [57][0][][] */ 62,-18,127,-2,-56,-42,-11,-24,12,16,-88,27,59,-24,36,-4, 
  /* [58][0][][] */ 121,107,-23,99,-127,-25,-13,46,-15,30,76,-63,-73,-48,-24,-80, 
  /* [59][0][][] */ 124,-40,-32,4,-37,-8,20,9,-45,41,-127,15,38,-22,-29,32, 
  /* [60][0][][] */ -127,20,-7,-10,-37,9,51,20,2,46,83,-34,-61,-29,34,-11, 
  /* [61][0][][] */ -101,24,39,-2,63,56,-113,-123,98,-127,102,54,22,-57,-49,-11, 
  /* [62][0][][] */ -23,-86,-127,87,108,101,3,93,12,-122,20,-50,-79,1,-78,-36, 
  /* [63][0][][] */ -64,-21,127,-47,-29,-42,9,-18,18,17,14,15,-24,-25,67,34, 
  /* [64][0][][] */ 5,95,-4,42,57,-10,59,-127,-12,75,-9,-11,14,-40,-59,-2, 
  /* [65][0][][] */ 25,11,24,-14,106,5,9,-127,-71,-111,-44,-114,-21,-50,65,-1, 
  /* [66][0][][] */ -127,-20,-11,23,-32,14,4,-29,-78,-34,-76,59,71,42,42,69, 
  /* [67][0][][] */ 3,-62,15,127,-3,19,-3,75,30,41,-19,-1,13,-21,-126,-10, 
  /* [68][0][][] */ 23,-14,-19,127,-47,-32,-9,-16,-81,17,-2,-37,-25,-71,-34,-55, 
  /* [69][0][][] */ 108,116,57,121,40,-22,35,-127,-15,58,31,52,9,-9,28,-6, 
  /* [70][0][][] */ 0,-18,2,-57,127,-35,50,-7,46,-31,66,-10,26,49,20,74, 
  /* [71][0][][] */ 17,60,10,90,62,-126,-77,107,64,-127,28,5,8,-29,-71,35, 
  /* [72][0][][] */ -127,-73,-34,37,23,12,-18,9,-59,-42,-96,33,60,27,3,102, 
  /* [73][0][][] */ -17,-76,-29,72,-44,28,-8,-11,127,72,24,48,-35,104,-34,-45, 
  /* [74][0][][] */ 69,-40,19,-52,-6,-67,24,-34,-4,-40,-127,-10,-120,-11,38,49, 
  /* [75][0][][] */ 1,-10,-40,127,-28,-13,-4,-31,-105,41,-29,-11,9,-75,-26,-23, 
  /* [76][0][][] */ 5,-20,-5,33,11,7,-22,-127,6,-100,18,22,-24,-37,38,-20, 
  /* [77][0][][] */ 92,-51,24,46,-25,-7,-45,8,72,29,2,127,57,42,-52,69, 
  /* [78][0][][] */ 41,-5,45,-10,-22,40,-51,91,36,-5,-64,-61,16,127,72,-46, 
  /* [79][0][][] */ 16,37,35,19,39,88,-48,-56,13,-57,64,-33,127,-32,-40,-51, 
  /* [80][0][][] */ -104,-86,-102,85,-10,41,16,-12,-127,54,-99,-29,78,-113,-30,104, 
  /* [81][0][][] */ 72,22,-51,49,127,70,21,-39,-26,-90,-35,-64,16,-28,-116,13, 
  /* [82][0][][] */ 88,121,-10,35,-91,-21,-81,-12,-34,29,127,-37,-25,80,-14,-29, 
  /* [83][0][][] */ 127,41,22,-30,-8,-29,-24,25,31,23,98,-51,-62,-33,-29,-110, 
  /* [84][0][][] */ -32,-112,-72,-5,90,40,13,-127,24,-39,29,55,-14,6,30,-16, 
  /* [85][0][][] */ -41,44,-85,-105,17,42,127,122,-62,117,10,-120,60,120,65,-74, 
  /* [86][0][][] */ 127,-28,6,-4,-8,-13,-12,3,1,2,-112,1,42,37,14,37, 
  /* [87][0][][] */ -16,34,28,-70,-16,46,-30,49,-1,-32,39,-1,-14,-127,25,21, 
  /* [88][0][][] */ -3,-64,-99,-110,127,-12,-81,-97,7,-39,-9,17,7,35,74,47, 
  /* [89][0][][] */ 23,15,-8,-127,30,-23,5,57,37,-30,41,-2,-22,-15,33,42, 
  /* [90][0][][] */ -45,55,-47,37,127,-48,116,-126,54,126,-39,54,53,4,-15,21, 
  /* [91][0][][] */ 50,-8,-44,-25,8,-127,-29,3,-1,-27,-36,-22,22,-9,17,29, 
  /* [92][0][][] */ 42,55,127,65,29,-6,22,88,-49,69,-124,57,81,100,1,12, 
  /* [93][0][][] */ 127,-44,-47,-20,-24,-58,1,38,-26,48,-103,-8,-37,14,1,63, 
  /* [94][0][][] */ 40,-55,57,127,122,-32,-39,93,-19,-38,-16,98,-7,126,-28,-111, 
  /* [95][0][][] */ -109,24,27,59,8,73,35,0,12,17,127,-6,-22,23,-7,-25, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.000699384487234056, 0.00079372129403054714, 0.00050385360373184085, 0.0023150581400841475, 0.0010166107676923275, 0.00081305589992552996, 0.00058403133880347013, 0.0012054992839694023, 0.0014813082525506616, 0.00032408983679488301, 0.00067116972059011459, 0.0009212649310939014, 0.001180154737085104, 0.00041851680725812912, 0.00072845752583816648, 0.0012372523779049516, 0.00074078183388337493, 0.00052804895676672459, 0.00067661679349839687, 0.0018838555552065372, 0.0010857522720471025, 0.00068438140442594886, 0.0012900865403935313, 0.00081295380368828773, 0.0006580715999007225, 0.0013673388166353106, 0.0012463248567655683, 0.00061946571804583073, 0.0018910681828856468, 0.0011291798437014222, 0.00066265772329643369, 0.00052159628830850124, 0.00042524398304522038, 0.0017161626601591706, 0.00078387337271124125, 0.0017617996782064438, 0.00061818707035854459, 0.00076889427145943046, 0.0010059889173135161, 0.0004893241566605866, 0.0019342611776664853, 0.00051736016757786274, 0.00040181755321100354, 0.00061346252914518118, 0.00077815871918573976, 0.00080609816359356046, 0.00065663817804306746, 0.0014124850276857615, 0.00085402303375303745, 0.00096217187820002437, 0.0020336613524705172, 0.0038174425717443228, 0.00031431627576239407, 0.00074530282290652394, 0.0011721455957740545, 0.00047570723108947277, 0.001480666222050786, 0.00087120791431516409, 0.00076735415495932102, 0.00093336397549137473, 0.00043725254363380373, 0.00036851313780061901, 0.0011808028211817145, 0.0012039480498060584, 0.00067396042868494987, 0.00063821929506957531, 0.0012723443796858191, 0.0010639441898092628, 0.00045181059977039695, 0.00053687457693740726, 0.0007912224973551929, 0.00081587443128228188, 0.00081452156882733107, 0.0013000919716432691, 0.0007848776294849813, 0.0010427312226966023, 0.00032578612444922328, 0.0010888499673455954, 0.0004260987916495651, 0.0012544894125312567, 0.00066442543175071478, 0.0013259518891572952, 0.00064291170565411448, 0.0014532349305227399, 0.00083188567077741027, 0.00059924455126747489, 0.0006740093813277781, 0.0012982172193005681, 0.00035948926233686507, 0.0016277496470138431, 0.00048889481695368886, 0.0015245137037709355, 0.00045175102422945201, 0.00032347234082408249, 0.00092029670486226678, 0.00076331337913870811, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -34839, 10475, 828, -7555, -535, -8670, -9883, -37501, 502, 9629, 39622, -19249, 415, -20009, 34572, -34194, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00061254278989508748, 0.00075932586332783103, 0.0010051436256617308, 0.0010836935834959149, 0.00074934476288035512, 0.0010968868155032396, 0.0009047419298440218, 0.00059713964583352208, 0.00070998939918354154, 0.00054553936934098601, 0.00078159099211916327, 0.00044837722089141607, 0.0010695267701521516, 0.0010861348127946258, 0.00052784505533054471, 0.00043758159154094756, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -14,-8,-24,16,26,-6,3,101,-39,5,29,-4,24,-19,-18,16,25,-6,-1,-5,62,-12,18,127,-12,73,-13,-24,19,-29,28,-24,-18,47,15,-40,6,30,17,-16,-87,-13,18,39,40,23,-100,-54, 
  /* [1][0][][] */ -40,-20,17,5,-42,8,-4,59,-66,-33,-3,-59,-23,-26,-2,-8,-21,127,-23,10,-1,12,-29,-23,15,-49,11,26,-33,-98,-39,22,-22,-12,36,-3,1,-50,-2,13,-22,-38,127,15,6,-3,26,-5, 
  /* [2][0][][] */ -22,0,-15,-37,-1,-57,-2,-25,1,5,14,22,10,2,-10,9,-7,-17,-20,-14,-8,-5,-1,-127,-17,63,-13,4,5,-12,-1,3,-5,47,15,1,24,20,28,-2,-38,9,-12,-3,-9,-7,21,5, 
  /* [3][0][][] */ -1,34,-7,-31,-1,3,0,-6,-16,-5,-1,40,-127,-4,0,-5,7,13,-17,-2,-33,3,5,15,-7,-14,7,25,-4,21,10,14,9,-1,16,24,-12,27,32,10,12,9,21,-24,6,-2,4,15, 
  /* [4][0][][] */ 28,-49,-2,10,24,34,20,-29,-36,13,-23,-32,1,2,-4,11,20,-14,-84,14,-7,24,15,72,-5,-28,-12,56,17,-88,13,15,15,-44,29,-127,18,41,7,8,-24,25,-2,-31,-21,-27,13,8, 
  /* [5][0][][] */ 40,3,-19,66,-1,-13,10,31,1,-10,31,12,0,54,4,-4,-31,25,33,6,7,1,4,-18,1,-48,9,-25,-7,-6,6,5,56,-127,4,36,-16,-14,17,2,-90,55,26,-8,-8,5,-116,-17, 
  /* [6][0][][] */ 25,-2,5,6,-11,-9,3,-13,-1,9,-5,8,-20,12,4,-1,-3,-18,127,6,4,14,15,-34,4,6,30,-14,-19,-2,-4,2,-4,-9,33,-40,4,-49,73,16,-2,-15,-9,3,-5,0,2,-7, 
  /* [7][0][][] */ -35,-16,-2,23,-22,80,-16,45,-6,41,-7,127,82,-6,-11,3,-3,-24,-11,2,-32,-3,-25,65,-5,-43,-45,-33,-19,-14,-2,-18,14,-5,-29,3,4,-60,87,-6,18,39,-61,-59,25,-12,-1,-5, 
  /* [8][0][][] */ -42,-41,16,15,-2,0,7,28,4,-69,20,54,50,20,12,14,-9,65,-23,26,-38,33,-3,-9,10,-5,14,40,3,127,-7,12,-1,19,-16,-113,-107,74,17,37,22,-18,120,-11,14,24,28,26, 
  /* [9][0][][] */ -20,15,-9,36,17,-25,-4,8,68,-36,23,67,-63,5,13,5,-8,19,-31,-31,59,-4,-16,-12,6,9,41,-16,8,19,18,-10,6,19,74,-100,-4,-127,-81,13,-18,33,58,6,5,2,-5,-51, 
  /* [10][0][][] */ -21,-18,-26,-123,43,86,5,-21,5,22,22,1,55,-60,-26,22,42,-38,66,-25,17,-24,38,48,-54,-127,6,-37,49,33,54,-35,-18,-83,25,-8,8,-30,-1,-34,-36,-60,-4,24,4,24,14,-34, 
  /* [11][0][][] */ 2,76,14,88,34,-66,-62,-12,19,76,23,25,-19,90,7,-86,29,50,-5,5,-56,-121,14,1,22,-52,48,-21,83,-26,26,-127,61,-5,-36,-107,104,22,-5,-125,-4,63,127,-74,13,-61,56,32, 
  /* [12][0][][] */ 121,-12,-24,11,-5,23,5,101,23,0,-62,-25,-2,12,-15,-12,-13,-1,-12,-2,4,1,3,17,-6,10,-7,8,-3,10,-8,4,-1,-76,-11,6,-14,-21,-25,-14,-20,-80,-2,-127,-47,-12,84,-5, 
  /* [13][0][][] */ 16,-4,1,4,11,-13,3,-2,-7,13,2,23,1,2,5,3,7,5,13,7,18,-13,9,1,0,-2,14,127,13,-8,9,-6,5,0,-47,25,7,-5,1,-17,-13,-1,2,9,4,-4,-12,-18, 
  /* [14][0][][] */ 64,-26,40,-60,55,21,28,-92,-56,-55,-29,111,-59,-33,48,6,47,31,-31,58,28,5,68,-4,11,58,-41,-102,26,-45,67,65,-8,71,-127,-50,-44,42,92,4,-17,16,47,-7,-16,6,5,-46, 
  /* [15][0][][] */ -17,-56,-73,-27,47,26,73,-50,-5,35,-3,-24,94,32,-94,51,47,61,68,-82,-91,-15,50,-15,-86,47,20,51,57,37,39,-49,21,59,69,127,-28,-117,-11,-34,82,47,93,-61,3,-37,-13,64, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0260330680757761, 0.032271347939968109, 0.042718604207038879, 0.046056974679231644, 0.031847152858972549, 0.046617690473794937, 0.038451530039310455, 0.025378433987498283, 0.030174549669027328, 0.023185422644019127, 0.033217616379261017, 0.019056031480431557, 0.045454885810613632, 0.046160727739334106, 0.022433415055274963, 0.01859721727669239, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2453, 40043, -768, 59701, 3987, 131312, -618, 44045, 4871, 34848, 27035, 5806, 2258, 34983, -3551, -1257, -168, 3386, 3283, -1629, 894, -4842, 1692, -21673, -4505, 43878, 139267, 107286, 1516, 4521, -3838, -477, 24166, 1262, 50251, 5715, 50050, -1366, 64273, 1644, 2461, 64494, 1053, 3270, 49929, -620, 521, 48389, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.5665033364202827e-05, 3.0219292966648936e-05, 0.00015800763503648341, 4.0920731407823041e-05, 0.00018526036001276225, 5.7804503740044311e-05, 0.00014929882308933884, 0.00013300892896950245, 6.6434768086764961e-05, 3.3896380045916885e-05, 3.8135582144604996e-05, 7.8738135925959796e-05, 3.9181853935588151e-05, 3.5789107641903684e-05, 0.00019964337116107345, 0.00020693796977866441, 0.0001791299000615254, 5.4698881285730749e-05, 9.6197174570988864e-05, 0.00012647040421143174, 6.9010908191557974e-05, 0.00021864083828404546, 0.0001152109180111438, 0.00012243574019521475, 7.8988450695760548e-05, 0.00010294689855072647, 3.1149964343057945e-05, 6.4670544816181064e-05, 0.00013443970237858593, 9.6806383226066828e-05, 0.00012242337106727064, 0.00016325015167240053, 4.0605256799608469e-05, 0.00010614811617415398, 2.4357117581530474e-05, 4.6835335524519905e-05, 0.00011379321222193539, 0.00011168490891577676, 8.8143111497629434e-05, 9.587621025275439e-05, 8.3711776824202389e-05, 9.1246525698807091e-05, 8.1737271102610976e-05, 8.6979496700223535e-05, 3.2460822694702074e-05, 0.00017218840366695076, 0.00010599200322758406, 2.8924716389155947e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-96,100,71,54,-33,106,-65,61,-91,-78,50,54,-42,-70,-88,100,79,51,78,66,-71,-84,53,-30,-41,-70,-64,-65,63,-62,-111,-14,42,71,64,-66,52,-51,-21,50,-73,61,62,-96,12,77,-32, 82,-98,127,85,-77,-69,-60,-84,95,-103,-63,74,82,-110,-92,93,-38,98,83,127,86,-110,51,72,-50,-79,-73,-79,56,80,-29,-127,-85,80,82,84,-84,83,-81,-15,76,-93,85,90,-74,-127,95,-101, 35,-49,69,37,18,-41,-51,-37,42,-33,4,36,32,-81,-55,0,-52,37,35,71,34,-52,29,27,-28,-49,-50,-24,33,34,89,-87,-84,45,38,34,-30,40,-38,-9,42,-40,36,46,-8,-8,38,-75, 
  /* [0][1][][] */ 92,-115,-43,91,55,-80,127,-90,90,-114,-73,83,85,-110,-13,-127,127,107,74,-38,83,106,-127,75,72,-76,-94,-100,-127,87,-69,-7,-88,73,108,97,-87,77,-79,89,85,-101,90,92,-88,109,94,-92, 127,-127,-68,127,-127,-127,-96,-127,127,-127,-127,127,127,-127,-20,97,-65,127,127,-49,127,127,68,127,127,-127,-127,-127,55,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 64,-82,-37,65,38,-62,-54,-63,54,-43,-62,60,50,-57,-16,11,-63,49,58,-28,58,66,48,66,66,-68,-65,-47,39,58,127,16,-61,70,51,50,-49,61,-60,57,60,-57,54,64,-61,-66,61,-59, 
  /* [0][2][][] */ 44,-59,-48,47,26,-53,63,-42,44,-74,-7,44,58,-73,84,-82,73,48,35,-33,26,-9,-79,31,-25,-46,-52,-50,-74,34,-40,93,-74,38,50,44,-28,37,-43,-85,48,-49,45,47,-24,17,39,-76, 73,-79,-53,79,-57,-65,-77,-70,51,-80,-69,63,76,-50,127,31,-46,58,61,-45,55,-13,40,67,-49,-70,-79,-63,33,63,-23,119,-57,67,60,58,-51,62,-67,-105,68,-68,63,62,-84,51,62,-51, 45,-47,-30,43,30,-20,-22,-35,16,-29,-56,31,34,-1,69,24,-35,18,28,-33,29,4,38,44,-24,-32,-53,-28,37,37,62,71,-2,36,19,23,-23,31,-31,-54,29,-32,28,31,-61,12,32,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0032157639507204294, 0.0012843199074268341, 0.0067153242416679859, 0.0017391310539096594, 0.0078735649585723877, 0.0024566913489252329, 0.0063451998867094517, 0.0056528793647885323, 0.0028234776109457016, 0.0014405961846932769, 0.0016207622829824686, 0.0033463707659393549, 0.0016652287449687719, 0.001521037076599896, 0.0084848431870341301, 0.0087948637083172798, 0.007613020483404398, 0.002324702451005578, 0.0040883799083530903, 0.0053749918006360531, 0.0029329634271562099, 0.0092922355979681015, 0.0048964638262987137, 0.0052035185508430004, 0.0033570090308785439, 0.0043752430938184261, 0.001323873526416719, 0.0027484982274472713, 0.0057136872783303261, 0.0041142711415886879, 0.0052029932849109173, 0.0069381315261125565, 0.0017257233848795295, 0.004511294886469841, 0.0010351774981245399, 0.001990501768887043, 0.004836211446672678, 0.0047466084361076355, 0.0037460820749402046, 0.0040747388266026974, 0.0035577504895627499, 0.003877977142110467, 0.0034738339018076658, 0.0036966286133974791, 0.0013795850099995732, 0.0073180072940886021, 0.0045046601444482803, 0.0012293003965169191, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 683, 768, 1758, 659, 13903, 12305, 2589, -108, -654, -434, 1047, 817, 3024, 862, 26401, 2949, 1670, -1261, -253, 3046, -1421, 8020, 11180, 11901, 5717, 381, 3935, 3773, 8163, -440, 11304, 3855, 377, -146, 5234, 3196, -1398, 276, -466, 4202, 918, -415, -907, 66, 920, 2777, 642, 1022, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00038895869511179626, 0.00089527672389522195, 0.0003209043643437326, 0.00030991289531812072, 0.00015988931409083307, 0.00031923849019221961, 0.0004586978757288307, 0.00022267128224484622, 0.00039249638211913407, 0.00083519925829023123, 0.00094302091747522354, 0.00030406453879550099, 0.00040794434607960284, 0.00087975739734247327, 0.00013751610822509974, 0.00043547331006266177, 0.00030527552007697523, 0.00032570562325417995, 0.00019597532809711993, 0.00030114117544144392, 0.00040201205410994589, 0.0003120416949968785, 0.00033592214458622038, 0.00013622170081362128, 0.00027432732167653739, 0.00029820392956025898, 0.0017719297902658582, 0.00048896053340286016, 0.00020600859716068953, 0.00043540995102375746, 0.00022473317221738398, 0.00028906320221722126, 0.00085019413381814957, 0.00028489556279964745, 0.00071865360951051116, 0.00056289980420842767, 0.00098012899979948997, 0.00028872827533632517, 0.00023275970306713134, 0.0004349923983681947, 0.0001821011392166838, 0.00030118483118712902, 0.00033003496355377138, 0.00027078448329120874, 0.0021619198378175497, 0.00049947469960898161, 0.00041190156480297446, 0.0011519266990944743, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,13,-4,76,-33,42,29,-33, 
  /* [1][0][][] */ 42,77,63,26,18,-18,127,93, 
  /* [2][0][][] */ -49,22,0,2,-127,-18,11,-13, 
  /* [3][0][][] */ 72,-7,0,-107,-127,11,19,-28, 
  /* [4][0][][] */ -127,84,28,-9,127,-32,54,6, 
  /* [5][0][][] */ -98,-38,16,-7,-127,18,-2,69, 
  /* [6][0][][] */ -8,-127,24,-32,0,-8,-6,42, 
  /* [7][0][][] */ -70,3,7,102,127,-36,-40,-4, 
  /* [8][0][][] */ 83,-7,0,-127,-11,-8,-55,-45, 
  /* [9][0][][] */ 9,-127,-12,0,-11,82,-48,72, 
  /* [10][0][][] */ -127,-16,-7,0,-120,94,55,-13, 
  /* [11][0][][] */ 121,-1,36,24,-60,-39,-33,-127, 
  /* [12][0][][] */ 0,10,66,-18,13,-100,127,71, 
  /* [13][0][][] */ 68,-18,3,-18,115,104,127,-35, 
  /* [14][0][][] */ 127,52,-15,36,-93,-15,-27,-16, 
  /* [15][0][][] */ -22,-127,8,-19,6,22,-6,37, 
  /* [16][0][][] */ -49,-22,9,-3,-127,1,4,2, 
  /* [17][0][][] */ -41,89,-127,-4,7,-119,102,-77, 
  /* [18][0][][] */ 127,-38,-36,11,-69,29,10,100, 
  /* [19][0][][] */ 127,-49,-27,1,58,-10,35,3, 
  /* [20][0][][] */ 123,29,-17,127,7,40,10,-42, 
  /* [21][0][][] */ 7,42,-54,11,-17,89,-127,-73, 
  /* [22][0][][] */ -127,33,27,-2,-13,2,-34,-30, 
  /* [23][0][][] */ -39,-52,6,17,-127,58,89,-10, 
  /* [24][0][][] */ 127,-10,-4,6,-81,-11,-10,11, 
  /* [25][0][][] */ 9,-6,-10,-28,127,50,53,-24, 
  /* [26][0][][] */ 14,-102,-3,-43,-3,-127,95,-59, 
  /* [27][0][][] */ -12,-127,26,-19,-7,-46,23,-11, 
  /* [28][0][][] */ -54,55,-1,34,-24,-63,127,71, 
  /* [29][0][][] */ -10,46,11,17,-10,38,-124,-127, 
  /* [30][0][][] */ 113,-65,14,4,-127,10,-53,-35, 
  /* [31][0][][] */ -1,-48,80,6,-14,-79,127,72, 
  /* [32][0][][] */ -99,13,16,5,-127,-89,-116,64, 
  /* [33][0][][] */ -23,14,-3,29,-127,-51,-38,26, 
  /* [34][0][][] */ 3,-127,51,-27,-7,81,-82,54, 
  /* [35][0][][] */ -29,-51,-127,-5,-4,-81,54,-53, 
  /* [36][0][][] */ -4,127,48,10,-11,7,-16,-30, 
  /* [37][0][][] */ -127,38,22,-18,63,-27,-13,-115, 
  /* [38][0][][] */ -127,-7,-57,-21,49,19,41,119, 
  /* [39][0][][] */ 8,-30,79,3,16,-98,127,73, 
  /* [40][0][][] */ -36,-11,-11,-36,-127,92,103,-20, 
  /* [41][0][][] */ -127,48,12,-77,-69,-88,-83,54, 
  /* [42][0][][] */ -47,-127,-103,-20,-7,79,-116,-93, 
  /* [43][0][][] */ -62,7,-8,-127,84,59,63,-3, 
  /* [44][0][][] */ 127,13,7,-86,57,-49,-16,49, 
  /* [45][0][][] */ -21,-127,-5,-16,-7,-59,98,6, 
  /* [46][0][][] */ 92,3,-3,-20,127,-25,-30,-2, 
  /* [47][0][][] */ 127,0,-2,123,-10,36,24,-48, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070414459332823753, 0.0016207486623898149, 0.00058094365522265434, 0.00056104542454704642, 0.00028945284429937601, 0.00057792785810306668, 0.00083039572928100824, 0.00040310909389518201, 0.00071054900763556361, 0.0015119884628802538, 0.0017071815673261881, 0.00055045797489583492, 0.00073851493652909994, 0.0015926535706967115, 0.00024894988746382296, 0.00078835152089595795, 0.00055265025002881885, 0.00058963551418855786, 0.00035478052450343966, 0.00054516567615792155, 0.00072777556488290429, 0.00056489923736080527, 0.00060813082382082939, 0.00024660659255459905, 0.00049662368837743998, 0.00053984828991815448, 0.0032077822834253311, 0.00088518118718639016, 0.00037294407957233489, 0.00078823685180395842, 0.00040684180567041039, 0.00052330055041238666, 0.0015391341876238585, 0.00051575573161244392, 0.001301002106629312, 0.0010190359316766262, 0.00177435961086303, 0.00052269420120865107, 0.00042137247510254383, 0.00078748090891167521, 0.00032966362778097391, 0.00054524472216144204, 0.00059747305931523442, 0.00049020996084436774, 0.0039137941785156727, 0.00090421538334339857, 0.00074567884439602494, 0.0020853704772889614, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -37584, 29955, -13912, -16838, 24198, 11403, 37366, 45589, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045103914453648031, 0.00060058379312977195, 0.0014018452493473887, 0.0017063295235857368, 0.0006907683564350009, 0.000445901183411479, 0.00069210818037390709, 0.0009910286171361804, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -44,-28,-29,8,7,-7,-13,20,-105,94,-40,89,127,6,60,-4,-14,-26,1,-9,-4,5,-26,-32,22,-105,9,64,-5,20,36,-23,11,-71,79,36,-6,5,8,-6,110,-10,40,-25,-18,19,-19,-15, 
  /* [1][0][][] */ 14,28,127,6,10,-30,7,-76,44,-9,29,6,-23,19,-3,-124,6,-79,0,3,-18,35,21,-35,-9,-9,17,-1,6,-4,20,-2,3,17,17,18,-23,-29,68,-76,13,64,-17,39,-19,5,26,-4, 
  /* [2][0][][] */ 22,-48,13,-39,34,27,-13,-22,7,-2,-11,21,-3,57,16,4,-36,127,-28,-24,-23,22,-40,-4,121,-3,5,-9,-32,-10,-1,-43,-13,-17,0,2,1,-9,-14,11,12,-26,-13,-7,5,24,-24,-29, 
  /* [3][0][][] */ -9,-77,3,5,6,-8,-4,7,1,-14,20,22,5,-6,49,-1,-9,-18,8,20,-9,17,-29,4,5,47,-7,8,-6,-2,127,6,8,17,-5,-8,-27,-4,-9,7,-8,12,-2,30,0,5,3,20, 
  /* [4][0][][] */ -111,15,-4,12,5,-27,-1,-13,20,-29,18,-9,-50,2,-28,-10,14,2,-14,32,1,-45,14,10,-1,58,12,104,-10,-6,-7,-25,-1,-127,-25,17,15,-12,-15,2,-62,-13,-14,14,-64,-6,12,12, 
  /* [5][0][][] */ -3,36,8,6,-54,12,5,40,45,5,4,7,-3,-43,0,43,1,-124,16,-1,54,-45,18,28,16,20,-110,-39,-44,-30,13,1,11,-85,-9,-79,55,-4,-60,15,16,-49,-7,2,127,-10,-54,-12, 
  /* [6][0][][] */ -53,-29,9,-6,39,-47,-6,-25,-5,-27,45,-37,-26,30,-11,-62,10,27,18,-40,-39,35,-23,-84,-10,-7,-60,-65,27,33,-19,-3,2,-72,-38,67,-50,-34,15,-82,4,4,17,40,127,-15,37,14, 
  /* [7][0][][] */ 5,47,-78,47,-30,4,-1,58,-26,8,72,-30,-6,-48,-5,0,-2,-127,47,-47,63,46,12,-67,16,-25,29,4,-23,35,-16,0,-2,30,-3,-37,4,-74,-58,-77,4,-49,55,67,-33,-15,-6,9, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019169162958860397, 0.025524809956550598, 0.059578422456979752, 0.072519004344940186, 0.029357654973864555, 0.018950799480080605, 0.029414597898721695, 0.04211871325969696, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51756, -490, 8995, -231, 5483, -4027, 1963, 29078, 3091, 36965, -2512, 17996, -6868, -866, 28135, 6422, 80, 14730, 34900, 11574, -388, -754, -2221, 13552, -8155, 22693, 47389, 31146, 3537, 1217, -1764, 830, 686, 11744, -7309, 12367, -12581, 22432, -21913, 96824, 20246, 26069, 10921, -2193, 17779, 3477, 744, -295, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00043988157995045185, 0.00030147348297759891, 0.00017571455100551248, 0.00026574870571494102, 0.00013588659930974245, 0.00012346245057415217, 0.00057241751346737146, 0.00011991064093308523, 0.00010763174941530451, 0.00013596138160210103, 0.0001064673560904339, 0.00023881318338681012, 0.00022722910216543823, 0.00025207499857060611, 9.0398461907170713e-05, 0.00023978398530744016, 0.0002001142711378634, 0.00026868458371609449, 7.2545335569884628e-05, 0.0002190655650338158, 0.00018849686603061855, 0.00027757641510106623, 0.00020899857918266207, 0.00014895116328261793, 0.00015299388905987144, 0.00016448560927528888, 0.00060372060397639871, 0.00010105653200298548, 0.00020872012828476727, 0.00062033446738496423, 0.00010896935418713838, 0.00023065839195623994, 0.0012550177052617073, 0.0002425867278361693, 0.00021148670930415392, 0.00018667294352781028, 0.00034971872810274363, 0.00011544730659807101, 0.00031735067022964358, 2.2983487724559382e-05, 0.00015278618957381696, 5.9544669056776911e-05, 0.00015208983677439392, 0.00017064374696929008, 0.00013143820979166776, 0.00010635736543918028, 0.00029092174372635782, 9.9827331723645329e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-3,21,110,4,80,1,26,14,7,9,7,-6,-9,-45,7,-2,9,-23,-115,-6,-21,127,-7,-2,5,-5,11,-6,4,17,99,19,29,39,-26,2,33,0,4,18,-70,-8,-8,19,2,-5,-10, 127,9,15,-127,28,85,12,9,120,127,8,42,-47,-23,4,7,127,-55,-61,-59,-97,27,-105,17,18,67,-32,-83,23,20,10,-121,5,-60,127,10,-38,-48,-3,118,-76,-93,-29,4,-32,-9,-127,23, -33,-3,8,16,0,63,6,16,25,6,-13,31,-12,-3,14,4,-103,29,-3,74,-30,-9,-16,-4,-4,-60,-4,31,-17,4,5,-20,8,-23,17,-18,1,46,41,-9,51,32,-14,12,-41,2,0,-7, 
  /* [0][1][][] */ 124,7,1,-99,14,-28,35,-17,8,8,-12,52,-5,-1,17,-33,0,-49,-61,-85,11,-74,-120,-16,6,96,-15,-127,-9,33,13,-106,16,-53,-2,127,-2,58,-39,43,-61,-127,40,-86,-43,-15,-12,-4, 29,-127,-127,115,-127,-127,-127,-127,-127,-100,127,-127,127,127,34,-127,-82,127,127,-105,127,127,112,127,127,-127,-127,30,-127,-127,96,127,-127,127,-29,-42,127,-127,127,127,127,-78,127,127,127,-124,104,106, 55,4,49,-13,6,-62,45,17,-25,13,-105,-8,1,-40,127,4,63,-65,-74,86,14,-45,13,-31,1,4,-40,71,20,40,2,4,32,-43,9,67,-4,63,64,-6,-78,3,-81,-31,28,-18,-9,5, 
  /* [0][2][][] */ -53,-5,25,-17,7,32,-37,21,8,-25,12,32,7,-5,-39,17,5,22,-15,108,7,-32,-15,-10,-3,22,0,54,-10,3,49,-31,-19,-43,-32,-37,1,30,7,-20,10,-6,41,-36,-36,18,-10,18, 70,125,74,22,16,-22,123,34,16,-5,43,26,-4,0,-90,24,-58,-56,-39,127,-36,49,13,21,31,-61,-42,32,77,0,127,22,83,-25,5,-35,-23,-18,-14,123,-25,-12,-40,45,21,-32,9,-127, -41,-4,6,-3,5,-8,-60,6,-19,-13,-40,-40,20,-9,-9,11,33,24,-11,-127,24,-9,6,-7,-7,10,-11,-52,-15,7,7,9,-20,88,-38,-21,-3,34,22,-56,6,5,-37,7,-42,127,-2,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.018694967031478882, 0.01281262282282114, 0.0074678682722151279, 0.011294320225715637, 0.0057751801796257496, 0.0052471538074314594, 0.024327743798494339, 0.0050962022505700588, 0.0045743491500616074, 0.0057783583179116249, 0.0045248623937368393, 0.010149559937417507, 0.009657236747443676, 0.010713187046349049, 0.0038419344928115606, 0.010190819390118122, 0.0085048563778400421, 0.011419094167649746, 0.0030831766780465841, 0.0093102864921092987, 0.0080111166462302208, 0.011796996928751469, 0.0088824396952986717, 0.0063304244540631771, 0.006502239964902401, 0.0069906380958855152, 0.025658125057816505, 0.0042949025519192219, 0.0088706053793430328, 0.026364214718341827, 0.0046311975456774235, 0.0098029812797904015, 0.053338252007961273, 0.010309935547411442, 0.008988184854388237, 0.0079335998743772507, 0.014863045886158943, 0.0049065104685723782, 0.013487403281033039, 0.00097679824102669954, 0.0064934128895401955, 0.002530648373067379, 0.0064638177864253521, 0.0072523588314652443, 0.0055861235596239567, 0.0045201880857348442, 0.012364174239337444, 0.0042426614090800285, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 35041, 7599, 8107, 7644, 1260, 8723, -1522, -255, 766, 2464, 3596, 395, 1494, -831, 705, -1940, 3693, 10698, -272, 23896, 3991, 2497, 9217, -500, 3338, 6084, 21030, 9301, -62, -2491, 154, 1806, -2035, 9081, 3838, 7401, 6870, 4550, 20359, 2098, -795, 2788, 1024, 3584, 3981, 1947, -1381, 2716, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0001211296912515536, 0.00030407478334382176, 0.00019616659847088158, 0.0004241438873577863, 0.0017155623063445091, 0.00056696758838370442, 0.0012879958376288414, 0.001159298000857234, 0.00071816216222941875, 0.00057327613467350602, 0.00061032385565340519, 0.00038757873699069023, 0.00058211234863847494, 0.00051026273285970092, 0.00063009891891852021, 0.0018744979752227664, 0.00043555363663472235, 0.0004037778708152473, 0.0017182938754558563, 0.00011358218034729362, 0.00028755381936207414, 0.00041828150278888643, 0.00043170442222617567, 0.00096768047660589218, 0.00036661361809819937, 0.00018831763009075075, 0.00019248311582487077, 0.00039120239671319723, 0.00091457011876627803, 0.001060617039911449, 0.00058067875215783715, 0.00045633333502337337, 0.00098649691790342331, 0.00024635758018121123, 0.00029928330332040787, 0.00025458319578319788, 0.00053469464182853699, 0.00028821479645557702, 0.00011342785728629678, 0.0021891440264880657, 0.00075152952922508121, 0.0010202768025919795, 0.00047469820128753781, 0.00042182498145848513, 0.00030055842944420874, 0.00057319545885547996, 0.00085100269643589854, 0.00098321354016661644, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 108,13,-9,2,127,32,-32,-19, 
  /* [1][0][][] */ 3,-10,0,127,18,0,-7,19, 
  /* [2][0][][] */ 56,-127,-43,60,-11,-89,124,-6, 
  /* [3][0][][] */ 127,-20,-15,22,-24,-30,10,-7, 
  /* [4][0][][] */ -8,-60,127,-25,-1,-79,38,-106, 
  /* [5][0][][] */ 63,2,-14,-2,127,7,1,5, 
  /* [6][0][][] */ -3,66,-30,127,24,34,-63,-40, 
  /* [7][0][][] */ -10,127,-9,1,-7,-15,11,-3, 
  /* [8][0][][] */ 127,32,-1,25,-35,1,-16,-36, 
  /* [9][0][][] */ -127,-3,14,29,50,7,-18,5, 
  /* [10][0][][] */ -69,-24,0,127,87,50,-37,-26, 
  /* [11][0][][] */ -127,23,12,-95,33,-1,-37,-76, 
  /* [12][0][][] */ 127,2,-5,10,-61,3,-9,-39, 
  /* [13][0][][] */ 4,93,-126,4,2,127,-97,66, 
  /* [14][0][][] */ -24,-34,-1,127,17,16,0,-15, 
  /* [15][0][][] */ -5,127,-2,-9,-5,-18,13,-48, 
  /* [16][0][][] */ -37,-127,0,7,16,-88,113,-32, 
  /* [17][0][][] */ 19,127,9,-5,-1,81,-85,-24, 
  /* [18][0][][] */ 15,59,-127,21,29,100,-69,75, 
  /* [19][0][][] */ -59,16,-16,4,-127,-6,47,31, 
  /* [20][0][][] */ -127,-38,11,2,105,-58,46,11, 
  /* [21][0][][] */ -62,-14,-13,-3,-127,3,13,-1, 
  /* [22][0][][] */ -127,-59,-24,-20,76,-36,78,97, 
  /* [23][0][][] */ -25,-15,-6,-6,-1,78,-127,-94, 
  /* [24][0][][] */ -6,45,-127,4,18,53,-26,72, 
  /* [25][0][][] */ 121,-76,-10,127,-91,-4,-16,-44, 
  /* [26][0][][] */ 13,-16,-2,5,-21,111,127,-30, 
  /* [27][0][][] */ 102,-40,-1,10,127,58,53,-21, 
  /* [28][0][][] */ -10,119,-80,7,21,93,-36,127, 
  /* [29][0][][] */ -8,10,0,-4,-3,79,-127,-77, 
  /* [30][0][][] */ 15,-4,3,-127,-3,2,1,-15, 
  /* [31][0][][] */ -91,13,-8,-4,-127,17,-8,-15, 
  /* [32][0][][] */ 2,38,-3,-127,1,40,-68,-109, 
  /* [33][0][][] */ -54,-9,4,4,-127,49,44,-8, 
  /* [34][0][][] */ -127,91,16,25,14,-14,21,-10, 
  /* [35][0][][] */ -3,127,-19,-12,-3,-70,74,-46, 
  /* [36][0][][] */ -15,48,5,-31,0,95,-127,-24, 
  /* [37][0][][] */ 72,-73,-40,21,45,-127,120,-44, 
  /* [38][0][][] */ 35,-127,-13,-12,-13,71,-58,58, 
  /* [39][0][][] */ 7,-127,-6,-2,1,0,-57,-114, 
  /* [40][0][][] */ 127,40,-7,18,-34,83,-113,-95, 
  /* [41][0][][] */ -7,-127,6,-5,7,96,-59,120, 
  /* [42][0][][] */ 56,-9,-17,-127,-31,-3,-17,-40, 
  /* [43][0][][] */ -79,-6,16,-127,48,13,-12,-10, 
  /* [44][0][][] */ 8,-23,-16,1,-9,127,108,-43, 
  /* [45][0][][] */ -127,-25,-11,0,8,8,10,-18, 
  /* [46][0][][] */ 13,103,127,-19,2,13,10,23, 
  /* [47][0][][] */ -19,-11,19,127,14,36,-6,-8, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0002746592799667269, 0.0006894838297739625, 0.00044480405631475151, 0.00096173823112621903, 0.0038900049403309822, 0.0012855882523581386, 0.0029205060563981533, 0.0026286861393600702, 0.0016284191515296698, 0.0012998927850276232, 0.0013838978484272957, 0.00087882747175171971, 0.0013199286768212914, 0.0011570110218599439, 0.0014287374215200543, 0.0042503885924816132, 0.00098760961554944515, 0.00091555865947157145, 0.0038961987011134624, 0.00025754544185474515, 0.00065202283440157771, 0.0009484454058110714, 0.00097888160962611437, 0.0021941971499472857, 0.00083128944970667362, 0.00042700665653683245, 0.00043645180994644761, 0.00088704400695860386, 0.0020737703889608383, 0.0024049291387200356, 0.0013166781282052398, 0.0010347272036597133, 0.0022368631325662136, 0.00055861118016764522, 0.00067861919524148107, 0.00057726254453882575, 0.0012124099303036928, 0.00065352162346243858, 0.00025719552650116384, 0.004963842686265707, 0.0017040789825841784, 0.0023134583607316017, 0.0010763691971078515, 0.00095648015849292278, 0.00068151054438203573, 0.0012997098965570331, 0.0019296325044706464, 0.0022294181399047375, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5936, -22420, 25565, 20963, 6328, 1457, 36331, 11835, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012067697243764997, 0.00062458845786750317, 0.0011981501011177897, 0.0011144567979499698, 0.0010242991847917438, 0.0011228439398109913, 0.00077267130836844444, 0.00064042012672871351, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,3,12,-103,14,25,12,5,0,3,-1,-6,116,0,-2,6,0,-5,-5,0,89,1,-6,9,34,34,4,5,8,10,9,-127,10,8,-2,3,-26,10,-17,33,13,-22,-1,11,6,0,5,6, 
  /* [1][0][][] */ -41,-9,-4,-4,45,31,-28,83,21,-5,-32,-26,6,0,21,41,0,41,21,-51,-5,26,127,22,-31,-3,50,5,19,3,20,-16,16,-10,-5,-27,3,-59,9,4,-4,-9,-87,-17,-37,7,-56,-105, 
  /* [2][0][][] */ -57,14,-3,16,43,-12,31,20,-13,51,14,-5,-2,0,1,54,0,8,-127,22,-11,13,5,-22,-33,-7,37,4,18,32,21,-3,6,-11,-6,-22,11,12,0,8,37,-4,-27,-1,24,-53,26,15, 
  /* [3][0][][] */ 5,2,2,7,-8,34,6,-6,72,17,-4,-7,25,0,-32,-5,0,-2,-10,-2,5,7,2,-12,-10,-11,-12,-2,-7,2,-7,-2,-44,41,-51,4,9,6,1,-127,-1,5,5,-45,2,0,2,11, 
  /* [4][0][][] */ -3,-13,71,38,-2,-15,-9,1,6,-2,-3,-11,-83,0,-19,7,0,6,5,0,64,3,5,2,-18,40,-1,36,-12,-4,-9,99,4,7,-5,-5,16,-21,-13,-14,-8,-127,-4,4,-2,-3,-3,-2, 
  /* [5][0][][] */ -8,56,5,-13,-1,45,27,13,-25,30,12,59,26,0,-127,-7,0,16,-42,19,-10,7,-11,37,-19,-15,29,1,-7,23,25,-21,49,31,-47,-11,7,15,-48,15,25,-8,-10,31,20,60,20,24, 
  /* [6][0][][] */ -25,-55,-8,-2,44,-48,-24,12,27,-23,-16,83,2,0,-127,45,0,-7,50,-18,-5,2,26,-32,32,3,0,-23,44,-15,-13,-10,94,-32,35,8,-7,-11,-66,-23,-15,-8,5,-26,-17,-83,-15,-23, 
  /* [7][0][][] */ -122,-25,-12,13,127,22,61,24,20,5,29,-42,-34,0,85,104,0,12,-7,67,-10,2,-33,50,16,11,44,7,50,75,51,-6,-7,-17,-23,-26,4,29,23,36,79,0,-40,-12,63,6,68,80, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.051287710666656494, 0.026545008644461632, 0.050921380519866943, 0.047364413738250732, 0.043532714247703552, 0.047720868140459061, 0.032838530838489532, 0.027217855677008629, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 67274, 55126, 66346, 44913, -425, 14798, -155, 32728, 31679, 30043, 30426, 4598, -49925, -127, 37376, 165, -204, 35516, 2575, 2822, -13841, 3994, 53070, 46276, -11187, 45246, 45254, 22541, -2621, 16907, -7190, -53291, 11864, 125032, 30402, 1247, 68317, -775, 194053, -23896, 14681, -25457, 2725, 98146, -4921, 98445, 2104, -23420, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.9424131147097796e-05, 7.2780174377840012e-05, 8.7447901023551822e-05, 0.00010255779488943517, 0.00012732751201838255, 0.00018466540495865047, 0.00011269358219578862, 5.0759663281496614e-05, 7.2271672252099961e-05, 2.7988917281618342e-05, 7.7026816143188626e-05, 1.8013590306509286e-05, 0.00018391918274573982, 0.005541567225009203, 7.103411917341873e-05, 0.00020915741333737969, 0.0027484172023832798, 1.7215796106029302e-05, 7.7319440606515855e-05, 0.00018125231144949794, 9.2454298282973468e-05, 0.00011606828047661111, 0.00010960472718579695, 2.8553673473652452e-05, 6.2018581957090646e-05, 6.170410051709041e-05, 2.839445551217068e-05, 3.5755459975916892e-05, 0.00033015597728081048, 5.1332670409465209e-05, 4.5473854697775096e-05, 0.00022557844931725413, 0.00019665718718897551, 8.5520023276330903e-06, 7.660777191631496e-05, 0.00018321974494028836, 1.1986687241005711e-05, 0.00055350258480757475, 2.3992291971808299e-05, 8.1453195889480412e-05, 6.1560262111015618e-05, 0.00012819988478440791, 0.00011806895054178312, 8.7758626250433736e-06, 0.00019496536697261035, 6.093342017265968e-05, 0.00018065076437778771, 0.00012561114272102714, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-7,-20,9,-39,-78,-68,-25,-50,10,65,37,-71,112,-41,-113,-86,37,-9,0,-72,-112,-80,-33,-126,-65,-21,72,15,94,28,-127,-89,-6,53,17,49,-127,79,-77,-14,104,-107,-2,-37,-89,107, 76,11,-29,-32,58,-127,-127,-81,61,-76,-117,108,41,-82,-2,64,-52,-112,59,4,12,-111,-127,-72,-3,-127,-122,-43,-53,21,-55,56,31,-127,64,84,12,73,-93,127,-127,7,124,-127,3,-24,-127,94, -32,43,5,-7,-65,-111,-57,-17,86,-8,-127,40,10,-71,-100,-9,-127,-25,27,10,-16,-77,-36,-25,-10,-30,-57,-15,-8,17,-22,11,110,-85,70,33,13,37,-3,17,-79,5,7,-80,-16,5,-55,14, 
  /* [0][1][][] */ -85,-127,-44,-46,-9,54,102,-106,-25,-108,-21,112,90,-64,26,-96,-121,-94,90,-77,41,-87,-104,-127,43,-120,-78,-35,127,-60,127,84,-42,-86,-13,84,-34,-76,-107,90,41,60,105,-108,-89,-118,80,120, 127,-84,-127,-127,127,40,96,-127,99,-127,-112,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-121,-120,127,-96,-127,-127,-119,-127,-69,127,31,-113,127,127,-68,-127,-97,89,60,127,127,-114,-110,-127,124,127, -52,31,-63,-84,-120,-25,33,-37,127,-20,-76,37,56,-70,-26,-43,-37,-30,54,-71,55,-82,-39,-24,47,-3,-45,-62,16,-89,-34,21,32,-97,117,23,-36,-61,2,-13,36,55,11,-76,-56,-37,65,36, 
  /* [0][2][][] */ -60,-108,-35,-35,1,35,-3,-35,-37,-59,-16,59,80,-127,-127,-64,-43,-19,65,73,50,-32,-13,-60,31,-56,-12,-56,73,29,78,64,110,-27,-37,-7,-95,35,-16,31,10,38,17,-56,96,-78,3,31, 87,-76,-90,-87,81,20,8,-47,47,-71,-33,55,86,-26,15,91,-24,-33,78,116,81,-54,-19,-58,91,-67,-20,-100,-52,39,-43,112,-17,-49,68,8,-127,50,-15,0,11,33,17,-66,127,-101,-12,39, -28,28,-44,-37,-80,-18,24,-11,60,-5,-12,33,34,-43,109,-29,-93,-5,31,60,73,-29,-2,-3,41,1,-4,-66,-15,29,-18,42,-89,-41,66,6,-21,22,28,-36,8,37,-3,-17,63,-36,-3,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038005255628377199, 0.0030931574292480946, 0.0037165358662605286, 0.0043587060645222664, 0.0054114190861582756, 0.0078482795506715775, 0.004789477214217186, 0.0021572855766862631, 0.0030715460889041424, 0.0011895289644598961, 0.0032736395951360464, 0.00076557754073292017, 0.0078165652230381966, 0.23551659286022186, 0.0030189498793333769, 0.0088891899213194847, 0.1168077290058136, 0.00073167128721252084, 0.0032860760111361742, 0.0077032232657074928, 0.00392930768430233, 0.0049329018220305443, 0.004658200778067112, 0.001213531126268208, 0.0026357898022979498, 0.0026224241591989994, 0.0012067643692716956, 0.0015196070307865739, 0.014031629078090191, 0.0021816384978592396, 0.0019326388137415051, 0.0095870839431881905, 0.0083579299971461296, 0.00036346007254905999, 0.0032558303792029619, 0.0077868388034403324, 0.00050943420501425862, 0.023523859679698944, 0.0010196723742410541, 0.0034617607016116381, 0.0026163111906498671, 0.0054484950378537178, 0.0050179301761090755, 0.00037297414382919669, 0.0082860281690955162, 0.002589670242741704, 0.0076776575297117233, 0.0053384732455015182, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4045, 80, 7567, 5724, 6077, 5458, 9338, -3, -8, -258, 1971, 315, 9836, -70100480, 2409, 14492, -56588748, -98, -432, 11727, 3138, -12, -14, 356, 2778, -628, 57, 683, 3498, 1535, 2033, 10998, 3463, 278, 278, -2084, 355, 3061, -143, 13898, 1889, 10878, -486, -90, 11707, 173, 9205, 4205, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0005192435928620398, 0.00041892621084116399, 0.00041097862413153052, 0.00032642815494909883, 0.00032972206827253103, 0.00038690515793859959, 0.00041548878652974963, 0.0015571539988741279, 0.00048074254300445318, 0.0028238981030881405, 0.0007692596991546452, 0.0026735593564808369, 0.00022911695123184472, 2.3135882099012406e-09, 0.0011008698493242264, 0.00022465003712568432, 2.3135882099012406e-09, 0.0070269140414893627, 0.00048993586096912622, 0.0003332109481561929, 0.0003293815825600177, 0.005218858364969492, 0.00037565847742371261, 0.001975279301404953, 0.0013417488662526011, 0.0008540941053070128, 0.0025109960697591305, 0.0018630793783813715, 0.00032564811408519745, 0.0019198798108845949, 0.0014608625788241625, 0.00021484136232174933, 0.00022856975556351244, 0.011387094855308533, 0.00057283724891021848, 0.00059763685567304492, 0.0043387673795223236, 0.00042250289698131382, 0.002637259429320693, 0.00025451142573729157, 0.0015119232703000307, 0.00020074351050425321, 0.00045583510654978454, 0.0097336573526263237, 0.00042662202031351626, 0.00062795373378321528, 0.00030493957456201315, 0.00021797229419462383, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,54,-44,32,-10,-49,25, 
  /* [1][0][][] */ 80,80,-25,-110,33,10,-105,127, 
  /* [2][0][][] */ 23,8,-35,127,40,113,43,83, 
  /* [3][0][][] */ 76,64,-92,127,-105,-8,-12,17, 
  /* [4][0][][] */ -36,-91,78,16,17,31,-41,-127, 
  /* [5][0][][] */ 22,4,-36,42,2,-17,42,127, 
  /* [6][0][][] */ 58,-20,-127,-104,103,18,41,-40, 
  /* [7][0][][] */ 127,13,17,-24,29,-14,74,-58, 
  /* [8][0][][] */ 11,-104,-6,111,-10,9,-10,-127, 
  /* [9][0][][] */ 95,-127,4,-4,-14,7,-122,82, 
  /* [10][0][][] */ -123,-21,-127,22,-30,6,-84,54, 
  /* [11][0][][] */ -16,-34,2,-90,-127,-24,45,-9, 
  /* [12][0][][] */ 6,6,-32,74,-71,-24,45,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-34,-10,8,44,127,45,41, 
  /* [15][0][][] */ 16,18,18,-127,52,29,-33,63, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 21,31,127,17,-27,-17,23,34, 
  /* [18][0][][] */ 102,-127,30,61,-8,15,-113,13, 
  /* [19][0][][] */ -127,-3,47,90,-48,-104,-118,78, 
  /* [20][0][][] */ 33,22,-46,118,-30,-127,5,59, 
  /* [21][0][][] */ 56,22,127,10,-10,-8,67,11, 
  /* [22][0][][] */ -66,-21,-127,-2,0,6,-95,4, 
  /* [23][0][][] */ -79,127,-5,-22,-3,-1,116,-69, 
  /* [24][0][][] */ 2,-57,-47,84,-12,-61,91,127, 
  /* [25][0][][] */ 16,43,39,23,125,127,-72,-48, 
  /* [26][0][][] */ -82,-36,-127,-2,-1,10,-92,-5, 
  /* [27][0][][] */ -6,-56,-47,-11,-63,127,57,60, 
  /* [28][0][][] */ 16,-16,-16,26,18,127,39,61, 
  /* [29][0][][] */ 94,28,127,9,-23,-23,83,-4, 
  /* [30][0][][] */ -82,127,-37,-26,6,-4,115,-46, 
  /* [31][0][][] */ -46,-96,-21,12,56,-91,127,116, 
  /* [32][0][][] */ 11,-4,-49,105,-23,95,82,127, 
  /* [33][0][][] */ -4,56,-19,-106,6,-8,-1,127, 
  /* [34][0][][] */ -16,71,-14,-107,11,-14,20,127, 
  /* [35][0][][] */ 127,11,-10,-25,22,28,89,-28, 
  /* [36][0][][] */ -117,-25,28,48,-47,-3,-127,72, 
  /* [37][0][][] */ -8,-25,-10,20,45,127,45,48, 
  /* [38][0][][] */ 15,31,11,103,127,4,-13,43, 
  /* [39][0][][] */ 3,29,38,-126,20,-5,-48,127, 
  /* [40][0][][] */ 86,30,127,2,-20,-22,88,-16, 
  /* [41][0][][] */ 0,-32,-39,96,59,127,77,111, 
  /* [42][0][][] */ -80,-11,127,22,-43,16,-23,57, 
  /* [43][0][][] */ -18,-56,-3,96,-17,6,20,-127, 
  /* [44][0][][] */ 46,10,-59,-127,94,-24,-10,-104, 
  /* [45][0][][] */ -98,127,9,-40,9,9,68,-62, 
  /* [46][0][][] */ -127,-8,39,24,-40,29,-73,31, 
  /* [47][0][][] */ 100,7,106,3,50,-20,127,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0008835912449285388, 0.00071288220351561904, 0.00069935788633301854, 0.00055547925876453519, 0.00056108448188751936, 0.00065839232411235571, 0.00070703279925510287, 0.0026497922372072935, 0.00081807438982650638, 0.0048053967766463757, 0.0013090409338474274, 0.0045495671220123768, 0.00038988585583865643, 3.937008052901092e-09, 0.0018733383622020483, 0.00038228454650379717, 3.937008052901092e-09, 0.011957623995840549, 0.00083371857181191444, 0.00056702148867771029, 0.00056050508283078671, 0.0088808750733733177, 0.00063925399444997311, 0.0033613115083426237, 0.0022832395043224096, 0.0014534026850014925, 0.0042729349806904793, 0.0031703819986432791, 0.00055415189126506448, 0.0032670388463884592, 0.002485934179276228, 0.00036559323780238628, 0.00038895467878319323, 0.019377296790480614, 0.00097479100804775953, 0.0010169921442866325, 0.007383233867585659, 0.00071896862937137485, 0.0044877957552671432, 0.00043309933971613646, 0.0025728235486894846, 0.00034160306677222252, 0.0007756896666251123, 0.016563659533858299, 0.00072597811231389642, 0.001068582059815526, 0.00051891239127144217, 0.00037092110142111778, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -3502, -43345, -8047, -13443, -31254, -461, -27167, -27735, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021182934287935495, 0.0019580740481615067, 0.0026121307164430618, 0.0012400029227137566, 0.0010449771070852876, 0.0022919774055480957, 0.0015774097992107272, 0.0011419523507356644, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-18,6,-1,127,3,2,0,1,-123,-93,0,0,117,0,0, 
  /* [1][0][][] */ 0,-22,3,84,76,9,13,4,-1,2,127,-53,0,37,-6,0, 
  /* [2][0][][] */ 0,1,-8,-12,-59,8,13,2,0,1,-14,2,0,127,-7,0, 
  /* [3][0][][] */ 0,-11,-17,-127,81,27,65,23,1,64,-1,41,0,-2,18,0, 
  /* [4][0][][] */ 0,47,-32,30,-45,18,127,5,-1,-57,23,-13,0,-1,21,0, 
  /* [5][0][][] */ 0,-13,-10,1,-22,-27,-16,10,0,10,-6,-48,0,-6,127,0, 
  /* [6][0][][] */ 0,10,-4,0,50,-17,-14,-1,-1,-107,118,65,0,127,61,0, 
  /* [7][0][][] */ 0,14,-11,127,7,-5,19,8,1,75,-59,78,0,-9,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.090027473866939545, 0.08321814239025116, 0.11101555079221725, 0.052700124680995941, 0.044411525130271912, 0.097409039735794067, 0.067039914429187775, 0.048532973974943161, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 42149, 10897, 8171, 6805, 31454, 9402, 12219, -13634, 4347, 26745, 17108, -445, 26053, 6708, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 6.2326187617145479e-05, 0.00036763187381438911, 0.00044627382885664701, 0.00025800144067034125, 0.00010556240158621222, 0.00054464943241328001, 0.00031740873237140477, 1.8965289200423285e-05, 0.00042215993744321167, 0.00024511339142918587, 0.0011133048683404922, 0.00072724185883998871, 0.00024923885939642787, 0.00027284788666293025, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,38,-67,80,-75,-90,-3,-8,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-25,86,-2,-73,67,-94,80,-95,-28,3,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-24,13,-44,15,-28,16,-28,0,3,-110,-49,8,-29,-14, -78,-42,-59,-15,-8,-26,8,-26,-108,-90,21,-12,-104,-127,1,23, 14,1,61,2,2,33,-25,35,-127,6,-2,1,-21,11,-3,43, 
  /* [0][2][][] */ -115,-73,65,2,-7,38,-39,54,-76,0,0,4,40,1,-26,23, 23,-4,28,-2,-28,39,-34,23,-125,-13,0,84,-58,0,-28,-111, 21,-7,16,0,4,14,9,24,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0026488627772778273, 0.015624354593455791, 0.018966637551784515, 0.010965060442686081, 0.0044864020310342312, 0.023147601634263992, 0.01348987128585577, 0.00080602476373314857, 0.017941797152161598, 0.010417318902909756, 0.047315455973148346, 0.030907778069376945, 0.010592651553452015, 0.011596035212278366, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, -5596, -100555, 37530, 375488, 22887, 21466, 5809, -162291, 49127, 24344, 715651, -1073741824, 50459, 37076, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.0004374251002445817, 0.00016662938287481666, 2.7363597837393172e-05, 8.6410364019684494e-06, 0.00011921428813366219, 0.00012151047121733427, 0.00018321872630622238, 4.5338010750128888e-06, 3.8902737287571654e-05, 0.00012880800932180136, 8.0840545706450939e-06, 1.1533876076441629e-09, 7.6629032264463603e-05, 5.8645484386943281e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 59,14,40, 5,-4,22, -127,-103,-68, 
  /* [1][1][][] */ 11,11,6, -15,20,1, 4,-17,8, 
  /* [1][2][][] */ 4,32,6, 3,23,6, 46,-4,20, 
  /* [2][0][][] */ 30,-6,-10, 77,116,-2, 43,-35,7, 
  /* [2][1][][] */ 6,10,-6, 70,127,-31, 22,-2,-7, 
  /* [2][2][][] */ 45,-68,16, 72,-41,-21, 36,-49,17, 
  /* [3][0][][] */ 18,52,14, 32,102,27, 0,7,1, 
  /* [3][1][][] */ 28,50,14, 60,127,29, -16,-19,11, 
  /* [3][2][][] */ 10,13,13, 22,24,12, -2,-3,9, 
  /* [4][0][][] */ 56,84,13, 19,82,1, -15,8,8, 
  /* [4][1][][] */ 45,82,60, 16,91,31, 21,43,-11, 
  /* [4][2][][] */ 69,88,44, 55,127,19, -13,35,34, 
  /* [5][0][][] */ -8,-17,-124, -18,-15,-101, -15,21,-25, 
  /* [5][1][][] */ -7,-58,-127, -11,-58,-111, -10,6,-21, 
  /* [5][2][][] */ -10,2,-15, -6,-10,-11, -7,6,-14, 
  /* [6][0][][] */ 30,-62,35, 51,-87,40, 12,-20,9, 
  /* [6][1][][] */ 41,-95,62, 67,-127,73, 12,-25,20, 
  /* [6][2][][] */ 21,-36,12, 16,-43,27, -8,13,5, 
  /* [7][0][][] */ -35,17,-2, -106,-40,-6, -28,21,-6, 
  /* [7][1][][] */ -14,-4,-4, -127,-94,-16, -12,-10,-4, 
  /* [7][2][][] */ -22,34,-14, -14,11,-8, -26,23,-11, 
  /* [8][0][][] */ 53,85,75, 57,88,76, 58,95,84, 
  /* [8][1][][] */ 52,84,75, 54,87,76, 59,101,91, 
  /* [8][2][][] */ 65,96,85, 69,105,88, 75,127,116, 
  /* [9][0][][] */ -23,1,11, -13,0,3, 9,14,-2, 
  /* [9][1][][] */ 86,110,-14, 66,127,11, 1,31,32, 
  /* [9][2][][] */ -31,-29,10, -2,-35,-4, 13,6,-19, 
  /* [10][0][][] */ -25,-85,-18, 34,94,21, -9,-14,-2, 
  /* [10][1][][] */ -60,-105,-13, 79,127,15, -17,-28,0, 
  /* [10][2][][] */ -32,-20,3, 36,22,-10, -9,-2,8, 
  /* [11][0][][] */ -11,-26,-1, 15,-38,9, 14,-94,-47, 
  /* [11][1][][] */ -48,-49,-26, -35,-66,-40, -14,-59,-53, 
  /* [11][2][][] */ -5,-36,-74, 118,127,65, -37,15,-45, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -52,-98,-18, -62,-112,-25, -9,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,16,11, 
  /* [13][2][][] */ -9,-20,3, 1,-19,-2, 1,4,-4, 
  /* [14][0][][] */ 46,-4,-34, 79,-23,-47, 31,-9,-19, 
  /* [14][1][][] */ 88,-15,-70, 127,-37,-84, 59,-17,-36, 
  /* [14][2][][] */ 56,-7,-42, 77,-17,-48, 29,-3,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.11154339462518692, 0.042490489780902863, 0.0069777169264853001, 0.0022034640423953533, 0.030399641022086143, 0.030985169112682343, 0.046720772981643677, 0.0011561191640794277, 0.0099201975390315056, 0.032846041023731232, 0.002061433857306838, 2.9411381774480105e-07, 0.019540401175618172, 0.014954597689211369, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.58765137195587158, } };
const TfArray<1, int> quant46_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.44101801514625549, } };
const TfArray<1, int> quant50_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.49799704551696777, } };
const TfArray<1, int> quant53_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.55238467454910278, } };
const TfArray<1, int> quant54_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28773072361946106, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20185938477516174, } };
const TfArray<1, int> quant61_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.31242567300796509, } };
const TfArray<1, int> quant62_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23222880065441132, } };
const TfArray<1, int> quant65_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.36461102962493896, } };
const TfArray<1, int> quant66_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.072315216064453125, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1396515816450119, } };
const TfArray<1, int> quant69_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230400), (TfLiteIntArray*)&g0::tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230400), (TfLiteIntArray*)&g0::tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 702768), (TfLiteIntArray*)&g0::tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 702768), (TfLiteIntArray*)&g0::tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 345600), (TfLiteIntArray*)&g0::tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 221808), (TfLiteIntArray*)&g0::tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 100800), (TfLiteIntArray*)&g0::tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3600), (TfLiteIntArray*)&g0::tensor_dimension69, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
