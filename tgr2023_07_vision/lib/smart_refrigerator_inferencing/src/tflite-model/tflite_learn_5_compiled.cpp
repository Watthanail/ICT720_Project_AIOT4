/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.04.2024 13:45:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410784;
#else
constexpr int kTensorArenaSize = 1409760;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 20319, -31126, -30919, -23622, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00028186637791804969, 0.00021837624080944806, 0.00021994729468133301, 0.00028770419885404408, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 13,-35,-81,-38,127,-40,-5,-44,96,-43,65,84,-72,-36,25,-1,6,-90,-90,-13,-9,52,-34,84,17,34,-6,-9,91,-51,38,9, 
  /* [1][0][][] */ 57,79,-97,-12,-52,45,127,43,-57,-72,-104,40,99,-55,105,-122,125,-114,19,-64,14,-84,-89,-12,-5,-114,64,-61,-79,-117,-17,-24, 
  /* [2][0][][] */ -30,123,18,95,-59,-13,101,39,-87,-126,94,-63,-98,84,-127,76,55,96,95,-100,-20,14,-58,-26,37,-52,97,-117,-60,23,77,72, 
  /* [3][0][][] */ 73,-66,68,5,-30,96,37,-8,0,-107,31,87,68,-3,-127,-15,91,-78,87,11,-100,4,-12,-17,72,1,-79,84,-89,93,30,50, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0038580445107072592, 0.0029890236910432577, 0.0030105274636298418, 0.0039379498921334743, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 97, -144, -128, -159, 816, -78, -120, -181, 336, 667, 422, -164, 16, -628, 1289, -376, -138, 53, -335, 310, 112, 386, 429, -167, -307, 909, -276, -71, 1643, 247, -298, -189, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1517327190376818e-05, 4.5197513827588409e-05, 4.3290190660627559e-05, 4.406404696055688e-05, 4.3892163375858217e-05, 4.1026298276847228e-05, 3.9767975977156311e-05, 4.4352451368467882e-05, 4.2889620090136304e-05, 4.8029167373897508e-05, 4.3726558942580596e-05, 4.1752129618544132e-05, 5.3981795645086095e-05, 4.2645653593353927e-05, 4.7520134103251621e-05, 4.3225762055953965e-05, 4.299451393308118e-05, 5.3917821787763387e-05, 4.2842435505008325e-05, 4.5471977500710636e-05, 4.7302892198786139e-05, 4.5786255213897675e-05, 5.7004162954399362e-05, 4.6566714445361868e-05, 4.3178341002203524e-05, 5.0275062676519156e-05, 4.979716322850436e-05, 5.1829454605467618e-05, 5.4180502047529444e-05, 4.5087577746016905e-05, 4.1867035179166123e-05, 4.2252951971022412e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -14,-65,107,15,109,-24,-88,-88,67,-88,-108,-7,48,23,-40,58,-58,-42,-75,-68,-73,-104,8,117,-114,24,75,-56,109,-17,-17,-92,94,-70,-75,49,-120,-84,-77,35,78,-96,-110,112,41,-109,119,-18,20,-85,-28,98,-88,-64,-105,108,15,81,123,-105,-69,77,-40,41,-6,12,77,106,38,93,97,-125,115,-105,51,88,-127,18,-60,16,51,36,104,-1,-66,-40,-80,102,30,123,-21,-126,13,57,38,14, 
  /* [1][0][][] */ -98,38,-71,-7,-60,79,33,11,77,-121,-103,90,46,-30,20,66,107,-31,60,127,-45,-9,30,18,25,14,-40,111,26,22,98,-53,56,108,-39,36,44,63,-11,-59,-58,10,-9,-95,-28,45,-34,-49,-20,-54,82,62,35,92,-64,-65,26,95,71,81,-67,110,-55,-58,-53,40,68,37,125,41,11,15,-110,96,-49,44,106,-52,-40,71,-66,74,-61,-103,32,107,-62,-49,84,85,104,19,91,76,28,13, 
  /* [2][0][][] */ 74,18,-74,86,-29,-47,92,100,-117,83,-35,108,77,-7,62,-110,-45,-59,35,32,-97,-12,122,30,-41,104,98,1,-60,78,86,72,-70,-39,-72,-125,-83,84,105,-17,-127,-104,-10,7,-109,113,-24,-81,88,42,120,-74,-43,45,8,5,-90,124,-60,26,-11,52,-9,68,92,28,52,98,-99,44,25,-89,55,-92,31,21,-51,-12,6,-10,25,-78,3,-39,-16,-83,0,-51,96,121,-38,-18,-36,-77,-23,-88, 
  /* [3][0][][] */ 46,4,33,-30,-98,59,-111,43,36,6,61,3,66,91,65,16,111,97,-34,11,112,-88,-61,-116,-37,-103,-78,112,64,-77,95,11,-55,-37,-25,-7,-84,-25,44,51,-27,-93,-86,6,57,39,-57,-81,65,-48,35,15,120,25,92,-123,-114,-109,-106,-45,-104,40,-18,88,46,-27,-62,-33,-17,-62,10,92,28,-127,47,-46,56,96,94,-74,-78,-114,37,103,35,48,-33,-104,-73,54,2,-109,103,-88,-78,38, 
  /* [4][0][][] */ 46,124,28,60,-23,13,46,14,61,117,8,75,34,-30,7,-49,-2,12,-76,-5,109,-70,107,41,-1,-6,86,-29,-39,13,-55,-55,71,124,32,-79,-9,-1,-124,55,-41,-46,-53,-71,48,105,34,67,30,-57,-58,-79,-73,47,-72,18,57,-106,46,27,-21,-29,-39,-56,-57,61,20,-34,-6,-78,-73,-83,-42,17,127,77,58,7,9,-39,11,-34,-110,-21,16,86,92,-3,-118,-64,42,25,17,95,-121,3, 
  /* [5][0][][] */ 124,-105,72,89,51,-125,26,70,110,-115,-3,-82,16,112,33,33,62,48,-101,99,37,52,16,-27,-119,-58,-27,-110,48,2,19,-111,-37,-6,-63,10,-127,-36,71,24,-91,-58,36,105,-43,27,43,-53,-115,82,38,39,30,6,32,-14,110,58,-59,-41,47,-82,52,-91,-30,104,-30,32,79,-5,110,-68,-46,74,-26,-81,-9,-53,10,68,108,50,40,115,-89,85,-3,38,75,-105,111,77,-11,22,85,-88, 
  /* [6][0][][] */ 14,-47,118,87,-97,-66,-1,82,-11,-96,9,-101,82,67,125,-124,48,3,18,122,-77,-127,118,65,-71,-84,-10,-60,-17,-117,57,-74,-92,-124,-51,-106,-11,50,-98,92,99,65,33,-13,-116,124,-89,-42,-87,36,-37,-59,79,-51,109,-27,14,-2,-60,127,-92,0,88,-68,-48,78,109,-49,110,5,-112,7,64,-65,-92,-45,-73,-110,-59,-34,44,-27,51,-20,-72,-91,-37,-90,101,108,111,12,-39,-72,91,-13, 
  /* [7][0][][] */ 95,66,-44,-44,-82,115,-23,4,112,-12,-97,2,38,-86,41,72,51,15,14,123,53,30,-10,79,-76,98,34,54,-65,113,-18,41,21,26,48,100,-109,87,-1,-26,93,-74,87,65,50,3,99,-107,50,-35,-127,-59,-10,89,21,21,114,-87,13,-54,7,-10,89,-101,-62,-51,61,21,-80,28,59,88,81,31,56,53,-45,47,-99,36,93,-38,-23,-68,85,30,-105,99,85,8,92,58,-41,-48,0,-50, 
  /* [8][0][][] */ 32,44,-31,-78,73,21,-69,-21,19,63,50,111,23,-40,-76,-69,-67,99,-78,-17,34,-17,89,118,-105,88,53,82,-79,-6,-88,110,97,-31,60,7,126,1,-21,71,82,107,-109,-114,-1,-32,-22,112,25,-127,-56,-15,-78,-16,-36,-96,54,102,-102,104,112,47,24,99,-42,-46,-14,103,-124,52,37,-4,75,64,14,32,-70,116,89,95,34,87,-110,-89,30,46,75,-51,31,-40,-87,94,-93,-103,-61,52, 
  /* [9][0][][] */ 15,51,112,35,100,-52,-38,-112,35,109,1,80,-4,-64,-78,-14,33,10,-110,-49,18,97,-77,-80,123,-17,-1,31,-8,-5,-72,100,45,2,20,31,-13,30,-42,-45,59,-49,66,-44,87,25,-74,56,36,-1,-42,-25,60,-66,-59,107,101,-52,-26,10,-74,127,115,-73,-69,16,101,31,-12,109,114,-76,4,79,-50,-74,-78,-80,-29,111,39,29,98,19,-23,-55,37,-12,90,36,-39,114,114,25,48,-21, 
  /* [10][0][][] */ -81,70,105,-70,-43,113,117,27,27,13,31,-58,79,76,-31,27,-19,83,-68,-78,-19,39,69,-59,14,67,-106,-88,-28,89,-79,-89,81,94,127,63,-24,2,-45,47,-37,110,-105,-24,-116,-48,-12,-51,-7,34,43,24,91,19,-57,-67,-103,-2,37,-27,-16,90,127,63,107,-66,-85,-12,20,-19,-82,-78,97,42,-85,122,9,75,77,5,91,8,58,112,-87,79,110,-16,47,26,8,-93,-48,-40,-33,-64, 
  /* [11][0][][] */ 109,4,-20,104,127,50,51,25,112,89,-83,107,-6,-86,24,-69,-63,-108,48,39,26,73,21,-117,-108,-105,-27,62,74,-9,21,-18,-99,-75,51,33,-71,76,-35,-67,-30,105,-80,1,-48,-64,-95,-97,73,101,112,53,-110,-92,14,17,-69,-58,-30,-92,-84,82,86,2,32,87,-63,22,84,57,-91,-77,38,103,-109,48,-70,31,-50,89,-114,-28,-81,-50,43,-89,12,-26,-103,-12,-1,-112,-89,-37,-84,-42, 
  /* [12][0][][] */ 42,51,-48,8,89,7,-26,42,-51,55,-9,4,-30,24,42,-67,-82,-35,-68,-57,29,-7,12,83,-53,-37,73,-93,67,-17,-25,95,-63,-58,-23,10,-11,-53,9,37,98,34,-90,-28,-11,-61,-19,99,-33,-127,-51,88,13,-6,-62,88,-4,-45,40,51,66,81,0,22,96,29,-35,97,51,79,33,69,67,99,-6,-8,-54,26,-91,-78,-45,89,51,15,-29,27,44,93,-68,-86,68,32,91,-18,28,63, 
  /* [13][0][][] */ 90,-75,91,89,88,102,71,52,65,-113,-2,-41,76,55,55,-56,-127,-80,-67,25,53,-39,103,-62,-76,35,1,19,-81,-98,65,25,35,93,-26,25,-98,-45,15,64,-78,63,-61,-8,-51,11,-20,-40,27,105,-58,-118,-101,18,85,-97,-55,12,-21,-83,-47,109,-83,13,-62,-76,-104,86,-28,-18,86,-15,-101,33,-89,-53,-108,50,72,-74,43,-107,76,7,-95,-114,81,107,-22,-64,-61,49,107,-54,47,-7, 
  /* [14][0][][] */ -37,-56,110,72,107,-12,14,-98,-53,-24,92,98,19,-46,-51,-63,-23,-17,2,44,-9,58,25,85,-80,-68,10,51,-93,-109,-57,53,115,-5,-14,31,116,127,38,-84,19,-63,54,100,92,-91,71,-53,127,27,52,52,84,-8,7,46,-4,-9,66,101,14,-59,-15,75,-63,9,98,-91,-75,-62,-59,120,20,98,74,-38,57,-68,78,47,61,-2,-93,-37,-80,-52,-94,109,119,20,93,-31,95,104,-27,87, 
  /* [15][0][][] */ 13,-33,-35,64,85,-88,54,-103,50,-5,-76,7,104,-3,-95,-118,85,3,-86,17,45,12,66,103,71,61,33,87,24,55,58,-109,-3,0,-71,-11,-71,107,102,-72,11,105,-53,-27,18,-83,-47,-85,-17,-65,-5,30,-98,-107,-53,-14,78,53,-42,103,-50,-68,10,109,-33,91,-78,-1,-67,1,66,-78,21,-22,58,-113,2,49,98,68,-87,55,-108,-67,-127,-38,-98,31,82,66,-115,-48,50,103,-105,110, 
  /* [16][0][][] */ -61,-6,96,-56,43,112,-54,50,51,44,-107,62,-21,-42,-54,-61,107,72,74,70,115,78,-40,53,-42,58,-72,58,-94,6,43,14,-104,74,61,54,-40,56,-32,-66,24,-46,72,92,61,107,105,-10,-59,-110,7,118,-37,112,69,49,27,93,73,15,127,102,45,57,60,16,-37,95,59,100,-31,-2,32,93,64,83,-11,96,-109,-27,16,-79,65,16,11,100,105,15,84,15,-14,102,81,-36,-76,32, 
  /* [17][0][][] */ 4,-75,17,63,-46,-73,-53,-84,31,-69,73,25,73,40,-90,52,33,54,103,104,-79,-11,14,-44,40,54,-68,27,88,-10,-28,78,-33,9,17,20,-33,96,-88,-27,-67,-25,10,-4,12,22,77,-86,62,102,-18,40,1,92,96,-82,-77,79,-59,-80,17,-59,70,79,-48,-46,33,-89,-69,19,81,25,12,-86,-53,51,127,-37,33,-42,14,-17,-73,-64,-82,56,66,-9,18,70,-75,-97,-9,91,19,23, 
  /* [18][0][][] */ -93,88,102,-75,-15,-106,-106,1,-15,66,-111,-53,-46,29,53,-62,14,-34,54,-35,94,-52,14,-83,14,-103,-21,105,23,29,-6,29,34,-34,-105,-117,-40,21,-37,62,-51,-10,-62,-15,-127,10,10,-12,8,-37,70,32,-110,-20,-2,77,-43,23,-32,-121,82,95,13,35,-74,-125,-37,87,55,-92,-81,101,-101,-51,-98,-109,57,48,-6,-81,-64,-8,-31,-68,94,-38,62,64,-114,-79,-67,98,86,-69,45,-31, 
  /* [19][0][][] */ 59,19,84,44,91,-77,103,99,96,-32,37,3,-64,43,-45,57,67,-98,90,48,-9,89,-40,28,78,-54,54,-64,-84,-127,-43,36,100,-83,67,-21,11,-65,-42,-79,48,-106,-94,21,-88,30,83,-81,-3,32,3,43,-36,1,15,40,23,101,22,-29,72,-46,90,64,-67,-2,-11,16,-29,29,94,-52,-33,-124,-62,-64,-40,-90,26,107,57,-90,6,84,-81,6,18,-9,91,33,-9,61,-51,117,78,-55, 
  /* [20][0][][] */ -23,82,74,84,-77,83,21,45,19,9,-74,15,5,79,44,-60,-42,-15,-52,-6,23,-36,-65,-63,85,-75,-83,56,24,31,-36,115,92,50,-22,68,45,-26,-29,-96,-73,-23,-66,-92,-3,-56,-67,98,62,-90,-101,30,49,112,53,3,93,62,97,81,98,-40,-70,-21,-26,-55,-42,13,-72,-52,-61,74,-58,-44,30,26,110,74,103,127,83,6,72,-24,61,106,-13,71,18,90,36,90,20,21,-11,25, 
  /* [21][0][][] */ 82,75,79,-101,97,-31,74,13,-15,-50,-62,62,-4,34,-41,-77,-84,-33,36,-39,94,-40,76,-67,57,-70,-28,79,19,42,-7,-26,-2,15,-69,-103,124,89,-114,-32,-9,5,30,-1,-96,-78,-81,86,-32,-46,-2,100,38,58,-94,-3,-52,46,-49,127,31,-62,54,-1,68,33,-28,-76,-102,2,55,61,29,-33,74,73,-88,-16,63,99,14,97,19,-67,30,-69,60,-80,-103,74,97,-120,-40,-56,53,-36, 
  /* [22][0][][] */ 23,-32,-44,-60,62,-40,91,36,-67,76,-48,-63,127,-80,-81,-55,38,79,-100,-47,78,-45,37,33,79,2,-76,81,-46,-71,-49,-82,49,53,23,16,17,-9,-56,-87,6,-3,10,79,45,-89,72,-14,-38,-25,23,-17,-47,-63,-40,24,5,-10,22,-13,93,-50,-61,-48,-57,19,-74,-28,75,87,13,0,-37,-1,57,-54,31,-23,58,94,83,-66,-41,-93,65,70,85,-23,-37,31,-24,54,15,22,-25,78, 
  /* [23][0][][] */ 56,-75,-1,50,86,-115,-3,-99,50,-64,74,62,14,-108,11,-41,75,-35,-106,85,78,-81,90,-39,-11,-20,69,12,54,54,61,-25,-40,44,10,52,84,-9,-109,-3,-101,-4,5,-107,-65,-88,108,18,67,-114,-88,-55,66,-37,-56,76,-84,-22,83,35,-110,-92,-59,-18,36,29,-114,-110,45,-17,97,-73,-14,-39,-42,-93,34,-25,80,127,-56,-56,10,-100,81,-1,100,-23,-92,32,89,-12,86,-50,-40,73, 
  /* [24][0][][] */ -86,-57,-108,-77,-91,-111,-75,-94,55,113,76,42,103,54,-45,-127,-88,31,18,-59,86,-88,-63,-42,45,-33,63,52,101,48,-3,-72,-2,-1,43,20,-59,-94,61,-32,-83,-108,95,-1,14,-44,33,66,-96,-56,-31,13,65,50,66,-81,-12,66,18,-7,79,-12,33,84,-104,90,-54,-98,-113,45,-68,-36,-49,32,87,95,52,-83,-111,-93,-86,-104,-71,-123,-4,57,-24,-111,18,-117,-5,-80,-25,17,-103,23, 
  /* [25][0][][] */ -76,-20,-42,2,98,-72,-81,38,47,-48,-21,36,78,3,-82,-6,-46,64,26,-109,62,87,19,-39,42,-38,-75,50,58,-68,40,98,105,-78,51,84,127,-58,-32,-20,-71,94,-87,22,92,31,58,33,-69,64,-51,-14,31,-7,-65,19,-28,56,-81,77,95,59,31,57,6,65,-1,-9,-112,-6,-2,-98,40,-98,84,42,55,102,23,51,41,50,-42,67,-55,-29,-73,-88,-25,-36,88,18,-107,23,-33,-80, 
  /* [26][0][][] */ 4,-87,-18,-18,-106,-3,-12,-20,-91,-127,88,69,-74,-59,9,-4,102,46,-40,-41,5,57,79,-2,42,46,18,59,30,28,-79,14,-26,-38,-113,-71,-58,79,-53,95,-84,98,69,20,-49,73,-45,92,-12,56,-28,89,37,-23,9,-111,83,46,61,23,-13,-75,57,4,102,-7,-54,44,-51,89,59,84,58,-69,-78,9,72,-104,-83,21,-9,52,58,-58,80,-9,-39,29,-69,107,29,18,-46,94,38,97, 
  /* [27][0][][] */ 48,6,-44,-94,-83,-30,-51,0,26,64,32,-69,-2,56,67,-50,58,-24,60,-62,-62,10,-25,-9,-107,61,-68,7,58,18,-10,-13,56,47,-69,-78,-90,-52,-89,91,-81,7,8,25,67,27,58,77,80,55,84,-61,-72,-81,8,9,71,-22,-103,-75,-31,-81,1,57,28,-43,-91,106,40,-11,-83,6,59,-49,-15,-67,35,-62,80,74,80,-38,127,-21,-64,-41,-29,27,-23,5,-33,-32,42,23,90,27, 
  /* [28][0][][] */ 72,41,118,58,-67,-20,-44,-64,-8,-45,82,100,-19,-54,44,115,104,127,-48,59,-11,52,-51,-30,-37,72,-17,2,-47,-42,18,1,-59,48,85,85,67,-66,-57,47,104,68,-46,59,-45,0,21,59,49,-38,-83,-14,-57,40,56,34,76,-9,62,68,-17,-10,-87,35,54,83,17,82,-69,38,-62,-24,68,51,16,-37,-66,-11,-35,84,-35,-67,82,-15,87,-55,68,-52,-77,-38,-4,-29,-31,75,-90,-51, 
  /* [29][0][][] */ 77,31,45,-44,-75,21,-98,25,83,-11,-72,-84,95,-85,-59,-36,-80,71,28,-74,-63,-20,66,27,-42,36,-40,-32,-84,-11,109,-14,49,-17,-50,-69,0,93,3,105,44,78,-58,102,-19,101,-43,-15,5,1,89,-69,76,-108,100,36,-89,80,-46,122,-95,89,-64,-46,-55,-65,63,100,88,-93,51,-69,127,60,62,25,115,-43,-18,13,-7,-58,11,-65,50,126,59,70,-22,106,63,69,-86,29,24,40, 
  /* [30][0][][] */ 25,-74,-70,33,-101,17,-72,-19,113,-23,-7,-47,-103,14,54,11,-11,31,95,-111,36,-109,-121,7,-118,19,-74,113,-15,-111,-98,1,-86,-76,-123,-62,8,-23,-8,22,85,-83,-18,94,101,-51,100,56,-77,76,17,-110,97,-57,-17,99,-80,-57,-86,-58,-106,-11,-81,-30,-115,-96,-103,89,-65,108,48,-40,-92,103,34,-94,-61,-79,-83,-67,24,28,-110,-26,-115,23,-116,106,-44,-127,73,56,-37,-8,5,-77, 
  /* [31][0][][] */ 86,-92,23,99,45,67,-62,-95,-40,-21,-79,-96,95,-123,-50,112,-60,-96,30,43,73,34,-32,109,40,-112,32,28,-69,-76,48,111,10,24,-97,-2,98,-27,-60,-110,65,-72,-30,37,3,-50,-36,28,69,32,87,-24,-116,-55,-78,24,-117,68,-5,117,-36,-10,99,-77,82,118,-49,-77,80,-127,-121,12,-96,-51,7,-2,-54,-49,50,83,-75,-40,69,76,58,102,-95,23,25,-47,-98,-63,16,112,4,-28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017644864274188876, 0.0019208943704143167, 0.0018398331012576818, 0.0018727219430729747, 0.0018654168816283345, 0.0017436175839975476, 0.001690138946287334, 0.001884979079477489, 0.0018228088738396764, 0.0020412395242601633, 0.0018583787605166435, 0.0017744654323905706, 0.0022942263167351484, 0.0018124402267858386, 0.0020196055993437767, 0.0018370947800576687, 0.0018272667657583952, 0.0022915073204785585, 0.0018208035035058856, 0.0019325589528307319, 0.0020103729330003262, 0.0019459157483652234, 0.0024226768873631954, 0.0019790853839367628, 0.0018350795144215226, 0.0021366900764405727, 0.0021163793280720711, 0.0022027518134564161, 0.0023026713170111179, 0.0019162220414727926, 0.0017793489387258887, 0.0017957504605874419, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1845, 4090, 10313, 2646, -2980, -3720, 25161, 2058, 2780, -1913, 10008, -200, -8707, 2191, 13682, 9314, 12018, 5818, -3859, -5552, 3890, 34769, 16414, 15190, 1122, 885, 5913, 2626, 2112, -4614, 5868, -2358, -237, 4146, 140, 1160, 11540, 4353, -1869, 6960, 6931, 5311, 5992, 11825, 3241, 5759, 1515, 11401, 3976, -5229, -6813, 548, -239, -1005, 2588, -11, 176, -846, -5117, 8545, -882, 1199, -1049, -1915, -4212, 7172, 26596, 2531, -2828, 886, 1331, 2039, 2336, -1268, 643, 8884, -339, 15501, 18662, -726, 12055, 2346, -497, 1302, 11785, 7940, 3590, 1236, 6641, 4832, -374, -8886, 810, -2593, -2024, -2168, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00033080475986935198, 0.00038669054629281163, 0.00023342495842371136, 0.0003292192704975605, 0.00034289999166503549, 0.00039929803460836411, 0.00013121330994181335, 0.00034319618134759367, 0.0002106068714056164, 0.00033013621577993035, 0.00020027664140798151, 0.00025762690347619355, 0.00029816714231856167, 0.0012793121859431267, 0.00022512848954647779, 0.00012551927648019046, 0.0001550320303067565, 0.00025119091151282191, 0.00050281098810955882, 0.00030226045055314898, 0.00015630725829396397, 7.8084514825604856e-05, 0.00018621029448695481, 0.00011042827100027353, 0.00017785810632631183, 0.00055917259305715561, 0.00049729039892554283, 0.00042023923015221953, 0.00023319378669839352, 0.00042300813947804272, 0.0002476629160810262, 0.00032087726867757738, 0.00021593751444015652, 0.0002777029003482312, 0.000300190644338727, 0.00024507316993549466, 0.00016781670274212956, 0.00024607856175862253, 0.00034788760240189731, 0.00025396308046765625, 0.00018660475325305015, 0.00048767865519039333, 0.0002490514307282865, 0.00019614127813838422, 0.00058729102602228522, 0.00017456732166465372, 0.00034096566378138959, 0.00019125439575873315, 0.00034271978074684739, 0.00024965536431409419, 0.00022618751972913742, 0.00018130301032215357, 0.00059076974866911769, 0.00028076209127902985, 0.00029938871739432216, 0.00044196151429787278, 0.0005785252433270216, 0.00029474659822881222, 0.00029765514773316681, 0.00021959947480354458, 0.00080396776320412755, 0.00053003721404820681, 0.00026680438895709813, 0.00041250677895732224, 0.00044434494338929653, 0.00026738291489891708, 8.1929283624049276e-05, 0.00016077440523076802, 0.00040043031913228333, 0.00036148063372820616, 0.00028020498575642705, 0.00026851444272324443, 0.00057586166076362133, 0.00032189651392400265, 0.00027294078608974814, 0.00024255110474769026, 0.00031053295242600143, 0.00011956872185692191, 9.800101543078199e-05, 0.00019833144324366003, 0.00012301730748731643, 0.0001442309730919078, 0.00015229744894895703, 0.00018040616123471409, 0.00015401272685267031, 0.00029942786204628646, 0.00065732758957892656, 0.00020680026500485837, 0.00010588802251731977, 0.00042356844642199576, 0.00025617954088374972, 0.00022279917902778834, 0.00025781631120480597, 0.00039591884706169367, 0.00030286025139503181, 0.00019019217870663851, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -12,113,3,-127,-24,-31,-11,-56,-29,9,-14,80,40,-69,-13,66, 
  /* [1][0][][] */ -35,32,-64,2,-32,-27,28,-81,60,40,-61,29,14,7,12,-127, 
  /* [2][0][][] */ 15,33,-16,39,71,14,-49,-57,127,-41,0,-9,-19,117,-95,44, 
  /* [3][0][][] */ 32,-68,-14,-127,6,-30,-10,2,111,17,96,43,-40,62,27,108, 
  /* [4][0][][] */ -81,93,29,38,15,-6,6,71,0,33,20,-16,-127,-20,15,50, 
  /* [5][0][][] */ 1,96,110,24,27,69,-50,80,-74,78,-39,-56,70,-37,-127,-13, 
  /* [6][0][][] */ 26,-52,127,-119,38,13,-64,113,-94,-124,48,-54,12,119,-31,66, 
  /* [7][0][][] */ 37,127,-12,-52,89,5,26,-30,100,69,-35,15,47,-28,54,64, 
  /* [8][0][][] */ 17,-78,23,-73,36,-54,27,-62,27,49,75,-4,27,127,74,76, 
  /* [9][0][][] */ 17,-44,-4,127,44,1,50,-52,-70,124,47,-18,-13,-56,-9,-1, 
  /* [10][0][][] */ -21,-5,-61,-127,-18,24,-29,19,39,-24,29,-20,-43,-24,-5,7, 
  /* [11][0][][] */ 4,-2,21,-8,74,-28,79,-68,-75,50,-3,36,-7,127,-73,-42, 
  /* [12][0][][] */ 40,-10,-127,-1,26,-78,63,18,13,71,-54,-44,-48,122,-13,15, 
  /* [13][0][][] */ -17,13,-19,11,6,-127,4,23,2,-11,3,-5,17,-15,17,10, 
  /* [14][0][][] */ 33,-6,111,-42,74,-3,-127,-107,-23,-56,8,-3,9,-62,12,-29, 
  /* [15][0][][] */ -127,-17,-35,-51,-26,54,126,64,-24,51,99,-91,-6,126,127,-20, 
  /* [16][0][][] */ 8,69,127,86,4,24,82,58,-84,13,-79,-39,3,20,43,-93, 
  /* [17][0][][] */ -37,-98,-6,30,-74,-16,-47,21,-127,-35,11,-55,1,43,60,-33, 
  /* [18][0][][] */ 13,67,12,71,36,1,38,8,68,42,-57,-50,38,127,71,27, 
  /* [19][0][][] */ 19,-9,46,11,101,-6,-85,-58,-89,-59,-37,-127,-42,-44,27,-57, 
  /* [20][0][][] */ 73,-50,-51,-20,30,-127,0,-7,-28,61,-65,11,-9,4,21,-26, 
  /* [21][0][][] */ 97,-34,77,-29,5,-11,-12,94,-20,-90,61,41,-24,127,19,104, 
  /* [22][0][][] */ -19,73,-16,127,-33,-3,106,86,-10,18,-22,17,11,9,36,10, 
  /* [23][0][][] */ 91,9,95,-127,86,-49,-2,61,0,23,-4,12,-1,-43,-102,75, 
  /* [24][0][][] */ -127,31,-5,-21,-6,121,18,-24,-6,15,90,-16,-75,15,65,-35, 
  /* [25][0][][] */ 28,32,11,22,10,16,70,-43,-6,-127,-20,-30,-5,-26,15,13, 
  /* [26][0][][] */ -44,-24,-6,4,-60,-10,-45,-41,-108,-39,15,-11,4,127,-47,75, 
  /* [27][0][][] */ -7,32,1,76,35,-25,-16,-34,58,15,-35,-14,5,127,-6,2, 
  /* [28][0][][] */ 5,59,65,72,127,-4,24,29,-78,-13,-51,-43,13,83,50,-45, 
  /* [29][0][][] */ -6,12,-5,12,21,-4,17,45,-23,-7,-19,-127,5,-8,-9,-1, 
  /* [30][0][][] */ -19,104,-39,80,-29,-25,59,-127,-48,50,-25,-14,75,30,88,105, 
  /* [31][0][][] */ -42,-38,2,-70,-2,22,-79,-113,25,98,5,-127,-45,-30,4,34, 
  /* [32][0][][] */ -127,-80,-24,63,46,46,-20,2,10,-36,-102,48,62,8,49,64, 
  /* [33][0][][] */ -19,-34,-42,-1,-107,6,-98,3,66,6,6,-75,28,-101,127,8, 
  /* [34][0][][] */ 37,-12,70,27,47,42,-49,75,-78,-38,85,15,-2,-14,-30,127, 
  /* [35][0][][] */ -30,32,-71,22,1,-29,21,-124,86,101,-71,12,3,10,101,-127, 
  /* [36][0][][] */ -29,-2,-7,127,21,26,82,-5,12,43,-17,17,-34,62,-82,-80, 
  /* [37][0][][] */ 2,12,30,-69,5,-10,-38,-35,-82,-15,-13,-48,-2,-127,74,-62, 
  /* [38][0][][] */ 40,88,-16,-51,127,-9,35,-29,102,60,-10,17,21,-31,42,34, 
  /* [39][0][][] */ -29,82,2,-127,-8,10,-29,43,44,-76,-32,-25,24,62,38,46, 
  /* [40][0][][] */ 12,-34,25,-105,20,-35,2,-40,-116,13,7,18,-14,-127,76,-34, 
  /* [41][0][][] */ -14,-15,-41,-11,-4,-19,11,-5,-26,12,-49,-21,-127,23,29,21, 
  /* [42][0][][] */ 123,81,-14,-24,-67,-61,-18,-50,1,25,71,-69,-64,40,127,-115, 
  /* [43][0][][] */ 12,127,-48,-18,84,-35,123,-10,25,43,-44,0,53,-125,-64,-10, 
  /* [44][0][][] */ -20,-30,11,-30,49,-3,-88,-127,-20,13,20,29,-18,-43,53,-62, 
  /* [45][0][][] */ -7,93,-117,-38,43,-81,61,-67,4,13,-21,-127,60,-54,76,-2, 
  /* [46][0][][] */ 14,3,-16,-97,-1,7,23,-22,-107,-24,8,20,-6,-127,60,-9, 
  /* [47][0][][] */ 21,41,17,-17,127,-14,-34,9,-50,47,5,30,-3,6,114,-34, 
  /* [48][0][][] */ -127,-72,-28,39,47,31,0,-21,-6,-20,-103,34,55,19,58,34, 
  /* [49][0][][] */ 20,13,103,84,119,16,67,45,-122,-66,-53,-77,19,127,24,-66, 
  /* [50][0][][] */ 28,11,-86,-34,32,-127,-33,-15,-26,-56,-4,-42,48,-18,-18,44, 
  /* [51][0][][] */ 8,42,49,14,42,-7,-14,16,-127,74,10,-126,7,-121,-7,82, 
  /* [52][0][][] */ 6,72,7,76,42,-21,38,31,62,105,-27,-85,18,127,69,-10, 
  /* [53][0][][] */ -6,-37,-20,-21,-79,-15,-71,2,43,19,16,-67,23,-110,127,11, 
  /* [54][0][][] */ 69,8,-29,1,127,76,-104,-27,-93,-14,-51,-109,21,-49,12,-19, 
  /* [55][0][][] */ 65,-15,5,-13,36,-41,-75,-127,-45,-73,-75,24,0,-37,8,9, 
  /* [56][0][][] */ -13,6,23,-23,2,-34,-101,55,-9,127,1,-9,20,3,2,4, 
  /* [57][0][][] */ -3,38,-32,-19,-29,-48,127,95,-26,7,-13,-17,40,17,103,1, 
  /* [58][0][][] */ 59,-11,-127,39,105,101,-57,31,-70,-32,-8,-6,-31,28,24,-25, 
  /* [59][0][][] */ -99,75,122,24,-71,-78,123,127,24,20,32,-17,1,13,67,-18, 
  /* [60][0][][] */ 26,-23,-75,-10,24,-127,-32,0,-14,-12,-9,-5,36,-7,16,16, 
  /* [61][0][][] */ 18,0,35,127,85,20,33,17,-102,1,25,36,-12,22,37,-41, 
  /* [62][0][][] */ -37,127,13,-41,-21,-9,-49,50,-22,-38,-73,-57,-4,-79,-32,-37, 
  /* [63][0][][] */ -47,26,-36,127,-92,20,-80,-34,-65,-32,-23,-29,27,72,37,58, 
  /* [64][0][][] */ 12,8,5,38,-3,17,5,67,24,5,-21,-29,1,-127,35,6, 
  /* [65][0][][] */ -7,-30,16,-127,52,-52,71,-31,-12,56,6,-94,-18,-16,27,-35, 
  /* [66][0][][] */ 46,-18,85,-33,13,-14,2,127,3,-63,57,15,-24,114,45,77, 
  /* [67][0][][] */ 10,69,-11,-127,-1,-13,-44,36,74,-104,-40,11,47,64,58,51, 
  /* [68][0][][] */ -25,58,127,1,11,-15,-7,-8,-37,-25,-36,-48,17,-17,85,-26, 
  /* [69][0][][] */ 127,77,-3,-16,-71,-43,-25,-43,11,28,89,-58,-66,49,82,-78, 
  /* [70][0][][] */ 33,20,-48,-14,-14,15,72,127,-34,87,-19,11,19,44,-24,30, 
  /* [71][0][][] */ 2,-9,-4,5,8,-78,-11,15,-30,21,-70,-5,-127,1,53,38, 
  /* [72][0][][] */ 17,33,-127,11,22,10,49,110,-45,-34,10,-19,37,7,-8,23, 
  /* [73][0][][] */ -29,29,60,-4,56,-47,-85,-127,13,-57,32,-22,4,-45,51,-15, 
  /* [74][0][][] */ 5,15,39,127,12,-7,-80,90,-49,17,-43,67,12,-123,14,-88, 
  /* [75][0][][] */ -13,54,-36,19,25,5,39,6,127,18,-6,-34,18,127,-29,9, 
  /* [76][0][][] */ -2,-12,-9,22,-9,-10,-5,61,15,-19,-19,-127,-6,-6,16,-5, 
  /* [77][0][][] */ -13,30,-21,127,-33,12,90,105,26,30,24,63,-1,-2,-16,16, 
  /* [78][0][][] */ -8,-8,13,-93,25,-9,-41,37,21,-51,7,-23,31,127,-13,20, 
  /* [79][0][][] */ -1,-86,-127,-71,-110,-16,34,-86,121,29,6,76,51,36,54,-73, 
  /* [80][0][][] */ -22,27,127,-112,30,-67,40,-78,-88,27,-69,-85,64,112,44,-23, 
  /* [81][0][][] */ -46,34,-127,26,71,-127,-26,44,3,-32,64,-1,15,1,18,-15, 
  /* [82][0][][] */ 126,14,-1,12,25,-119,-12,23,-17,-17,-116,-16,127,4,-1,35, 
  /* [83][0][][] */ -34,91,-114,-95,-18,-24,61,-118,54,41,-45,-101,33,47,29,127, 
  /* [84][0][][] */ -47,8,63,-13,-18,-2,46,-127,-15,53,-2,-64,13,66,75,-33, 
  /* [85][0][][] */ -67,127,28,-114,-50,-34,-17,9,-48,-3,-62,5,10,-10,-68,-16, 
  /* [86][0][][] */ 0,13,-21,-3,-20,-25,127,32,-2,-26,4,17,19,16,66,-4, 
  /* [87][0][][] */ -11,-34,7,-127,14,-47,37,-16,-11,14,-10,-101,-14,-1,12,-22, 
  /* [88][0][][] */ 80,3,54,-17,44,-127,10,44,-60,14,-110,-61,39,10,74,19, 
  /* [89][0][][] */ 14,-10,-36,-38,22,-6,-22,0,-48,5,24,-95,127,3,29,-67, 
  /* [90][0][][] */ 7,-63,41,-72,72,-22,-65,77,64,-93,-32,-26,-28,127,34,-115, 
  /* [91][0][][] */ -32,-4,1,-43,25,-28,-40,-117,8,71,-9,-127,-49,-4,-2,-14, 
  /* [92][0][][] */ -20,20,44,12,5,-127,3,-3,-1,-15,0,-18,-5,-24,28,1, 
  /* [93][0][][] */ 50,-28,127,-7,-51,62,40,-23,-30,36,-70,-19,-27,1,40,7, 
  /* [94][0][][] */ 30,16,-17,-25,36,-13,-7,-13,-35,-20,-5,-52,127,-33,26,-31, 
  /* [95][0][][] */ 127,70,-7,31,-83,-35,-78,-12,-17,6,93,-39,-60,15,86,-84, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00092499540187418461, 0.0010812630644068122, 0.0006527022342197597, 0.00092056201538071036, 0.00095881603192538023, 0.0011165160685777664, 0.00036689831176772714, 0.00095964421052485704, 0.00058889837237074971, 0.00092312600463628769, 0.00056001299526542425, 0.00072037562495097518, 0.00083373417146503925, 0.003577209310606122, 0.00062950368737801909, 0.00035097665386274457, 0.00043350015766918659, 0.00070237932959571481, 0.0014059586683288217, 0.00084517983486875892, 0.00043706592987291515, 0.00021833971550222486, 0.00052068074000999331, 0.00030877924291417003, 0.00049732637125998735, 0.0015635568415746093, 0.0013905219966545701, 0.0011750718113034964, 0.00065205583814531565, 0.0011828142451122403, 0.00069251435343176126, 0.000897236168384552, 0.00060380389913916588, 0.00077651214087381959, 0.00083939230535179377, 0.00068527297116816044, 0.00046924862544983625, 0.00068808422656729817, 0.00097276241285726428, 0.00071013090200722218, 0.00052178371697664261, 0.0013636457733809948, 0.00069639697903767228, 0.00054844969417899847, 0.0016421816544607282, 0.00048812467139214277, 0.00095340725965797901, 0.0005347850383259356, 0.00095831212820485234, 0.00069808564148843288, 0.00063246494391933084, 0.00050695898244157434, 0.0016519087366759777, 0.00078506616409868002, 0.00083714991342276335, 0.0012358116218820214, 0.0016176707576960325, 0.00082416966324672103, 0.00083230249583721161, 0.00061404344160109758, 0.0022480525076389313, 0.0014820887008681893, 0.00074603775283321738, 0.0011534503428265452, 0.0012424761662259698, 0.00074765540193766356, 0.00022909045219421387, 0.00044955694465897977, 0.0011196822160854936, 0.0010107711423188448, 0.0007835084106773138, 0.00075081933755427599, 0.0016102228546515107, 0.00090008619008585811, 0.00076319632353261113, 0.00067822076380252838, 0.00086831138469278812, 0.0003343377320561558, 0.00027403017156757414, 0.0005545738385990262, 0.00034398064599372447, 0.00040329826879315078, 0.00042585370829328895, 0.00050445122178643942, 0.0004306499904487282, 0.00083725940203294158, 0.0018380176043137908, 0.00057825434487313032, 0.0002960838028229773, 0.0011843809625133872, 0.0007163285044953227, 0.00062299048295244575, 0.00072090525645762682, 0.0011070672189816833, 0.00084685703041031957, 0.0005318148760125041, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8453, 15054, -27736, -12099, -14625, 9629, 27739, -66297, -1253, 12208, 27596, 27658, -7106, 8978, -11428, 14979, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00059968262212350965, 0.00037765345769003034, 0.00019697098468896002, 0.00021349775488488376, 0.00039886203012429178, 0.00030610235990025103, 0.00038318883161991835, 0.00022961916693020612, 0.00026027302374131978, 0.00023096241056919098, 0.0005813808529637754, 0.00049986026715487242, 0.00037996796891093254, 0.00024923120508901775, 0.00039336402551271021, 0.00044260692084208131, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -11,-18,6,-44,14,-16,-44,4,22,5,-6,12,-10,-8,-37,7,2,3,-8,-4,-1,-8,17,2,-6,26,8,127,31,-44,43,-10,3,27,-3,-10,-12,21,-64,-4,-20,-5,-2,53,14,17,19,-25,18,5,-11,14,15,-31,-21,106,13,10,-41,-36,-15,16,10,-26,-40,-67,-17,37,7,3,21,-13,-6,-36,-6,-29,-24,2,-12,13,-19,-24,31,25,6,-6,-3,-106,-4,-20,-8,0,38,-35,-41,-14, 
  /* [1][0][][] */ 62,-81,-75,-79,127,-32,69,68,-11,-83,-44,-17,11,-3,-75,38,-44,18,51,41,2,105,-4,-66,-8,0,-3,-107,36,-27,-75,56,-23,74,-4,-23,-12,4,-40,21,-33,19,-39,-10,-34,100,28,-65,9,-72,6,-44,-38,21,37,36,-38,-6,-58,-32,24,-33,29,-54,-85,109,-9,-22,1,-44,-8,25,54,-112,-35,-4,45,-97,18,31,-20,-27,46,8,-27,56,3,26,31,-36,-34,23,1,13,23,122, 
  /* [2][0][][] */ -11,50,-127,5,97,62,30,80,38,-124,7,-8,3,22,42,26,23,0,-47,76,19,-30,101,4,37,67,-4,-20,25,-3,63,-63,15,8,-33,43,-107,-98,29,39,-4,-62,18,14,21,-11,-20,89,-23,25,-38,15,94,7,-10,102,51,2,43,-12,7,-12,53,-15,33,-16,-7,5,-47,-17,-7,-55,-42,-75,-4,63,122,61,27,-4,30,-34,-4,-9,-45,11,-8,35,-13,7,7,-11,3,-20,-63,-7, 
  /* [3][0][][] */ 41,9,64,29,37,-13,19,-32,-5,-66,-6,-51,-5,45,50,109,29,9,52,25,127,-31,26,19,68,-50,-9,48,35,34,-18,66,-109,17,45,16,-22,-46,32,32,-55,5,66,-30,11,48,-57,-38,-54,-31,-44,38,14,-81,13,6,-68,80,71,30,30,119,-34,-54,33,71,-7,-49,39,-11,35,-67,73,-25,65,-6,1,27,67,34,-21,-81,12,-13,-50,10,23,29,50,20,29,69,55,117,51,-48, 
  /* [4][0][][] */ 35,2,29,3,127,23,-21,-14,-23,-49,-6,-30,-49,25,-1,48,32,-68,-34,82,-34,20,39,-29,-21,20,19,-47,20,-4,59,-35,73,27,-31,-8,46,14,-23,13,-33,-14,-18,5,-10,-34,-22,-32,42,14,-37,20,-10,-41,9,-3,17,-6,-25,22,-9,36,77,20,40,45,-10,-6,-35,-12,45,59,-2,-59,-42,-18,58,27,57,-27,-22,-15,11,-18,-43,5,28,61,-54,20,0,-30,-8,17,15,-16, 
  /* [5][0][][] */ -4,-21,-24,26,18,13,42,-40,-44,-35,-41,-10,-11,34,5,34,-20,-2,29,-1,44,9,-65,73,31,-36,9,-86,-8,29,13,36,-14,1,21,-47,14,16,18,4,-1,10,18,-55,0,-9,1,9,-14,-28,14,-37,-11,-8,6,-72,4,13,-17,14,91,34,-25,31,-14,56,-8,90,4,106,22,26,28,8,3,72,-45,1,38,-2,-7,-33,-7,21,-23,13,-2,127,12,39,5,6,25,16,-58,10, 
  /* [6][0][][] */ 26,-77,27,-42,-33,36,47,22,-13,12,-25,-82,-39,1,-27,34,16,-8,-1,-1,-36,80,1,21,-8,-33,-9,-31,-6,-10,23,6,58,38,49,5,-35,-4,24,-87,-14,86,-10,-63,16,-36,-3,-21,-39,30,-25,47,-25,-60,-9,-21,12,-53,-15,12,1,84,35,-82,28,-30,-8,-7,3,14,127,8,-29,5,-13,26,-86,-23,15,2,22,26,26,6,-11,27,53,11,14,20,29,-28,-14,-15,-37,-20, 
  /* [7][0][][] */ 0,127,28,47,105,37,57,-17,-12,-12,18,-43,-38,39,40,52,32,-16,25,30,41,-19,31,12,-5,-8,-2,21,21,-6,9,20,46,-9,-22,26,4,-6,1,88,-48,56,20,-17,-6,-18,39,-34,-40,-31,34,-12,5,-33,-26,45,77,23,-20,8,-5,-14,10,-25,-64,82,-23,-77,0,-54,25,69,-1,-16,4,-8,65,59,42,1,-61,-60,-23,16,-4,66,17,-38,-3,45,-53,-9,-48,17,49,-17, 
  /* [8][0][][] */ -12,4,50,27,-127,-13,45,-24,20,76,46,0,-11,5,29,18,-63,5,26,6,-34,-11,-113,76,9,-40,51,0,15,17,0,65,58,-32,15,7,-27,-24,24,33,13,-14,41,-8,-46,-4,35,39,-99,-2,11,16,-62,-22,-34,30,21,-60,-67,-23,16,-33,-43,-10,-1,58,-2,-51,16,-13,-47,-19,26,52,35,-20,-30,-38,-14,12,-77,-12,-20,-15,24,23,53,34,34,-37,52,44,22,-4,41,12, 
  /* [9][0][][] */ 17,-93,-52,36,89,59,-36,-39,64,-51,71,103,-16,20,75,-76,21,-18,3,35,-49,-97,39,-10,-58,30,9,48,-11,4,8,-44,25,8,-85,25,26,14,-31,75,43,-69,-14,99,-28,18,-79,8,6,27,-34,-52,68,33,-31,-28,-5,55,16,-14,-11,-78,-30,127,-77,-23,28,-13,-4,28,-60,-84,5,-3,-18,6,92,-68,0,10,-18,-16,2,16,-5,-83,-3,-32,-6,-35,-46,28,-49,11,-6,-41, 
  /* [10][0][][] */ -50,-31,-51,-44,-15,-6,77,-39,35,2,25,59,18,-12,-13,-3,-7,26,-35,-11,0,0,20,3,1,-5,15,-127,27,-48,72,-64,10,14,-7,3,7,32,22,-2,21,-40,25,-41,3,9,30,61,0,38,-18,0,-49,-13,-7,-63,12,5,4,-46,25,15,-5,21,-30,101,-15,-37,13,-29,-6,-23,-24,-9,17,63,-10,59,-19,16,-19,9,2,30,-3,-42,-15,123,-8,-7,33,-4,37,-32,51,-45, 
  /* [11][0][][] */ -107,22,16,-19,33,-50,-6,-14,-94,-17,-13,31,42,14,-20,-12,35,-19,-91,-40,28,-46,-12,7,104,-2,77,-14,-27,26,-46,18,-7,30,-22,5,-2,19,53,15,-1,2,6,-7,76,-2,78,58,65,43,0,40,15,-71,39,-43,-116,-24,-24,-46,-14,2,-23,35,-19,-16,9,5,9,41,-25,55,-36,16,39,3,-48,125,-117,60,-27,-4,-71,-84,127,4,32,-2,4,50,1,-107,-14,27,-18,-2, 
  /* [12][0][][] */ 3,-5,-20,-6,62,21,-9,6,-35,38,22,-30,3,-16,31,-2,-39,-21,14,-16,-26,24,-49,57,-27,17,-29,71,-19,28,-51,38,-16,45,4,17,-42,-10,-10,6,-12,-14,-3,-27,-3,-27,17,-36,-22,-11,-7,-54,-11,-10,-9,-31,-5,-7,8,39,-6,-8,4,31,34,-75,-2,62,-23,-127,-1,59,9,8,16,85,-2,-36,-4,-5,-17,8,-32,-5,26,1,24,-48,-1,20,-13,15,-54,15,-10,22, 
  /* [13][0][][] */ -87,74,-9,36,-80,26,-14,-9,-37,-17,26,3,68,24,-17,22,-25,29,-7,-8,10,-6,34,-50,49,9,-17,15,17,-24,-33,-77,-89,-37,25,18,-12,12,41,-7,-23,105,1,-29,31,8,-20,27,49,-11,21,55,59,-45,64,-37,5,49,52,-4,14,47,-39,-7,-13,-35,11,22,28,16,36,-127,-6,-20,-73,3,43,32,-36,-44,50,-36,0,-35,29,-41,84,-14,-8,1,-8,50,57,-5,-1,-2, 
  /* [14][0][][] */ -21,23,-19,-52,24,-14,-29,34,-68,14,16,10,-38,-48,-95,-34,-83,-8,85,9,34,24,37,-114,-56,25,-54,-27,18,-31,-20,-13,-60,-23,32,-1,-18,-17,-16,3,-12,73,-83,6,-44,36,14,-23,122,-34,25,-18,27,49,-125,48,4,35,-127,8,12,20,57,13,11,22,12,0,-44,19,66,31,37,-12,-26,19,73,-103,-49,-87,7,-36,16,50,42,-53,-39,-6,-45,21,4,82,0,48,8,-7, 
  /* [15][0][][] */ -42,-69,-6,-42,9,24,-1,-52,-47,17,-5,-33,45,-19,53,-22,-96,-12,-31,20,-10,9,-75,-34,0,-9,-7,5,-13,-12,54,-72,-14,35,10,18,-13,33,-76,1,28,-60,8,12,-26,-61,46,39,54,13,-11,-127,-9,42,7,9,10,-13,-9,47,8,7,32,-2,-3,3,-26,-9,-30,27,-4,43,-37,10,4,-21,-41,6,15,0,3,37,-5,61,-13,-43,-28,-17,-36,58,48,53,-29,-19,5,-16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.02548651210963726, 0.016050271689891815, 0.0083712665364146233, 0.0090736541897058487, 0.016951635479927063, 0.013009349815547466, 0.016285525634884834, 0.009758814238011837, 0.011061603203415871, 0.0098159024491906166, 0.024708686396479607, 0.02124406211078167, 0.016148637980222702, 0.0105923255905509, 0.016717970371246338, 0.01881079375743866, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 17524, 62633, -2023, -915, 14257, -5344, -503, -2159, 5350, 12764, -1743, -1134, 1115, 6370, 4923, -10050, -4552, -845, -558, 11020, -11208, 26185, -5897, 7861, 31877, 103, -6438, 17418, 16225, -18762, 2002, 22133, 24587, -8841, 2619, 350, 638, -1210, 2662, -8729, -6216, -1427, -1177, -320, 31658, -2784, 12898, 685, -12636, 555, -24, -885, -2863, 15134, -4176, 10225, 19257, -615, 38759, 657, -9050, -1283, -806, -1034, -1906, 11741, -1341, -6351, -2630, 2911, -447, -7716, 618, -212, -3124, -6795, -1949, -1538, 42442, -7830, -5917, -12195, 47, -1609, 59037, -15411, -10193, -25572, -5614, 9033, -1126, 38294, -392, -1937, -1762, -1123, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00014504199498333037, 9.5060240710154176e-05, 0.00012622728536371142, 0.00029127343441359699, 0.00028424372430890799, 0.00014958994870539755, 5.3529947763308883e-05, 9.9893542937934399e-05, 0.00032994724460877478, 0.00018968535005114973, 0.00028472719714045525, 0.00012647526455111802, 0.00036672435817308724, 0.00022134972095955163, 0.00053175905486568809, 0.00015413534129038453, 0.00019396924471948296, 0.00020035931083839387, 0.00021576140716206282, 0.00010057009785668924, 7.3751725722104311e-05, 4.6492605179082602e-05, 0.00017164103337563574, 9.1720146883744746e-05, 8.1880665675271302e-05, 0.00014592880324926227, 0.00018006681057158858, 0.0001795680436771363, 7.9068377090152353e-05, 0.00055795512162148952, 0.00056664145085960627, 0.00022541274665854871, 0.00011597046977840364, 0.00017742936324793845, 0.00029341454501263797, 0.00040383194573223591, 0.00046573064173571765, 0.0002040155086433515, 0.00036382608232088387, 8.7071013695094734e-05, 0.00025164318503811955, 0.00028037553420290351, 0.00047389173414558172, 0.00012446094478946179, 0.00036901020212098956, 0.00012202549987705424, 0.00011065138096455485, 0.00035192628274671733, 0.0010253272484987974, 0.00015193810395430773, 0.00037686232826672494, 0.00017743547505233437, 0.000185036362381652, 0.00019109513959847391, 0.0001961650705197826, 0.00013909977860748768, 0.00015044820611365139, 0.0005668654921464622, 4.6566638047806919e-05, 0.00020800609490834177, 0.00032935928902588785, 0.00037785607855767012, 0.00013817964645568281, 0.00016842210607137531, 0.00014385829854290932, 0.00014946857118047774, 0.00026363457436673343, 0.00035361424670554698, 0.00021446820755954832, 0.00012657105980906636, 0.0002492329222150147, 0.00012028950732201338, 0.00032966825529001653, 0.00015743813128210604, 0.00023365643573924899, 0.0002801628434099257, 0.00017520616529509425, 7.9905767051968724e-05, 5.9973608586005867e-05, 0.00016806725761853158, 0.00024470756761729717, 0.00027701343060471117, 0.00020891729218419641, 0.00040403113234788179, 5.963093281025067e-05, 9.0333138359710574e-05, 8.6512693087570369e-05, 0.00067919027060270309, 0.00024414525250904262, 0.00014385291433427483, 0.00034947937820106745, 3.1628555007046089e-05, 0.00016665633302181959, 0.00011505299335112795, 0.00034362799488008022, 0.000345487060258165, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -49,-72,-11,127,22,72,77,-54,-13,-18,-16,3,-30,1,37,-1,-8,-43,28,18,18,-127,127,7,-81,12,50,-29,-127,-127,38,23,13,30,60,-20,-31,-9,31,-4,-13,28,-112,77,23,-62,35,40,-17,50,-23,21,5,-7,15,52,-95,-49,-57,-21,-9,2,14,41,66,-23,72,14,-8,17,21,127,24,26,27,-2,-9,22,127,-6,-14,12,-27,22,121,17,-77,-16,0,-33,-17,-44,3,-27,-16,29, 127,-127,77,108,-43,127,41,-111,70,5,-19,127,127,-97,-13,12,11,127,127,-116,127,-70,80,68,-122,-111,-69,-35,-57,44,-59,-20,-91,52,-127,-86,-43,-15,-52,64,0,127,127,84,-54,-106,-114,-53,-14,-127,44,87,68,-32,46,86,-49,43,-79,-116,-42,-41,-60,67,71,-59,26,32,-81,33,-17,89,118,127,14,20,3,62,-32,56,65,127,127,-22,-9,73,-110,127,-126,-99,3,-127,-88,-127,-39,108, -78,-16,33,-81,14,-26,65,-2,77,-34,-29,23,-17,-7,-8,-13,-5,-17,9,-8,-21,-109,31,-1,-127,101,8,-54,116,48,-16,10,0,16,14,-31,-10,34,21,14,23,14,-123,72,16,-14,34,13,-14,11,-16,6,-8,1,-1,26,-72,7,-30,50,5,42,38,3,-8,-36,-30,25,11,8,-2,42,10,-23,-3,2,-11,-1,-82,4,-21,-25,-14,6,-104,11,-34,-23,-55,27,-29,-43,30,-26,-15,4, 
  /* [0][1][][] */ -66,-75,74,-38,-49,94,28,127,-50,-21,-1,-109,24,-112,77,34,-1,-60,-17,88,56,-71,48,51,-91,-9,127,-20,-24,63,121,-102,-127,92,-87,-58,-37,33,-26,102,-48,-25,-5,49,-46,127,-23,59,16,95,20,-1,15,-54,25,32,127,124,-67,-86,127,-31,-33,127,69,-35,-17,0,126,40,127,94,-42,102,-3,11,15,14,-34,8,-42,126,-81,113,0,32,-55,30,78,-127,-34,-9,127,-70,-24,2, 67,124,57,-113,127,83,97,40,-127,127,127,-38,-66,-127,-127,127,127,-63,-126,-53,105,105,-120,127,-101,-85,-44,127,-126,109,-127,-127,-88,127,110,127,127,-127,-106,127,-64,-97,112,-127,-127,-32,-127,-127,127,-109,85,45,127,127,127,-127,104,-127,-127,127,19,-80,-127,-99,-127,127,-127,127,-127,-127,-105,-79,-127,-77,127,127,-127,127,-79,127,127,34,-44,-127,58,127,93,45,127,17,127,8,-68,36,127,-127, -57,-18,-46,40,-58,-99,43,-20,16,-33,-29,93,0,88,13,15,-1,63,-7,127,3,-105,-38,6,-78,108,-70,-18,-65,-15,15,-62,-70,43,4,-18,-30,46,-65,44,127,-2,-42,37,-38,-54,15,44,8,118,-11,8,-36,-71,3,22,92,2,2,21,-32,127,97,-47,-44,14,36,-11,-77,125,-15,-77,-2,-52,-13,-22,28,19,80,-36,-70,-40,60,18,-43,-13,70,22,14,67,-47,15,-43,97,-29,-2, 
  /* [0][2][][] */ -73,-3,-3,-23,11,-48,83,29,54,-27,-38,3,14,19,-27,6,-6,67,7,3,-49,-97,5,-10,-31,-54,34,-66,85,39,25,24,15,-3,-13,-46,-7,38,0,0,-15,-5,-69,107,3,34,15,33,-14,-28,10,-19,22,-2,11,17,-69,26,-17,14,15,2,-13,-4,-1,-43,-48,15,-33,13,26,33,13,-17,31,6,20,9,-80,-14,-7,-8,16,17,-127,6,12,-45,-62,-50,-27,-53,8,56,-19,-6, 120,30,-127,-35,-74,-26,47,34,-64,-28,-21,-101,-80,110,-14,44,3,-49,-12,-126,99,-60,-34,0,-115,127,-51,22,-39,-20,-9,-7,-65,25,27,5,-22,-29,127,56,12,-13,72,-29,-38,73,-65,-44,-32,-3,-127,-127,-51,-26,2,42,-62,-6,5,39,-7,-18,16,-46,-54,35,62,-23,117,107,-23,-64,12,-54,8,7,99,7,50,19,13,-95,-51,5,1,7,127,39,-67,41,-20,-104,40,78,-11,28, -60,6,-14,28,13,-71,-127,9,-14,-6,-17,8,10,-30,18,6,-5,-15,6,21,-44,-89,19,-1,6,-93,19,5,-51,-37,-8,15,42,-12,-8,-25,-34,5,44,-39,25,-1,-51,-26,1,67,26,18,-8,-1,10,-8,17,4,0,-2,-61,-12,1,-39,-9,10,97,-9,32,1,-2,28,2,6,-2,25,-18,16,5,18,41,7,80,-13,4,-6,-5,-13,69,1,44,-40,59,44,-18,-60,-8,1,-16,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0061642848886549473, 0.0040400600992143154, 0.0053646592423319817, 0.012379120104014874, 0.01208035834133625, 0.0063575725071132183, 0.0022750226780772209, 0.0042454754002392292, 0.014022758230566978, 0.0080616269260644913, 0.012100905179977417, 0.0053751985542476177, 0.015585784800350666, 0.0094073629006743431, 0.022599758580327034, 0.0065507516264915466, 0.0082436930388212204, 0.0085152704268693924, 0.0091698598116636276, 0.0042742290534079075, 0.0031344483140856028, 0.0019759356509894133, 0.007294743787497282, 0.0038981060497462749, 0.0034799282439053059, 0.0062019741162657738, 0.0076528391800820827, 0.0076316418126225471, 0.0033604060299694538, 0.023713091388344765, 0.024082260206341743, 0.0095800412818789482, 0.0049287448637187481, 0.0075407479889690876, 0.012470117770135403, 0.017162857577204704, 0.019793551415205002, 0.0086706588044762611, 0.015462608076632023, 0.0037005180492997169, 0.010694835335016251, 0.011915959417819977, 0.020140398293733597, 0.005289589986205101, 0.01568293385207653, 0.0051860837265849113, 0.0047026835381984711, 0.014956867322325706, 0.043576408177614212, 0.0064573693089187145, 0.016016649082303047, 0.007541007362306118, 0.0078640449792146683, 0.0081215435639023781, 0.0083370152860879898, 0.0059117404744029045, 0.0063940486870706081, 0.024091783910989761, 0.0019790821243077517, 0.0088402591645717621, 0.013997768983244896, 0.01605888269841671, 0.0058726347051560879, 0.0071579394862055779, 0.006113977637141943, 0.0063524143770337105, 0.01120446901768446, 0.015028605237603188, 0.0091148987412452698, 0.0053792698308825493, 0.010592399165034294, 0.0051123038865625858, 0.014010900631546974, 0.0066911205649375916, 0.0099303983151912689, 0.011906920000910759, 0.0074462615884840488, 0.0033959948923438787, 0.002548878313973546, 0.0071428585797548294, 0.010400071740150452, 0.011773070320487022, 0.0088789844885468483, 0.017171323299407959, 0.0025343145243823528, 0.0038391584530472755, 0.0036767893470823765, 0.02886558510363102, 0.010376173071563244, 0.0061137485317885876, 0.014852873049676418, 0.001344213611446321, 0.0070828939788043499, 0.0048897522501647472, 0.014604189433157444, 0.014683200046420097, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 3954, 8761, 11456, 27897, 20833, -4016, -1983, 7942, 22389, -5535, 16143, 2224, 17326, 11509, 24594, 1495, 2277, 8198, 14064, 7947, -556, 685, 12597, -1223, 4970, -27, 14221, 10966, 5411, 64818, 51626, 18532, 9436, -985, 10592, 3210, 2240, 4834, 21198, -1172, 11898, 13360, 51247, -3059, 32199, 12045, 7183, 16085, 78137, 13428, -481, 7170, -4145, -279, -2817, 6382, -600, 14968, 5461, 8732, 8200, 12869, 6426, 4696, 13236, 10973, 5713, -6357, 7039, -2760, 4916, 11100, 20397, 5786, -3902, -4811, 8530, 377, 3288, -1044, 20881, 12157, 5621, 14986, 3559, 124, 12032, 112407, 10203, 14263, 5493, -199, 8513, 12668, 8574, 19060, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00013082953228149563, 0.00017076818039640784, 0.00016301167488563806, 8.1231810327153653e-05, 0.00014036375796422362, 0.00023508879530709237, 0.00041884215897880495, 0.00019870768301188946, 0.00010067065159091726, 0.00024460116401314735, 0.00016948564734775573, 0.00036874687066301703, 7.2447466664016247e-05, 0.00020386773394420743, 9.5755363872740418e-05, 0.0003758611564990133, 0.00020050568855367601, 0.00015379313845187426, 0.00015914610412437469, 0.0001464895176468417, 0.00026800125488080084, 0.00055810360936447978, 0.00015566640649922192, 0.00054695521248504519, 0.000527234748005867, 0.0002048016176559031, 0.00015835859812796116, 0.00013349273649509996, 0.00030236528255045414, 5.4752425057813525e-05, 5.481936750584282e-05, 0.00013223715359345078, 0.00017655044212006032, 0.00032431349973194301, 0.0001861135388026014, 0.00017989645130001009, 0.00022393079416360706, 0.00030067883199080825, 0.00012587069068104029, 0.00052210036665201187, 0.00015719981456641108, 0.00012383519788272679, 5.2884210163028911e-05, 0.00036217496381141245, 0.00010223232675343752, 0.00012286953278817236, 0.0002367420238442719, 0.00016280690033454448, 5.2351952035678551e-05, 0.00015530378732364625, 0.00025459562311880291, 0.00023110402980819345, 0.00025977232144214213, 0.00022809390793554485, 0.00037140649510547519, 0.00017354759620502591, 0.00018328067380934954, 0.00012622078065760434, 0.00038289083749987185, 0.00017229894001502544, 0.00019320697174407542, 0.00010450492118252441, 0.00022172520402818918, 0.00021213438594713807, 0.00018882408039644361, 0.00017897936049848795, 0.00022755643294658512, 0.00020593150111380965, 0.0002395731135038659, 0.00026417136541567743, 0.00021717793424613774, 0.00013996646157465875, 0.00010268281039316207, 0.00017841982480604202, 0.00039096915861591697, 0.00027363235130906105, 0.00019404575868975371, 0.0002382386737735942, 0.00023922516265884042, 0.00033704258385114372, 9.741458052303642e-05, 0.00014094756625127047, 0.00015767238801345229, 0.00012935481208842248, 0.00033338513458147645, 0.00020371114078443497, 0.00019613058248069137, 3.4452827094355598e-05, 0.00014060651301406324, 0.00015806054580025375, 0.000232525504543446, 0.0004075988254044205, 0.00017468676378484815, 0.00012794994108844548, 0.00013475109881255776, 8.9422930614091456e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -36,83,-36,100,23,2,26,-24,21,51,-24,127,5,-119,43,-101, 
  /* [1][0][][] */ 28,72,-20,-47,59,-86,127,-119,-1,67,-25,-42,29,-32,27,61, 
  /* [2][0][][] */ -79,43,-39,-6,14,-31,88,111,-49,85,127,-51,-17,15,13,-27, 
  /* [3][0][][] */ -44,28,44,23,-49,31,85,127,7,97,-117,23,48,-54,-28,-28, 
  /* [4][0][][] */ -36,-21,5,100,-74,109,-29,43,54,-6,31,36,-16,15,-127,-58, 
  /* [5][0][][] */ -19,17,68,7,36,-27,36,49,-101,104,-25,-127,5,40,-90,-53, 
  /* [6][0][][] */ 5,-9,20,-19,35,79,-90,-70,11,9,61,-21,127,-4,2,-24, 
  /* [7][0][][] */ 54,35,127,-37,-46,-59,15,-1,-86,40,-94,-67,27,-4,63,-8, 
  /* [8][0][][] */ 43,5,49,85,-33,68,-23,16,1,-13,-3,-76,-6,-9,-127,-76, 
  /* [9][0][][] */ 29,-120,101,27,18,-39,-34,5,97,-21,92,-33,-41,-10,-127,-37, 
  /* [10][0][][] */ -8,-79,-3,-68,-127,17,4,93,55,117,17,-67,11,65,120,34, 
  /* [11][0][][] */ 47,-61,34,-59,-16,3,-127,-97,-32,29,-32,-6,1,-8,18,-99, 
  /* [12][0][][] */ 19,-1,17,-68,-28,-127,-109,-4,-72,-96,-17,-28,32,124,93,98, 
  /* [13][0][][] */ -37,-87,-77,27,-56,-30,3,-23,32,17,-23,-11,5,8,127,4, 
  /* [14][0][][] */ -15,-63,67,12,2,29,0,102,12,54,1,-1,6,26,-36,127, 
  /* [15][0][][] */ 18,-35,-1,44,8,9,102,1,-19,-127,18,-55,-1,-30,4,-44, 
  /* [16][0][][] */ 19,-91,-80,34,-16,6,39,-75,127,82,98,5,-11,103,35,88, 
  /* [17][0][][] */ -53,-119,18,90,104,53,24,-53,127,-14,2,-96,-12,95,-77,54, 
  /* [18][0][][] */ -22,49,7,47,-92,20,-6,37,-60,-27,-30,-92,14,-127,40,-36, 
  /* [19][0][][] */ 52,-82,63,-91,60,17,-127,36,55,-123,20,-15,30,65,26,107, 
  /* [20][0][][] */ 16,-38,69,-77,-33,35,-30,52,-3,-17,118,-33,-25,-19,-62,127, 
  /* [21][0][][] */ -23,-23,-56,-32,11,23,-93,23,2,76,-37,81,-127,41,14,20, 
  /* [22][0][][] */ 28,-14,56,-13,28,-58,-2,-28,-127,37,-15,-73,-40,-26,68,-54, 
  /* [23][0][][] */ 12,-1,6,-16,0,7,-24,-7,7,1,64,-13,127,1,3,-58, 
  /* [24][0][][] */ -22,-36,-3,-60,-79,6,49,17,-31,12,-16,-123,10,-127,71,47, 
  /* [25][0][][] */ -109,-2,28,-18,49,-85,-89,-127,-2,17,-97,2,-40,-53,-58,-9, 
  /* [26][0][][] */ 24,-27,55,-79,127,-53,0,-13,124,-41,68,30,-33,71,-15,62, 
  /* [27][0][][] */ 88,-46,13,-25,-52,-37,8,-29,-21,38,-127,34,0,-15,13,45, 
  /* [28][0][][] */ -127,-13,-107,-57,49,-10,52,-45,4,40,-51,47,43,-21,-75,14, 
  /* [29][0][][] */ -84,-43,-11,127,-11,1,21,-65,-16,0,-107,63,30,-77,27,-59, 
  /* [30][0][][] */ 27,-18,127,-43,51,42,-60,80,-35,-74,84,-48,-42,4,-89,68, 
  /* [31][0][][] */ 7,-83,-7,-33,3,-33,7,-45,-1,33,100,34,-34,85,66,127, 
  /* [32][0][][] */ -11,73,-39,31,-127,32,-62,-31,-59,-30,-7,39,19,50,23,59, 
  /* [33][0][][] */ 38,-21,2,127,36,-32,26,-28,-65,58,46,-4,14,7,9,111, 
  /* [34][0][][] */ 64,3,13,-8,75,-72,-127,-34,-43,98,-50,19,-35,-9,-23,-15, 
  /* [35][0][][] */ 76,0,-37,15,28,-127,-33,-15,-29,-3,-100,8,92,23,-9,20, 
  /* [36][0][][] */ 22,22,-127,21,61,8,-47,23,-38,-33,-7,-18,20,11,-29,2, 
  /* [37][0][][] */ 4,11,127,-27,-84,27,15,-72,-29,36,-46,52,13,-4,-5,-2, 
  /* [38][0][][] */ -127,1,-13,20,-2,89,-2,-18,19,-9,83,-10,-26,4,-1,-3, 
  /* [39][0][][] */ -25,-5,10,44,36,-15,-127,33,4,24,6,-23,-6,-42,-8,-8, 
  /* [40][0][][] */ -2,73,-57,115,-58,13,44,64,-114,-71,-3,127,-24,72,-60,-22, 
  /* [41][0][][] */ -9,51,-46,-13,-75,25,127,113,-59,78,-36,-28,8,90,27,-4, 
  /* [42][0][][] */ -21,-1,-18,-62,13,34,-79,69,29,-124,127,24,23,9,-79,2, 
  /* [43][0][][] */ -13,35,58,-34,35,-3,-70,-37,-24,12,-32,-26,-127,-10,36,-24, 
  /* [44][0][][] */ 13,13,-12,-17,10,-26,8,-26,127,-15,21,26,35,83,14,35, 
  /* [45][0][][] */ -20,-97,-11,-116,47,-48,18,70,7,-54,-13,-52,47,91,11,127, 
  /* [46][0][][] */ -56,-14,-11,127,-88,-3,21,-73,-120,74,-31,9,-42,34,20,-50, 
  /* [47][0][][] */ -48,-35,-103,95,-16,24,-26,1,38,61,80,127,-53,27,64,24, 
  /* [48][0][][] */ -24,-21,36,-127,30,-14,-27,12,-60,-6,35,-19,-18,74,97,43, 
  /* [49][0][][] */ -39,-10,13,127,-10,34,-20,-16,25,15,-52,21,-52,-69,-51,-124, 
  /* [50][0][][] */ -10,93,32,-127,53,13,-17,39,123,4,-43,11,-1,-54,20,-36, 
  /* [51][0][][] */ 19,-23,25,-6,40,-21,-49,-127,4,-77,-7,20,1,-22,-16,-26, 
  /* [52][0][][] */ 17,28,-39,57,48,1,-72,111,-82,127,-45,-43,107,113,-7,-52, 
  /* [53][0][][] */ -44,91,-23,-65,-66,23,34,-19,-48,-20,-37,83,19,-127,-83,-21, 
  /* [54][0][][] */ -15,-5,18,45,56,-31,2,-51,-6,42,7,-20,-15,127,-55,-30, 
  /* [55][0][][] */ -48,127,85,-12,57,-9,-15,-4,-77,3,37,-55,6,-29,73,-24, 
  /* [56][0][][] */ 47,8,-20,-111,36,-26,13,29,68,-34,15,127,9,7,78,79, 
  /* [57][0][][] */ 15,8,3,58,-37,7,50,127,-21,5,-9,-54,23,30,13,0, 
  /* [58][0][][] */ -3,127,41,-115,8,60,-24,31,91,-30,9,65,-3,-101,39,100, 
  /* [59][0][][] */ 50,50,31,-101,-53,-7,22,-2,9,27,16,-63,-34,-127,-67,-11, 
  /* [60][0][][] */ 51,-25,115,-85,-64,127,39,-35,-10,19,-23,-25,23,7,70,19, 
  /* [61][0][][] */ 1,-8,-17,-18,-9,6,104,127,9,52,-13,11,56,83,55,-27, 
  /* [62][0][][] */ 2,4,23,-28,9,-21,-48,-47,-52,-80,-23,-99,84,-127,54,42, 
  /* [63][0][][] */ 13,-25,23,-80,59,-3,-92,-127,-37,104,-24,41,42,-6,35,-80, 
  /* [64][0][][] */ -38,-9,33,35,80,-4,-26,-127,34,-108,9,-36,3,-17,0,20, 
  /* [65][0][][] */ -127,35,28,-84,12,46,45,-54,-83,26,43,-14,18,19,-15,-25, 
  /* [66][0][][] */ 70,1,127,15,-87,3,-40,86,-40,3,82,-116,1,89,-97,15, 
  /* [67][0][][] */ 19,-41,1,71,78,-51,-91,-127,36,-122,-36,-37,-115,4,-59,23, 
  /* [68][0][][] */ -48,-51,-55,74,-79,-55,6,-91,-53,-5,43,-41,-67,34,127,-49, 
  /* [69][0][][] */ -63,15,-97,47,-46,-127,-9,47,44,26,79,21,74,39,-11,-29, 
  /* [70][0][][] */ 22,1,-31,-10,-22,18,127,104,-2,42,-12,-8,28,51,26,-6, 
  /* [71][0][][] */ 11,11,-68,-80,39,-49,9,76,-23,-69,-25,-16,28,-127,77,45, 
  /* [72][0][][] */ 13,73,14,62,16,-1,-74,-127,9,42,-51,-6,60,52,28,48, 
  /* [73][0][][] */ -25,-127,-38,-61,-92,-26,63,-28,-13,15,-51,-19,31,-63,52,16, 
  /* [74][0][][] */ -16,18,44,103,-7,12,-127,94,32,-38,-49,-45,-2,5,-24,3, 
  /* [75][0][][] */ -30,27,-36,-8,-7,83,71,127,-8,48,24,-51,-119,83,21,23, 
  /* [76][0][][] */ 52,-34,-8,-56,78,-68,-117,-67,-34,8,7,-75,16,3,127,-21, 
  /* [77][0][][] */ -21,-13,-86,-35,-86,-52,-2,-45,127,7,-86,39,25,59,26,-124, 
  /* [78][0][][] */ -64,-127,-19,60,93,112,0,49,-55,-108,-125,10,73,-31,99,68, 
  /* [79][0][][] */ 29,-16,26,-35,127,-1,39,17,82,13,18,28,1,-22,3,-38, 
  /* [80][0][][] */ -19,-31,63,-93,-16,-34,-1,18,-57,-34,2,-23,-8,127,-20,42, 
  /* [81][0][][] */ 52,-35,62,19,5,32,-2,0,7,11,-28,-75,14,41,-127,55, 
  /* [82][0][][] */ -107,-25,84,-81,-14,13,-2,-62,-29,-58,-57,-72,-29,-127,-108,-11, 
  /* [83][0][][] */ 17,19,-16,-69,-63,12,-15,26,-94,-29,-22,-127,35,-90,-49,23, 
  /* [84][0][][] */ 127,31,20,38,-35,9,-50,39,-32,-47,87,-24,-35,20,97,-64, 
  /* [85][0][][] */ -27,-14,9,-41,34,3,-71,91,-82,-127,-55,-49,-32,67,99,-124, 
  /* [86][0][][] */ 9,22,19,19,-65,124,-80,48,-85,-69,51,-36,-43,-127,-24,15, 
  /* [87][0][][] */ 127,-54,-3,-3,-64,-41,25,-9,3,38,-81,-6,51,-23,26,12, 
  /* [88][0][][] */ 49,93,-28,4,27,-28,-10,4,82,0,47,61,43,-42,96,-127, 
  /* [89][0][][] */ 65,92,-117,-15,-57,-25,48,-70,39,48,14,-62,-21,13,-12,-127, 
  /* [90][0][][] */ 16,-17,8,-65,-71,14,103,-28,67,-58,24,-127,26,-61,-30,-37, 
  /* [91][0][][] */ 36,9,-59,-88,-36,-50,35,-70,-33,76,30,127,20,-21,5,118, 
  /* [92][0][][] */ 22,13,14,13,74,8,-90,-127,60,-66,21,-47,-62,-8,-8,-21, 
  /* [93][0][][] */ 76,-8,62,-127,-38,28,-59,51,73,-120,115,-10,-72,120,-59,12, 
  /* [94][0][][] */ -96,66,-106,21,79,-127,-17,5,13,-66,90,-37,19,23,-13,9, 
  /* [95][0][][] */ -77,90,16,-127,2,8,-31,20,11,-68,-75,-65,-15,40,-99,-26, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0004657204553950578, 0.00060789205599576235, 0.00058028084458783269, 0.000289164949208498, 0.00049965991638600826, 0.00083685736171901226, 0.0014909734018146992, 0.00070734968176111579, 0.00035836236202158034, 0.00087071902817115188, 0.00060332653811201453, 0.001312646665610373, 0.00025789486244320869, 0.00072571815690025687, 0.00034086516825482249, 0.0013379717711359262, 0.00071375013794749975, 0.00054746511159464717, 0.00056652037892490625, 0.00052146607777103782, 0.0009540175087749958, 0.0019867094233632088, 0.00055413349764421582, 0.001947023905813694, 0.0018768239533528686, 0.00072904257103800774, 0.00056371703976765275, 0.00047520076623186469, 0.0010763448663055897, 0.00019490494742058218, 0.00019514324958436191, 0.00047073120367713273, 0.00062847544904798269, 0.0011544750304892659, 0.00066251767566427588, 0.00064038642449304461, 0.00079713767627254128, 0.0010703414445742965, 0.00044806822552345693, 0.0018585467478260398, 0.00055959203746169806, 0.00044082233216613531, 0.00018825457664206624, 0.0012892523081973195, 0.00036392154288478196, 0.00043738484964706004, 0.00084274244727566838, 0.00057955185184255242, 0.00018635985907167196, 0.00055284268455579877, 0.00090629677288234234, 0.00082267256220802665, 0.00092472456162795424, 0.00081195728853344917, 0.0013221142580732703, 0.00061778607778251171, 0.0006524333730340004, 0.00044931442243978381, 0.0013629957102239132, 0.0006133411661721766, 0.00068776850821450353, 0.00037201138911768794, 0.00078928633593022823, 0.0007551453891210258, 0.00067216652678325772, 0.00063712178962305188, 0.0008100440027192235, 0.00073306466219946742, 0.0008528204052709043, 0.00094038405222818255, 0.00077309919288381934, 0.00049824564484879375, 0.00036552513483911753, 0.00063512998167425394, 0.0013917525066062808, 0.00097406277200207114, 0.00069075438659638166, 0.00084807013627141714, 0.00085158180445432663, 0.0011997873662039638, 0.00034677155781537294, 0.00050173810450360179, 0.00056127429706975818, 0.000460470822872594, 0.001186767709441483, 0.00072516076033934951, 0.00069817586336284876, 0.00012264345423318446, 0.0005005240673199296, 0.00056265603052452207, 0.0008277326705865562, 0.0014509499305859208, 0.00062184123089537024, 0.00045546979526989162, 0.0004796802531927824, 0.00031832329113967717, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 776, 8856, -5301, 27171, 31152, 4916, -8198, -3467, 16472, 5944, 30391, 12991, -12786, 15167, 43672, -31474, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00035564377321861684, 0.00033845120924524963, 0.00027620504260994494, 0.00022482546046376228, 0.00031388862407766283, 0.00035441064392216504, 0.00027192904963158071, 0.0004136078932788223, 0.00018036914116237313, 0.00022023711062502116, 0.00031102536013349891, 0.00062967720441520214, 0.00043160398490726948, 0.00030477679683826864, 0.00040798648842610419, 0.00037152940058149397, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -18,23,-11,17,56,87,-39,-16,41,-2,6,9,-14,10,16,86,13,-13,0,-25,89,-70,7,-25,-22,-28,-35,-106,-2,-13,55,31,124,-23,17,-7,-7,-12,-33,13,-26,26,13,-35,6,-23,-24,21,-1,20,-11,-8,-16,0,1,-17,67,39,-28,-37,-65,17,-11,-14,21,-7,49,13,25,-1,18,-27,-75,8,-12,-5,-8,-92,21,-18,24,-9,-66,-58,23,-29,12,37,-15,6,19,-39,19,41,-21,127, 
  /* [1][0][][] */ 29,-83,25,74,21,-38,-12,-33,-22,-76,-8,45,-14,-54,-44,-29,-58,-1,8,-5,-40,-98,-70,7,127,-61,-32,-3,-44,94,1,24,8,-9,-14,1,-30,-2,35,-9,19,-53,58,-36,-42,-4,43,-14,36,34,-26,-30,52,-60,28,-48,37,12,-6,-71,35,-59,15,-45,-4,-94,12,35,45,44,-28,2,-116,51,-7,44,22,76,37,-26,2,-33,-55,19,-73,44,8,48,-50,20,29,11,27,-13,5,13, 
  /* [2][0][][] */ 3,14,7,-22,6,-23,-5,24,52,-3,8,37,-4,17,52,20,-23,-14,2,-2,-31,-60,4,-38,-10,-3,-16,32,-9,17,84,-54,6,-46,-15,37,3,127,-27,3,-5,-8,-13,34,-23,-27,-48,30,24,19,-26,-15,37,10,0,-21,-16,4,-1,24,-9,19,72,83,-2,-78,12,-58,2,-5,-18,-2,-9,-5,-33,21,3,44,-1,10,9,88,18,-13,0,-1,-10,20,10,21,2,-61,-45,-6,-17,39, 
  /* [3][0][][] */ -24,-19,-43,29,41,-51,15,-10,-2,37,13,11,9,-5,48,-15,21,-43,-16,14,-30,7,-11,22,6,13,4,10,37,-55,34,-21,19,4,-10,27,-18,-14,-13,36,13,-55,31,-9,12,-5,10,30,-127,55,-11,28,-109,-21,-16,-22,13,14,17,60,-3,35,26,16,-20,-72,-30,20,46,34,1,17,-45,-20,-28,-36,-23,-61,28,-30,31,-28,14,67,67,68,23,8,30,-25,5,11,-21,5,0,-45, 
  /* [4][0][][] */ -16,-30,23,-79,-3,8,-53,6,-31,-49,-23,3,1,55,6,23,62,-13,17,-22,-23,8,30,-21,-13,-13,33,-5,4,-2,7,-40,-23,-18,5,3,5,-4,7,-10,25,2,-111,-44,44,-10,-12,-26,3,91,-47,-21,-28,-25,-1,-23,16,-23,6,30,21,11,16,-2,42,-127,26,4,-57,29,-5,-7,-10,26,-17,21,-27,56,58,-11,18,0,123,-42,23,-35,0,-10,73,13,-22,26,-18,52,-16,-31, 
  /* [5][0][][] */ -5,-4,-4,-4,-7,-39,10,91,58,-2,-2,-30,-18,24,41,15,-29,-8,-4,-14,-40,10,-1,-25,10,0,16,69,53,8,40,47,-64,24,-15,7,-29,-63,-36,-7,-24,-18,-5,3,44,5,12,24,14,13,6,14,-28,-4,-4,-5,-32,-32,9,30,-55,13,-21,-26,10,28,-25,-12,-9,9,-7,5,23,-2,3,-9,-4,21,5,104,6,-51,21,33,24,13,1,-17,-10,-27,24,-109,-40,-34,6,-127, 
  /* [6][0][][] */ -16,-6,-6,-44,6,1,-11,15,7,13,-29,22,15,-51,-4,-18,5,-54,28,-9,6,13,-35,25,104,-33,5,-10,20,1,10,-11,-21,-20,-31,0,23,-17,1,22,5,-30,-33,-17,-13,-30,29,-127,17,42,15,10,5,-2,-3,-64,51,-18,10,3,29,4,-15,6,29,65,36,2,-21,-23,17,-14,-11,31,42,-23,-22,37,20,12,-37,-34,73,-25,5,44,40,-12,23,-5,-18,4,-17,23,11,24, 
  /* [7][0][][] */ 6,11,31,-10,-2,-10,-4,-19,8,-10,-19,2,-15,-68,21,2,-6,-22,-16,-2,3,-17,-31,3,-12,-9,13,-22,-2,10,1,-8,-18,-1,-12,-6,-6,-26,-30,11,17,-16,-15,35,-10,17,-7,62,1,23,-8,-16,-34,15,-11,-65,17,-1,2,-6,-14,5,-13,-9,-11,48,15,-27,-5,-17,3,34,-20,-9,-19,-11,28,0,4,-14,-13,-30,42,-1,-17,127,-2,20,-39,-11,8,4,-27,-2,-2,7, 
  /* [8][0][][] */ -73,50,-35,10,27,-27,-11,38,24,101,-47,-1,39,29,66,-50,-2,41,-85,53,56,53,2,7,-52,-10,7,12,37,-63,-21,12,16,5,14,25,-3,19,-42,22,-4,15,18,-125,-44,-35,53,-6,-51,20,18,64,-127,83,5,-16,-7,-3,-25,-6,17,-49,-9,33,-18,58,18,-46,-15,3,28,90,-21,24,61,22,-10,-86,-24,-25,16,-22,46,1,-54,36,9,-65,13,34,-21,31,14,-24,2,-14, 
  /* [9][0][][] */ 17,-56,-42,-45,21,13,-4,15,17,0,10,-4,-29,-28,10,42,-16,12,15,-2,-44,0,-25,-44,21,32,21,-7,-46,-59,-13,7,-5,35,48,17,-10,63,-27,39,-8,33,-27,-88,22,-22,20,-127,-48,9,-9,33,-4,-14,3,20,-41,35,0,30,10,32,23,44,6,109,40,43,29,9,11,-19,-4,-30,-25,24,77,-12,22,18,-6,27,-3,-54,21,20,-16,-17,-58,48,-25,19,11,9,-2,-17, 
  /* [10][0][][] */ 27,49,-7,15,55,-127,-12,-46,17,62,37,4,-21,-10,10,-70,1,43,-2,60,-69,1,-43,-24,-92,-26,-51,52,5,-16,12,33,-37,3,21,-10,87,-23,-6,7,-18,74,30,-27,-56,-31,-48,13,2,-26,-39,-15,-10,-15,-4,8,-7,17,-22,-14,-18,-4,-13,28,27,35,57,15,32,-15,35,39,-51,-32,-31,-10,-4,19,-15,18,21,-1,-86,-33,69,-38,91,-2,-34,10,14,4,74,37,-9,-111, 
  /* [11][0][][] */ 49,33,-19,6,-4,28,50,-3,3,-7,-11,-26,11,9,31,-13,-3,-8,-101,1,19,29,22,1,-44,-12,-17,14,20,16,-15,16,11,15,13,19,21,-4,-2,-3,-11,33,56,-87,27,-36,9,6,-127,4,18,-54,21,9,-5,21,-14,0,22,7,30,-18,-14,3,-44,58,-11,-3,13,3,38,22,-24,-28,29,39,3,-29,-48,14,41,-3,77,44,19,-26,-4,-27,-4,-3,-14,29,5,4,-2,27, 
  /* [12][0][][] */ -27,0,4,1,-29,67,6,23,127,0,-8,18,0,24,-32,-48,36,26,23,48,46,22,11,-24,21,0,20,-44,-81,21,26,-51,17,-27,-32,-6,6,-17,12,-19,-26,-35,5,-2,-8,36,6,-20,15,7,-43,3,-4,-3,-6,-16,84,-7,0,-8,17,-36,10,-8,1,44,-35,25,-22,-3,-28,-19,9,29,-79,-8,32,-19,16,-63,-32,0,41,44,-27,-17,-7,-18,18,9,-14,34,-14,-8,19,18, 
  /* [13][0][][] */ 23,-1,-20,25,23,-16,8,-3,3,11,8,-1,20,-27,8,-7,7,-74,-39,20,-10,-23,34,13,-10,7,-11,0,-26,-49,-5,23,-10,6,6,51,22,-7,-3,20,2,22,21,54,18,19,-8,-127,35,0,16,-3,-11,1,11,-1,-13,23,21,14,-1,23,-1,6,3,-8,-17,-76,14,7,-6,-27,-16,26,-9,11,-33,-11,23,-2,26,-11,-25,21,32,40,1,21,10,6,22,-9,-11,12,-1,-19, 
  /* [14][0][][] */ -119,-64,49,41,14,-13,-46,21,-44,-1,-10,30,47,-11,-122,13,88,-13,6,12,-10,-35,6,-6,-127,-3,35,-25,-57,-61,3,-6,-25,-23,18,-76,28,56,-13,34,24,34,-17,-57,20,125,45,42,-89,53,-13,29,-45,-16,12,-20,37,1,29,50,26,45,11,48,20,-39,-49,59,3,55,-48,-74,-78,18,-14,11,-9,30,99,-7,37,31,23,29,15,14,55,40,52,52,37,-17,-7,31,0,-21, 
  /* [15][0][][] */ 79,5,37,-14,-28,80,21,-17,4,47,8,25,-76,-12,-19,19,17,29,45,-18,34,11,-69,43,9,5,36,5,43,46,-61,-78,20,-67,26,26,29,-48,-50,-127,0,11,20,50,-1,49,-2,-44,82,-41,-36,7,33,-99,34,-77,8,-42,-1,11,-105,-5,16,6,76,-10,-26,43,-39,52,2,5,67,37,25,-3,15,-54,41,-2,12,-8,32,85,-28,-6,19,-36,17,-9,36,16,-50,45,35,10, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0151148596778512, 0.014384176582098007, 0.011738713830709457, 0.0095550818368792534, 0.013340266421437263, 0.015062452293932438, 0.011556984856724739, 0.017578335478901863, 0.0076656881719827652, 0.0093600768595933914, 0.013218577019870281, 0.026761280372738838, 0.018343169242143631, 0.012953014113008976, 0.017339425161480904, 0.015789998695254326, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11400, -10343, 3711, 65551, -1508, -5444, -7142, 4204, -2633, 992, 1951, -1581, -1271, -801, 4885, -6726, 871, 16786, 27944, 2821, 3556, -4123, -1368, 1445, 14712, -504, -344, -3178, -6847, -8649, 3822, -8627, 691, -960, -1478, 17655, 1350, -3097, 20442, 219, -834, 1023, -8265, -7913, -7455, 70436, -1041, 18035, 26460, -12935, -283, 9337, 4957, -159, -6571, 1790, -13626, 1602, 2422, -6159, -672, -1289, -13017, 389, 2739, 14806, 29832, 21266, -10962, 525, -6490, -1735, 38886, 10344, 19, 450, 20236, 34395, -1431, -5686, -826, -5603, 757, -3177, 404, -812, 1295, -514, 1096, -1551, 908, -2259, 173, -1980, 231, 47319, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020896006026305258, 0.00010548172576818615, 0.00022812525276094675, 3.3031818020390347e-05, 0.00015985258505679667, 0.00017259885498788208, 0.00032168705365620553, 8.7248758063651621e-05, 0.00015073527174536139, 0.00046390050556510687, 0.00016632795450277627, 0.00037517928285524249, 9.765146387508139e-05, 0.00050386023940518498, 0.0001862934441305697, 0.00011539580737007782, 0.00010988603753503412, 0.00026673165848478675, 6.1206999816931784e-05, 0.00017905334243550897, 4.5871765905758366e-05, 0.00022723605798091739, 0.00014285242650657892, 0.00035741925239562988, 0.00027170154498890042, 0.00025229383027181029, 0.00015285161498468369, 0.00022724890732206404, 9.363245771965012e-05, 9.2200978542678058e-05, 0.00014850095612928271, 0.00017660031153354794, 0.00014939163520466536, 0.00011496285878820345, 0.00021961411403026432, 0.00013402089825831354, 0.0004417024611029774, 0.0001344770280411467, 4.9138223403133452e-05, 0.00017583230510354042, 0.00018703126988839358, 0.00037368803168646991, 0.00035257387207821012, 0.00015915358380880207, 0.00017453964392188936, 5.3048577683512121e-05, 0.00027025933377444744, 0.00019225389405619353, 9.5401497674174607e-05, 0.00017219930305145681, 0.00021548126824200153, 0.00013546289119403809, 0.00026144212461076677, 0.0002650501555763185, 0.00026070422609336674, 0.00048823616816662252, 0.00027496385155245662, 0.00020359868358355016, 0.00010164254490518942, 7.7550670539494604e-05, 0.00037067345692776144, 0.0001607295562280342, 0.00027862485148943961, 0.00014305158401839435, 0.00021886335161980242, 0.00022232846822589636, 7.6431453635450453e-05, 8.0987883848138154e-05, 0.0003666548291221261, 0.00023562840942759067, 0.0002524090523365885, 9.8323296697344631e-05, 0.00015053860261105001, 0.00014096156519372016, 0.00014861636736895889, 0.0002863830013666302, 0.00056469469564035535, 6.2342289311345667e-05, 0.00029219777206890285, 0.00034723957651294768, 0.00017310833209194243, 0.00038113954360596836, 0.00011637363058980554, 0.00013022654457017779, 0.00013508202391676605, 9.8696211352944374e-05, 0.0001308558857999742, 0.00020397159096319228, 0.00025887679657898843, 0.0001276427210541442, 0.0001993547921301797, 0.00013308678171597421, 0.00016129837604239583, 0.00057753431610763073, 0.005524712149053812, 9.0384382929187268e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,9,-19,109,-17,24,-66,-55,16,-6,99,-10,4,-8,-2,63,5,15,-34,2,73,0,35,-35,0,18,41,46,23,15,22,50,-8,26,13,-14,4,51,-65,-26,18,11,25,18,-83,-54,26,-5,-12,-20,-8,-8,49,6,-6,2,-2,-36,24,-33,26,1,127,28,-14,-12,9,-53,67,35,3,-9,80,-32,74,4,17,-127,30,63,1,17,127,-16,39,31,-27,-22,36,-9,-17,87,0,20,-3,13, -48,15,-8,10,51,-9,-13,-127,37,12,-127,-3,-15,-15,5,98,16,-30,-13,-17,76,-96,127,25,-61,-31,-106,-18,28,36,-51,19,118,11,-11,-1,-26,127,-67,-127,7,-18,-33,14,46,-127,127,-45,-77,54,48,5,39,-64,33,58,36,42,-103,84,127,35,5,-21,42,-40,-97,-1,38,-32,-17,45,-48,-46,111,-4,-30,-59,-33,62,-65,63,-15,8,-10,48,56,-43,-27,49,-15,74,-127,-31,22,-127, -2,1,-23,-75,6,22,35,19,-4,-2,5,62,2,-11,-10,11,-15,15,-18,15,8,26,27,-35,-1,-31,7,12,-6,7,45,-80,42,15,12,-21,11,5,-37,-21,6,5,-19,8,22,-34,21,1,6,-6,5,-7,5,6,-4,10,-6,43,4,-3,11,-17,3,-17,-27,-20,31,-52,-109,-9,44,-18,-127,-21,-9,16,9,-12,8,10,-16,23,-34,-2,-39,23,26,34,-24,-18,23,-10,18,8,-3,-47, 
  /* [0][1][][] */ -41,59,-17,39,-86,-12,-13,-44,24,94,-43,-23,-29,-24,-5,65,127,-25,-88,-14,61,-127,-24,14,-36,-46,-127,-7,41,37,-50,28,-127,-76,-53,4,64,-4,-51,48,-21,88,0,-1,35,-51,-12,-31,127,44,-4,19,46,10,-34,-17,34,10,-127,127,-40,-86,19,127,-59,-36,-84,126,-40,127,-19,52,-36,-53,38,8,-35,-69,127,48,127,37,6,-2,127,29,-98,46,-37,-37,-106,44,97,103,28,-62, 127,127,127,127,-46,-127,127,23,127,-127,19,-127,-102,127,127,127,-18,-127,-57,-127,127,25,-63,127,127,127,-57,-127,127,127,-127,127,-10,-127,-121,127,-127,-48,103,111,-127,-127,127,127,127,-119,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,42,-107,-28,-72,-72,127,127,-69,127,127,-108,-127,127,-44,127,-127,-127,-127,121,-75,127,-42,127,85,127,-37,-127,-27,-108,-127,-127,-24,-127,-20,-127,-127,123, -24,68,-38,1,127,75,-26,46,5,24,-11,-6,-23,-29,-11,-9,-108,-23,-127,36,34,80,-9,-122,-35,-39,120,68,12,39,72,7,122,-48,127,-2,55,6,-102,14,34,26,-24,2,-22,-53,-11,-42,82,15,-12,37,-4,-4,-72,-13,28,20,123,-89,0,127,-1,-37,-111,-30,-72,99,13,-19,110,27,-20,-56,11,47,-30,-8,-41,-2,-48,6,50,25,-89,34,127,-46,33,-23,127,-8,-115,36,32,18, 
  /* [0][2][][] */ -7,-36,-22,-60,-6,18,39,31,-1,10,-19,56,26,-35,-7,2,39,3,0,19,-8,32,-14,-27,1,-23,10,4,-5,-4,50,-75,-42,67,-25,-25,31,-40,-62,20,9,9,-37,16,13,-78,-11,-1,-6,6,18,-10,9,2,-20,6,4,44,-50,31,-8,-11,2,14,-9,-11,22,-51,-58,10,-24,-11,-118,-34,-1,17,13,-11,61,18,22,23,-39,16,12,23,-20,10,4,24,20,-2,19,43,-7,-34, -28,-8,-28,23,-45,78,-28,65,6,-7,56,-10,127,-8,-18,-21,-2,-39,-66,21,-20,81,-42,-116,-46,-46,100,64,16,46,55,-2,-122,64,-13,-22,-29,-30,-127,-1,45,-12,-17,33,-24,-43,-18,-48,-58,29,70,21,-10,-80,30,52,22,26,73,-57,20,-59,-10,-3,18,-26,-127,-52,-10,-28,-65,23,35,-44,-29,-7,-46,22,-54,4,48,35,23,12,6,60,-96,127,14,120,-33,-15,115,-20,45,84, -11,-30,-28,29,12,68,-48,10,3,-6,1,16,15,-51,-12,-14,-49,-7,8,17,-23,10,-18,2,-6,21,-5,47,2,0,35,29,17,42,21,-22,-6,-29,-29,8,12,-10,21,6,-72,-37,-11,4,1,-20,-1,-6,-7,8,-15,-4,4,-51,11,-31,-24,52,9,-30,-14,-5,35,-54,49,5,50,-19,28,-55,-21,22,8,11,-2,23,-32,31,94,-12,-18,53,40,-6,113,13,-1,-17,10,-20,-7,-54, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0088808024302124977, 0.0044829733669757843, 0.009695323184132576, 0.0014038522494956851, 0.0067937346175312996, 0.00733545096591115, 0.013671699911355972, 0.0037080722395330667, 0.0064062490127980709, 0.019715771079063416, 0.007068938110023737, 0.01594511978328228, 0.0041501871310174465, 0.021414060145616531, 0.0079174712300300598, 0.0049043218605220318, 0.0046701566316187382, 0.011336094699800014, 0.0026012975722551346, 0.0076097669079899788, 0.0019495500018820167, 0.0096575319766998291, 0.0060712280683219433, 0.01519031822681427, 0.011547315865755081, 0.010722488164901733, 0.0064961938187479973, 0.0096580786630511284, 0.0039793793112039566, 0.0039185415953397751, 0.0063112904317677021, 0.0075055132620036602, 0.0063491445034742355, 0.0048859212547540665, 0.0093335993587970734, 0.0056958878412842751, 0.01877235434949398, 0.0057152737863361835, 0.0020883744582533836, 0.0074728727340698242, 0.007948828861117363, 0.015881741419434547, 0.014984388835728168, 0.0067640272900462151, 0.0074179349467158318, 0.0022545645479112864, 0.011486020870506763, 0.0081707900390028954, 0.0040545635856688023, 0.007318470161408186, 0.0091579537838697433, 0.0057571730576455593, 0.011111290194094181, 0.011264631524682045, 0.011079928837716579, 0.020750036463141441, 0.011685963720083237, 0.0086529441177845001, 0.004319807980209589, 0.0032959035597741604, 0.015753621235489845, 0.006831006146967411, 0.011841556057333946, 0.0060796923935413361, 0.0093016922473907471, 0.0094489594921469688, 0.0032483367249369621, 0.003441984998062253, 0.015582829713821411, 0.010014207102358341, 0.010727384127676487, 0.0041787400841712952, 0.006397890392690897, 0.0059908661060035229, 0.0063161957077682018, 0.012171277776360512, 0.023999525234103203, 0.0026495472993701696, 0.012418405152857304, 0.014757681638002396, 0.0073571042157709599, 0.016198430210351944, 0.0049458793364465237, 0.005534627940505743, 0.005740986205637455, 0.0041945888660848141, 0.0055613750591874123, 0.0086687924340367317, 0.011002263985574245, 0.0054248152300715446, 0.0084725786000490189, 0.0056561878882348537, 0.0068551809526979923, 0.024545207619667053, 0.23480026423931122, 0.0038413363508880138, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 13486, 1139, 10097, -639, 5770, 4509, 20588, 8786, -1294, 18659, 6843, 2746, 6372, 27124, -187, -2100, 9652, 12768, 2271, -232, -1121, 12450, 3679, 2931, 9742, 5101, 4894, 7422, 85, -114, 7314, 13089, 17020, 2998, 8314, -425, 15097, 10609, 1356, 5470, 942, 12636, 18049, 4737, 5382, 12618, 15314, 5260, 6388, 2817, 323, -655, 28772, 7964, 8343, 12524, -382, 6879, 4036, 5932, 13141, 10477, 3391, 8512, 6810, 6168, 6409, -1135, 21268, 8554, 9874, -1890, -1632, 3277, 1854, 4473, 26122, 16547, 12213, -2743, 5890, -5216, -2261, 672, 6846, 7825, 7792, 4518, 14489, 4238, 11037, 4013, 11231, 25333, -10109, 15853, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00019771323422901332, 0.00023139161930885166, 0.00012751169560942799, 0.000909765949472785, 0.00028387265047058463, 0.00019435741705819964, 0.00015612468996550888, 0.00040364029700867832, 0.00040575375896878541, 9.821727144299075e-05, 0.00020657353161368519, 0.00029455049661919475, 0.00042442299309186637, 0.00017657637363299727, 0.00020271421817597002, 0.00032526935683563352, 0.00022911600535735488, 0.00017907598521560431, 0.00017427319835405797, 0.00058025831822305918, 0.00032124266726896167, 0.0002017121878452599, 0.00037422197056002915, 0.00027190957916900516, 0.00017905455024447292, 0.00040735997026786208, 0.00029842698131687939, 0.00012710370356217027, 0.00053647212916985154, 0.0003008752828463912, 0.00020096401567570865, 0.00014371371071320027, 0.00011486104631330818, 0.00035755950375460088, 0.00019839039305225015, 0.0005750139825977385, 0.00015215009625535458, 0.00023969724134076387, 0.00031426362693309784, 0.00015745748532935977, 0.00047743428149260581, 0.000150472013046965, 0.00012078479630872607, 0.00016225010040216148, 0.00020355723972897977, 0.0002529337361920625, 0.00018594392167869955, 0.00027559461886994541, 0.0002494706423021853, 0.00029851612634956837, 0.00041227671317756176, 0.0010050412965938449, 9.4351831648964435e-05, 0.00020763090287800878, 0.00027186176157556474, 0.00014959294639993459, 0.00041333245462737978, 0.00024801050312817097, 0.00019176262139808387, 0.00027882284484803677, 0.0001291394728468731, 0.00013183763076085597, 0.00030968355713412166, 0.00032191551872529089, 0.00015268490824382752, 0.00019587462884373963, 0.00030494399834424257, 0.00028502324130386114, 0.00012571734259836376, 0.00013869865506421775, 0.00020302998018451035, 0.00023736170260235667, 0.00022451601398643106, 0.00040521321352571249, 0.00021874959929846227, 0.00029432764858938754, 9.3589718744624406e-05, 0.00026580353733152151, 0.00013058976037427783, 0.00043518931488506496, 0.00019015619182027876, 0.0004007820098195225, 0.00018148368690162897, 0.00043668760918080807, 0.00022721034474670887, 0.00019917103054467589, 0.00020471404423005879, 0.00028301507700234652, 0.00011862653627758846, 0.00037890183739364147, 0.00013133868924342096, 0.00040390319190919399, 0.0001854185393312946, 0.00010873813153011724, 0.00029533164342865348, 0.00020740702166222036, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 58,-13,106,46,72,0,16,7,77,-73,-46,-110,75,127,-7,-29, 
  /* [1][0][][] */ 40,46,-27,20,49,-16,10,8,36,71,-36,127,10,-21,65,-85, 
  /* [2][0][][] */ -7,-39,-5,42,-90,40,-17,53,-29,-28,15,116,-51,-116,53,-127, 
  /* [3][0][][] */ 119,100,-6,21,-127,-8,-59,-22,-6,-15,86,-72,-46,70,-40,-22, 
  /* [4][0][][] */ 12,-10,14,27,-27,31,-2,46,-58,-33,-8,-6,12,-127,26,-8, 
  /* [5][0][][] */ 116,-26,4,1,11,-127,-39,13,-22,-6,-109,-8,33,-26,-32,25, 
  /* [6][0][][] */ -94,-79,-16,83,-40,-7,-58,26,-127,-95,-64,-64,16,39,8,91, 
  /* [7][0][][] */ -29,22,-67,48,59,-127,-34,38,14,-42,27,-10,-16,9,-40,1, 
  /* [8][0][][] */ 14,-52,-13,0,28,40,-73,-68,-2,13,-56,21,-127,-2,16,6, 
  /* [9][0][][] */ 2,-63,58,127,0,41,13,-77,122,-60,19,-2,-15,46,-85,52, 
  /* [10][0][][] */ -127,-93,20,-76,108,46,100,109,99,-41,-67,27,108,-116,-87,83, 
  /* [11][0][][] */ 38,-26,-127,11,60,8,-7,62,-37,-48,-6,-19,7,16,-60,11, 
  /* [12][0][][] */ 105,-69,-4,6,-1,-75,-61,-31,33,-2,-127,-13,-44,13,14,63, 
  /* [13][0][][] */ 72,-127,18,-11,80,12,-68,-93,94,-43,-80,-14,-21,34,112,-93, 
  /* [14][0][][] */ -27,13,-112,-47,82,-127,44,-43,32,45,-16,-87,37,98,-8,36, 
  /* [15][0][][] */ -1,4,64,29,37,-59,-19,-33,18,-43,-52,-20,-127,-44,-19,38, 
  /* [16][0][][] */ -127,62,16,36,-12,39,62,47,-30,42,108,10,10,-13,-40,-70, 
  /* [17][0][][] */ -15,-2,-58,-42,-28,-5,37,58,-28,127,-6,-4,-17,79,82,-9, 
  /* [18][0][][] */ 10,76,-49,13,2,-21,27,-92,52,119,-67,127,11,-22,17,-100, 
  /* [19][0][][] */ 16,-20,36,19,3,52,-4,20,16,2,-55,-8,-127,3,-8,36, 
  /* [20][0][][] */ 66,-50,14,-96,-32,16,19,-76,-53,26,-127,-29,21,-6,49,-14, 
  /* [21][0][][] */ 44,-28,127,51,-46,67,31,-8,-8,39,-4,-14,-43,74,17,-21, 
  /* [22][0][][] */ 5,24,47,-10,-26,-10,35,127,24,-24,71,56,-5,19,54,30, 
  /* [23][0][][] */ -11,8,-82,8,27,-127,12,32,-12,-23,-8,-12,-63,15,-3,30, 
  /* [24][0][][] */ 27,-60,5,-79,45,-19,-29,-16,28,38,66,86,-40,85,127,65, 
  /* [25][0][][] */ -127,-109,-44,29,39,3,-8,-46,-45,-19,-102,36,30,37,11,49, 
  /* [26][0][][] */ 6,2,47,-15,4,14,-49,78,-81,-84,-3,-3,2,-127,58,-22, 
  /* [27][0][][] */ -123,68,-70,31,34,-8,-4,19,56,-5,127,30,-42,20,-12,-33, 
  /* [28][0][][] */ -13,-8,25,40,-8,12,3,83,32,16,-33,-13,-127,4,-13,38, 
  /* [29][0][][] */ -16,71,46,-45,30,-32,12,-24,-127,36,-31,7,11,25,-82,10, 
  /* [30][0][][] */ -12,7,-127,-52,25,-36,16,21,-40,-24,3,-35,-40,-24,5,-2, 
  /* [31][0][][] */ 127,-9,-78,9,42,-10,-48,53,-18,-26,-88,-69,29,-19,-85,47, 
  /* [32][0][][] */ -127,58,47,36,5,74,22,17,14,9,122,30,-52,7,-22,-37, 
  /* [33][0][][] */ 12,-59,127,-8,-114,42,-6,-45,38,9,-16,57,-30,44,69,29, 
  /* [34][0][][] */ -49,-22,-27,-127,24,-24,10,-51,3,-20,-8,-102,-34,0,68,34, 
  /* [35][0][][] */ 6,-38,31,37,66,-41,10,-21,-127,34,-12,22,-16,102,-20,-29, 
  /* [36][0][][] */ -93,23,-12,-11,15,9,31,77,3,23,127,-9,-2,24,24,-10, 
  /* [37][0][][] */ -31,-7,127,-8,-74,-48,37,-36,26,13,-7,15,-16,-58,47,-3, 
  /* [38][0][][] */ -14,-36,-3,33,43,-34,-101,3,3,-15,123,-17,127,46,4,7, 
  /* [39][0][][] */ -39,-16,-43,-83,11,-127,26,78,-28,-43,14,-27,24,62,69,104, 
  /* [40][0][][] */ 81,-13,-33,-2,-28,77,-16,9,12,10,5,-3,127,15,-33,-21, 
  /* [41][0][][] */ -17,-31,-22,-127,15,-17,-13,-32,28,-39,27,-29,-10,8,-10,53, 
  /* [42][0][][] */ 53,53,4,110,-94,-10,-127,27,-105,-112,71,-77,-35,121,-79,21, 
  /* [43][0][][] */ 10,127,-22,109,30,33,32,-71,-15,65,7,7,-2,-35,56,22, 
  /* [44][0][][] */ -4,-16,-125,10,48,127,-52,95,-38,-28,58,-70,10,-57,-93,0, 
  /* [45][0][][] */ -26,2,13,-105,-19,-21,60,-24,33,58,-13,28,-15,-127,16,-64, 
  /* [46][0][][] */ -8,40,58,-20,-2,24,-71,39,36,-57,-31,11,-22,127,79,-30, 
  /* [47][0][][] */ 18,-22,21,-21,-31,7,-55,61,2,-24,13,45,16,-127,42,4, 
  /* [48][0][][] */ 11,-3,16,-127,-21,-8,-1,11,6,-31,6,-14,1,35,10,54, 
  /* [49][0][][] */ 20,-54,-1,106,86,25,10,64,-64,10,57,64,-15,33,127,11, 
  /* [50][0][][] */ -26,-12,81,-38,-41,127,-36,-22,47,-37,95,28,115,23,27,-3, 
  /* [51][0][][] */ 29,34,13,21,14,19,-60,35,57,-4,-1,127,17,42,33,-53, 
  /* [52][0][][] */ -14,69,127,-15,17,-79,-16,-73,-42,-17,5,25,-31,109,-105,-23, 
  /* [53][0][][] */ -2,-17,-81,-127,-24,8,48,-33,-27,59,46,-2,44,-35,43,13, 
  /* [54][0][][] */ -1,-4,-27,-28,19,6,-4,1,76,7,13,-18,-17,127,34,14, 
  /* [55][0][][] */ 17,-44,-47,-14,-44,-44,-6,-127,-12,-69,-62,-12,-48,-66,-51,-19, 
  /* [56][0][][] */ 36,40,20,64,28,-31,11,127,13,-25,6,-17,66,-17,-80,34, 
  /* [57][0][][] */ 68,-22,127,-16,-43,-52,-4,-37,10,13,-66,32,48,-29,37,8, 
  /* [58][0][][] */ 105,109,-2,103,-127,-23,-8,20,-24,40,94,-27,-81,-55,-21,-93, 
  /* [59][0][][] */ 126,-45,-12,5,-47,-5,20,5,-47,43,-127,-1,18,-29,-16,30, 
  /* [60][0][][] */ -127,23,-33,-3,-32,38,30,33,11,8,74,-19,-45,-12,49,-16, 
  /* [61][0][][] */ -107,35,28,18,48,35,-83,-83,90,-127,71,14,20,-38,-76,-23, 
  /* [62][0][][] */ -2,-90,-104,75,68,127,-11,112,13,-76,21,-13,-60,8,-79,0, 
  /* [63][0][][] */ -55,-16,127,-37,-37,-55,25,-21,24,19,3,19,-16,-27,62,36, 
  /* [64][0][][] */ 13,98,-12,61,54,0,86,-127,3,86,-15,-12,-3,-47,-71,9, 
  /* [65][0][][] */ 41,7,28,-2,125,21,8,-127,-76,-115,-56,-104,-9,-62,45,-10, 
  /* [66][0][][] */ -127,-4,-17,16,-49,20,15,-27,-89,-32,-91,49,75,32,46,83, 
  /* [67][0][][] */ 16,-76,15,127,-9,28,-7,79,59,46,-20,-18,-15,-39,-108,-20, 
  /* [68][0][][] */ 32,-21,-5,127,-38,-4,-11,-18,-74,8,1,-32,5,-75,-34,-43, 
  /* [69][0][][] */ 70,67,35,127,56,-19,30,-94,2,57,37,55,6,-5,24,-9, 
  /* [70][0][][] */ 2,8,-12,-58,127,-48,47,3,37,-26,70,-41,22,55,7,72, 
  /* [71][0][][] */ 7,48,18,98,63,-118,-74,96,65,-127,31,13,2,-38,-73,28, 
  /* [72][0][][] */ -127,-85,-24,39,41,15,-28,5,-63,-45,-107,35,50,18,3,89, 
  /* [73][0][][] */ -46,-39,-19,65,-25,1,-18,-29,127,55,27,19,-28,109,-30,-51, 
  /* [74][0][][] */ 79,-32,11,-60,-19,-70,13,-21,0,-31,-122,5,-127,-11,59,73, 
  /* [75][0][][] */ -7,3,-4,127,-3,-13,-10,-27,-86,15,-20,-10,3,-59,-22,-39, 
  /* [76][0][][] */ 2,-14,-4,32,18,8,-27,-127,1,-114,14,19,-29,-30,30,-22, 
  /* [77][0][][] */ 106,-43,34,43,-39,-3,-39,9,82,28,-15,127,72,37,-65,77, 
  /* [78][0][][] */ 32,-9,81,0,-7,12,-64,82,45,-6,-66,-57,26,127,70,-58, 
  /* [79][0][][] */ 20,23,41,20,52,68,-53,-50,16,-48,57,-23,127,-22,-40,-40, 
  /* [80][0][][] */ -127,-81,-77,120,29,77,-2,-12,-121,32,-114,7,89,-96,-61,81, 
  /* [81][0][][] */ 81,27,-34,58,103,54,7,-23,-5,-72,-53,-71,2,-18,-127,23, 
  /* [82][0][][] */ 108,120,-24,30,-110,-49,-95,-24,-49,24,127,-44,-29,104,-3,-24, 
  /* [83][0][][] */ 127,36,16,-30,-2,-28,-16,28,28,20,89,-47,-51,-27,-27,-97, 
  /* [84][0][][] */ -25,-70,-81,-10,86,37,-3,-127,16,-54,28,48,-37,10,6,-6, 
  /* [85][0][][] */ -42,25,-77,-61,-2,56,121,122,-34,127,1,-97,53,82,59,-60, 
  /* [86][0][][] */ 123,-29,11,0,5,-32,-14,-21,10,1,-127,-11,20,34,-15,38, 
  /* [87][0][][] */ 8,25,14,-106,-11,39,-44,51,-12,-46,35,-5,-11,-127,46,35, 
  /* [88][0][][] */ -5,-62,-112,-36,127,-2,-65,-91,25,-42,-9,17,43,36,64,23, 
  /* [89][0][][] */ 26,34,-33,-127,33,-6,-8,80,33,-24,38,5,-10,4,22,53, 
  /* [90][0][][] */ -8,41,-102,46,102,-32,126,-110,83,127,-70,21,45,23,-1,13, 
  /* [91][0][][] */ 45,-33,-58,-20,-5,-127,-22,12,-1,-19,-61,-3,31,0,31,37, 
  /* [92][0][][] */ 19,36,127,49,20,3,-7,41,-36,19,-103,34,58,85,14,8, 
  /* [93][0][][] */ 127,-66,-35,-22,-11,-92,-16,34,-34,37,-100,5,-7,27,-7,75, 
  /* [94][0][][] */ 33,-54,51,127,127,-42,-26,66,7,-5,3,84,-21,108,-20,-124, 
  /* [95][0][][] */ -111,36,24,56,4,72,37,7,23,17,127,-18,-30,31,0,-22, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00069673755206167698, 0.00081541953841224313, 0.00044934870675206184, 0.0032059974037110806, 0.0010003616334870458, 0.00068491173442453146, 0.00055018032435327768, 0.0014224204933270812, 0.0014298682799562812, 0.00034611573209986091, 0.00072796107269823551, 0.0010379902087152004, 0.0014956583036109805, 0.0006222516531124711, 0.00071436091093346477, 0.0011462428374215961, 0.00080740032717585564, 0.00063106027664616704, 0.00061413535149767995, 0.0020448188297450542, 0.0011320528574287891, 0.00071082980139181018, 0.0013187509030103683, 0.00095820403657853603, 0.00063098472310230136, 0.0014355285093188286, 0.0010516508482396603, 0.00044791094842366874, 0.0018905173055827618, 0.0010602786205708981, 0.00070819322718307376, 0.00050644431030377746, 0.00040476807043887675, 0.001260032644495368, 0.00069912383332848549, 0.0020263378974050283, 0.00053617393132299185, 0.00084468838758766651, 0.0011074588401243091, 0.00055487710051238537, 0.0016824690392240882, 0.00053026044042780995, 0.0004256432584952563, 0.00057176616974174976, 0.00071733171353116632, 0.00089133356232196093, 0.00065526273101568222, 0.00097118999110534787, 0.00087912968592718244, 0.0010519649367779493, 0.0014528550673276186, 0.0035417459439486265, 0.00033249400439672172, 0.00073168723611161113, 0.00095803546719253063, 0.00052716262871399522, 0.0014565754681825638, 0.00087398412870243192, 0.00067576771834865212, 0.00098256627097725868, 0.00045508498442359269, 0.00046459323493763804, 0.0010913187870755792, 0.0011344240047037601, 0.00053805863717570901, 0.0006902583409100771, 0.0010746166808530688, 0.0010044162627309561, 0.0004430254630278796, 0.0004887713585048914, 0.00071547366678714752, 0.00083645799895748496, 0.00079119001748040318, 0.0014279633760452271, 0.00077086931560188532, 0.0010372048709541559, 0.00032980833202600479, 0.00093668641056865454, 0.00046019573346711695, 0.0015335986390709877, 0.00067010667407885194, 0.0014123478904366493, 0.00063954497454687953, 0.0015388785395771265, 0.00080068479292094707, 0.00070187478559091687, 0.000721408287063241, 0.00099733960814774036, 0.00041803758358582854, 0.0013352426467463374, 0.00046283498522825539, 0.00142334692645818, 0.00065341131994500756, 0.00038319104351103306, 0.0010407429654151201, 0.00073089828947558999, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -37763, 9180, 2486, -6435, -10, -10319, -11575, -37076, 3143, 19136, 37686, -17044, 156, -19127, 35339, -33998, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00065702025312930346, 0.00077049748506397009, 0.00098631205037236214, 0.0010895777959376574, 0.00069257098948583007, 0.0010874415747821331, 0.00088054029038175941, 0.00061419769190251827, 0.00071086216485127807, 0.00051234045531600714, 0.00079618656309321523, 0.00049672677414491773, 0.0011222368339076638, 0.0010285972384735942, 0.00054543639998883009, 0.00043118259054608643, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,-3,-21,21,25,-4,6,98,-41,17,34,-1,21,-13,-19,17,25,-11,-4,-7,59,-16,18,127,-11,84,-12,-21,26,-24,19,-26,-22,47,18,-44,12,31,22,-12,-89,-18,18,31,32,21,-104,-56, 
  /* [1][0][][] */ -34,-22,20,7,-44,6,-10,55,-65,-32,-6,-58,-23,-28,-1,-8,-21,119,-18,8,-1,14,-26,-19,15,-49,17,29,-30,-96,-44,23,-21,-10,35,-4,1,-42,-1,15,-16,-37,127,13,6,-9,24,-8, 
  /* [2][0][][] */ -20,1,-11,-37,1,-60,-1,-26,1,8,16,20,13,7,-13,6,-1,-18,-19,-18,-10,-6,-3,-127,-18,68,-9,3,0,-13,2,3,-8,50,13,-2,22,19,25,-2,-37,8,-12,-3,-1,-4,16,10, 
  /* [3][0][][] */ -3,35,1,-32,-4,2,4,-8,-14,-7,2,40,-127,1,-2,-9,3,10,-18,-2,-32,5,5,13,-12,-16,6,24,-5,23,12,15,9,-3,19,21,-12,29,32,5,8,8,23,-24,6,-1,3,19, 
  /* [4][0][][] */ 25,-50,2,8,24,33,13,-26,-37,13,-20,-29,2,-2,0,12,18,-15,-85,5,-7,20,14,73,-1,-27,-5,57,14,-84,11,12,16,-46,30,-127,17,37,3,14,-25,28,0,-29,-17,-30,9,8, 
  /* [5][0][][] */ 35,2,-24,69,3,-15,15,33,4,-8,41,17,3,58,3,0,-37,27,37,6,11,4,0,-18,3,-48,7,-27,-2,-8,12,14,63,-127,3,40,-15,-17,15,1,-91,54,26,-6,-7,9,-115,-17, 
  /* [6][0][][] */ 25,1,3,6,-17,-6,-1,-12,1,7,-1,9,-21,11,8,2,-3,-16,127,5,3,13,19,-36,5,3,29,-15,-20,-2,-3,4,-2,-9,34,-35,4,-47,72,14,-1,-13,-7,6,-9,2,9,-15, 
  /* [7][0][][] */ -40,-14,-5,25,-12,81,-16,41,-3,35,-4,127,80,-8,-11,-1,-2,-22,-8,-13,-31,-4,-19,61,-3,-40,-41,-34,-15,-16,-3,-7,9,-6,-27,13,8,-58,82,-9,17,31,-61,-56,16,-2,7,-9, 
  /* [8][0][][] */ -36,-46,13,6,4,-1,4,26,1,-74,7,47,53,5,10,12,-8,68,-25,20,-43,22,-6,-7,4,-10,15,44,3,127,-10,15,-3,12,-18,-122,-113,74,22,31,22,-6,121,-14,14,26,25,24, 
  /* [9][0][][] */ -21,22,-1,29,9,-26,-6,0,69,-49,14,54,-71,-5,9,7,0,18,-35,-18,55,-2,-9,-22,-9,1,50,-21,7,21,16,-12,2,13,87,-115,-9,-127,-92,9,-27,36,70,14,0,3,-4,-50, 
  /* [10][0][][] */ -22,-13,-28,-127,42,88,11,-19,3,24,29,10,55,-58,-26,28,37,-36,58,-28,25,-19,38,47,-53,-123,9,-34,58,41,51,-34,-18,-84,24,-6,10,-34,-4,-34,-36,-62,-5,24,3,13,16,-34, 
  /* [11][0][][] */ 2,78,13,87,40,-69,-61,-12,28,70,18,28,-9,91,-4,-71,30,61,0,4,-51,-103,10,0,23,-49,35,-20,80,-23,18,-120,43,-2,-43,-102,96,22,-6,-127,-5,61,117,-71,9,-62,52,44, 
  /* [12][0][][] */ 122,-13,-23,13,-9,21,0,101,14,-1,-60,-23,1,10,-12,-5,-10,2,-13,-4,2,1,-2,21,-5,10,-3,6,-2,11,-7,8,2,-71,-11,10,-12,-21,-28,-3,-15,-81,-2,-127,-51,-16,82,-5, 
  /* [13][0][][] */ 18,-2,6,6,10,-13,3,-4,-5,8,-2,23,1,2,4,5,13,6,12,6,14,-15,7,1,-1,-2,14,127,12,-9,9,-5,4,2,-46,28,6,-7,1,-17,-10,-3,1,7,2,-5,-11,-17, 
  /* [14][0][][] */ 53,-31,37,-58,49,23,24,-89,-54,-53,-20,110,-56,-16,48,6,45,31,-38,61,21,14,67,-8,14,61,-43,-110,18,-47,65,67,-8,71,-127,-49,-42,40,96,5,-22,12,43,-7,-16,6,9,-40, 
  /* [15][0][][] */ -15,-56,-74,-39,54,25,72,-51,-20,35,-4,-30,97,37,-97,60,50,63,66,-89,-96,-19,53,-17,-88,52,28,56,55,35,36,-53,14,58,77,127,-31,-115,-12,-39,83,47,102,-58,-2,-37,-21,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.027923360466957092, 0.032746143639087677, 0.041918262839317322, 0.046307053416967392, 0.029434265568852425, 0.046216264367103577, 0.037422962486743927, 0.026103401556611061, 0.030211640521883965, 0.021774468943476677, 0.033837929368019104, 0.021110888570547104, 0.047695063054561615, 0.043715383857488632, 0.023181045427918434, 0.018325259909033775, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2423, 42210, -817, 53861, 3926, 132408, -1278, 48234, 3580, 33448, 28066, 5160, 2890, 35350, -3578, -760, -309, 2870, 3107, -1681, 792, -5149, 991, -24087, -4665, 43676, 134772, 105318, 1760, 4333, -3437, -79, 25553, 551, 47191, 1582, 58715, -2339, 60398, 2204, 1592, 59674, 385, 2856, 45934, -685, -595, 47713, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.5105483119841665e-05, 3.123328133369796e-05, 0.00015812745550647378, 4.4681251893052831e-05, 0.00017341601778753102, 5.8903136959997937e-05, 0.00014495436334982514, 0.00012192525900900364, 7.1218280936591327e-05, 3.7732730561401695e-05, 3.9312319131568074e-05, 8.1101636169478297e-05, 3.867680425173603e-05, 3.5140656109433621e-05, 0.00020079397654626518, 0.00020512175979092717, 0.00018005639140028507, 5.4388303396990523e-05, 0.00010138505604118109, 0.0001206585147883743, 6.9822781370021403e-05, 0.0001847149251261726, 0.000117841838800814, 0.00013835278514306992, 7.659533730475232e-05, 0.00010387317161075771, 2.9074291887809522e-05, 6.7738474172074348e-05, 0.00012787111336365342, 0.00010015103180194274, 0.00012339181557763368, 0.0001494662428740412, 4.3724707211367786e-05, 0.00011154211824759841, 2.4869641492841765e-05, 5.1815572078339756e-05, 9.6617324743419886e-05, 0.00011903123231604695, 9.4918555987533182e-05, 9.4446178991347551e-05, 8.867972792359069e-05, 9.8916782008018345e-05, 8.3961182099301368e-05, 8.5240266344044358e-05, 3.0872302886564285e-05, 0.00016485439846292138, 0.00011272114352323115, 3.0738337954971939e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-93,98,71,53,-35,107,-65,61,-90,-81,48,53,-42,-70,-88,101,78,49,78,68,-70,-83,52,-30,-42,-64,-64,-66,62,-63,-112,-15,42,71,64,-65,53,-49,-22,50,-72,59,62,-94,11,76,-33, 82,-96,127,85,-78,-68,-59,-83,95,-104,-64,75,80,-106,-92,90,-37,99,83,127,86,-110,52,71,-50,-79,-69,-79,55,80,-29,-127,-85,80,81,83,-83,83,-83,-17,76,-94,83,89,-73,-127,94,-101, 34,-48,70,37,19,-39,-50,-38,42,-33,4,36,32,-80,-53,-1,-52,37,35,71,34,-50,30,27,-28,-49,-47,-26,35,33,89,-89,-86,46,38,34,-30,40,-38,-11,40,-40,34,45,-9,-7,37,-74, 
  /* [0][1][][] */ 92,-115,-42,92,55,-82,127,-90,87,-114,-71,82,86,-110,-13,-127,127,107,74,-38,83,106,-127,74,71,-74,-93,-101,-127,86,-68,-8,-89,72,108,97,-85,79,-80,89,85,-98,88,91,-88,108,93,-91, 127,-127,-68,127,-127,-127,-94,-127,127,-127,-127,127,127,-127,-20,94,-65,127,127,-49,127,127,67,127,127,-127,-127,-127,54,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 63,-82,-36,66,38,-61,-52,-63,55,-44,-63,58,51,-57,-15,9,-64,49,57,-29,58,66,49,66,66,-64,-64,-48,40,57,127,15,-62,69,52,50,-50,62,-59,56,61,-57,53,64,-64,-66,60,-60, 
  /* [0][2][][] */ 47,-56,-48,49,27,-54,63,-43,43,-72,-6,41,58,-72,82,-81,71,47,34,-32,25,-8,-78,30,-25,-46,-50,-51,-75,32,-42,91,-75,38,51,44,-27,38,-44,-86,47,-49,43,46,-22,17,40,-74, 74,-78,-52,80,-57,-64,-77,-68,51,-78,-69,62,74,-49,127,30,-46,59,61,-44,55,-14,41,67,-48,-67,-79,-64,32,62,-23,118,-56,66,60,59,-50,64,-67,-105,68,-68,61,61,-83,52,62,-51, 44,-46,-29,45,31,-19,-21,-35,16,-28,-55,29,34,2,69,23,-34,21,28,-32,28,3,39,43,-25,-31,-52,-27,37,36,61,69,-1,35,20,24,-24,32,-31,-55,29,-33,28,31,-61,11,32,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031919828616082668, 0.001327414414845407, 0.0067204167135059834, 0.0018989531090483069, 0.0073701804503798485, 0.0025033832062035799, 0.0061605600640177727, 0.0051818233914673328, 0.003026776947081089, 0.0016036410816013813, 0.0016707736067473888, 0.0034468194935470819, 0.0016437640879303217, 0.001493477844633162, 0.008533744141459465, 0.0087176747620105743, 0.0076523963361978531, 0.0023115028161555529, 0.0043088649399578571, 0.0051279868930578232, 0.0029674679972231388, 0.0078503843396902084, 0.0050082779489457607, 0.0058799930848181248, 0.003255301620811224, 0.0044146096333861351, 0.0012356573715806007, 0.0028788850177079439, 0.0054345219396054745, 0.0042564189061522484, 0.0052441521547734737, 0.0063523151911795139, 0.0018582999473437667, 0.004740539938211441, 0.001056959736160934, 0.0022021618206053972, 0.0041062361560761929, 0.0050588273443281651, 0.004034038633108139, 0.0040139625780284405, 0.0037688883021473885, 0.0042039630934596062, 0.0035683501046150923, 0.0036227114032953978, 0.0013120728544890881, 0.0070063117891550064, 0.0047906483523547649, 0.0013063793303444982, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 693, 855, 1779, 632, 13559, 10569, 2439, 33, -614, -519, 926, 762, 2770, 1042, 29273, 2922, 1748, -1292, -215, 2753, -1391, 7233, 9826, 11566, 5588, 327, 3728, 3903, 7507, -397, 10551, 3260, 400, -85, 5559, 3005, -1386, 397, -443, 3845, 1282, -466, -852, 90, 945, 2210, 533, 953, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039610904059372842, 0.00087394070578739047, 0.00032385197118856013, 0.00030692049767822027, 0.00016466488887090236, 0.00037334577064029872, 0.00048096966929733753, 0.00024331452732440084, 0.00041173541103489697, 0.00075771898264065385, 0.0010109369177371264, 0.00032137351809069514, 0.00044501604861579835, 0.00076593161793425679, 0.0001242517028003931, 0.00044367139344103634, 0.00030247503309510648, 0.00030012652860023081, 0.00020820020290557295, 0.00032798026222735643, 0.00041153049096465111, 0.00034369065542705357, 0.00037812767550349236, 0.00014151068171486259, 0.00028500717598944902, 0.00031057794694788754, 0.0018701172666624188, 0.0004833877319470048, 0.00023048024741001427, 0.00051007024012506008, 0.00024370114260818809, 0.00033279779017902911, 0.00085290038259699941, 0.00029571339837275445, 0.00067800004035234451, 0.00060408975696191192, 0.00098194659221917391, 0.00027846862212754786, 0.00025296697276644409, 0.00047335121780633926, 0.0001649455662118271, 0.00029322074260562658, 0.00033430458279326558, 0.00030383648118004203, 0.0020830584689974785, 0.00060760474298149347, 0.00046011674567125738, 0.0012066990602761507, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,7,-7,74,-38,41,32,-31, 
  /* [1][0][][] */ 35,87,52,22,21,-21,127,98, 
  /* [2][0][][] */ -61,16,1,-7,-127,-32,7,-8, 
  /* [3][0][][] */ 83,-8,0,-106,-127,14,23,-28, 
  /* [4][0][][] */ -118,80,-4,-6,127,-25,75,32, 
  /* [5][0][][] */ -106,-34,25,-10,-127,16,0,75, 
  /* [6][0][][] */ -16,-127,9,-15,9,4,8,48, 
  /* [7][0][][] */ -66,1,13,105,127,-38,-34,-1, 
  /* [8][0][][] */ 74,-1,5,-127,-3,-15,-56,-43, 
  /* [9][0][][] */ 3,-127,-16,13,-14,103,-52,85, 
  /* [10][0][][] */ -114,0,-7,23,-127,94,81,-10, 
  /* [11][0][][] */ 120,1,40,16,-57,-48,-39,-127, 
  /* [12][0][][] */ 2,12,58,-11,8,-95,127,67, 
  /* [13][0][][] */ 68,-26,6,-31,124,127,125,-48, 
  /* [14][0][][] */ 127,50,-31,40,-119,11,-49,-19, 
  /* [15][0][][] */ -29,-127,14,-11,16,12,-5,39, 
  /* [16][0][][] */ -41,-8,12,-6,-127,-3,17,3, 
  /* [17][0][][] */ -41,111,-126,5,8,-127,111,-84, 
  /* [18][0][][] */ 127,-33,-37,10,-64,21,9,91, 
  /* [19][0][][] */ 127,-40,-17,-7,60,-19,36,1, 
  /* [20][0][][] */ 127,25,-14,104,6,34,9,-50, 
  /* [21][0][][] */ 7,35,-51,6,-25,85,-127,-68, 
  /* [22][0][][] */ -127,18,16,1,-23,0,-44,-19, 
  /* [23][0][][] */ -31,-51,5,20,-127,57,85,-13, 
  /* [24][0][][] */ 127,-10,0,-5,-74,-2,-1,7, 
  /* [25][0][][] */ 15,-8,-12,-30,127,50,55,-27, 
  /* [26][0][][] */ 11,-94,-6,-43,-14,-127,74,-52, 
  /* [27][0][][] */ -11,-127,28,-20,-7,-51,24,-11, 
  /* [28][0][][] */ -60,60,-5,15,-12,-56,127,62, 
  /* [29][0][][] */ -4,49,8,15,-7,34,-108,-127, 
  /* [30][0][][] */ 106,-39,10,13,-127,9,-53,-33, 
  /* [31][0][][] */ 6,-63,79,-6,1,-93,127,67, 
  /* [32][0][][] */ -90,13,23,3,-127,-84,-113,45, 
  /* [33][0][][] */ -25,15,-2,27,-127,-51,-42,25, 
  /* [34][0][][] */ 10,-127,48,-18,-4,100,-87,56, 
  /* [35][0][][] */ -29,-51,-127,-5,-6,-80,51,-56, 
  /* [36][0][][] */ 3,127,50,13,-6,12,-15,-35, 
  /* [37][0][][] */ -127,44,33,-17,62,-32,-9,-120, 
  /* [38][0][][] */ -127,-4,-51,-16,47,24,36,117, 
  /* [39][0][][] */ 7,-19,83,-5,18,-85,127,64, 
  /* [40][0][][] */ -38,-11,-14,-36,-127,117,124,-22, 
  /* [41][0][][] */ -127,41,13,-62,-73,-91,-81,53, 
  /* [42][0][][] */ -46,-127,-102,-17,-15,84,-120,-96, 
  /* [43][0][][] */ -59,4,-11,-127,80,57,52,-13, 
  /* [44][0][][] */ 127,3,15,-82,42,-55,-2,61, 
  /* [45][0][][] */ -13,-127,10,-3,-10,-67,85,2, 
  /* [46][0][][] */ 90,3,3,-20,127,-24,-26,0, 
  /* [47][0][][] */ 119,-9,-8,127,-4,42,19,-45, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00069168763002380729, 0.0015260797226801515, 0.00056551198940724134, 0.00053594616474583745, 0.00028753868537023664, 0.00065193831687793136, 0.00083987170364707708, 0.00042487707105465233, 0.00071897450834512711, 0.0013231327757239342, 0.0017653031973168254, 0.0005611840751953423, 0.00077708932803943753, 0.0013374737463891506, 0.00021696895419154316, 0.00077474128920584917, 0.00052818347467109561, 0.00052408251212909818, 0.00036356027703732252, 0.00057272083358839154, 0.00071861664764583111, 0.0006001543952152133, 0.00066028849687427282, 0.0002471066836733371, 0.0004976809723302722, 0.00054233282571658492, 0.0032656083349138498, 0.00084409414557740092, 0.00040246578282676637, 0.0008906872826628387, 0.00042555219260975718, 0.00058113323757424951, 0.0014893390471115708, 0.0005163762834854424, 0.0011839271755889058, 0.0010548646096140146, 0.0017146802274510264, 0.00048626336501911283, 0.00044173223432153463, 0.00082656834274530411, 0.00028802879387512803, 0.00051202357280999422, 0.00058376439847052097, 0.00053056085016578436, 0.0036374472547322512, 0.0010610024910420179, 0.00080345821334049106, 0.0021071441005915403, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -38127, 29551, -16225, -16831, 22608, 10467, 31879, 43604, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00044821435585618019, 0.00057546485913917422, 0.0014812092995271087, 0.001712331548333168, 0.00071150390431284904, 0.00049467611825093627, 0.0006776836235076189, 0.0010498111369088292, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-15,-22,11,6,-6,-9,8,-89,95,-41,92,127,-2,64,-3,-2,-23,15,-6,-4,-3,-22,-30,13,-106,12,69,-11,15,29,-24,1,-76,80,35,2,0,11,-8,100,-7,49,-25,-22,22,-10,-14, 
  /* [1][0][][] */ 15,36,127,2,3,-19,5,-75,43,-14,30,5,-35,16,0,-123,5,-77,0,4,-20,36,26,-39,-11,-11,12,4,11,0,21,-2,-1,12,17,24,-25,-26,73,-71,11,55,-10,38,-15,12,21,-4, 
  /* [2][0][][] */ 24,-44,14,-36,32,27,-6,-25,3,4,-10,22,-8,58,17,4,-33,127,-28,-22,-21,15,-40,-7,121,-6,5,-10,-32,-6,-1,-45,-11,-16,5,9,-7,-8,-13,9,11,-23,-11,-6,10,26,-22,-31, 
  /* [3][0][][] */ -5,-74,0,6,3,-6,-3,6,-2,-17,18,20,6,-6,51,0,-5,-18,8,23,-7,18,-23,-1,5,46,-4,12,-6,0,127,3,6,15,-8,0,-21,-3,-14,8,-5,7,2,32,1,3,0,25, 
  /* [4][0][][] */ -102,15,1,12,9,-23,5,-8,27,-29,20,-13,-44,4,-24,-10,19,7,-10,24,4,-47,12,5,-2,51,7,100,-8,-3,-5,-24,5,-127,-28,18,13,-10,-12,1,-60,-16,-14,14,-56,-3,8,6, 
  /* [5][0][][] */ -6,35,6,18,-53,21,8,40,38,3,5,5,-3,-42,0,45,6,-116,20,14,45,-53,20,28,16,6,-107,-38,-43,-26,19,10,11,-86,-6,-69,59,-5,-54,15,15,-52,1,1,127,0,-52,-9, 
  /* [6][0][][] */ -49,-32,4,-8,36,-54,-7,-16,-10,-15,41,-33,-16,34,-8,-65,-2,25,12,-39,-38,46,-18,-83,-8,-4,-61,-67,31,36,-21,-3,0,-69,-31,66,-53,-28,8,-77,6,12,14,43,127,-25,36,20, 
  /* [7][0][][] */ 3,40,-81,39,-21,2,3,51,-22,3,66,-26,0,-38,-5,0,-6,-127,40,-48,59,40,19,-57,19,-18,23,5,-19,34,-16,2,0,27,1,-33,1,-74,-51,-69,3,-40,49,62,-27,-18,-14,9, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019049109891057014, 0.024457257241010666, 0.06295139342546463, 0.072774089872837067, 0.030238915234804153, 0.021023735404014587, 0.028801552951335907, 0.044616971164941788, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51361, -214, 9359, -262, 5361, -5922, 2203, 31574, 3476, 37780, -2681, 20761, -6858, -931, 26779, 9086, 355, 15057, 39436, 10536, -342, -601, -1271, 15923, -8343, 23390, 47359, 31832, 3617, 2199, -1422, 526, 762, 12709, -7177, 13256, -12537, 20441, -21752, 112967, 21916, 26971, 10695, -1912, 17514, 3636, 1343, 23, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00045177285210229456, 0.0003013252280652523, 0.0001709742791717872, 0.00026355785666964948, 0.00012748409062623978, 0.0001196373050333932, 0.00054011179599910975, 0.00010972999734804034, 9.2325710284058005e-05, 0.00013300655700732023, 0.00010325849871151149, 0.000207182762096636, 0.00022406225616578013, 0.00029238327988423407, 9.5034774858504534e-05, 0.00017362397920805961, 0.00020533778297249228, 0.00026541031547822058, 6.4728723373264074e-05, 0.00021848722826689482, 0.00016134313773363829, 0.00027131880051456392, 0.00017945760919246823, 0.00013098969066049904, 0.00015567714581266046, 0.00016010255785658956, 0.00059195974608883262, 0.00010020311310654506, 0.0002025700086960569, 0.00036930487840436399, 0.00010919196211034432, 0.00022112723672762513, 0.0011178047861903906, 0.00022758563864044845, 0.00020541765843518078, 0.00017622718587517738, 0.000331696035573259, 0.00012383642024360597, 0.00031749249319545925, 2.1004843802074902e-05, 0.00014446875138673931, 5.841161691932939e-05, 0.00015490899386350065, 0.00017414276953786612, 0.00013404536002781242, 0.00010305183241143823, 0.00018043402815237641, 0.00010031266720034182, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-4,21,111,4,82,0,26,15,7,9,7,-6,-8,-44,7,-2,9,-24,-114,-5,-21,127,-8,-1,5,-5,11,-6,3,17,99,19,29,38,-27,2,33,-1,4,18,-70,-7,-8,19,2,-5,-10, 127,10,15,-127,27,87,11,10,121,127,8,42,-47,-23,4,7,127,-55,-62,-57,-98,27,-107,16,19,67,-32,-82,23,19,10,-119,5,-60,127,9,-39,-48,-5,117,-77,-95,-29,3,-33,-10,-127,23, -33,-4,8,15,-1,66,4,16,26,7,-13,30,-12,-2,16,2,-103,29,-4,76,-30,-10,-18,-4,-3,-61,-4,31,-16,3,5,-19,7,-23,16,-18,0,47,41,-11,51,32,-14,12,-41,1,-1,-7, 
  /* [0][1][][] */ 124,7,1,-98,14,-28,35,-17,8,7,-12,52,-5,0,18,-34,0,-49,-60,-85,11,-73,-122,-16,6,96,-15,-127,-8,32,14,-105,17,-52,-3,127,-2,58,-39,43,-60,-127,40,-87,-44,-15,-11,-5, 28,-127,-127,116,-127,-127,-127,-127,-127,-99,127,-127,127,127,34,-127,-83,127,127,-105,127,127,113,127,127,-127,-127,30,-127,-127,96,127,-127,127,-30,-42,127,-127,127,127,127,-78,127,127,127,-123,104,106, 54,4,49,-14,6,-60,43,17,-25,13,-104,-9,1,-39,127,3,63,-65,-72,86,15,-45,13,-31,2,4,-39,71,21,38,0,5,32,-44,9,67,-4,64,66,-9,-79,3,-82,-31,28,-17,-10,5, 
  /* [0][2][][] */ -53,-5,26,-17,7,32,-37,21,7,-26,13,32,5,-5,-38,16,4,22,-14,108,7,-32,-15,-10,-3,21,0,53,-10,2,50,-30,-19,-43,-33,-37,1,30,7,-19,10,-7,40,-36,-36,17,-9,18, 69,125,75,21,17,-22,122,34,17,-5,43,25,-5,0,-88,23,-58,-56,-37,127,-35,49,13,21,31,-63,-42,32,77,-1,127,23,84,-25,5,-34,-23,-18,-14,122,-26,-14,-40,46,21,-33,9,-127, -42,-5,6,-4,5,-6,-62,7,-19,-12,-40,-41,19,-8,-8,10,33,24,-9,-125,24,-9,6,-7,-7,9,-11,-52,-14,6,6,10,-20,88,-39,-20,-3,35,22,-58,5,4,-37,7,-42,127,-3,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.019200345501303673, 0.012806321494281292, 0.0072664064355194569, 0.011201208457350731, 0.0054180738516151905, 0.0050845853984355927, 0.022954750806093216, 0.0046635246835649014, 0.0039238426834344864, 0.0056527783162891865, 0.0043884860351681709, 0.0088052675127983093, 0.0095226457342505455, 0.012426288798451424, 0.0040389779023826122, 0.0073790187016129494, 0.0087268557399511337, 0.01127993781119585, 0.0027509706560522318, 0.009285707026720047, 0.0068570831790566444, 0.011531048454344273, 0.0076269484125077724, 0.0055670617148280144, 0.0066162785515189171, 0.0068043586798012257, 0.025158289819955826, 0.0042586321942508221, 0.0086092250421643257, 0.01569545641541481, 0.0046406583860516548, 0.0093979071825742722, 0.047506704926490784, 0.0096723893657326698, 0.0087302504107356071, 0.0074896551668643951, 0.014097081497311592, 0.0052630477584898472, 0.01349343080073595, 0.00089270580792799592, 0.0061399219557642937, 0.0024824936408549547, 0.0065836319699883461, 0.0074010677635669708, 0.0056969276629388332, 0.0043797027319669724, 0.0076684458181262016, 0.0042632883414626122, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 36889, 7451, 6897, 7944, 1442, 8424, -1523, -235, 668, 2583, 4036, 256, 1421, -970, 646, -1872, 3719, 9085, -269, 22570, 3758, 2327, 8437, -524, 3556, 5785, 20006, 8716, -80, -2514, 39, 1692, -1905, 7690, 3921, 8430, 6378, 4126, 18920, 2211, -712, 2779, 960, 3517, 4225, 2024, -1251, 2650, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00011576482211239636, 0.00030993396649137139, 0.0002254340797662735, 0.00040532468119636178, 0.0015278103528544307, 0.00058798800455406308, 0.0012592802522704005, 0.0011892641196027398, 0.00077906576916575432, 0.00055317726219072938, 0.00054783147061243653, 0.00043345146696083248, 0.00060261948965489864, 0.00047511348384432495, 0.00065836828434839845, 0.0019432042026892304, 0.00043213544995523989, 0.00046943718916736543, 0.0017742854543030262, 0.0001196802404592745, 0.00030164857162162662, 0.00044396828161552548, 0.00047271771472878754, 0.00097876612562686205, 0.00033869213075377047, 0.00019848355441354215, 0.00020231909002177417, 0.0004168229061178863, 0.00083937577437609434, 0.0010486477985978127, 0.00061156641459092498, 0.00049317308003082871, 0.0010615926003083587, 0.00028492533601820469, 0.0002939931582659483, 0.00022362700838129967, 0.00057064427528530359, 0.00031586855766363442, 0.00012186878302600235, 0.0020703680347651243, 0.00079749466385692358, 0.0010160170495510101, 0.00045975862303748727, 0.00042206578655168414, 0.00028684854623861611, 0.00054327567340806127, 0.00095113611314445734, 0.001013220171444118, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 87,4,-10,-11,127,31,-39,-20, 
  /* [1][0][][] */ -3,-10,3,127,22,5,2,17, 
  /* [2][0][][] */ 53,-127,-37,68,-2,-92,124,-4, 
  /* [3][0][][] */ 127,-29,-20,23,-17,-35,22,-7, 
  /* [4][0][][] */ 2,-53,127,-13,-13,-65,23,-102, 
  /* [5][0][][] */ 69,11,-8,-5,127,11,-3,-1, 
  /* [6][0][][] */ -21,69,-5,127,30,42,-74,-36, 
  /* [7][0][][] */ -8,127,-2,0,-8,-11,13,-5, 
  /* [8][0][][] */ 127,29,1,20,-24,-3,-1,-21, 
  /* [9][0][][] */ -127,13,9,23,56,9,-6,-8, 
  /* [10][0][][] */ -95,-11,-19,127,90,55,-39,-19, 
  /* [11][0][][] */ -127,16,-5,-94,48,-6,-32,-64, 
  /* [12][0][][] */ 127,2,-15,4,-53,4,-3,-34, 
  /* [13][0][][] */ -8,84,-127,-3,22,110,-95,79, 
  /* [14][0][][] */ -19,-21,-1,127,15,13,7,-29, 
  /* [15][0][][] */ -1,127,2,-1,-1,-16,14,-49, 
  /* [16][0][][] */ -24,-127,-7,8,4,-91,112,-23, 
  /* [17][0][][] */ 11,127,12,-14,1,77,-84,-11, 
  /* [18][0][][] */ -4,47,-127,13,28,85,-46,74, 
  /* [19][0][][] */ -95,30,-19,1,-127,-1,44,23, 
  /* [20][0][][] */ -127,-53,-10,0,103,-48,25,11, 
  /* [21][0][][] */ -69,-11,-2,1,-127,15,8,-4, 
  /* [22][0][][] */ -127,-44,-17,-24,74,-38,44,81, 
  /* [23][0][][] */ -22,-19,-7,-4,-2,77,-127,-93, 
  /* [24][0][][] */ -10,45,-127,5,21,54,-26,73, 
  /* [25][0][][] */ 123,-75,-13,127,-84,-5,-17,-48, 
  /* [26][0][][] */ 12,-12,-2,4,-19,111,127,-31, 
  /* [27][0][][] */ 91,-35,6,8,127,60,44,-29, 
  /* [28][0][][] */ -2,123,-77,11,16,96,-16,127, 
  /* [29][0][][] */ -12,12,-4,-8,2,85,-127,-83, 
  /* [30][0][][] */ 10,-2,1,-127,-1,-4,0,-14, 
  /* [31][0][][] */ -79,1,1,1,-127,1,4,3, 
  /* [32][0][][] */ 1,29,-2,-127,-10,26,-90,-92, 
  /* [33][0][][] */ -62,-14,3,-1,-127,48,53,6, 
  /* [34][0][][] */ -127,92,10,34,21,-15,19,-13, 
  /* [35][0][][] */ 2,127,-23,2,-6,-97,110,-19, 
  /* [36][0][][] */ -8,49,7,-32,8,94,-127,-23, 
  /* [37][0][][] */ 76,-82,-29,37,31,-103,127,-41, 
  /* [38][0][][] */ 32,-127,-9,-11,-5,51,-41,70, 
  /* [39][0][][] */ 8,-127,-15,0,4,-7,-62,-114, 
  /* [40][0][][] */ 127,48,8,2,-28,65,-127,-92, 
  /* [41][0][][] */ -9,-117,6,-1,8,106,-70,127, 
  /* [42][0][][] */ 53,4,-11,-127,-39,8,-15,-52, 
  /* [43][0][][] */ -93,-42,12,-127,64,16,-17,3, 
  /* [44][0][][] */ 17,-33,-10,10,-10,127,116,-32, 
  /* [45][0][][] */ -127,-42,-7,1,19,20,10,-17, 
  /* [46][0][][] */ 22,76,127,-15,3,0,24,42, 
  /* [47][0][][] */ -4,-12,22,127,0,21,11,3, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00025849099620245397, 0.00069205084582790732, 0.00050337123684585094, 0.00090504850959405303, 0.0034114441368728876, 0.001312917098402977, 0.0028118439950048923, 0.0026555052027106285, 0.0017395741306245327, 0.0012351882178336382, 0.0012232515728101134, 0.00096785277128219604, 0.0013455876614898443, 0.0010608797892928123, 0.001470069051720202, 0.0043389759957790375, 0.00096491421572864056, 0.0010482051875442266, 0.0039617978036403656, 0.00026723372866399586, 0.00067355041392147541, 0.00099133572075515985, 0.001055530272424221, 0.0021854846272617579, 0.00075626483885571361, 0.00044319347944110632, 0.00045175783452577889, 0.00093072286108508706, 0.0018742402317002416, 0.0023415233008563519, 0.0013655652292072773, 0.0011012050090357661, 0.0023704275954514742, 0.00063620909349992871, 0.00065645662834867835, 0.00049933622358366847, 0.001274190261028707, 0.00070530216908082366, 0.00027212052373215556, 0.0046229199506342411, 0.0017807240365073085, 0.0022686619777232409, 0.0010265939636155963, 0.00094242970226332545, 0.00064050342189148068, 0.0012130789691582322, 0.0021237896289676428, 0.0022624169941991568, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -8064, -21141, 27360, 21781, 6626, 428, 35311, 13823, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0010653771460056305, 0.00068814895348623395, 0.0012189161498099566, 0.0011121160350739956, 0.00099127588327974081, 0.0011166282929480076, 0.00080062443157657981, 0.00063173432135954499, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -8,2,13,-103,16,21,16,0,-1,3,11,-5,116,0,-2,7,0,-9,-5,2,88,-3,-1,9,32,38,14,8,7,8,11,-127,11,6,0,5,-21,5,-14,32,9,-23,0,11,6,-2,7,10, 
  /* [1][0][][] */ -41,-8,0,-5,48,22,-22,75,21,0,-29,-22,6,0,19,41,0,35,20,-50,-6,20,127,16,-34,-5,50,4,28,1,17,-12,19,-7,-6,-29,10,-58,6,5,-8,-10,-85,-16,-40,5,-57,-101, 
  /* [2][0][][] */ -58,16,-5,9,44,-10,30,26,-11,49,3,-7,-1,0,3,54,0,9,-127,23,-3,11,1,-23,-26,-6,28,7,22,32,23,0,8,-9,-10,-19,4,8,-3,4,43,-4,-26,-2,26,-57,28,8, 
  /* [3][0][][] */ 3,1,2,7,-2,31,5,-9,66,17,-1,-2,27,0,-36,-6,0,-4,-7,2,2,0,5,-18,-11,-10,-8,-3,-7,-3,-2,-6,-42,40,-47,3,8,5,0,-127,-1,6,3,-48,-1,-3,1,7, 
  /* [4][0][][] */ -3,-13,76,38,-1,-16,-9,-4,5,-4,-1,-9,-82,0,-15,3,0,7,7,-2,60,6,3,0,-20,37,-4,39,-12,-4,-2,93,3,5,-4,-4,16,-21,-13,-13,-3,-127,-4,6,-3,-3,-2,1, 
  /* [5][0][][] */ -7,52,6,-13,-1,46,28,16,-25,31,9,60,25,0,-127,-7,0,15,-43,18,-9,13,-11,38,-17,-11,31,0,-5,21,24,-21,48,29,-45,-12,6,19,-48,19,24,-13,-9,27,20,62,20,23, 
  /* [6][0][][] */ -22,-52,-5,-1,43,-46,-24,12,24,-22,-10,86,1,0,-127,43,0,-8,45,-19,-4,4,29,-32,35,2,4,-19,41,-16,-12,-12,93,-36,34,4,-3,-12,-66,-26,-18,-10,3,-27,-19,-83,-19,-19, 
  /* [7][0][][] */ -123,-25,-11,16,127,20,68,24,17,5,27,-41,-37,0,85,104,0,8,-3,72,-17,-2,-35,53,10,4,45,11,56,75,53,-7,-11,-20,-22,-28,7,24,17,40,77,0,-40,-13,64,8,68,80, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.045278526842594147, 0.029246330261230469, 0.051803935319185257, 0.047264929860830307, 0.042129222303628922, 0.047456700354814529, 0.034026537090539932, 0.026848709210753441, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 67952, 53109, 65708, 45516, -627, 14634, 544, 35652, 32511, 30688, 27623, 2599, -49143, -127, 39112, 541, -204, 42040, 1768, 2861, -14420, 1688, 54814, 47559, -10877, 44899, 54989, 23607, -2410, 16889, -7379, -52772, 13083, 129655, 29938, 1294, 67663, -863, 190972, -24092, 14550, -24781, 2455, 95606, -4719, 96262, 935, -23169, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.0173060016240925e-05, 7.4602059612516314e-05, 9.4965202151797712e-05, 9.2526854132302105e-05, 0.00012399890692904592, 0.00016894450527615845, 0.0001148426381405443, 4.7634126531193033e-05, 7.1960581408347934e-05, 2.7827623853227124e-05, 5.0663325964706019e-05, 1.8476428522262722e-05, 0.00018262794765178114, 0.005541567225009203, 6.66179766994901e-05, 0.00020604420569725335, 0.0027484172023832798, 1.3538694474846125e-05, 8.0261415860150009e-05, 0.00019585978589020669, 9.4969043857418001e-05, 9.5251321909017861e-05, 0.00010796778951771557, 2.7868954930454493e-05, 6.1283833929337561e-05, 6.2406135839410126e-05, 2.3104932552087121e-05, 3.5093064070679247e-05, 0.00034983293153345585, 5.1099039410473779e-05, 4.3344462028471753e-05, 0.00022936682216823101, 0.00018206541426479816, 8.863465154718142e-06, 7.8565703006461263e-05, 0.00018245025421492755, 1.0732355804066174e-05, 0.000540583161637187, 2.4304443286382593e-05, 8.4936407802160829e-05, 6.2397419242188334e-05, 0.00012868666090071201, 0.00012090779637219384, 9.4397410066449083e-06, 0.00019025862275157124, 6.2062135839369148e-05, 0.00018283417739439756, 9.3632370408158749e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-21,-7,-20,9,-39,-78,-68,-25,-48,10,65,37,-71,112,-42,-113,-84,35,-9,0,-70,-112,-82,-34,-125,-64,-22,72,15,94,29,-127,-92,-7,55,18,49,-127,80,-76,-14,102,-108,-2,-37,-87,107, 75,13,-29,-31,58,-127,-127,-81,62,-74,-115,109,41,-82,-1,63,-52,-113,59,4,11,-112,-127,-72,-3,-127,-122,-41,-52,21,-56,56,30,-127,62,84,13,73,-92,127,-127,7,120,-127,3,-23,-127,94, -32,43,6,-8,-63,-111,-58,-17,86,-8,-127,40,10,-71,-100,-10,-127,-25,28,10,-15,-75,-35,-25,-11,-28,-58,-14,-8,17,-23,11,110,-88,70,32,13,37,-3,16,-79,4,6,-79,-16,5,-55,16, 
  /* [0][1][][] */ -87,-127,-44,-46,-9,55,101,-105,-25,-109,-20,112,89,-64,26,-95,-121,-95,90,-77,41,-88,-102,-127,42,-117,-77,-37,127,-60,127,84,-43,-88,-14,84,-34,-76,-107,90,41,58,105,-107,-89,-118,82,120, 127,-83,-127,-127,127,40,96,-127,102,-127,-111,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-120,127,-96,-127,-127,-117,-127,-69,127,30,-115,127,127,-68,-127,-96,90,60,127,127,-115,-110,-127,126,127, -53,31,-62,-86,-118,-24,32,-37,127,-19,-76,36,56,-70,-25,-43,-37,-28,54,-71,55,-82,-39,-25,47,-4,-46,-60,15,-89,-34,20,32,-100,118,24,-37,-61,2,-14,36,54,11,-76,-56,-38,67,36, 
  /* [0][2][][] */ -62,-108,-34,-37,0,36,-3,-34,-38,-59,-15,59,78,-127,-127,-64,-43,-18,64,73,51,-32,-14,-59,31,-57,-11,-59,72,28,77,64,110,-28,-38,-8,-94,36,-17,31,9,38,17,-55,96,-78,4,30, 87,-75,-90,-87,80,20,9,-47,48,-70,-30,55,84,-26,15,91,-24,-30,78,115,82,-51,-20,-58,92,-69,-19,-102,-52,39,-43,113,-17,-50,68,7,-127,51,-14,0,10,33,17,-66,127,-101,-11,39, -29,28,-43,-38,-79,-18,23,-12,60,-5,-11,32,33,-43,110,-29,-93,-4,31,59,74,-27,-3,-4,41,1,-5,-67,-16,28,-19,41,-90,-42,66,5,-20,22,28,-38,6,36,-3,-18,63,-36,-3,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038323549088090658, 0.0031705873552709818, 0.0040360209532082081, 0.0039323912933468819, 0.005269953515380621, 0.0071801412850618362, 0.004880812019109726, 0.0020244503393769264, 0.0030583245679736137, 0.0011826739646494389, 0.0021531912498176098, 0.00078524817945435643, 0.0077616875059902668, 0.23551659286022186, 0.0028312639333307743, 0.0087568787857890129, 0.1168077290058136, 0.00057539448607712984, 0.003411110257729888, 0.0083240410313010216, 0.0040361844003200531, 0.0040481812320649624, 0.0045886309817433357, 0.0011844305554404855, 0.0026045630220323801, 0.0026522607076913118, 0.00098195963073521852, 0.001491455128416419, 0.014867899008095264, 0.0021717092022299767, 0.0018421396380290389, 0.0097480900585651398, 0.0077377799898386002, 0.00037669725134037435, 0.0033390424214303493, 0.0077541354112327099, 0.00045612509711645544, 0.022974783554673195, 0.0010329388314858079, 0.0036097972188144922, 0.0026518902741372585, 0.0054691829718649387, 0.0051385811530053616, 0.00040118896868079901, 0.0080859912559390068, 0.0026376408059149981, 0.0077704521827399731, 0.0039793755859136581, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3824, 106, 7390, 6055, 6337, 5639, 9635, -31, 18, -277, 2020, 341, 10674, -71711888, 2311, 15201, -57889556, -102, -439, 10456, 3580, -19, 59, 367, 2712, -639, 77, 653, 2792, 1769, 2087, 11003, 3474, 283, 263, -1927, 338, 2717, -153, 13527, 2136, 10046, -479, -92, 12608, 135, 8649, 4652, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00054527993779629469, 0.00037717941449955106, 0.0004235115775372833, 0.00030294532189145684, 0.00031344941817224026, 0.00037182841333560646, 0.00039623488555662334, 0.0015367466257885098, 0.00048304942902177572, 0.0026254162658005953, 0.00074195454362779856, 0.0026031301822513342, 0.00021032545191701502, 2.2616006845055381e-09, 0.0011384089011698961, 0.00021489462233148515, 2.2616006845055381e-09, 0.0068245944567024708, 0.00047250662464648485, 0.00037263415288180113, 0.00028749534976668656, 0.0048922458663582802, 0.00034343785955570638, 0.0018898674752563238, 0.0013758785789832473, 0.00084604544099420309, 0.0024526163470000029, 0.0019301617285236716, 0.00039890213520266116, 0.0017152174841612577, 0.0014179323334246874, 0.0002137622213922441, 0.00023006426636129618, 0.011225249618291855, 0.00057938398094847798, 0.00062750175129622221, 0.0045134183019399643, 0.00047459005145356059, 0.0026572870556265116, 0.00025755178648978472, 0.0013534766621887684, 0.00021617389575112611, 0.00045611910172738135, 0.0093019548803567886, 0.00039559041033498943, 0.00063241616589948535, 0.0003225409600418061, 0.00019331371004227549, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 8,-127,49,-37,29,-15,-40,15, 
  /* [1][0][][] */ 96,85,-10,-112,23,16,-110,127, 
  /* [2][0][][] */ 22,5,-35,127,44,107,42,82, 
  /* [3][0][][] */ 96,67,-87,127,-114,-7,-3,18, 
  /* [4][0][][] */ -37,-96,67,17,4,51,-39,-127, 
  /* [5][0][][] */ 20,6,-33,44,-5,-22,44,127, 
  /* [6][0][][] */ 43,-19,-127,-86,103,21,33,-35, 
  /* [7][0][][] */ 127,13,9,-22,24,-6,85,-59, 
  /* [8][0][][] */ 21,-100,11,104,-5,19,-9,-127, 
  /* [9][0][][] */ 109,-127,13,-2,-15,18,-111,95, 
  /* [10][0][][] */ -127,-29,-116,14,-20,10,-94,53, 
  /* [11][0][][] */ -18,-31,0,-91,-127,-28,43,-7, 
  /* [12][0][][] */ 17,6,-27,74,-74,-30,57,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-35,-10,7,44,127,47,41, 
  /* [15][0][][] */ 21,18,11,-127,45,32,-36,60, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 22,19,127,17,-25,-8,25,29, 
  /* [18][0][][] */ 96,-127,23,46,-4,25,-123,12, 
  /* [19][0][][] */ -127,-5,36,72,-54,-73,-119,78, 
  /* [20][0][][] */ 46,26,-42,124,-35,-127,7,66, 
  /* [21][0][][] */ 53,22,127,11,-14,-11,70,10, 
  /* [22][0][][] */ -77,-21,-127,2,7,4,-99,0, 
  /* [23][0][][] */ -90,127,-17,-18,-3,2,111,-72, 
  /* [24][0][][] */ 9,-56,-44,81,-9,-57,88,127, 
  /* [25][0][][] */ 11,44,33,31,127,121,-82,-46, 
  /* [26][0][][] */ -83,-28,-127,1,2,15,-86,-4, 
  /* [27][0][][] */ 16,-39,-20,-3,-55,127,72,60, 
  /* [28][0][][] */ 7,-26,-14,25,15,127,39,49, 
  /* [29][0][][] */ 86,43,127,15,-28,-16,81,-4, 
  /* [30][0][][] */ -92,127,-37,-23,13,-10,104,-47, 
  /* [31][0][][] */ -47,-95,-24,6,49,-88,127,110, 
  /* [32][0][][] */ 5,8,-51,114,-20,80,80,127, 
  /* [33][0][][] */ 5,55,-6,-96,11,-4,4,127, 
  /* [34][0][][] */ -24,75,-14,-93,12,-6,24,127, 
  /* [35][0][][] */ 127,10,-7,-39,6,47,93,-31, 
  /* [36][0][][] */ -102,-22,27,51,-51,10,-127,83, 
  /* [37][0][][] */ -9,-29,-12,16,35,127,41,43, 
  /* [38][0][][] */ 14,31,14,101,127,4,-9,40, 
  /* [39][0][][] */ -3,32,36,-122,31,-6,-48,127, 
  /* [40][0][][] */ 85,38,127,5,-21,-14,95,-12, 
  /* [41][0][][] */ -6,-32,-38,100,59,127,77,114, 
  /* [42][0][][] */ -75,-8,127,23,-49,17,-21,57, 
  /* [43][0][][] */ -19,-51,6,100,-14,11,23,-127, 
  /* [44][0][][] */ 30,6,-71,-127,80,-16,-16,-107, 
  /* [45][0][][] */ -85,127,13,-49,3,4,75,-63, 
  /* [46][0][][] */ -127,-14,40,23,-33,30,-78,44, 
  /* [47][0][][] */ 113,26,127,0,31,-22,127,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00094922661082819104, 0.00065659615211188793, 0.00073725148104131222, 0.00052736903307959437, 0.00054565462050959468, 0.00064728112192824483, 0.00068976805778220296, 0.0026751777622848749, 0.00084089534357190132, 0.004570340272039175, 0.001291598891839385, 0.0045315446332097054, 0.00036613579140976071, 3.937008052901092e-09, 0.0019817489665001631, 0.00037408983916975558, 3.937008052901092e-09, 0.011880294419825077, 0.00082254235167056322, 0.00064868375193327665, 0.00050047360127791762, 0.0085164504125714302, 0.00059785868506878614, 0.0032898925710469484, 0.0023951376788318157, 0.0014728009700775146, 0.0042695291340351105, 0.0033600369933992624, 0.00069441122468560934, 0.0029858609195798635, 0.0024683449883013964, 0.00037211854942142963, 0.00040049725794233382, 0.019540982320904732, 0.0010085951071232557, 0.001092358841560781, 0.0078569855540990829, 0.00082616921281442046, 0.0046258210204541683, 0.00044834768050350249, 0.0023561401758342981, 0.00037631680606864393, 0.00079401483526453376, 0.016192898154258728, 0.00068864616332575679, 0.001100913854315877, 0.00056148122530430555, 0.00033652165438979864, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1239, -43152, -8818, -11064, -33267, -286, -25184, -29215, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021985380444675684, 0.0019553445745259523, 0.00229430734179914, 0.0012323224218562245, 0.0010282893199473619, 0.0022594209294766188, 0.0016306277830153704, 0.0011381598887965083, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-17,2,0,127,-4,-3,-2,-1,-120,-90,-1,0,117,3,0, 
  /* [1][0][][] */ 0,-27,1,83,78,13,14,2,-1,4,127,-49,0,35,-8,0, 
  /* [2][0][][] */ 0,1,-3,-11,-53,1,11,3,-1,6,-15,0,0,127,-7,0, 
  /* [3][0][][] */ 0,-11,-21,-127,82,21,62,20,1,64,-3,41,0,3,19,0, 
  /* [4][0][][] */ 0,44,-24,27,-45,23,127,15,0,-55,23,-9,0,-9,21,0, 
  /* [5][0][][] */ 0,-12,-9,0,-24,-28,-15,10,0,9,-5,-50,0,-7,127,0, 
  /* [6][0][][] */ 0,13,-3,-1,52,-19,-22,-3,-1,-102,114,63,0,127,57,0, 
  /* [7][0][][] */ 0,15,-16,127,7,-1,19,12,0,73,-57,80,0,-1,50,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.093437865376472473, 0.083102144300937653, 0.097508057951927185, 0.052373699843883514, 0.043702296912670135, 0.096025392413139343, 0.069301679730415344, 0.048371795564889908, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 25066, 40719, 8905, 6386, 34193, 10012, 15768, -11869, 4490, 26858, 17023, -445, 25528, 7497, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00010548659338383004, 9.9450458947103471e-05, 0.00041301007149741054, 0.0002699419273994863, 9.6845651569310576e-05, 0.00051341159269213676, 0.00024763235705904663, 1.9298282495583408e-05, 0.00037975402665324509, 0.00024480116553604603, 0.0011047420557588339, 0.00072724185883998871, 0.00027206973754800856, 0.00025371144874952734, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,38,-67,80,-75,-90,-3,-8,29,-127,4,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-25,88,-2,-73,67,-94,79,-95,-27,3,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,16,-28,0,3,-110,-49,8,-29,-14, -78,-42,-58,-15,-8,-26,8,-26,-108,-89,20,-13,-104,-127,1,23, 14,1,63,2,2,33,-25,35,-127,6,-2,1,-21,11,-4,43, 
  /* [0][2][][] */ -115,-73,67,2,-7,39,-39,54,-76,0,0,5,40,1,-26,23, 23,-5,30,-2,-28,40,-34,22,-125,-13,-1,85,-58,-1,-28,-111, 21,-8,17,0,4,14,9,24,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0044831801205873489, 0.0042266445234417915, 0.017552927136421204, 0.011472531594336033, 0.0041159400716423988, 0.021819991990923882, 0.010524374432861805, 0.00082017696695402265, 0.016139546409249306, 0.010404049418866634, 0.0469515360891819, 0.030907778069376945, 0.011562963016331196, 0.010782736353576183, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 9557, -60479, 31923, 375062, 27718, 23385, 4135, 473242, 40171, 25587, 912799, -1073741824, 48839, 40585, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00021946810011286288, 0.00027184028294868767, 3.1726682209409773e-05, 8.3756749518215656e-06, 0.00011775686289183795, 0.00011611641821218655, 0.00028025024221278727, 3.9261985875782557e-06, 4.8085632442962378e-05, 0.00012356817023828626, 6.3856427914288361e-06, 1.1533876076441629e-09, 7.2352522693108767e-05, 5.7245179050369188e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 63,10,32, 6,-10,8, -127,-112,-88, 
  /* [1][1][][] */ 13,7,-3, -16,12,-15, 4,-29,-12, 
  /* [1][2][][] */ 6,29,-2, 2,16,-8, 47,-14,4, 
  /* [2][0][][] */ 21,-12,-12, 70,115,-3, 37,-45,4, 
  /* [2][1][][] */ 0,6,-8, 59,127,-35, 17,-10,-12, 
  /* [2][2][][] */ 38,-80,9, 64,-56,-34, 26,-66,6, 
  /* [3][0][][] */ 8,38,6, 26,88,17, -1,4,-4, 
  /* [3][1][][] */ 26,46,12, 65,127,28, -15,-21,4, 
  /* [3][2][][] */ 8,8,7, 29,30,11, -1,-5,4, 
  /* [4][0][][] */ 64,104,12, 31,107,3, 7,30,20, 
  /* [4][1][][] */ 45,100,60, 11,98,24, 33,58,-11, 
  /* [4][2][][] */ 61,88,37, 43,127,4, -19,32,26, 
  /* [5][0][][] */ -1,-12,-123, -14,-13,-109, -16,18,-33, 
  /* [5][1][][] */ -4,-59,-127, -10,-61,-119, -11,1,-30, 
  /* [5][2][][] */ -8,2,-17, -4,-9,-14, -6,5,-19, 
  /* [6][0][][] */ 29,-62,37, 50,-89,40, 11,-20,9, 
  /* [6][1][][] */ 42,-94,65, 68,-127,74, 12,-25,19, 
  /* [6][2][][] */ 22,-35,13, 17,-44,27, -9,10,2, 
  /* [7][0][][] */ -24,27,7, -102,-29,-1, -26,25,1, 
  /* [7][1][][] */ -7,3,4, -127,-82,-10, -8,-2,3, 
  /* [7][2][][] */ -19,37,-4, -9,17,3, -20,28,1, 
  /* [8][0][][] */ -122,-108,-100, -126,-113,-105, -113,-93,-79, 
  /* [8][1][][] */ -122,-110,-108, -127,-115,-111, -114,-94,-84, 
  /* [8][2][][] */ -114,-93,-87, -117,-95,-88, -101,-64,-59, 
  /* [9][0][][] */ -28,-11,3, -16,-10,-4, 4,4,-11, 
  /* [9][1][][] */ 83,102,-13, 73,127,17, -2,25,31, 
  /* [9][2][][] */ -34,-33,12, -1,-35,0, 8,1,-18, 
  /* [10][0][][] */ -26,-85,-18, 33,94,21, -10,-14,-2, 
  /* [10][1][][] */ -61,-104,-13, 78,127,15, -18,-27,1, 
  /* [10][2][][] */ -33,-20,3, 35,22,-10, -9,-1,8, 
  /* [11][0][][] */ -15,-26,0, 9,-43,6, 7,-107,-57, 
  /* [11][1][][] */ -60,-59,-34, -49,-81,-54, -22,-69,-63, 
  /* [11][2][][] */ -12,-45,-86, 117,127,62, -45,9,-54, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -49,-95,-17, -59,-109,-24, -8,-16,-5, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 9,17,11, 
  /* [13][2][][] */ -6,-18,4, 3,-17,-1, 2,6,-3, 
  /* [14][0][][] */ 48,-3,-35, 82,-22,-47, 34,-7,-17, 
  /* [14][1][][] */ 89,-16,-73, 127,-40,-88, 59,-18,-37, 
  /* [14][2][][] */ 56,-9,-44, 76,-20,-52, 28,-5,-18, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.055964361876249313, 0.069319270551204681, 0.0080903032794594765, 0.0021357969380915165, 0.030027998611330986, 0.029609685763716698, 0.071463808417320251, 0.0010011806152760983, 0.012261835858225822, 0.031509879976511002, 0.0016283388249576092, 2.9411381774480105e-07, 0.018449891358613968, 0.014597520232200623, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.57444655895233154, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.44784855842590332, } };
const TfArray<1, int> quant50_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.46851372718811035, } };
const TfArray<1, int> quant53_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.57267040014266968, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28377002477645874, } };
const TfArray<1, int> quant58_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.18720188736915588, } };
const TfArray<1, int> quant61_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28091859817504883, } };
const TfArray<1, int> quant62_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25472962856292725, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.35762855410575867, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.073059387505054474, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12697511911392212, } };
const TfArray<1, int> quant69_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230400), (TfLiteIntArray*)&g0::tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230400), (TfLiteIntArray*)&g0::tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 702768), (TfLiteIntArray*)&g0::tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 702768), (TfLiteIntArray*)&g0::tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 345600), (TfLiteIntArray*)&g0::tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 221808), (TfLiteIntArray*)&g0::tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 100800), (TfLiteIntArray*)&g0::tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3600), (TfLiteIntArray*)&g0::tensor_dimension69, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
