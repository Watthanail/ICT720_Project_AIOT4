/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.04.2024 08:50:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 19179, -31005, -30382, -25487, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00020073216001037508, 0.00015953087131492794, 0.00016283121658489108, 0.00019410965614952147, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 64,-30,-76,-43,127,-36,-11,-43,107,-13,75,86,-62,-43,16,-11,11,-56,-95,29,-11,46,-42,88,16,-1,-9,0,83,-47,41,6, 
  /* [1][0][][] */ 65,80,-90,-20,-46,42,127,45,-52,-69,-99,36,93,-57,108,-120,125,-105,18,-55,11,-85,-87,-15,-13,-109,67,-65,-76,-113,-20,-30, 
  /* [2][0][][] */ -25,112,25,85,-42,-11,99,43,-82,-110,90,-69,-94,88,-127,76,54,79,89,-80,-19,13,-47,-27,31,-71,93,-105,-40,21,72,66, 
  /* [3][0][][] */ 71,-68,71,6,-19,100,40,-9,1,-92,35,90,72,-5,-127,-16,99,-77,98,1,-103,7,-15,-21,80,-10,-82,88,-85,99,30,44, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0037867154460400343, 0.0030094729736447334, 0.0030717325862497091, 0.0036617852747440338, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -439, 69, -208, 32, 258, 61, 41, 7, 99, 8, 274, -48, 74, -262, 1333, -378, 16, -131, -436, -52, -154, 479, 201, -47, -120, 1205, 31, 22, 1266, -496, -322, -589, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1497201891615987e-05, 4.5525372115662321e-05, 4.2341238440712914e-05, 4.3242809624643996e-05, 4.4421405618777499e-05, 4.1279217839473858e-05, 4.0587172406958416e-05, 4.69754304504022e-05, 4.0968945540953428e-05, 4.0722185076447204e-05, 4.3178584746783599e-05, 3.9599744923179969e-05, 4.7396755689987913e-05, 4.5992663217475638e-05, 4.6716933866264299e-05, 4.2915522499242797e-05, 4.1447692638030276e-05, 4.721108780358918e-05, 4.2755269532790408e-05, 4.0413011447526515e-05, 4.4743941543856636e-05, 4.6991728595457971e-05, 4.5360444346442819e-05, 4.1842038626782596e-05, 4.1314695408800617e-05, 4.7752568207215518e-05, 4.7512316086795181e-05, 4.4834883738076314e-05, 4.434113361639902e-05, 4.3639356590574607e-05, 4.2136944102821872e-05, 4.3823569285450503e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -34,-57,97,14,93,-15,-102,-104,65,-108,-121,-11,60,9,-46,45,-70,-44,-78,-67,-76,-118,-9,102,-126,1,68,-58,100,-6,-32,-87,78,-68,-97,62,-127,-89,-94,25,69,-100,-101,92,49,-118,106,-30,6,-72,-32,93,-86,-58,-111,109,23,67,110,-124,-75,73,-56,34,-9,7,62,97,44,101,79,-123,93,-108,37,76,-120,1,-71,34,46,20,96,-11,-72,-50,-96,100,26,113,-17,-116,17,69,27,23, 
  /* [1][0][][] */ -77,33,-65,-11,-51,72,38,4,81,-99,-98,103,48,-29,27,60,106,-32,38,127,-38,-5,32,28,26,25,-35,103,16,19,96,-54,57,98,-31,30,48,65,-15,-60,-54,10,-17,-91,-27,41,-25,-50,-19,-65,84,62,12,79,-62,-37,5,72,70,70,-74,110,-72,-66,-77,39,72,35,104,31,10,8,-114,94,-66,46,89,-48,-37,67,-69,53,-53,-105,31,109,-68,-54,83,86,96,28,59,102,48,-4, 
  /* [2][0][][] */ 45,21,-79,95,-22,-45,97,105,-113,76,-34,95,92,-5,68,-112,-51,-41,30,48,-88,-9,119,25,-41,97,102,-6,-57,102,84,84,-67,-15,-84,-127,-105,89,111,-16,-127,-87,2,-7,-100,119,-30,-67,93,55,107,-74,-34,65,18,7,-64,114,-48,14,-6,70,-23,64,113,36,56,102,-83,53,18,-63,47,-89,44,13,-39,-21,11,-3,28,-84,1,-48,-15,-102,-8,-43,103,126,-42,-1,-34,-100,-30,-62, 
  /* [3][0][][] */ 59,-17,38,-28,-86,60,-103,42,56,15,68,2,77,102,78,7,112,109,-50,42,127,-82,-63,-109,-38,-92,-72,107,61,-74,94,9,-54,-33,-12,-32,-94,-13,43,58,-17,-86,-89,1,72,39,-42,-76,71,-55,26,14,106,28,110,-84,-123,-113,-100,-59,-96,42,-32,82,67,-24,-56,-22,-10,-64,9,107,31,-103,51,-49,51,96,102,-78,-76,-126,55,102,36,45,-38,-105,-68,60,5,-106,99,-69,-62,49, 
  /* [4][0][][] */ 63,109,8,57,-17,13,35,29,62,104,-1,61,26,-31,-5,-53,-13,-2,-18,8,104,-80,93,32,-3,-4,66,-40,-38,33,-57,-51,71,116,23,-83,-32,-3,-101,52,-44,-57,-65,-76,37,105,37,61,26,-39,-28,-67,-51,49,-83,17,66,-85,31,26,5,-47,-25,-55,-25,57,9,-31,37,-91,-77,-80,-46,21,127,62,58,-9,-1,-47,8,-37,-97,-17,6,77,92,2,-113,-69,52,40,29,94,-97,-9, 
  /* [5][0][][] */ 98,-102,78,89,41,-122,30,63,111,-127,-1,-78,27,106,36,37,64,61,-92,94,37,55,19,-26,-124,-65,-20,-99,53,28,15,-110,-36,3,-67,9,-122,-37,56,25,-92,-53,44,101,-41,26,36,-51,-113,100,34,33,43,14,35,-22,114,60,-64,-40,40,-76,41,-83,-24,105,-26,34,70,3,112,-69,-44,74,-25,-76,13,-49,14,79,110,51,35,109,-86,82,-3,39,75,-102,121,91,-12,22,78,-81, 
  /* [6][0][][] */ 14,-47,122,84,-95,-68,4,75,-9,-87,12,-89,89,64,127,-123,49,9,-2,120,-73,-121,118,68,-71,-78,-4,-59,-20,-109,53,-74,-90,-123,-43,-110,-7,49,-106,91,98,66,32,-12,-113,118,-87,-41,-84,31,-37,-61,67,-56,110,-19,7,-6,-62,121,-95,2,73,-70,-48,77,111,-46,85,2,-105,2,65,-67,-96,-40,-75,-105,-54,-30,43,-28,57,-23,-70,-89,-37,-90,98,108,108,24,-48,-57,93,-22, 
  /* [7][0][][] */ 95,61,-35,-43,-78,101,-16,-1,109,-1,-89,15,38,-80,44,65,50,19,-3,117,54,32,-7,80,-73,99,39,50,-66,108,-18,38,23,22,55,90,-99,84,-6,-24,90,-69,81,63,49,1,96,-101,49,-39,-127,-59,-22,77,24,34,96,-91,12,-57,3,-7,70,-99,-64,-47,62,21,-97,24,60,79,78,26,45,53,-51,47,-90,38,88,-44,-9,-66,82,29,-101,91,80,11,84,63,-51,-27,10,-56, 
  /* [8][0][][] */ 32,44,-42,-87,78,37,-78,-13,8,48,48,105,23,-44,-87,-72,-71,97,-56,7,29,-24,89,117,-108,92,47,86,-75,11,-93,119,98,-32,53,8,127,2,-13,75,83,108,-115,-120,-10,-31,-24,115,22,-109,-37,-4,-65,-5,-40,-119,65,117,-109,115,123,48,50,111,-34,-49,-20,106,-87,55,35,-2,78,70,21,28,-57,117,88,89,35,95,-124,-90,27,49,79,-48,34,-44,-88,103,-81,-114,-62,64, 
  /* [9][0][][] */ -2,5,122,53,107,-108,-51,-122,44,74,-9,57,-39,-87,-108,-23,9,-3,-91,-79,-2,107,-112,-110,127,-12,-15,28,-11,-71,-98,100,66,0,35,-23,-75,14,-36,-48,49,-74,55,-98,85,16,-111,58,54,-16,-101,-51,84,-71,-79,102,100,-63,-6,1,-107,118,94,-84,-42,4,112,48,-31,105,116,-104,4,84,-103,-99,-93,-121,-41,115,33,27,96,22,-47,-104,39,-23,101,31,-32,106,107,-7,57,-41, 
  /* [10][0][][] */ -78,64,94,-67,-22,115,117,29,37,34,29,-64,84,88,-25,16,-27,90,-89,-40,-9,37,61,-60,14,68,-107,-105,-37,97,-86,-86,88,99,127,55,-37,17,-40,42,-27,117,-116,-37,-104,-54,0,-50,2,18,25,24,73,19,-43,-28,-97,-11,45,-42,-1,90,113,46,125,-70,-89,-14,33,-34,-88,-62,94,62,-81,111,-1,67,75,9,88,3,65,101,-93,69,103,-25,47,23,-2,-64,-48,-36,-29,-60, 
  /* [11][0][][] */ 119,4,-16,116,111,38,60,32,125,83,-84,117,-7,-92,30,-69,-70,-108,72,42,31,81,21,-120,-110,-103,-24,75,77,-12,22,-20,-90,-75,55,35,-80,82,-29,-62,-29,110,-82,-4,-44,-66,-99,-98,86,103,106,46,-105,-95,15,25,-72,-63,-43,-96,-90,82,71,6,11,96,-61,34,88,62,-99,-84,33,114,-127,55,-67,30,-47,98,-113,-32,-82,-49,50,-94,14,-23,-104,-4,16,-107,-96,-30,-83,-43, 
  /* [12][0][][] */ 17,66,-50,6,81,-3,-30,40,-65,43,-10,7,-30,17,45,-72,-90,-32,-64,-79,29,-7,17,91,-67,-44,84,-96,78,2,-35,105,-77,-60,-37,19,-8,-65,-4,42,107,39,-95,-33,-18,-71,-32,110,-43,-127,-55,92,30,1,-78,82,-11,-42,29,64,63,83,1,35,111,33,-39,112,39,99,42,72,81,105,-10,-4,-33,33,-102,-81,-51,103,49,13,-33,30,53,107,-80,-97,86,40,101,-14,24,78, 
  /* [13][0][][] */ 86,-71,86,77,76,127,80,50,60,-99,3,-33,65,61,59,-49,-94,-53,-57,46,70,-29,106,-46,-78,59,18,18,-65,-61,86,31,41,93,-14,20,-85,-22,9,70,-58,66,-56,5,-50,28,1,-26,37,121,-62,-73,-76,26,118,-73,-60,18,-2,-76,-41,122,-66,23,-47,-60,-89,86,-19,-20,95,-11,-70,28,-72,-49,-78,52,73,-71,56,-114,108,20,-78,-100,82,109,6,-30,-73,46,95,-32,93,-6, 
  /* [14][0][][] */ -30,-49,113,85,90,-16,12,-81,-55,-19,92,103,-12,-47,-55,-49,-15,-36,31,29,-22,61,32,85,-72,-63,-7,60,-81,-124,-52,47,119,-7,-10,44,126,122,56,-77,17,-78,63,113,89,-89,69,-50,127,37,72,44,109,-12,-8,34,-12,13,47,125,-1,-47,0,91,-94,10,102,-79,-61,-53,-52,110,22,99,78,-34,49,-63,80,52,65,10,-98,-34,-78,-47,-75,111,120,21,115,-42,102,118,-36,89, 
  /* [15][0][][] */ 10,-32,-34,68,90,-78,54,-103,53,-3,-77,8,101,-4,-96,-117,83,3,-88,18,43,12,66,103,74,62,33,86,29,57,60,-106,6,1,-69,-10,-72,106,104,-74,10,106,-55,-29,19,-84,-50,-86,-14,-69,-9,27,-95,-108,-55,-14,65,46,-35,103,-51,-57,-5,107,-40,92,-78,-2,-61,-1,60,-80,18,-20,54,-113,-7,49,99,73,-88,53,-112,-68,-127,-42,-98,32,79,64,-118,-45,49,102,-101,105, 
  /* [16][0][][] */ -75,-4,106,-58,39,111,-52,46,55,45,-108,74,-12,-45,-52,-62,114,84,66,73,121,85,-39,58,-46,61,-69,65,-98,19,42,16,-107,82,64,56,-37,59,-43,-67,26,-44,79,95,66,110,108,-9,-59,-110,8,118,-39,118,74,52,27,98,72,15,127,108,36,63,64,19,-35,101,43,108,-28,-4,36,97,63,91,-5,103,-109,-17,18,-81,69,13,14,103,109,16,87,18,-11,119,80,-27,-79,32, 
  /* [17][0][][] */ 27,-101,26,69,-47,-73,-63,-91,37,-70,74,53,88,52,-106,44,31,50,112,122,-88,-15,11,-50,30,66,-73,24,102,-31,-27,74,-24,-23,25,12,-41,93,-84,-31,-87,-39,-17,-9,12,12,79,-103,83,127,-19,31,-6,71,106,-70,-112,76,-65,-105,24,-65,65,94,-76,-66,36,-98,-76,-7,97,22,11,-101,-63,59,110,-47,36,-57,15,-20,-73,-80,-101,64,71,-25,17,71,-91,-111,-16,101,18,8, 
  /* [18][0][][] */ -101,91,98,-79,-17,-117,-113,-3,-13,64,-116,-57,-41,25,51,-67,12,-32,48,-28,93,-55,12,-89,21,-106,-27,101,20,35,-8,39,36,-35,-118,-115,-42,27,-42,56,-48,-10,-58,-18,-123,8,18,-12,8,-30,67,25,-118,-14,-6,78,-50,28,-26,-126,76,100,6,28,-72,-127,-41,83,63,-84,-80,100,-105,-48,-97,-113,49,46,-11,-83,-65,-17,-36,-74,92,-43,62,62,-116,-82,-71,106,79,-62,45,-25, 
  /* [19][0][][] */ 33,33,84,50,95,-87,104,97,104,-55,34,-13,-100,38,-58,74,75,-108,120,53,-26,88,-53,15,107,-88,33,-66,-103,-123,-66,50,86,-79,45,-2,15,-76,-61,-105,46,-121,-88,12,-92,31,81,-98,-27,30,-20,47,-32,27,-3,-18,44,117,22,-18,63,-54,103,74,-65,-2,-24,-1,-13,55,86,-55,-62,-124,-57,-79,-26,-110,18,127,60,-107,-38,84,-90,-8,14,-5,91,30,-8,77,-31,111,69,-46, 
  /* [20][0][][] */ -9,93,70,87,-85,87,16,53,14,20,-84,14,-8,80,39,-71,-50,-35,-52,-21,19,-45,-74,-69,100,-74,-99,49,18,11,-39,126,94,40,-19,82,42,-32,-20,-106,-81,-34,-84,-98,-12,-62,-68,97,59,-113,-103,34,43,106,50,-1,87,63,99,82,101,-51,-67,-26,-33,-63,-51,10,-80,-70,-68,71,-66,-66,26,20,101,72,102,127,82,0,76,-21,58,111,-18,72,15,89,31,71,17,28,-9,3, 
  /* [21][0][][] */ 92,62,75,-88,92,-48,81,12,-3,-41,-60,40,-9,35,-39,-68,-79,-19,37,-15,96,-31,80,-67,57,-65,-9,81,30,11,6,-28,18,22,-66,-114,118,88,-119,-19,-6,8,22,-10,-92,-79,-73,95,-11,-47,-11,97,45,64,-85,17,-38,61,-29,127,40,-45,17,-3,81,27,-18,-49,-74,-10,67,69,46,-22,79,69,-98,-10,67,93,14,103,32,-68,29,-77,66,-85,-92,75,96,-112,-43,-62,68,-27, 
  /* [22][0][][] */ 44,-49,-70,-82,122,-40,105,54,-92,100,-67,-101,127,-113,-109,-65,44,81,-82,-66,80,-66,42,33,104,-5,-108,96,-57,-75,-57,-110,81,62,47,14,18,-15,-60,-114,3,-11,-1,96,52,-114,90,-20,-41,-70,17,-10,-31,-81,-54,22,10,0,-11,-12,99,-56,-70,-95,-57,17,-103,-47,113,94,19,-6,-38,1,77,-83,41,-35,62,97,98,-87,-71,-115,77,86,103,-35,-60,28,-69,56,10,21,-34,90, 
  /* [23][0][][] */ 71,-87,4,57,114,-111,1,-106,56,-77,84,74,8,-116,16,-41,88,-39,-98,90,85,-86,105,-39,-1,-22,80,22,66,37,70,-46,-40,43,16,42,99,-12,-117,1,-113,-5,4,-116,-73,-100,113,24,78,-123,-98,-58,80,-61,-65,81,-83,-27,89,47,-124,-96,-58,-14,30,33,-123,-118,70,-21,109,-82,-14,-39,-35,-99,37,-24,93,127,-59,-59,10,-113,94,5,112,-28,-101,37,106,-15,101,-60,-45,82, 
  /* [24][0][][] */ -93,-66,-114,-70,-105,-114,-72,-99,68,119,85,39,119,63,-45,-127,-87,42,11,-64,100,-84,-60,-40,45,-29,76,57,112,58,3,-73,-14,9,57,17,-62,-92,64,-20,-79,-107,106,-2,6,-41,39,75,-108,-52,-20,17,73,59,68,-79,-5,81,23,0,96,-13,36,100,-100,97,-49,-90,-114,54,-59,-28,-38,26,96,101,67,-81,-109,-102,-85,-97,-63,-122,-1,63,-15,-112,28,-113,3,-100,-18,21,-96,34, 
  /* [25][0][][] */ -36,-24,-42,18,120,-37,-71,67,54,-61,-6,28,75,15,-75,10,-45,74,35,-106,67,102,20,-31,48,-25,-66,55,73,-66,62,127,110,-68,70,88,121,-32,-9,6,-55,115,-84,29,119,54,91,51,-65,73,-30,28,47,17,-54,12,1,68,-83,99,124,64,80,63,30,84,10,14,-62,-2,-5,-84,53,-79,97,45,72,98,37,56,57,77,-45,102,-45,-8,-68,-72,-17,-28,95,43,-88,-23,-27,-76, 
  /* [26][0][][] */ 37,-97,-13,-27,-99,-9,-6,-28,-90,-104,95,88,-80,-54,19,-15,109,39,-61,-41,9,63,85,15,46,69,22,49,21,24,-77,11,-26,-61,-99,-81,-55,89,-60,89,-80,99,60,29,-54,74,-29,90,-13,50,-21,101,10,-43,14,-79,75,42,65,2,-9,-80,44,-3,88,-7,-53,38,-69,81,68,75,60,-75,-93,11,56,-106,-86,14,-14,53,70,-58,82,0,-54,25,-78,117,22,24,-61,127,63,76, 
  /* [27][0][][] */ 31,5,-70,-91,-97,-68,-64,5,36,88,46,-119,-4,72,67,-23,63,-22,45,-102,-74,18,-14,-19,-104,44,-107,-16,64,18,-21,-18,65,78,-74,-92,-96,-65,-84,103,-89,24,30,30,79,36,70,107,87,43,86,-69,-75,-73,-26,-36,109,11,-113,-55,-31,-65,-13,47,59,-50,-99,125,36,11,-87,27,86,-66,10,-84,49,-47,90,94,73,5,127,-42,-81,-64,-12,23,-33,-5,-42,-46,74,-13,89,64, 
  /* [28][0][][] */ 124,43,125,58,-69,-43,-75,-57,-32,-51,85,112,-90,-83,33,127,116,121,-59,67,-34,46,-75,-49,-60,99,-46,-13,-65,-89,23,9,-94,26,98,112,61,-91,-33,39,118,63,-77,82,-57,-1,30,60,39,-79,-99,-9,-90,30,61,47,79,-28,107,77,-14,0,-70,33,51,87,2,78,-62,40,-93,-36,70,71,20,-64,-114,-28,-63,71,-62,-82,84,-7,90,-60,75,-71,-114,-67,-20,-72,-45,56,-105,-60, 
  /* [29][0][][] */ 50,38,43,-47,-82,27,-107,17,88,-23,-89,-109,107,-90,-59,-42,-90,85,24,-71,-62,-26,59,9,-46,14,-48,-39,-84,7,99,-11,55,0,-65,-68,-26,92,-3,105,38,96,-54,76,-11,100,-60,-14,10,9,75,-76,85,-100,105,36,-82,75,-34,117,-100,105,-79,-55,-36,-69,59,102,100,-95,45,-61,124,64,72,13,127,-55,-25,21,-13,-66,7,-81,49,109,55,70,-22,100,58,75,-86,1,17,59, 
  /* [30][0][][] */ 21,-73,-69,30,-101,16,-72,-21,109,-25,-8,-48,-102,10,53,6,-12,30,94,-108,34,-109,-122,7,-118,18,-79,109,-20,-110,-102,1,-87,-78,-127,-61,8,-23,-11,18,84,-84,-18,93,100,-52,98,54,-79,76,17,-111,96,-59,-16,98,-83,-56,-90,-63,-111,-13,-80,-31,-109,-95,-103,85,-66,107,48,-42,-92,102,32,-95,-61,-80,-84,-67,23,23,-113,-28,-115,22,-117,103,-45,-126,72,55,-40,-8,3,-76, 
  /* [31][0][][] */ 69,-103,26,90,39,54,-67,-107,-38,-29,-85,-94,98,-119,-57,100,-69,-94,27,55,69,25,-41,96,29,-114,29,29,-74,-62,37,104,15,9,-97,-18,84,-35,-67,-115,55,-75,-36,22,-5,-58,-42,18,64,28,94,-28,-124,-67,-77,23,-127,54,-7,100,-34,-14,84,-81,71,105,-54,-86,70,-122,-126,9,-99,-48,-8,-5,-53,-58,40,78,-80,-50,62,65,47,88,-102,16,22,-51,-92,-53,16,101,3,-34, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017636310076341033, 0.0019348282366991043, 0.0017995026428252459, 0.0018378193490207195, 0.0018879097187891603, 0.0017543666763231158, 0.0017249548109248281, 0.0019964557141065598, 0.0017411800799891353, 0.0017306928057223558, 0.0018350897589698434, 0.0016829891828820109, 0.0020143620204180479, 0.0019546882249414921, 0.0019854696001857519, 0.0018239096971228719, 0.0017615269171074033, 0.0020064711570739746, 0.0018170989351347089, 0.0017175530083477497, 0.00190161750651896, 0.00199714838527143, 0.0019278188701719046, 0.0017782865324988961, 0.0017558744875714183, 0.0020294841378927231, 0.0020192733500152826, 0.0019054824952036142, 0.0018844981677830219, 0.0018546725623309612, 0.0017908200388774276, 0.0018625016091391444, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2650, 4841, 13610, 3267, -3614, -4351, 23848, 3908, 4168, -2003, 13781, -174, -14693, 2980, 17678, 9124, 15188, 7392, -5950, -6976, 9061, 42531, 23224, 21815, 1749, 1323, 6605, 3929, 2806, -6718, 8650, -3540, -350, 4980, 61, 1126, 15382, 6390, -3001, 7444, 10759, 8633, 6340, 17390, 4637, 7569, 2452, 14142, 5474, -6527, -8778, 788, -351, -1450, 2743, -73, 187, -1258, -4696, 14311, -1166, 1705, -1725, -2871, -5244, 11261, 32117, 2942, -3894, 1002, 1548, 3107, 2457, -1308, 858, 12099, -640, 22676, 22587, -943, 17152, 2297, -607, 1785, 13912, 11988, 5250, 2191, 10354, 5364, -488, -10222, 904, -2610, -2604, -2357, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00024313967151101679, 0.00032347600790672004, 0.00017628631030675024, 0.00026046129642054439, 0.00028109629056416452, 0.00033908893237821758, 0.00013854038843419403, 0.00018331575847696513, 0.00014606489276047796, 0.00032953894697129726, 0.0001447023096261546, 0.00019131661974824965, 0.00017440857482142746, 0.00094920804258435965, 0.00017487427976448089, 0.00012677410268224776, 0.00012313378101680428, 0.00019637927471194416, 0.00033181128674186766, 0.00024090983788482845, 6.8413719418458641e-05, 6.3746672822162509e-05, 0.00013230470358394086, 7.7137861808296293e-05, 0.00012401003914419562, 0.00036199812893755734, 0.00045046283048577607, 0.00027318866341374815, 0.00018040440045297146, 0.00029473152244463563, 0.00016969761054497212, 0.00021520543668884784, 0.00015419191913679242, 0.00022854101553093642, 0.00025915869628079236, 0.00024515236145816743, 0.00012455342221073806, 0.00016848552331794053, 0.00021010372438468039, 0.00023948069429025054, 0.00011940001422772184, 0.00029983924468979239, 0.00023773063730914146, 0.0001336179266218096, 0.00041249318746849895, 0.00013391239917837083, 0.00020972928905393928, 0.00015337351942434907, 0.00024686177494004369, 0.00019640097161754966, 0.00017719273455440998, 0.00012720070662908256, 0.00038187456084415317, 0.00020744520588777959, 0.00028571594157256186, 0.00026920376694761217, 0.00041061238152906299, 0.00020943395793437958, 0.00032926833955571055, 0.00013011280680075288, 0.00064713432220742106, 0.00038428945117630064, 0.00015897776756901294, 0.00027188306557945907, 0.00035334847052581608, 0.00017051871691364795, 6.7734792537521571e-05, 0.00013865657092537731, 0.00029748695669695735, 0.00033000321127474308, 0.00024740636581555009, 0.00017020298400893807, 0.00055133737623691559, 0.0003239858488086611, 0.00022965774405747652, 0.00017897110956255347, 0.00021401644335128367, 8.2324986578896642e-05, 8.0682599218562245e-05, 0.00019226127187721431, 8.6047992226667702e-05, 0.00014196173287928104, 0.00012173461436759681, 0.00013887390377931297, 0.00012997159501537681, 0.00019898409664165229, 0.00044519137009046972, 0.00012386702292133123, 6.8439985625445843e-05, 0.00037934177089482546, 0.00016775567200966179, 0.0001930904109030962, 0.0002429376618238166, 0.00038185104494914412, 0.00023422934464178979, 0.00017060562095139176, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,97,0,-127,-42,-37,-29,-58,-30,6,-2,70,30,-53,8,60, 
  /* [1][0][][] */ -52,32,-80,2,-40,-45,27,-88,86,71,-58,28,9,4,43,-127, 
  /* [2][0][][] */ 16,-11,-10,37,64,17,-70,-57,122,-48,-12,-2,-4,127,-81,33, 
  /* [3][0][][] */ 42,-79,18,-106,13,-19,-5,-10,127,7,83,42,-14,56,11,106, 
  /* [4][0][][] */ -68,72,19,27,16,-30,-4,53,1,4,11,-29,-127,-12,-8,43, 
  /* [5][0][][] */ 24,57,119,-11,48,82,-70,72,-79,65,-51,-59,52,-44,-127,21, 
  /* [6][0][][] */ 34,-59,127,-113,42,14,-47,82,-92,-103,44,-53,18,94,-34,69, 
  /* [7][0][][] */ 53,126,-35,-71,118,4,19,-42,127,95,-43,11,52,-35,89,65, 
  /* [8][0][][] */ 18,-81,9,-84,29,-58,22,-65,16,52,64,-14,25,127,86,65, 
  /* [9][0][][] */ 9,-28,-2,127,34,-14,30,-55,-54,114,31,-14,-4,-53,-11,-5, 
  /* [10][0][][] */ -18,19,-46,-127,-6,9,-17,24,36,-26,27,-15,-27,-49,-17,17, 
  /* [11][0][][] */ 6,15,24,-29,85,-29,81,-66,-84,30,-12,17,1,127,-65,-43, 
  /* [12][0][][] */ 75,-8,-104,-11,20,-77,17,25,3,34,-71,-20,-25,127,22,47, 
  /* [13][0][][] */ -12,-1,-29,11,8,-127,0,15,-3,-13,0,-7,18,-10,10,16, 
  /* [14][0][][] */ 42,-40,95,-43,76,-2,-127,-105,-39,-60,11,6,17,-68,-3,-30, 
  /* [15][0][][] */ -95,6,-26,-50,-16,15,127,40,-39,50,80,-42,0,83,49,-9, 
  /* [16][0][][] */ 27,40,127,79,9,33,92,56,-100,4,-83,-17,7,17,12,-91, 
  /* [17][0][][] */ -35,-103,-11,27,-63,-26,-54,19,-127,-35,12,-47,1,39,65,-31, 
  /* [18][0][][] */ -3,34,-3,73,48,0,35,5,81,46,-23,-27,9,127,59,28, 
  /* [19][0][][] */ 28,-39,47,-1,99,17,-78,-56,-97,-59,-45,-127,-19,-32,14,-40, 
  /* [20][0][][] */ 127,-69,-45,-52,22,-120,8,7,-43,53,-111,-25,16,20,26,-21, 
  /* [21][0][][] */ 82,-43,65,-22,-1,-17,-7,109,0,-113,90,39,-40,127,44,87, 
  /* [22][0][][] */ -7,48,-23,127,-35,0,91,77,-24,21,-30,20,14,10,45,12, 
  /* [23][0][][] */ 94,-8,114,-118,63,-38,-4,71,19,18,-6,-21,-10,-26,-127,20, 
  /* [24][0][][] */ -127,40,4,-19,0,108,30,-28,-7,16,97,-10,-75,14,60,-33, 
  /* [25][0][][] */ 28,26,16,23,22,15,70,-47,-11,-127,-18,-27,-4,-25,12,30, 
  /* [26][0][][] */ -43,2,-4,5,-56,-16,-45,-29,-101,-36,7,-28,12,127,-33,57, 
  /* [27][0][][] */ -7,23,8,64,32,-24,-15,-35,47,8,-25,-8,4,127,-10,9, 
  /* [28][0][][] */ 6,66,63,68,127,-2,30,31,-82,-14,-43,-25,11,99,38,-41, 
  /* [29][0][][] */ -1,4,3,21,33,-1,19,47,-29,-17,-11,-127,4,-21,-14,19, 
  /* [30][0][][] */ -13,90,-52,73,-30,-25,50,-127,-53,52,-26,-12,69,35,94,98, 
  /* [31][0][][] */ -42,-7,-27,-73,-20,-21,-61,-110,38,99,-25,-127,-43,-52,5,15, 
  /* [32][0][][] */ -127,-69,-4,62,46,40,-16,4,4,-37,-94,46,70,5,52,61, 
  /* [33][0][][] */ -7,-36,-35,-4,-80,-1,-84,2,49,5,7,-58,38,-102,127,41, 
  /* [34][0][][] */ 44,-15,77,28,53,25,-58,78,-82,-43,83,32,5,-2,-29,127, 
  /* [35][0][][] */ -38,40,-60,7,-12,-17,18,-120,85,85,-70,-6,-2,6,67,-127, 
  /* [36][0][][] */ -67,27,-4,127,12,44,123,7,10,76,-7,14,-45,49,-115,-88, 
  /* [37][0][][] */ 25,-24,43,-70,20,12,-46,-54,-110,-28,-18,-32,22,-127,81,-38, 
  /* [38][0][][] */ 40,101,-18,-44,127,-5,33,-32,118,75,-16,1,15,-30,55,25, 
  /* [39][0][][] */ -23,77,-15,-127,-6,2,-36,45,37,-88,-34,-27,23,68,53,44, 
  /* [40][0][][] */ 6,-32,24,-105,1,-27,-5,-29,-107,4,-2,1,-28,-127,90,-66, 
  /* [41][0][][] */ -13,-15,-56,-13,7,-24,25,-7,-41,12,-55,-17,-127,14,28,47, 
  /* [42][0][][] */ 127,72,-20,-23,-65,-52,-15,-56,-2,12,70,-55,-64,45,95,-106, 
  /* [43][0][][] */ 3,123,-76,-10,78,-32,119,-16,43,68,-53,-9,39,-127,-57,-39, 
  /* [44][0][][] */ -45,-3,-3,-44,48,-14,-94,-127,-2,4,35,26,-26,-34,64,-90, 
  /* [45][0][][] */ 5,25,-127,-46,47,-90,32,-66,-12,14,-14,-106,58,-19,89,-5, 
  /* [46][0][][] */ 11,1,-17,-95,-10,7,21,-22,-110,-22,9,17,-18,-127,70,-29, 
  /* [47][0][][] */ 17,54,22,-22,127,-13,-32,13,-51,48,5,29,-1,1,121,-33, 
  /* [48][0][][] */ -127,-64,-19,38,57,21,8,-18,2,-13,-101,43,69,12,69,43, 
  /* [49][0][][] */ 22,26,68,71,102,-6,53,39,-127,-59,-48,-71,28,96,32,-39, 
  /* [50][0][][] */ 34,-4,-81,-5,32,-127,-44,-3,-21,-40,-6,-28,43,-25,17,22, 
  /* [51][0][][] */ 5,31,51,8,30,14,5,16,-127,72,3,-123,4,-121,-39,80, 
  /* [52][0][][] */ 14,45,0,48,58,-4,29,37,60,82,-33,-63,30,127,76,20, 
  /* [53][0][][] */ -2,-62,-11,-20,-90,1,-86,-11,43,16,11,-67,26,-127,126,10, 
  /* [54][0][][] */ 67,-28,-30,-2,127,72,-96,-31,-93,-21,-43,-86,19,-25,3,-25, 
  /* [55][0][][] */ 55,3,-3,1,36,-51,-73,-127,-22,-74,-60,27,-10,-37,19,-7, 
  /* [56][0][][] */ -19,9,19,-24,-6,-21,-89,60,-2,127,-5,-14,23,7,-10,0, 
  /* [57][0][][] */ 7,19,-43,-14,-39,-47,123,95,-33,20,-15,-12,34,27,127,-3, 
  /* [58][0][][] */ 54,-2,-126,35,85,127,-54,36,-106,-35,-9,4,-30,43,-8,-45, 
  /* [59][0][][] */ -97,69,113,19,-67,-61,123,127,27,11,38,-14,4,17,65,-17, 
  /* [60][0][][] */ 1,-9,-57,-4,10,-127,-15,-4,2,-6,4,-9,17,-16,-6,-1, 
  /* [61][0][][] */ 31,-5,23,127,92,16,37,15,-113,-11,8,34,-2,17,47,-49, 
  /* [62][0][][] */ -45,127,33,-48,-23,-9,-64,53,-29,-61,-87,-61,-17,-104,-64,-45, 
  /* [63][0][][] */ -45,35,-24,127,-83,7,-69,-24,-50,-21,-18,-28,27,53,28,40, 
  /* [64][0][][] */ 16,3,0,42,14,3,-14,81,24,-7,-23,-46,-8,-127,72,8, 
  /* [65][0][][] */ -10,-39,9,-127,45,-41,58,-24,-3,41,8,-96,-20,-2,25,-42, 
  /* [66][0][][] */ 47,-33,83,-31,15,-2,-1,97,6,-86,31,24,-11,127,28,66, 
  /* [67][0][][] */ 7,67,-29,-127,-6,-11,-52,47,81,-105,-37,-6,40,76,81,46, 
  /* [68][0][][] */ -26,37,127,9,17,-2,-9,8,-50,-28,-27,-40,19,-25,94,-26, 
  /* [69][0][][] */ 127,64,-11,-11,-74,-40,-18,-41,5,15,80,-58,-68,49,67,-91, 
  /* [70][0][][] */ 37,13,-43,-4,-21,30,56,127,-36,85,-33,4,19,64,-18,22, 
  /* [71][0][][] */ 7,-8,-5,4,1,-72,-2,14,-33,21,-87,0,-127,3,34,40, 
  /* [72][0][][] */ 17,23,-127,15,18,6,24,107,-43,-30,8,-9,26,11,1,14, 
  /* [73][0][][] */ -47,32,51,3,47,-42,-85,-127,26,-81,37,-17,12,-43,41,-17, 
  /* [74][0][][] */ 1,52,32,119,18,-17,-87,101,-57,12,-41,58,26,-127,52,-87, 
  /* [75][0][][] */ -1,9,-30,6,25,3,16,-34,91,11,-26,-18,17,127,-34,15, 
  /* [76][0][][] */ -3,-18,-2,20,-2,-10,-9,54,17,-25,-18,-127,-8,-3,4,8, 
  /* [77][0][][] */ -29,48,-26,127,-57,7,81,124,22,48,10,50,-14,-13,-7,8, 
  /* [78][0][][] */ -8,18,32,-103,35,-23,-42,50,31,-39,17,-28,34,127,9,51, 
  /* [79][0][][] */ -21,-78,-77,-49,-82,0,25,-67,127,23,26,58,23,39,35,-53, 
  /* [80][0][][] */ -28,11,127,-104,42,-57,16,-78,-76,41,-56,-117,44,103,113,-31, 
  /* [81][0][][] */ -51,39,-127,27,59,-114,-15,47,3,-34,65,5,20,5,0,-10, 
  /* [82][0][][] */ 127,-11,-4,10,20,-94,-13,24,-30,-17,-94,-10,100,5,7,33, 
  /* [83][0][][] */ -32,83,-127,-89,-35,-25,42,-112,72,46,-41,-103,15,50,63,110, 
  /* [84][0][][] */ -41,17,62,-22,-13,-12,44,-127,-31,45,-6,-49,22,54,43,-13, 
  /* [85][0][][] */ -76,115,26,-127,-64,-32,-19,-8,-64,-9,-77,16,4,-14,-86,-31, 
  /* [86][0][][] */ -3,12,-23,6,-24,-37,127,34,4,-29,5,17,14,25,91,-8, 
  /* [87][0][][] */ -18,-28,-2,-127,6,-45,51,-8,6,25,-8,-117,-19,-3,15,-43, 
  /* [88][0][][] */ 127,-24,63,-6,45,-98,5,47,-67,27,-109,-66,37,26,71,0, 
  /* [89][0][][] */ 24,-34,-31,-43,34,-4,-26,-20,-60,2,24,-78,127,2,18,-49, 
  /* [90][0][][] */ 7,-60,34,-70,70,-11,-61,78,53,-89,-46,-32,-20,114,27,-127, 
  /* [91][0][][] */ -37,-16,-17,-35,29,-24,-30,-96,14,72,-9,-127,-41,2,-7,-4, 
  /* [92][0][][] */ -16,18,44,10,1,-127,9,-2,3,-23,-4,-16,-2,-25,19,-3, 
  /* [93][0][][] */ 41,-23,127,-20,-49,59,26,-38,-21,14,-74,-32,-29,2,38,-6, 
  /* [94][0][][] */ 39,-5,-22,-28,32,1,-16,-9,-41,-20,2,-64,127,-15,32,-36, 
  /* [95][0][][] */ 127,92,3,31,-97,-15,-64,-14,-18,-6,94,-42,-56,22,66,-90, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00085173401748761535, 0.0011331574060022831, 0.00061754236230626702, 0.0009124128264375031, 0.00098469853401184082, 0.0011878504883497953, 0.00048531594802625477, 0.00064216699684038758, 0.00051167479250580072, 0.0011543963337317109, 0.00050690158968791366, 0.00067019450943917036, 0.00061096454737707973, 0.0033251373097300529, 0.00061259593348950148, 0.00044409788097254932, 0.00043134563020430505, 0.00068792933598160744, 0.0011623564641922712, 0.00084392278222367167, 0.00023965768923517317, 0.00022330871433950961, 0.00046347195166163146, 0.00027021893765777349, 0.0004344151820987463, 0.0012681029038503766, 0.0015780004905536771, 0.00095699756639078259, 0.00063196831615641713, 0.0010324636241421103, 0.0005944617441855371, 0.00075387861579656601, 0.00054014427587389946, 0.00080059398896992207, 0.00090784969506785274, 0.00085878465324640274, 0.00043631868902593851, 0.00059021572815254331, 0.00073600694304332137, 0.00083891639951616526, 0.00041826599044725299, 0.0010503563098609447, 0.00083278585225343704, 0.00046807224862277508, 0.0014449903974309564, 0.000469103833893314, 0.0007346952916122973, 0.00053727737395092845, 0.00086477282457053661, 0.00068800535518676043, 0.00062071764841675758, 0.00044559233356267214, 0.0013377313734963536, 0.00072669400833547115, 0.001000881427899003, 0.00094303820515051484, 0.0014384017558768392, 0.00073366070864722133, 0.0011534483637660742, 0.00045579360448755324, 0.0022669534664601088, 0.0013461908092722297, 0.00055690942099317908, 0.00095242395764216781, 0.0012378025567159057, 0.00059733813395723701, 0.00023727936786599457, 0.00048572296509519219, 0.0010421160841360688, 0.0011560226557776332, 0.00086668052244931459, 0.0005962320719845593, 0.0019313704688102007, 0.0011349434498697519, 0.00080450595123693347, 0.00062694738153368235, 0.00074971345020458102, 0.0002883897686842829, 0.0002826363779604435, 0.0006735036731697619, 0.00030143168987706304, 0.00049730116734281182, 0.00042644425411708653, 0.00048648429219610989, 0.00045529889757744968, 0.00069705420173704624, 0.0015595342265442014, 0.00043391418876126409, 0.00023974970099516213, 0.0013288587797433138, 0.00058765901485458016, 0.00067640823544934392, 0.00085102638695389032, 0.0013376489514485002, 0.00082052056677639484, 0.00059764256002381444, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -6210, 23640, -21584, -8441, -8059, 3085, 24050, -58832, -4061, 18158, 25209, 9107, -11689, 9593, -5066, 7977, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00070287642301991582, 0.00043401736184023321, 0.00020114220387768, 0.00018845766317099333, 0.00042181293247267604, 0.00035809032851830125, 0.00034434310509823263, 0.00027586842770688236, 0.00028269362519495189, 0.00026021015946753323, 0.00066815526224672794, 0.00056082895025610924, 0.00041698783752508461, 0.00025269953766837716, 0.00051299575716257095, 0.00059020263142883778, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -19,-16,6,-30,16,-7,-39,-5,15,2,-14,7,-14,-12,-31,4,-4,-1,3,0,14,-35,10,-1,2,11,7,127,32,-38,37,-14,4,10,11,-5,-17,19,-54,-10,-17,9,-4,41,5,16,13,1,21,-1,-15,12,16,-20,-15,90,8,9,-30,-40,-8,29,-4,-23,-38,-72,-12,34,4,4,21,-14,-7,-30,-7,-23,-25,9,-6,1,-14,-30,31,16,-6,-10,-13,-99,3,-16,4,-7,48,-28,-36,-5, 
  /* [1][0][][] */ 35,-78,-68,-67,127,-11,65,34,-25,-98,-64,-9,3,-13,-73,45,-71,-3,55,51,27,41,-10,-67,9,-12,-4,-87,26,-27,-64,30,-14,26,8,-17,-6,2,3,14,-37,31,-50,-15,-48,82,21,13,20,-78,8,-33,-28,44,44,13,-62,-16,-42,-43,22,-15,-7,-37,-81,103,-19,-22,-13,-10,-17,23,51,-104,-34,-4,32,-66,47,3,0,-33,36,-10,-61,26,-26,22,25,-45,-12,1,22,7,23,116, 
  /* [2][0][][] */ -3,69,-103,-11,88,77,42,82,17,-127,-4,-12,-20,-2,48,32,13,-14,-31,64,12,-19,78,14,29,42,-16,-28,26,-16,60,-52,29,35,-20,47,-117,-94,16,9,7,-57,19,-3,31,-14,-12,68,-29,31,-28,4,82,-14,-11,76,39,19,39,12,19,16,16,-28,33,-9,-28,-3,-54,-16,-10,-53,-42,-79,-7,70,91,66,42,7,30,-57,2,-1,-55,34,23,27,-7,28,17,-19,-6,-22,-60,-15, 
  /* [3][0][][] */ 67,18,92,12,45,-32,23,-5,-17,-53,27,-59,0,38,41,97,29,8,11,-1,112,-17,24,35,56,-14,-19,29,44,40,-6,86,-105,22,23,6,-3,-34,18,54,-66,-24,81,-7,25,32,-46,-89,-52,-31,-45,15,8,-127,11,19,-102,73,54,46,22,97,-2,-52,17,76,-23,-48,33,-33,-1,-68,52,-44,55,-23,-1,12,54,51,-21,-64,4,2,-22,13,34,48,4,17,29,45,41,100,50,-55, 
  /* [4][0][][] */ 21,-15,31,-9,127,32,-20,-16,-25,-52,-28,-26,-55,13,-8,41,30,-81,-21,76,-22,-2,38,-19,-8,1,16,-35,12,-11,46,-42,86,9,-16,11,32,17,-8,-5,-33,-5,-31,-19,2,-35,-10,4,38,10,-22,10,6,-38,11,-8,24,-17,-31,20,0,49,61,27,43,32,-9,-14,-47,-8,44,59,3,-57,-48,-12,41,30,64,-25,-10,-41,13,-4,-55,7,29,45,-35,25,-2,-39,12,26,19,-10, 
  /* [5][0][][] */ 17,-10,-13,23,23,-13,34,-28,-25,-31,-10,-5,-3,27,-2,22,-6,3,7,-8,26,13,-47,76,12,-3,9,-89,5,30,6,33,-9,9,6,-50,39,15,-3,12,-5,3,34,-29,1,-5,3,-24,-13,-21,20,-27,3,-20,-3,-40,6,14,-24,22,61,19,7,28,-13,58,-2,70,14,78,17,25,16,5,-4,73,-26,-7,14,7,-2,-8,-9,27,-6,17,-6,127,-8,28,3,-5,14,18,-49,2, 
  /* [6][0][][] */ 32,-79,13,-25,-26,15,33,19,-9,10,-16,-77,-27,3,-42,36,12,-7,-14,-7,-37,43,1,17,-14,-1,-9,-21,-10,15,31,-1,56,12,59,-4,-2,-16,27,-79,-19,98,9,-44,9,-35,-9,14,-11,27,-21,54,-13,-50,-6,-16,8,-62,-15,8,-4,61,46,-79,19,-21,-3,-12,-1,12,127,13,-37,1,-19,14,-88,-21,14,-4,34,48,12,3,-18,2,45,26,-4,11,43,-28,-5,-13,-28,-15, 
  /* [7][0][][] */ 15,127,45,27,127,44,54,-32,-41,-11,40,-31,-31,36,22,34,15,-37,-12,28,30,-38,26,9,1,20,12,10,19,-12,6,26,52,3,-31,3,25,5,-9,95,-44,44,24,4,-7,-31,23,-31,-24,-30,21,-6,13,-41,-31,46,50,16,-16,8,1,-23,4,-4,-75,83,-42,-82,-3,-42,8,63,-9,-38,12,10,59,55,48,-17,-44,-27,-19,-2,-29,43,2,1,-39,31,-32,-30,-41,-5,23,-10, 
  /* [8][0][][] */ 10,1,50,19,-127,-27,44,-5,11,98,62,9,-2,17,26,12,-54,24,-3,3,-39,11,-126,75,15,-40,60,-28,3,15,2,65,70,-18,-7,1,-17,-22,31,51,18,-26,46,2,-37,-19,45,2,-103,9,32,23,-73,-39,-35,28,8,-50,-94,-14,22,-43,-29,-14,-3,97,-21,-47,23,4,-51,-7,50,55,55,-23,-31,-34,-12,22,-88,19,-27,-1,31,24,73,52,18,-33,57,55,4,-22,50,10, 
  /* [9][0][][] */ 10,-105,-30,3,82,74,-25,-16,42,-44,83,104,-25,11,103,-108,27,-22,3,10,-61,-55,38,-20,-27,9,-10,32,-33,3,24,-7,19,1,-104,48,13,17,-17,67,39,-90,-9,77,-4,-2,-70,-30,30,37,-7,-66,47,17,-21,-58,-15,90,-16,-2,13,-67,-41,127,-72,-10,-7,-9,-4,22,-61,-75,38,11,3,21,56,-36,30,23,-1,-25,5,40,1,-60,20,-12,-9,-29,-46,37,-74,-10,-1,-56, 
  /* [10][0][][] */ -44,-17,-33,-54,-26,-5,71,-19,40,20,27,44,23,-6,2,-8,-3,25,-29,-22,-7,28,12,12,-7,-14,8,-127,24,-44,65,-31,0,19,-4,0,0,30,-1,5,15,-47,27,-45,14,1,29,19,-3,42,-27,-6,-43,-30,-2,-68,17,17,-2,-42,20,8,-3,5,-30,94,-15,-25,12,-34,-6,-23,-32,-6,25,54,-11,51,-14,24,-22,4,8,29,6,-25,-5,121,-4,2,20,13,12,-39,47,-42, 
  /* [11][0][][] */ -74,23,-5,-9,23,-56,-14,9,-55,0,3,17,39,26,-21,3,43,11,-75,-52,19,2,-16,9,72,6,60,0,-23,29,-35,26,-15,19,-20,-3,-1,-4,43,20,-8,-5,11,-2,85,1,74,21,55,41,7,32,3,-57,28,-17,-71,-12,-38,-38,1,-18,3,19,-10,-16,14,10,25,27,-14,33,-15,9,17,-3,-26,98,-112,67,-32,1,-74,-60,127,15,45,-3,1,49,-21,-54,-26,34,-22,-9, 
  /* [12][0][][] */ -4,-14,-29,19,72,24,-11,-30,-26,30,24,-25,-5,-14,16,-4,-39,-14,4,-11,-11,-12,-38,50,-12,36,-15,94,-12,45,-53,0,-10,36,12,13,-23,-18,-1,14,-13,4,-8,-12,-24,-12,19,12,-15,-15,-14,-48,-9,24,-8,1,-3,-20,21,20,-8,-3,11,45,29,-89,14,51,-19,-127,5,54,-1,-3,20,93,9,-34,-21,-8,-14,28,-47,-4,17,-7,-3,-57,-6,10,-7,9,-24,51,-20,29, 
  /* [13][0][][] */ -65,59,0,15,-63,0,-4,9,-34,-24,32,8,61,17,-17,0,-20,41,-48,-14,7,-23,39,-43,64,38,-9,13,12,-23,-31,-86,-101,-21,11,9,13,17,15,-9,-35,95,-4,1,48,15,-23,-1,66,-22,13,49,60,-56,67,-1,-17,55,48,11,5,36,-9,15,-10,-20,8,3,19,0,28,-127,16,-32,-69,-1,52,25,-54,-47,70,-11,-8,-26,36,-34,92,7,-20,-4,-15,32,50,-21,-8,-6, 
  /* [14][0][][] */ -33,21,-13,-56,35,4,-21,22,-94,7,16,16,-29,-55,-91,-24,-84,-22,80,15,41,12,22,-105,-27,14,-43,-28,16,-21,-15,-43,-62,-27,26,5,-29,10,13,4,-3,81,-83,-21,-63,9,20,10,127,-30,21,-24,38,60,-99,23,-13,23,-105,6,8,38,47,28,0,23,9,-4,-55,37,66,36,28,-9,-19,12,55,-89,-36,-102,8,-34,21,31,29,-69,-49,1,-41,25,22,44,25,27,12,0, 
  /* [15][0][][] */ -29,-70,-6,-27,6,8,-2,-55,-33,23,1,-35,36,-8,34,-9,-83,2,-24,7,-20,8,-67,-31,-5,1,-7,19,-14,-11,50,-78,-12,29,16,6,1,16,-81,11,28,-55,6,17,-17,-48,45,23,50,14,-10,-127,3,44,3,34,36,-13,-15,43,11,0,43,-4,-4,-3,-15,-7,-16,18,6,31,-31,-1,3,-28,-31,-8,1,1,0,42,-12,68,-9,-34,-26,-25,-39,54,27,78,-27,-4,5,-16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.029872247949242592, 0.018445737659931183, 0.0085485437884926796, 0.0080094505101442337, 0.017927048727869987, 0.01521883811801672, 0.014634581282734871, 0.011724407784640789, 0.012014479376375675, 0.011058932170271873, 0.028396598994731903, 0.023835230618715286, 0.017721982672810555, 0.010739730671048164, 0.021802319213747978, 0.025083610787987709, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 25695, 58773, -1211, -554, 14799, -5963, -485, -1084, 5238, 12685, -4985, -496, 1090, 7097, 5664, -8652, -4258, -518, 581, 15589, -10323, 17124, -2502, 6648, 22032, 207, -5485, 16941, 14370, -19667, 1932, 22665, 23563, -10004, 2121, 737, -76, -614, 5484, -8658, -5132, -1046, -10823, -57, 30514, -2044, 12890, -1247, -14489, 1181, -6, -621, -2948, 15893, -4326, 13193, 19527, 278, 36895, -393, -10399, -1346, 1379, -209, -1845, 12144, -1186, -8236, -3199, 3341, -260, -4055, 653, 294, -3682, -6168, -547, -2607, 42993, -7503, -6611, -11691, 246, 128, 58917, -13979, -11295, -26769, -6382, 9175, -2538, 29706, 292, -2170, -4177, 812, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 9.0675821411423385e-05, 9.7475771326571703e-05, 0.00011030896712327376, 0.0002060270489891991, 0.000231385842198506, 0.00013435901200864464, 6.269266305025667e-05, 9.2821588623337448e-05, 0.00023597608378622681, 0.00018640446069184691, 0.00023953523486852646, 0.00010903560178121552, 0.00025405440828762949, 0.00022433763660956174, 0.00036478438414633274, 0.0001678264670772478, 0.00021399297111202031, 0.00017341409693472087, 0.00020514379139058292, 6.7173190473113209e-05, 8.3314873336348683e-05, 5.3069012210471556e-05, 0.00014786428073421121, 0.00010265844321111217, 8.4142462583258748e-05, 8.7139720562845469e-05, 0.00016721815336495638, 0.00019390421221032739, 7.4789495556615293e-05, 0.00046295893844217062, 0.00037645702832378447, 0.00027117063291370869, 0.00013556017074733973, 0.000168045618920587, 0.00025242200354114175, 0.0004442311474122107, 0.00039552402449771762, 0.00021671524154953659, 0.00022636010544374585, 8.7238833657465875e-05, 0.00024444403243251145, 0.00025394585100002587, 0.00031162999221123755, 0.00010337925050407648, 0.00034763413714244962, 9.3469803687185049e-05, 0.00011271432595094666, 0.00025389058282598853, 0.0006806062301620841, 0.00010217919043498114, 0.0004113076429348439, 0.00016384286573156714, 0.0001852636196417734, 0.0001784342312021181, 0.00019866228103637695, 0.00013626992586068809, 0.00014420141815207899, 0.00039318992639891803, 4.2777417547767982e-05, 0.00017396618204656988, 0.00027408153982833028, 0.00028370486688800156, 9.94382135104388e-05, 0.00014745688531547785, 0.00011836393241537735, 0.00014763369108550251, 0.00022701402485836297, 0.00027144770137965679, 0.00019393448019400239, 0.00011906631698366255, 0.00018778441881295294, 0.00010463764192536473, 0.00027261322247795761, 0.00013591072638519108, 0.00019398950098548084, 0.00030696182511746883, 0.00014146380999591202, 0.00010009250399889424, 6.0021993704140186e-05, 0.00016813311958685517, 0.00020988848700653762, 0.00024433428188785911, 0.00018221893697045743, 0.0002861450775526464, 6.0027690778952092e-05, 0.0001059264614013955, 7.9589837696403265e-05, 0.0005226641078479588, 0.00025197578361257911, 0.00011652053217403591, 0.00032325118081644177, 4.0339680708711967e-05, 0.0001497701887274161, 0.00010346822818974033, 0.000275670230621472, 0.00031693850178271532, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -48,-71,-9,127,22,71,75,-58,-13,-17,-15,-3,-30,-1,36,-1,-9,-44,26,23,20,-127,127,7,-83,5,49,-29,-127,-127,39,24,12,27,60,-19,-30,-11,29,-8,-12,28,-104,73,24,-66,36,46,-18,50,-23,20,5,-7,14,49,-93,-49,-62,-18,-10,1,10,38,67,-26,72,15,-8,16,20,127,24,24,28,0,-10,20,127,-4,-13,14,-26,21,125,21,-78,-17,-2,-32,-16,-36,2,-26,-16,27, 127,-127,77,106,-43,127,40,-116,70,6,-18,127,127,-97,-14,15,12,127,127,-113,127,-74,82,72,-127,-118,-67,-34,-53,46,-59,-19,-88,52,-127,-85,-43,-15,-55,64,0,127,127,84,-51,-111,-114,-51,-15,-127,43,86,70,-31,45,82,-49,41,-80,-114,-43,-39,-63,68,72,-62,26,31,-79,32,-16,89,116,127,15,20,2,61,-33,56,65,127,127,-22,-7,76,-113,127,-124,-99,4,-127,-89,-127,-38,107, -76,-12,31,-80,15,-26,62,-7,82,-34,-27,20,-20,-5,-9,-13,-10,-16,6,-3,-21,-106,31,0,-120,96,7,-56,120,49,-15,9,1,13,14,-30,-9,33,18,13,25,13,-117,66,17,-17,36,13,-15,10,-15,6,-9,0,-2,22,-67,6,-34,51,3,42,32,0,-7,-41,-32,25,8,3,-2,37,11,-26,-4,4,-11,-4,-84,2,-20,-26,-17,4,-111,10,-35,-23,-53,25,-26,-29,29,-27,-15,2, 
  /* [0][1][][] */ -66,-74,73,-35,-49,96,19,127,-50,-20,-1,-115,25,-115,76,29,-2,-60,-17,89,53,-72,48,48,-88,-13,127,-22,-24,63,121,-106,-127,91,-85,-57,-37,32,-29,93,-48,-24,-3,48,-49,127,-23,66,15,96,20,-1,16,-56,27,32,127,121,-72,-85,127,-32,-36,127,71,-38,-16,2,127,39,127,96,-40,103,-5,12,15,14,-31,9,-41,123,-78,109,1,33,-54,30,78,-127,-33,-7,127,-69,-22,1, 66,127,58,-113,127,84,93,38,-127,127,127,-36,-66,-127,-127,127,127,-64,-122,-49,103,91,-122,127,-100,-89,-45,127,-126,109,-127,-127,-87,127,108,127,127,-127,-108,127,-65,-94,108,-127,-127,-34,-127,-127,127,-110,84,44,127,127,127,-127,100,-127,-127,127,20,-76,-127,-101,-127,127,-127,127,-124,-127,-106,-80,-127,-80,127,127,-127,127,-77,127,127,33,-41,-127,60,127,93,45,127,13,127,0,-68,34,127,-127, -55,-12,-49,38,-57,-100,33,-25,20,-33,-28,93,1,91,13,9,-4,66,-7,127,3,-90,-40,6,-66,105,-72,-21,-69,-16,16,-63,-71,38,6,-18,-30,45,-70,42,127,-3,-40,32,-41,-58,16,45,8,119,-11,7,-37,-73,4,21,95,1,-1,21,-34,127,93,-53,-43,10,36,-9,-77,123,-18,-82,0,-55,-16,-21,28,16,75,-38,-68,-42,56,16,-49,-18,71,22,15,63,-44,23,-44,95,-27,-4, 
  /* [0][2][][] */ -68,2,-5,-21,12,-45,69,24,56,-26,-36,0,17,16,-27,0,-6,66,6,2,-53,-78,2,-11,-20,-57,34,-68,89,39,25,25,16,-7,-11,-46,-7,36,-4,-1,-15,-5,-64,103,3,32,13,36,-15,-30,11,-19,22,-2,8,15,-72,24,-13,16,15,1,-21,-5,0,-47,-46,17,-30,13,27,29,14,-20,28,5,17,6,-77,-13,-7,-9,17,15,-127,4,13,-44,-58,-50,-28,-48,8,56,-18,-7, 121,35,-127,-35,-72,-24,43,30,-66,-27,-19,-104,-79,109,-13,36,4,-51,-10,-124,95,-54,-37,-2,-102,127,-53,21,-39,-20,-9,-4,-61,18,28,6,-24,-28,127,53,11,-13,70,-38,-39,77,-67,-44,-32,-4,-127,-127,-52,-27,-2,39,-65,-8,13,40,-6,-17,8,-49,-54,33,62,-22,113,108,-24,-69,11,-58,3,4,101,6,52,21,14,-96,-49,2,3,5,127,40,-61,40,-20,-108,40,77,-9,27, -55,13,-19,25,15,-70,-127,3,-11,-7,-15,6,14,-28,18,-3,-8,-13,5,18,-49,-72,15,-1,20,-96,20,3,-48,-38,-7,16,41,-19,-7,-25,-36,3,41,-40,24,-1,-49,-34,2,66,24,15,-9,-2,10,-8,17,5,-5,-4,-63,-12,2,-36,-10,12,86,-11,34,-4,-2,30,0,5,-3,21,-17,15,1,15,37,1,73,-13,5,-9,-8,-16,73,-2,42,-39,61,40,-17,-50,-9,1,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0038537222426384687, 0.0041427202522754669, 0.0046881311573088169, 0.008756149560213089, 0.0098338983952999115, 0.0057102576829493046, 0.0026644379831850529, 0.0039449175819754601, 0.01002898346632719, 0.0079221893101930618, 0.010180247016251087, 0.0046340129338204861, 0.010797311551868916, 0.0095343496650457382, 0.015503335744142532, 0.0071326247416436672, 0.0090947011485695839, 0.0073700989596545696, 0.0087186107411980629, 0.0028548603877425194, 0.0035408821422606707, 0.0022554330062121153, 0.006284231785684824, 0.0043629836291074753, 0.0035760544706135988, 0.0037034379784017801, 0.0071067712269723415, 0.0082409288734197617, 0.0031785534229129553, 0.019675754010677338, 0.015999423339962959, 0.011524751782417297, 0.0057613071985542774, 0.0071419388987123966, 0.010727935470640659, 0.018879823386669159, 0.016809770837426186, 0.0092103974893689156, 0.0096203042194247246, 0.0037076503504067659, 0.010388871654868126, 0.010792698711156845, 0.013244274072349072, 0.0043936180882155895, 0.014774450100958347, 0.0039724665693938732, 0.0047903587110340595, 0.010790349915623665, 0.028925763443112373, 0.0043426156044006348, 0.017480574548244476, 0.0069633214734494686, 0.0078737037256360054, 0.007583454716950655, 0.0084431469440460205, 0.0057914718054234982, 0.0061285602860152721, 0.016710571944713593, 0.0018180401530116796, 0.007393562700599432, 0.011648464947938919, 0.012057456187903881, 0.0042261239141225815, 0.0062669175677001476, 0.0050304671749472618, 0.0062744314782321453, 0.0096480958163738251, 0.011536527425050735, 0.0082422150298953056, 0.0050603183917701244, 0.0079808374866843224, 0.0044470997527241707, 0.011586061678826809, 0.0057762055657804012, 0.0082445535808801651, 0.01304587721824646, 0.0060122120194137096, 0.0042539313435554504, 0.002550934674218297, 0.0071456572040915489, 0.0089202607050538063, 0.010384206660091877, 0.0077443048357963562, 0.012161165475845337, 0.002551176818087697, 0.0045018745586276054, 0.0033825680147856474, 0.022213224321603775, 0.010708970949053764, 0.0049521224573254585, 0.013738174922764301, 0.001714436337351799, 0.0063652331009507179, 0.0043973997235298157, 0.011715984903275967, 0.013469886034727097, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2210, 8880, 18444, 35481, 18969, -4165, -1993, 6177, 34559, -4735, 11199, 3395, 12481, 13696, 26974, 1821, 2841, 9392, 20399, 8372, -179, 582, 12546, -1325, 7052, 100, 17835, 8027, 7311, 56153, 65724, 21861, 10501, -803, 12098, 3461, 1797, 4122, 27148, -1088, 12913, 10657, 43486, -4748, 36259, 10203, 7428, 20543, 84221, 13137, -733, 7604, -4069, -402, -2930, 8156, -977, 15293, 7081, 12634, 6206, 17790, 9145, 5815, 13233, 14282, 5754, -7416, 6984, -3583, 5554, 15054, 24084, 5591, -5959, -4780, 8231, 421, 3462, -1602, 19624, 14468, 7314, 21908, 3849, 498, 16898, 89200, 11779, 15682, 6220, -160, 8993, 10773, 5044, 18210, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00017736951122060418, 0.00016601856623310596, 0.0001031942229019478, 6.539774767588824e-05, 0.00015572148549836129, 0.00023783945653121918, 0.00041044686804525554, 0.00026119675021618605, 6.6592467192094773e-05, 0.0002859590167645365, 0.0002390559675404802, 0.00025107749388553202, 0.0001023061849991791, 0.00017030934395734221, 8.7494088802486658e-05, 0.00030766203417442739, 0.00016549069550819695, 0.0001322901516687125, 0.00010756801930256188, 0.00013993920583743602, 0.00026749738026410341, 0.00044579742825590074, 0.00015916708798613399, 0.00046847551129758358, 0.00036440207622945309, 0.00025981827639043331, 0.00012633930600713938, 0.00017415449838154018, 0.00022031518165022135, 6.2793624238111079e-05, 4.328187060309574e-05, 0.00011490668839542195, 0.00015864419401623309, 0.00025929635739885271, 0.00016547553241252899, 0.00016988463175948709, 0.00028363155433908105, 0.00035050170845352113, 9.7261130576953292e-05, 0.00052118516759946942, 0.0001446641399525106, 0.0001438573090126738, 6.2656712543684989e-05, 0.00022221356630325317, 9.0044391981791705e-05, 0.00014966973685659468, 0.00023193660308606923, 0.00013185142597649246, 4.8827576392795891e-05, 0.00015908177010715008, 0.00015455804532393813, 0.00022137786436360329, 0.00025799844297580421, 0.00016970152501016855, 0.00034974838490597904, 0.00013174500782042742, 0.00013341923477128148, 0.00012188364053145051, 0.00028516200836747885, 0.00011640773300314322, 0.00025968623231165111, 7.5899115472566336e-05, 0.00015970195818226784, 0.00017113093053922057, 0.00018822606944013387, 0.00013503457012120634, 0.00022931201965548098, 0.00017619926074985415, 0.00024323714023921639, 0.00020013774337712675, 0.00019198795780539513, 0.0001054547174135223, 8.7381224147975445e-05, 0.00018643504881765693, 0.00026062570395879447, 0.00027864694129675627, 0.00020390319696161896, 0.00025159495999105275, 0.00022370045189745724, 0.00023040588712319732, 0.00010223146819043905, 0.00011622329475358129, 0.00011746357631636783, 8.9630048023536801e-05, 0.00029786559753119946, 0.00018531156820245087, 0.00013829898671247065, 4.3407300836406648e-05, 0.0001196796220028773, 0.00014553010987583548, 0.00020812534785363823, 0.00030519667780026793, 0.00016458675963804126, 0.00015025523316580802, 0.00022756069665774703, 9.2192276497371495e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -3,56,-36,88,17,31,26,8,27,25,-68,89,17,-127,29,-112, 
  /* [1][0][][] */ 31,57,-12,-33,31,-39,127,-94,-3,70,-13,-27,-2,-35,35,21, 
  /* [2][0][][] */ -127,36,-57,-31,20,-11,83,122,-26,75,109,-10,-55,35,24,-54, 
  /* [3][0][][] */ -57,31,75,83,-28,73,86,127,37,104,-78,38,33,-67,-72,-90, 
  /* [4][0][][] */ 1,2,30,85,-23,75,8,33,24,-4,10,9,11,-14,-127,-34, 
  /* [5][0][][] */ -14,-20,71,-6,22,-14,8,28,-74,105,-28,-127,-27,32,-72,-36, 
  /* [6][0][][] */ 12,-2,27,-4,46,54,-62,-66,5,10,50,-1,127,-24,-19,-48, 
  /* [7][0][][] */ 30,26,127,-8,-8,-44,17,5,-59,45,-84,-34,21,4,46,-30, 
  /* [8][0][][] */ 27,16,127,89,-68,77,6,30,21,4,57,-103,-36,-7,-118,-83, 
  /* [9][0][][] */ 51,-127,82,40,26,-27,-9,22,87,10,81,-8,-26,7,-98,-31, 
  /* [10][0][][] */ -41,-105,23,-17,-79,9,-18,52,87,127,31,-46,-27,66,59,-24, 
  /* [11][0][][] */ 19,-8,37,-64,-4,-7,-84,-127,-50,14,10,-27,10,-34,20,-59, 
  /* [12][0][][] */ 8,-1,27,-42,-13,-34,-112,0,-29,-78,-18,18,32,127,68,28, 
  /* [13][0][][] */ -37,-103,-66,27,-16,-77,15,-23,58,27,-5,-16,5,-3,127,46, 
  /* [14][0][][] */ 2,-64,60,24,25,20,2,127,10,41,8,-38,14,34,-61,103, 
  /* [15][0][][] */ 27,-39,2,53,23,-7,108,-2,-8,-127,13,-51,5,-26,-4,-30, 
  /* [16][0][][] */ 33,-58,-35,21,11,11,23,-70,127,47,84,6,-4,101,63,89, 
  /* [17][0][][] */ -50,-74,64,86,117,17,-4,-24,127,-60,9,-19,-13,58,-87,35, 
  /* [18][0][][] */ -29,20,6,16,-127,-5,-13,40,-73,-39,-34,-75,-13,-123,53,14, 
  /* [19][0][][] */ 42,-48,83,-63,118,40,-115,46,127,-52,126,71,-29,54,62,101, 
  /* [20][0][][] */ 46,-26,67,-65,-1,1,-40,43,-19,-56,90,-20,14,10,-36,127, 
  /* [21][0][][] */ -70,-19,16,-48,34,25,-77,-49,-39,55,7,4,-127,-4,47,-8, 
  /* [22][0][][] */ 12,-29,36,-11,5,-46,-3,-22,-127,17,-2,-50,-27,-23,56,-14, 
  /* [23][0][][] */ 11,16,24,-10,0,17,-6,-8,-5,-2,51,-17,127,-9,8,-52, 
  /* [24][0][][] */ -30,22,0,-72,-54,-28,74,25,-54,14,-22,-127,11,-117,55,23, 
  /* [25][0][][] */ -71,-4,2,-28,76,-35,-97,-127,-19,31,17,-58,-92,-20,41,-25, 
  /* [26][0][][] */ 13,-28,72,-87,127,-30,-2,17,115,-56,40,-43,-12,99,-13,98, 
  /* [27][0][][] */ 94,-37,15,-24,-35,-51,-2,-28,-19,26,-127,20,8,-19,-3,32, 
  /* [28][0][][] */ -122,-4,-127,-64,48,-3,60,-47,9,53,-47,31,53,-22,-38,29, 
  /* [29][0][][] */ -53,-35,-11,127,8,8,-2,-64,-25,1,-74,51,12,-99,21,-70, 
  /* [30][0][][] */ 100,-24,127,-28,54,27,-55,102,-50,-103,47,-54,6,19,-92,102, 
  /* [31][0][][] */ 19,-89,9,-42,2,-52,29,-35,-4,61,104,34,-34,90,74,127, 
  /* [32][0][][] */ -11,74,-34,42,-127,22,-86,-37,-63,-42,1,48,19,54,30,72, 
  /* [33][0][][] */ 22,-7,21,127,15,8,18,-52,-105,52,66,-16,-1,-10,-3,94, 
  /* [34][0][][] */ 41,-19,28,-4,49,-53,-127,-30,-44,62,-13,15,-21,-3,23,-6, 
  /* [35][0][][] */ 59,15,-23,5,22,-127,-14,2,-17,4,-80,4,67,25,-4,8, 
  /* [36][0][][] */ 27,0,-127,13,42,8,-39,18,-38,-29,0,-11,3,10,-24,11, 
  /* [37][0][][] */ 1,6,127,-12,-59,24,25,-70,-14,35,-53,11,15,-11,5,-12, 
  /* [38][0][][] */ -127,16,-41,49,37,102,22,-56,42,19,118,-1,-26,-2,7,-28, 
  /* [39][0][][] */ -18,-10,19,26,39,-9,-127,31,11,32,6,-37,-7,-23,3,-10, 
  /* [40][0][][] */ -6,67,-5,127,21,37,39,20,-64,-30,-27,67,8,41,-73,-37, 
  /* [41][0][][] */ 1,38,-57,-25,-63,-11,127,96,-65,78,-51,-19,-8,75,22,6, 
  /* [42][0][][] */ 49,-19,-19,-36,3,18,-70,79,38,-126,127,11,-37,2,-67,7, 
  /* [43][0][][] */ -64,-9,48,-28,43,28,-93,-101,-50,27,4,-44,-127,-28,15,-12, 
  /* [44][0][][] */ 18,-6,-4,-5,11,-5,-4,-50,127,1,22,46,13,76,-6,35, 
  /* [45][0][][] */ -52,-79,-4,-80,49,8,9,67,36,-54,-19,-13,53,127,-25,102, 
  /* [46][0][][] */ -42,16,-32,76,-85,-21,-1,-72,-127,29,-54,-17,-9,23,7,-32, 
  /* [47][0][][] */ -18,-24,-102,127,17,53,-13,-36,17,63,52,64,-33,-14,29,-16, 
  /* [48][0][][] */ -38,-20,59,-127,44,-18,-12,9,-43,51,68,3,-34,93,121,33, 
  /* [49][0][][] */ -54,-4,38,127,-32,63,-60,12,6,-88,-121,-56,1,-48,-91,-106, 
  /* [50][0][][] */ 8,79,18,-127,63,7,-30,72,126,-38,-48,9,15,-49,21,-17, 
  /* [51][0][][] */ -2,-23,33,-6,31,-11,-40,-127,3,-68,7,-7,-16,-18,-9,-9, 
  /* [52][0][][] */ 12,16,-14,43,42,-1,-55,102,-85,127,-32,-35,75,109,4,-41, 
  /* [53][0][][] */ -15,94,-4,-73,-33,-6,42,-12,-43,-27,-44,70,13,-127,-89,-21, 
  /* [54][0][][] */ 3,18,14,25,52,-32,5,-38,-4,29,-14,-18,-11,127,-41,-14, 
  /* [55][0][][] */ -118,127,108,-31,47,10,-23,-2,-77,16,101,-41,-3,-10,112,2, 
  /* [56][0][][] */ 63,-11,7,-127,76,-16,-43,15,78,-56,39,121,-36,-13,90,68, 
  /* [57][0][][] */ -17,-3,19,63,-29,6,38,127,-13,13,9,-27,14,33,2,11, 
  /* [58][0][][] */ 25,118,7,-127,12,29,-22,33,107,-15,-3,81,-2,-86,29,80, 
  /* [59][0][][] */ 35,37,48,-127,-59,-19,24,-10,10,7,52,-78,-8,-116,-58,26, 
  /* [60][0][][] */ 44,-15,102,-33,-42,127,33,-37,-18,31,-55,-29,29,6,21,-11, 
  /* [61][0][][] */ -36,41,-54,-73,-81,30,126,127,-23,76,21,29,17,71,35,-35, 
  /* [62][0][][] */ -47,9,-21,-22,-113,22,-48,21,-12,-10,18,-48,4,-127,93,20, 
  /* [63][0][][] */ 21,-37,10,-81,46,8,-127,-123,-52,103,-19,19,54,-1,15,-59, 
  /* [64][0][][] */ -18,-14,35,61,89,-2,-47,-127,38,-116,-10,-35,6,-17,-11,-1, 
  /* [65][0][][] */ -127,32,30,-69,15,85,56,-50,-104,36,37,-26,10,21,-12,-21, 
  /* [66][0][][] */ 55,9,92,17,-38,15,-21,54,-33,-4,57,-89,-25,61,-127,-29, 
  /* [67][0][][] */ 10,-15,-46,98,47,-26,-71,-102,77,-127,-74,-7,-86,8,-108,6, 
  /* [68][0][][] */ -18,-36,-86,55,-75,-68,36,-52,-38,16,44,-64,-32,47,127,-22, 
  /* [69][0][][] */ -55,48,-90,77,-32,-127,44,64,22,24,57,-17,117,7,-27,-14, 
  /* [70][0][][] */ 9,21,-49,-56,-44,22,127,89,-12,59,-13,28,14,57,28,3, 
  /* [71][0][][] */ 23,8,-42,-73,48,-9,24,76,-22,-39,-19,1,13,-127,95,26, 
  /* [72][0][][] */ 23,26,-10,20,17,-49,-52,-127,5,41,-50,2,41,48,27,57, 
  /* [73][0][][] */ -26,-127,-36,-81,-66,-36,40,-22,-11,16,-37,-23,25,-41,69,-17, 
  /* [74][0][][] */ -30,25,66,96,-8,11,-127,90,33,-33,-34,-53,-1,-4,-9,-5, 
  /* [75][0][][] */ -50,25,-42,15,-19,84,78,127,13,55,-4,-33,-114,75,19,20, 
  /* [76][0][][] */ 25,-36,-42,-40,55,-73,-127,-90,-31,-30,-2,-17,56,12,81,-18, 
  /* [77][0][][] */ -26,21,-51,-41,-67,-12,5,-46,127,15,-83,3,0,33,36,-101, 
  /* [78][0][][] */ -79,-127,8,69,82,50,-42,35,-12,-78,-111,53,49,-14,86,69, 
  /* [79][0][][] */ 38,-13,51,-49,127,11,38,19,72,14,14,26,2,-19,19,-40, 
  /* [80][0][][] */ -9,-37,53,-95,-29,-42,-6,17,-75,-57,-27,-43,11,127,-32,22, 
  /* [81][0][][] */ 28,-7,42,37,26,52,-42,-9,8,-16,-7,-32,10,58,-127,10, 
  /* [82][0][][] */ -119,-14,27,-91,-33,-7,12,-61,-31,-30,-48,-118,-25,-127,-97,23, 
  /* [83][0][][] */ -3,3,-1,-76,-48,19,-6,25,-89,21,26,-69,21,-127,7,47, 
  /* [84][0][][] */ 127,30,26,38,-29,6,-57,40,-14,-37,109,11,-50,23,86,-88, 
  /* [85][0][][] */ -3,-18,23,-43,40,-13,-42,95,-61,-99,-66,-25,-25,68,90,-127, 
  /* [86][0][][] */ 13,24,0,-1,-63,60,-60,32,-104,-72,19,-44,-10,-127,0,59, 
  /* [87][0][][] */ 127,-27,24,-15,-42,-26,-9,-12,-9,10,-98,1,32,-1,8,38, 
  /* [88][0][][] */ 33,84,-27,-7,-16,-32,1,-2,100,27,29,32,-22,-28,121,-127, 
  /* [89][0][][] */ 29,72,-104,-21,-55,-26,40,-60,43,48,32,-39,-37,-6,-14,-127, 
  /* [90][0][][] */ -21,-50,20,-69,-54,34,127,-69,104,-72,35,-73,44,0,-43,-21, 
  /* [91][0][][] */ 28,-4,-40,-117,-43,-15,22,-58,-50,14,56,49,5,-35,38,127, 
  /* [92][0][][] */ 37,13,19,4,77,-31,-85,-127,64,-73,-8,-27,-43,-9,-3,-26, 
  /* [93][0][][] */ 57,-1,51,-127,-56,7,-34,38,29,-92,99,-33,-50,102,-39,42, 
  /* [94][0][][] */ -90,58,-94,11,61,-127,-15,12,-4,-33,77,-23,-3,9,-12,-1, 
  /* [95][0][][] */ -42,93,8,-127,-21,-14,-15,-10,10,-46,-83,-108,-18,24,-83,1, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00069372175494208932, 0.00064932630630210042, 0.00040360982529819012, 0.00025578148779459298, 0.00060905271675437689, 0.00093022978398948908, 0.0016053261933848262, 0.0010215840302407742, 0.00026045425329357386, 0.001118433428928256, 0.00093498779460787773, 0.00098200596403330564, 0.00040013654506765306, 0.00066610827343538404, 0.0003422039735596627, 0.0012033175444230437, 0.00064726173877716064, 0.0005174088291823864, 0.00042071647476404905, 0.00054732558783143759, 0.0010462268255650997, 0.0017435881309211254, 0.00062252901261672378, 0.0018322858959436417, 0.0014252372784540057, 0.0010161926038563251, 0.00049413408851251006, 0.00068114727037027478, 0.00086168944835662842, 0.00024559634039178491, 0.00016928261902648956, 0.00044941922533325851, 0.0006204838864505291, 0.0010141512611880898, 0.00064720242517068982, 0.0006644471432082355, 0.0011093303328379989, 0.0013708706246688962, 0.00038040449726395309, 0.0020384420640766621, 0.00056580558884888887, 0.00056264991872012615, 0.00024506085901521146, 0.00086911430116742849, 0.00035217864206060767, 0.00058538332814350724, 0.00090714276302605867, 0.00051569292554631829, 0.00019097280164714903, 0.00062219536630436778, 0.00060450227465480566, 0.00086584576638415456, 0.0010090749710798264, 0.0006637309561483562, 0.0013679242692887783, 0.00051527668256312609, 0.00052182486979290843, 0.00047670723870396614, 0.0011153161758556962, 0.00045529005001299083, 0.0010156761854887009, 0.00029685409390367568, 0.00062462099594995379, 0.000669321627356112, 0.00073618354508653283, 0.00052814272930845618, 0.00089687755098566413, 0.00068914471194148064, 0.00095134100411087275, 0.00078277208376675844, 0.00075089692836627364, 0.00041245098691433668, 0.00034176255576312542, 0.00072917860234156251, 0.0010193506022915244, 0.0010898347245529294, 0.00079749943688511848, 0.00098402984440326691, 0.00087492977036163211, 0.0009011558722704649, 0.000399844313506037, 0.00045456868247129023, 0.00045941965072415769, 0.00035055808257311583, 0.0011650020023807883, 0.00072478444781154394, 0.00054091040510684252, 0.00016977319319266826, 0.00046808697516098619, 0.0005691925180144608, 0.00081401295028626919, 0.0011936750961467624, 0.00064372626366093755, 0.00058767327573150396, 0.00089002784807235003, 0.00036057937541045249, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 2792, 3740, -4645, 23176, 26849, -136, -15495, -9504, 19303, 5434, 24566, 17119, -13326, 12245, 35347, -33965, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00043293970520608127, 0.00024873833172023296, 0.00024873449001461267, 0.00022414105478674173, 0.00032730336533859372, 0.00034553359728306532, 0.00027107034111395478, 0.0004173862689640373, 0.00018839199037756771, 0.00024883734295144677, 0.00038957176730036736, 0.00065957830520346761, 0.00042756687616929412, 0.00042249678517691791, 0.00045803471584804356, 0.00029204669408500195, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -10,16,-13,18,40,77,-34,-21,46,-2,16,4,-2,7,20,72,15,-6,-1,-14,91,-58,-1,-22,-27,-35,-46,-106,-4,-6,53,37,125,-4,2,-12,11,-17,-28,18,-27,11,16,-37,13,-30,-20,20,-10,11,3,0,-33,-1,3,-3,49,30,-23,-28,-73,33,-7,-15,11,1,51,5,14,0,5,-19,-73,-6,-14,-2,-13,-90,6,-25,36,-29,-54,-49,21,-22,6,18,-4,12,13,-40,34,15,-15,127, 
  /* [1][0][][] */ 75,-116,52,73,-18,-57,-20,-49,-24,-97,2,19,10,-75,-38,-53,-77,-1,36,19,-27,-117,-51,14,127,-73,-85,23,-38,92,-13,66,-6,7,-42,17,-16,-3,44,-54,7,-70,74,-46,-59,8,50,-11,49,22,-17,-63,75,-98,31,-43,46,40,-35,-114,49,-74,9,-47,14,-101,27,41,33,72,-30,13,-112,33,-5,62,39,113,25,-34,38,7,-90,32,-86,82,11,60,-41,13,-1,12,13,-62,26,-5, 
  /* [2][0][][] */ 18,21,7,-33,9,-5,-14,42,71,-16,22,62,13,7,41,17,-17,-4,10,-10,-28,-68,14,-49,1,-15,-30,19,-15,23,114,-66,29,-65,-34,45,13,127,-36,-12,9,-27,-6,35,-38,-62,-58,14,19,21,-25,-27,36,4,3,-21,-34,0,2,21,-3,15,86,92,4,-87,14,-84,-18,-7,-20,1,-12,15,-31,20,6,50,5,4,15,103,23,-13,-12,-2,-2,-1,21,17,5,-59,-37,-2,-2,51, 
  /* [3][0][][] */ -7,-26,-32,46,31,-28,-3,-17,-21,27,-9,2,-6,-7,41,-25,50,-46,13,16,-13,1,-7,12,-12,18,18,1,16,-35,59,-21,1,-15,-11,59,-15,-21,-4,20,1,-71,26,-24,-11,8,10,7,-127,38,-7,26,-127,-38,-18,-33,18,2,0,49,-1,6,8,14,-16,-80,-30,15,50,21,2,18,-29,11,-16,-39,-60,-49,27,-28,23,-27,25,74,43,47,49,23,34,-23,0,15,-39,3,-6,-22, 
  /* [4][0][][] */ -7,-24,23,-69,8,-18,-51,8,-20,-50,-34,-4,15,66,2,8,45,-22,13,0,-14,27,43,2,-13,-11,12,2,5,-10,7,-15,-25,3,-3,18,34,-20,4,2,19,11,-100,-35,29,-11,-19,-8,4,89,-12,-18,-24,-15,8,-2,-4,-36,35,35,9,14,12,-14,31,-122,23,-22,-51,11,-13,-7,-12,9,-32,33,-11,63,62,-6,11,-7,127,-42,38,-21,-20,-14,69,16,6,18,-26,33,3,-45, 
  /* [5][0][][] */ 2,-1,-3,4,-3,-20,-2,101,48,-21,-23,-22,-18,28,33,22,-18,-3,-3,-28,-37,-8,6,-39,16,12,27,81,59,14,61,37,-52,27,-3,-4,-47,-62,-18,-22,-45,-18,-8,2,54,12,14,16,13,7,-20,3,-34,-7,10,-13,-37,-26,-4,39,-45,17,-32,-37,15,22,-21,3,-1,22,2,-19,35,20,7,0,-5,19,10,127,1,-43,28,32,15,2,25,-22,-2,-33,17,-115,-45,-15,-9,-108, 
  /* [6][0][][] */ -19,-4,-1,-52,-5,-16,-10,10,-9,19,-23,7,25,-58,11,-21,2,-68,22,15,11,8,-14,31,86,-3,4,5,19,-5,15,-5,-34,10,-18,9,17,-5,28,25,-12,-25,-44,-13,-1,-19,36,-127,32,38,12,6,2,1,-4,-56,41,-3,-10,14,25,10,-10,16,43,76,31,-12,-12,-12,24,-17,20,19,57,-8,-26,32,4,15,-14,-9,56,-24,5,56,32,-11,21,-5,-43,1,-31,15,-14,23, 
  /* [7][0][][] */ 17,11,32,-25,-4,7,-8,-20,1,-9,-17,-7,-10,-81,31,4,2,-28,-21,-9,9,-19,-30,-4,-16,-4,7,-18,7,15,9,-2,-18,10,-9,-10,-2,-17,-22,12,9,-17,-20,33,-3,16,-9,77,-3,24,-14,-22,-33,7,1,-58,35,0,3,-1,-7,0,-21,-2,-13,44,21,-22,-8,-9,2,35,-4,-2,-11,8,46,5,1,-11,8,-36,34,7,-29,127,10,5,-34,-31,-5,21,-28,3,-10,10, 
  /* [8][0][][] */ -89,57,-43,5,28,2,-17,27,17,77,-57,29,15,50,79,-17,-5,32,-107,30,18,43,-41,0,-58,-27,27,14,55,-107,10,10,16,14,28,3,-23,23,-61,72,-1,31,7,-127,-39,-2,72,-5,-40,32,10,60,-124,105,5,5,17,-8,-18,-29,-8,-54,8,27,-33,37,43,-43,5,-13,47,104,-18,26,53,22,1,-96,-3,-24,-6,-22,29,13,-71,-8,23,-34,2,34,-30,19,35,9,-6,2, 
  /* [9][0][][] */ 23,-50,-38,-37,13,15,-21,27,35,-10,0,3,-40,-22,4,35,-14,13,22,-19,-30,1,-17,-36,40,11,20,-7,-32,-45,-29,-2,-12,9,18,24,2,53,-25,31,11,4,-16,-74,11,-14,34,-127,-41,-3,10,18,-2,6,-17,17,-52,19,-22,3,13,16,16,36,22,109,38,37,6,-3,6,-29,-5,1,-36,14,66,-1,6,16,-6,15,5,-43,4,20,-16,2,-52,40,-29,-8,8,2,10,-32, 
  /* [10][0][][] */ 40,40,-17,27,63,-119,-18,-18,16,46,29,5,-21,23,12,-63,8,45,-16,46,-71,1,0,-26,-62,-19,-52,59,11,11,1,30,-21,-19,33,-8,84,-13,3,-17,-24,62,35,-20,-60,-22,-41,19,-22,-23,-35,-6,-19,-18,8,-15,1,17,-38,-31,9,14,-27,30,29,47,54,15,25,9,29,41,-45,-13,-38,-10,8,41,-23,0,36,5,-72,-36,67,-41,83,-5,-15,11,8,-8,62,34,-22,-127, 
  /* [11][0][][] */ 44,46,-22,26,-7,10,51,3,-4,-12,-28,-4,-9,6,42,1,-10,-9,-107,-1,6,27,4,-2,-42,-16,-6,5,3,17,-4,5,-14,7,13,26,9,8,-4,28,-1,28,59,-90,20,-33,12,2,-127,13,12,-56,24,30,-6,15,-9,-18,13,-3,13,-24,-9,8,-48,56,-8,6,24,-8,26,22,-42,-31,11,27,1,-28,-48,16,16,-2,83,46,5,-19,-9,-3,-8,18,-9,6,-3,16,-13,19, 
  /* [12][0][][] */ -41,5,9,3,-34,38,17,3,127,1,-22,2,5,7,-45,-53,23,18,15,78,51,33,-17,-25,2,9,23,-39,-105,4,41,-46,13,2,-8,-12,10,-14,34,-11,-51,-13,-2,16,10,37,16,-1,29,12,-53,13,-6,8,3,-8,73,-17,28,32,7,-25,4,-19,-11,30,-42,13,-3,-5,-13,-34,13,18,-78,-1,20,-21,16,-53,-23,-9,52,50,-22,-14,-21,-31,13,7,7,52,-21,-13,22,21, 
  /* [13][0][][] */ 29,-10,-26,33,29,-8,7,6,-5,0,5,-4,16,-9,2,-15,14,-67,-36,17,-17,-22,12,3,9,7,-4,-7,-16,-29,-3,13,5,8,8,46,18,-8,10,25,-6,3,20,43,21,19,-9,-127,23,-8,11,5,-20,5,15,8,-20,11,22,9,4,18,-10,1,-11,-15,-15,-59,4,14,-14,-39,-11,41,-18,15,-28,5,13,1,33,-15,-10,20,8,25,3,14,-3,1,25,-12,-3,19,-8,-10, 
  /* [14][0][][] */ -114,-60,36,34,35,-26,-35,8,-23,10,-8,8,51,4,-127,8,79,-25,-5,37,-4,-10,26,14,-112,5,25,-8,-44,-77,-27,9,-3,-3,33,-63,38,41,-5,11,17,43,-13,-42,23,110,56,67,-99,64,1,31,-42,-19,38,-9,21,0,48,62,41,47,2,47,10,-20,-47,41,1,77,-45,-73,-79,-2,3,48,9,51,92,-11,48,9,19,22,51,21,46,20,31,35,56,-8,1,25,13,-33, 
  /* [15][0][][] */ 90,-11,38,13,-7,71,32,-25,-20,49,2,12,-94,-5,-8,26,4,33,40,-13,5,21,-79,66,27,9,52,-7,26,48,-52,-80,14,-41,36,9,33,-45,-49,-111,-11,26,8,45,5,57,-16,-28,99,-36,-54,20,35,-106,67,-114,-4,-58,28,30,-127,-9,13,17,72,-11,-49,53,-24,56,-34,17,49,30,9,0,12,-63,65,-2,-10,-5,43,89,-17,-4,13,-44,-1,-12,83,1,-68,67,25,-4, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018399937078356743, 0.010571378283202648, 0.01057121530175209, 0.0095259947702288628, 0.013910392299294472, 0.014685178175568581, 0.011520489118993282, 0.017738915979862213, 0.0080066593363881111, 0.010575586929917336, 0.016556799411773682, 0.028032077476382256, 0.018171591684222221, 0.017956113442778587, 0.019466474652290344, 0.01241198368370533, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10341, -9220, 3002, 56895, -2003, -4281, -11201, 3529, -3092, 1058, 2807, -1939, 1552, -6656, 5969, -6658, -748, 16842, 25285, 3219, 961, -2407, -781, 136, 16978, -2126, -1105, -3183, -6108, -7711, 6560, -9097, -10, -1029, 375, 18041, 1502, -2330, 18863, 149, -174, 2379, -10316, -8045, -7982, 68337, -977, 17218, 36455, -12307, 390, 9153, 8281, -1, -6341, 1884, -11584, 1394, 2400, -7101, -1059, -687, -11309, -569, 1610, 16504, 28506, 29970, -12217, 319, -7583, -1408, 39198, 9275, -239, 1369, 18996, 34175, -974, -6019, -1539, -5518, 550, -3171, 893, -99, 1174, -856, 1918, -3701, 563, -1411, 200, -395, 592, 49315, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018161880143452436, 0.00011286535300314426, 0.00019550652359612286, 3.7281308323144913e-05, 0.0001442808861611411, 0.00017308456881437451, 0.00026105382130481303, 7.5284420745447278e-05, 0.00012831832282245159, 0.00041476800106465816, 0.00014126354653853923, 0.00031377069535665214, 0.00010643913992680609, 0.00039173540426418185, 0.00017118381219916046, 0.00012284156400710344, 9.5907926151994616e-05, 0.00030762885580770671, 7.0849782787263393e-05, 0.00018191509298048913, 4.5455384679371491e-05, 0.00018155186262447387, 0.00012374731886666268, 0.00035692859091795981, 0.00021209314581938088, 0.0001988237927434966, 0.00012431507639121264, 0.00016831347602419555, 0.00011291142436675727, 0.00010597284563118592, 0.00013108135317452252, 0.00017870102601591498, 0.00012418652477208525, 0.00010860675683943555, 0.00020591919019352645, 0.00013065978419035673, 0.00031851255334913731, 0.00011766725219786167, 4.9085720092989504e-05, 0.00014954656944610178, 0.00018449273193255067, 0.00031972237047739327, 0.00029810878913849592, 0.00015145976794883609, 0.0001631751365493983, 4.5787121052853763e-05, 0.00020261533791199327, 0.00019434881687629968, 7.2640694270376116e-05, 0.00017856260819826275, 0.0002065068983938545, 0.00013689552724827081, 0.00021662549988832325, 0.00026279425946995616, 0.00023634194803889841, 0.00038133922498673201, 0.00032989462488330901, 0.00019619625527411699, 0.00010766903142211959, 8.037109364522621e-05, 0.00034056647564284503, 0.00014151267532724887, 0.00028440504684112966, 0.00011949548934353516, 0.00017399049829691648, 0.00017629547801334411, 9.0512403403408825e-05, 5.9346297348383814e-05, 0.00032566842855885625, 0.00021631676645483822, 0.00021019927226006985, 9.3102098617237061e-05, 0.00014951154298614711, 0.00013609757297672331, 0.00015551281103398651, 0.00023768226674292237, 0.00052663427777588367, 5.1903578423662111e-05, 0.00024656590539962053, 0.00031419211882166564, 0.00015765888383612037, 0.00039219969767145813, 0.00013384758494794369, 0.00013251355267129838, 0.00012127017544116825, 9.8204756795894355e-05, 0.00012733941548503935, 0.00015235877071972936, 0.00019953827722929418, 0.00010266130266245455, 0.0001873021392384544, 0.0001132804827648215, 0.00014095424558036029, 0.00042910402407869697, 0.0022162650711834431, 7.5661249866243452e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,7,-20,105,-17,22,-64,-54,18,-6,99,-9,3,-8,-5,59,4,16,-35,2,74,2,33,-32,2,17,42,48,21,13,23,47,-6,26,10,-15,5,48,-61,-26,19,8,26,18,-85,-56,26,-5,-12,-21,-7,-7,48,5,-9,3,-4,-36,26,-29,28,-3,127,27,-13,-11,12,-54,66,35,1,-7,78,-33,70,3,16,-127,30,61,2,18,127,-13,38,31,-29,-18,35,-5,-15,83,1,19,-3,13, -48,12,-7,10,53,-9,-12,-127,39,13,-127,-5,-17,-13,4,96,19,-29,-11,-17,78,-95,127,27,-63,-32,-104,-15,27,36,-50,18,118,11,-14,0,-24,127,-68,-127,7,-19,-31,14,46,-127,127,-44,-78,50,49,7,38,-65,32,57,35,43,-103,81,127,32,4,-20,44,-38,-94,-3,37,-32,-18,47,-48,-48,110,-5,-30,-59,-34,61,-67,66,-16,9,-11,50,56,-40,-28,55,-13,74,-127,-32,22,-127, 1,-3,-22,-74,8,18,37,21,-4,-3,4,61,0,-13,-11,10,-13,17,-18,16,8,24,24,-32,1,-31,9,11,-7,5,45,-78,44,16,9,-22,11,5,-33,-22,6,2,-17,9,22,-31,21,1,6,-9,5,-5,5,4,-5,9,-7,45,5,-4,11,-18,3,-17,-27,-18,31,-52,-107,-8,39,-16,-127,-23,-10,15,10,-11,6,10,-15,25,-37,-4,-41,21,26,37,-26,-16,24,-10,19,6,-3,-45, 
  /* [0][1][][] */ -41,59,-18,38,-86,-16,-12,-45,25,96,-45,-22,-30,-25,-7,64,127,-23,-89,-14,61,-127,-27,16,-36,-47,-127,-5,38,35,-50,26,-127,-74,-58,3,65,-3,-49,46,-20,85,0,-2,34,-55,-11,-32,127,43,-3,21,44,10,-37,-17,30,9,-127,127,-36,-89,19,127,-60,-35,-83,127,-37,127,-19,54,-35,-55,37,7,-36,-69,127,47,127,34,6,-2,127,28,-96,48,-37,-34,-103,42,95,102,28,-57, 127,127,127,127,-46,-127,127,22,127,-127,17,-127,-105,127,127,127,-15,-127,-61,-127,127,24,-65,127,127,127,-56,-127,127,127,-127,127,-10,-127,-126,127,-127,-46,98,109,-127,-127,127,127,127,-122,-105,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-107,-29,-68,-69,127,127,-70,127,127,-108,-127,127,-42,127,-127,-127,-127,126,-73,127,-44,127,82,127,-39,-127,-23,-108,-127,-125,-24,-127,-22,-127,-127,116, -23,66,-38,2,127,70,-23,48,5,23,-13,-6,-25,-31,-13,-5,-104,-22,-127,37,32,77,-12,-117,-34,-41,120,70,11,36,71,9,127,-47,127,-4,54,5,-92,14,35,23,-23,2,-24,-55,-11,-43,81,13,-12,40,-5,-4,-75,-13,24,20,126,-89,3,127,0,-37,-112,-29,-74,99,14,-18,110,26,-18,-57,14,45,-29,-8,-42,-3,-48,8,47,23,-90,34,127,-48,31,-21,127,-9,-110,34,33,19, 
  /* [0][2][][] */ -5,-39,-22,-61,-5,14,39,30,-2,10,-18,53,25,-34,-8,5,41,3,10,21,-8,29,-15,-25,1,-24,7,4,-9,-6,49,-74,-39,67,-29,-26,31,-35,-62,17,9,8,-35,18,12,-81,-11,-1,-9,7,17,-8,7,1,-21,7,-1,45,-52,34,-4,-14,4,17,-7,-9,22,-51,-56,11,-22,-12,-117,-31,-1,16,14,-10,57,16,21,20,-40,15,11,25,-20,9,6,26,21,-5,20,41,-7,-30, -29,-10,-26,24,-45,75,-26,64,6,-6,56,-11,127,-6,-19,-18,0,-38,-63,22,-20,79,-42,-111,-48,-47,98,70,15,43,53,-1,-126,62,-15,-23,-28,-29,-127,-4,45,-14,-15,35,-28,-46,-17,-48,-59,29,67,24,-12,-79,31,52,19,27,72,-54,20,-59,-8,0,18,-26,-127,-53,-10,-28,-64,22,35,-47,-31,-8,-46,25,-54,-1,48,32,18,11,4,61,-91,127,15,127,-32,-18,111,-21,45,81, -10,-34,-25,28,13,64,-45,12,3,-7,0,14,12,-50,-10,-15,-44,-6,15,18,-23,5,-19,3,-3,18,-4,51,-2,-5,34,29,18,42,19,-23,-6,-26,-28,8,12,-12,21,8,-75,-35,-12,4,-1,-16,-2,-4,-8,8,-17,-5,-2,-50,12,-28,-21,48,10,-29,-11,-2,35,-53,46,6,51,-21,29,-55,-17,20,11,12,-4,21,-31,29,89,-15,-19,53,39,-10,106,13,1,-18,11,-23,-7,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0077187991701066494, 0.0047967773862183094, 0.0083090271800756454, 0.0015844556037336588, 0.0061319372616708279, 0.0073560941964387894, 0.011094787158071995, 0.0031995878089219332, 0.0054535288363695145, 0.017627639696002007, 0.0060037006624042988, 0.013335254043340683, 0.0045236633159220219, 0.016648754477500916, 0.0072753117419779301, 0.0052207661792635918, 0.0040760869160294533, 0.013074225746095181, 0.0030111155938357115, 0.0077313915826380253, 0.0019318538252264261, 0.0077159539796411991, 0.0052592610009014606, 0.015169464983046055, 0.0090139582753181458, 0.0084500107914209366, 0.0052833906374871731, 0.0071533224545419216, 0.0047987354919314384, 0.0045038457028567791, 0.0055709574371576309, 0.0075947935692965984, 0.0052779274992644787, 0.0046157869510352612, 0.0087515655905008316, 0.0055530406534671783, 0.013536783866584301, 0.0050008581019937992, 0.0020861430093646049, 0.006355728954076767, 0.0078409407287836075, 0.013588200323283672, 0.012669623829424381, 0.0064370399340987206, 0.0069349431432783604, 0.0019459526520222425, 0.0086111519485712051, 0.0082598244771361351, 0.003087229561060667, 0.0075889104045927525, 0.0087765427306294441, 0.0058180596679449081, 0.0092065837234258652, 0.01116875559091568, 0.01004453282803297, 0.01620691642165184, 0.014020521193742752, 0.0083383405581116676, 0.0045759337954223156, 0.0034157712943851948, 0.01447407528758049, 0.0060142888687551022, 0.012087214738130569, 0.0050785583443939686, 0.0073945960029959679, 0.0074925576336681843, 0.0038467771373689175, 0.0025222175754606724, 0.01384090818464756, 0.0091934623196721077, 0.008933468721807003, 0.0039568389765918255, 0.0063542402349412441, 0.0057841469533741474, 0.0066092945635318756, 0.010101496241986752, 0.02238195575773716, 0.002205902012065053, 0.010479050688445568, 0.013353165239095688, 0.0067005022428929806, 0.016668487340211868, 0.0056885224767029285, 0.0056318258866667747, 0.0051539824344217777, 0.0041737020947039127, 0.0054119247943162918, 0.0064752479083836079, 0.0084803765639662743, 0.0043631051667034626, 0.0079603409394621849, 0.004814420361071825, 0.0059905550442636013, 0.018236920237541199, 0.094191260635852814, 0.0032156030647456646, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 21615, 1983, 8242, -749, 7159, 7941, 25789, 8456, -1727, 25198, 8641, 2126, 10369, 47408, -444, -2322, 16928, 15444, 2645, -174, -922, 17243, 5434, 4480, 14120, 6439, 6343, 7148, 62, -121, 10514, 13647, 21947, 2753, 9838, -648, 29083, 7858, 946, 7960, 1037, 16403, 20149, 6326, 3831, 16113, 24302, 5936, 6029, 3872, 470, -960, 18723, 10282, 12921, 16847, -444, 8821, 4522, 5525, 19413, 9255, 3422, 7559, 9657, 5968, 7246, -1224, 26262, 9060, 16409, -1638, -2591, 4277, 2364, 4988, 30266, 18510, 20313, -3523, 7624, -7381, -2372, 798, 8480, 6913, 11110, 7640, 15974, 6560, 13145, 5882, 20206, 28785, -10859, 21314, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00012104996858397499, 0.00015937359421513975, 0.00016210894682444632, 0.00074180989759042859, 0.00022455910220742226, 0.00011447435826994479, 0.00012253651220817119, 0.00041713396785780787, 0.00025073284632526338, 7.1578964707441628e-05, 0.00016395706916227937, 0.00037212661118246615, 0.00026490841992199421, 0.00010200076940236613, 0.00016170083836186677, 0.00028769424534402788, 0.0001323650503763929, 0.00015238212654367089, 0.00017189170466735959, 0.00058969540987163782, 0.0002562635054346174, 0.00014440859376918525, 0.00026784586952999234, 0.00017397975898347795, 0.00012334367784205824, 0.0003236772317904979, 0.00022944703232496977, 0.00013168540317565203, 0.00063373876037076116, 0.00025120357167907059, 0.00013772639795206487, 0.00013719557318836451, 8.8356966443825513e-05, 0.00039584585465490818, 0.00017136325186584145, 0.00042873108759522438, 7.752107921987772e-05, 0.00033318303758278489, 0.00046861445298418403, 0.00012445890752132982, 0.00049454544205218554, 0.00011570129572646692, 0.00010720035061240196, 0.00011945721780648455, 0.00029775564325973392, 0.00020121734996791929, 0.00011814278695965186, 0.00024276514886878431, 0.00026314376736991107, 0.00023067188158165663, 0.00030601833714172244, 0.00068684900179505348, 0.00014149628987070173, 0.00015781445836182684, 0.00018267014820594341, 0.00010803249460877851, 0.00033596126013435423, 0.00019569569849409163, 0.00017644968465901911, 0.00029844450182281435, 8.5783525719307363e-05, 0.00014730497787240893, 0.00029744472703896463, 0.00036898063262924552, 0.00010895271407207474, 0.00019285424787085503, 0.00026678064023144543, 0.00029438632191158831, 0.00010246009333059192, 0.00012945261551067233, 0.00012279771908652037, 0.00027721055084839463, 0.00015135205467231572, 0.00030104629695415497, 0.00017507873417343944, 0.00025928538525477052, 7.8483077231794596e-05, 0.0002408109576208517, 8.0683872511144727e-05, 0.00034897940349765122, 0.00014496617950499058, 0.00028448796365410089, 0.00016824912745505571, 0.00032783625647425652, 0.00019068013352807611, 0.00022262107813730836, 0.000146328384289518, 0.00018076978449244052, 0.00010564419790171087, 0.00024008250329643488, 0.00010749591456260532, 0.00028456779546104372, 0.00010364143963670358, 9.5138857432175428e-05, 0.0002706738596316427, 0.00015504589828196913, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 37,-30,127,87,59,-32,41,-30,117,-14,-49,-86,28,97,-27,-69, 
  /* [1][0][][] */ 23,106,-32,9,79,-4,19,10,50,103,-36,127,-25,-43,99,-119, 
  /* [2][0][][] */ 2,-43,-13,16,-36,38,-50,68,-53,-62,10,78,-23,-127,50,-99, 
  /* [3][0][][] */ 127,107,-9,25,-114,-22,-63,-18,-6,-7,87,-75,-40,84,-34,-23, 
  /* [4][0][][] */ 5,-20,49,-3,-8,36,-40,37,-67,-74,10,-6,-30,-127,32,-17, 
  /* [5][0][][] */ 107,-45,-3,-2,-3,-102,-32,4,-11,-6,-127,-11,30,-2,6,34, 
  /* [6][0][][] */ -117,-60,4,94,-59,5,-52,21,-127,-91,-54,-55,2,42,-3,85, 
  /* [7][0][][] */ -25,14,-87,53,44,-127,-33,37,5,-38,22,-14,-8,13,-44,7, 
  /* [8][0][][] */ 22,-47,-7,-14,15,39,-65,-70,-23,16,-65,19,-127,-5,1,22, 
  /* [9][0][][] */ 34,-65,44,126,-6,17,6,-59,127,-96,-13,-17,-1,49,-75,35, 
  /* [10][0][][] */ -104,-70,-27,-57,118,19,29,90,127,-69,-108,55,111,-85,-115,93, 
  /* [11][0][][] */ 53,-17,-127,20,53,40,-19,58,-12,-25,-7,-1,10,32,-40,11, 
  /* [12][0][][] */ 111,-57,-8,10,-7,-44,-46,-12,40,10,-127,-10,-37,-4,-4,60, 
  /* [13][0][][] */ 20,-56,27,-87,84,25,-94,-127,58,-70,43,10,23,2,30,42, 
  /* [14][0][][] */ -71,46,-103,-45,86,-127,77,-80,67,65,3,-118,13,113,-24,19, 
  /* [15][0][][] */ 14,3,73,29,33,-28,-23,-17,6,-69,-52,-20,-127,-63,-20,39, 
  /* [16][0][][] */ -124,70,-1,-9,-5,100,47,74,-31,36,127,12,-14,11,-5,-45, 
  /* [17][0][][] */ -4,0,-36,-29,-25,5,29,72,-26,127,-18,17,2,77,67,-11, 
  /* [18][0][][] */ 15,127,-64,3,13,-19,28,-76,34,85,-62,80,17,-34,38,-81, 
  /* [19][0][][] */ -2,-7,27,8,-1,42,-3,6,9,0,-37,-16,-127,3,-6,33, 
  /* [20][0][][] */ 91,-73,-2,-104,-11,8,11,-96,-62,19,-127,-35,31,9,53,2, 
  /* [21][0][][] */ 42,3,127,64,-35,64,42,-8,-2,38,-16,-19,-20,70,-4,-20, 
  /* [22][0][][] */ 19,-1,25,1,-19,-10,13,127,19,-1,18,20,-5,44,27,28, 
  /* [23][0][][] */ -11,14,-67,9,28,-127,-1,36,-4,-29,-15,-18,-67,13,-4,28, 
  /* [24][0][][] */ 29,-54,5,-63,69,-3,-27,-22,42,32,72,90,-60,92,127,33, 
  /* [25][0][][] */ -127,-109,-36,4,11,7,4,-29,-56,-6,-78,8,29,49,34,53, 
  /* [26][0][][] */ 2,5,33,-3,-18,16,-21,51,-72,-50,-1,5,4,-127,42,-8, 
  /* [27][0][][] */ -118,50,-54,42,47,-28,-1,20,42,-24,127,33,-25,2,-20,-34, 
  /* [28][0][][] */ -20,-1,16,26,-7,1,13,70,27,19,-28,-14,-127,-12,-5,36, 
  /* [29][0][][] */ -17,68,29,-28,32,-14,26,-30,-127,39,-29,0,-3,24,-82,6, 
  /* [30][0][][] */ -3,-7,-127,-53,29,-81,-9,27,-33,-28,-11,-24,-38,-17,17,23, 
  /* [31][0][][] */ 127,-34,-112,5,40,-5,-31,49,-23,-3,-83,-38,12,-18,-71,34, 
  /* [32][0][][] */ -123,38,23,33,7,88,14,18,11,-7,127,-6,-39,9,-16,-25, 
  /* [33][0][][] */ 1,-13,127,-9,-80,35,13,-41,0,25,0,33,-9,20,27,15, 
  /* [34][0][][] */ -24,-8,-64,-103,19,4,18,-11,-29,-57,-31,-127,-11,2,35,12, 
  /* [35][0][][] */ -3,-23,45,36,55,-25,18,-26,-119,33,2,18,-26,127,-36,-42, 
  /* [36][0][][] */ -127,62,-40,-2,-12,41,54,92,1,32,120,-16,-1,15,11,-22, 
  /* [37][0][][] */ -45,-1,127,-20,-81,-55,10,-45,10,4,3,-8,-12,-52,54,3, 
  /* [38][0][][] */ 6,-7,-4,31,38,-43,-65,-1,-12,-13,69,-25,127,22,-17,0, 
  /* [39][0][][] */ -9,0,-22,-45,-60,-94,86,127,-50,-4,-8,-40,27,23,64,79, 
  /* [40][0][][] */ 70,-13,-31,-5,2,86,-20,8,27,5,11,5,127,5,-38,-22, 
  /* [41][0][][] */ -7,-3,-48,-127,31,-5,-21,-74,-13,-54,6,-43,-19,-26,-26,30, 
  /* [42][0][][] */ 49,41,13,107,-127,-12,-108,1,-90,-82,65,-73,-32,100,-61,17, 
  /* [43][0][][] */ 5,118,-17,127,20,36,53,-73,-50,87,8,29,-2,-35,34,26, 
  /* [44][0][][] */ -3,-18,-127,18,57,70,-55,53,-23,-23,34,-17,5,-33,-51,5, 
  /* [45][0][][] */ -3,29,-17,-127,-26,-10,47,-18,-5,16,-26,1,11,-101,43,-37, 
  /* [46][0][][] */ 12,44,50,-41,5,-2,-44,58,16,-61,-41,13,0,127,68,-4, 
  /* [47][0][][] */ 5,-17,25,-33,-30,24,-54,50,-9,-21,20,36,1,-127,33,8, 
  /* [48][0][][] */ 1,-4,13,-127,-6,-8,-1,7,14,-17,19,-7,1,43,-6,50, 
  /* [49][0][][] */ 43,-31,-19,99,101,0,5,61,-71,3,32,40,-2,29,127,5, 
  /* [50][0][][] */ -18,-18,56,-28,-1,117,-42,-73,57,-33,127,19,105,-12,-14,-61, 
  /* [51][0][][] */ 22,51,17,9,24,-1,-41,12,40,5,1,127,7,22,32,-56, 
  /* [52][0][][] */ -18,54,127,0,16,-44,7,-44,-43,-1,11,37,-6,89,-116,-20, 
  /* [53][0][][] */ 10,-14,-65,-127,-79,-7,47,-17,-16,55,-14,-6,47,-30,72,21, 
  /* [54][0][][] */ 18,2,-29,-46,22,-3,-14,18,56,-17,-6,-22,3,127,23,34, 
  /* [55][0][][] */ -19,-46,-21,9,5,-29,-27,-127,16,-86,5,-12,-35,-56,-45,-27, 
  /* [56][0][][] */ 51,44,20,53,22,-31,14,127,11,-26,0,-26,65,-22,-58,49, 
  /* [57][0][][] */ 74,-11,127,-20,-77,-53,-1,-18,7,13,-82,9,63,-33,38,23, 
  /* [58][0][][] */ 79,90,11,100,-127,4,13,35,-7,29,107,-37,-81,-65,-15,-94, 
  /* [59][0][][] */ 127,-54,13,-15,-3,-9,-27,7,-24,6,-106,-3,4,9,3,29, 
  /* [60][0][][] */ -127,42,-30,-16,-8,-2,45,28,9,20,92,-10,-52,-10,23,-20, 
  /* [61][0][][] */ -127,87,38,-7,11,30,-29,-45,83,-70,116,-10,38,-62,-87,-51, 
  /* [62][0][][] */ -28,-71,-116,57,76,124,-25,92,8,-83,32,-41,-107,-9,-127,-16, 
  /* [63][0][][] */ -42,4,127,-36,-47,-76,18,-43,10,9,-8,12,-17,-52,90,26, 
  /* [64][0][][] */ 10,50,-34,50,46,7,89,-127,-12,109,-10,-27,-9,-120,-15,42, 
  /* [65][0][][] */ 9,6,18,-27,70,16,-9,-127,-34,-76,-31,-68,2,-36,53,27, 
  /* [66][0][][] */ -127,8,-9,12,-32,19,14,-32,-67,-30,-72,54,60,27,50,72, 
  /* [67][0][][] */ 3,-64,11,127,16,-12,-40,49,61,18,-7,-21,2,-29,-99,-17, 
  /* [68][0][][] */ 31,-5,-12,127,-68,-30,3,-31,-66,24,5,-34,-21,-81,-12,-39, 
  /* [69][0][][] */ 65,67,36,73,57,-18,30,-127,22,71,31,27,-14,-7,16,-21, 
  /* [70][0][][] */ 12,-50,-7,-93,127,-46,41,41,80,-35,69,-70,17,98,53,108, 
  /* [71][0][][] */ 6,59,7,91,51,-127,-46,85,43,-106,21,7,4,-59,-67,27, 
  /* [72][0][][] */ -127,-89,-31,47,26,26,-42,24,-56,-49,-111,36,55,35,9,121, 
  /* [73][0][][] */ -37,7,-37,84,15,-39,7,-41,85,21,-2,26,-3,127,-89,-59, 
  /* [74][0][][] */ 70,-28,0,-55,-34,-36,49,-11,-36,-13,-117,32,-127,-7,31,47, 
  /* [75][0][][] */ -27,-14,-22,127,-32,15,0,-30,-75,8,-4,-38,-18,-48,-16,-40, 
  /* [76][0][][] */ 4,-16,-3,44,34,9,-27,-117,22,-127,2,27,-17,-24,39,-37, 
  /* [77][0][][] */ 127,-22,35,43,-18,8,-68,-15,40,-26,-33,43,28,4,-68,16, 
  /* [78][0][][] */ 4,9,35,-11,19,-30,-58,29,60,-28,-54,-42,10,127,38,-19, 
  /* [79][0][][] */ 1,28,49,4,45,59,-59,-64,6,-63,90,-34,127,-31,-22,-38, 
  /* [80][0][][] */ -127,-98,-76,106,19,41,16,-21,-74,33,-68,13,49,-77,-34,36, 
  /* [81][0][][] */ 57,6,-58,22,100,89,-13,-44,-15,-127,-16,-106,-36,-22,-112,39, 
  /* [82][0][][] */ 109,127,-13,41,-121,-20,-73,-12,-52,5,99,-55,-46,88,2,-42, 
  /* [83][0][][] */ 127,46,21,-18,9,-21,-21,22,28,20,88,-36,-47,-23,-23,-78, 
  /* [84][0][][] */ 6,-59,-71,-13,25,14,12,-127,-22,-26,14,16,-22,-18,9,3, 
  /* [85][0][][] */ -19,11,-51,-44,-24,-13,86,70,-14,127,-11,-32,32,49,60,-21, 
  /* [86][0][][] */ 127,-32,11,-15,10,-33,10,-8,-15,-16,-125,13,29,23,-27,26, 
  /* [87][0][][] */ -16,44,11,-43,-14,86,-38,71,-6,-32,20,21,23,-127,1,6, 
  /* [88][0][][] */ -11,-34,-111,-55,55,-9,-34,-127,-4,-56,-20,-49,-33,9,49,6, 
  /* [89][0][][] */ 21,-20,2,-127,37,20,-50,127,100,-77,42,16,1,58,38,55, 
  /* [90][0][][] */ -32,5,-44,49,92,12,125,-113,65,127,-22,30,9,-18,-8,-36, 
  /* [91][0][][] */ 27,-17,-34,-16,10,-127,-21,-17,5,-15,-54,-9,17,-5,8,12, 
  /* [92][0][][] */ 32,36,127,70,35,22,12,79,-43,66,-88,53,61,112,0,18, 
  /* [93][0][][] */ 107,-38,-48,-15,-27,-56,14,45,-23,25,-127,-16,-1,13,-6,54, 
  /* [94][0][][] */ 20,-13,44,63,94,-25,-4,57,-1,-12,-7,48,-1,127,-17,-63, 
  /* [95][0][][] */ -106,58,31,43,17,27,37,13,14,16,127,5,-22,35,-19,-31, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00052955880528315902, 0.00069721363252028823, 0.00070918002165853977, 0.0032452049199491739, 0.00098238151986151934, 0.00050079240463674068, 0.00053606199799105525, 0.0018248411361128092, 0.0010968841379508376, 0.00031313739600591362, 0.00071726506575942039, 0.0016279469709843397, 0.0011588981142267585, 0.00044622403220273554, 0.0007073946762830019, 0.001258579664863646, 0.00057905906578525901, 0.00066662800963968039, 0.00075197679689154029, 0.0025797479320317507, 0.0011210791999474168, 0.00063174607930704951, 0.0011717486195266247, 0.00076111144153401256, 0.00053959310753270984, 0.0014159948332235217, 0.0010037648025900126, 0.00057608576025813818, 0.0027724248357117176, 0.0010989434085786343, 0.00060251337708905339, 0.00060019118245691061, 0.0003865363250952214, 0.001731711789034307, 0.0007496649632230401, 0.0018755752826109529, 0.00033913244260475039, 0.0014575800159946084, 0.0020500535611063242, 0.00054447195725515485, 0.0021634940057992935, 0.00050615990767255425, 0.0004689707129728049, 0.00052259099902585149, 0.0013025953667238355, 0.00088026805315166712, 0.00051684072241187096, 0.0010620277607813478, 0.001151178264990449, 0.0010091231670230627, 0.0013387422077357769, 0.0030047670006752014, 0.00061900558648630977, 0.00069039285881444812, 0.0007991293678060174, 0.00047261110739782453, 0.0014697338920086622, 0.00085611239774152637, 0.00077191664604470134, 0.0013056088937446475, 0.00037527826498262584, 0.00064441695576533675, 0.0013012351701036096, 0.0016141842352226377, 0.00047663680743426085, 0.00084368191892281175, 0.0011670886306092143, 0.0012878555571660399, 0.00044823344796895981, 0.00056631799088791013, 0.00053720473079010844, 0.0012127164518460631, 0.00066212174715474248, 0.0013169909361749887, 0.0007659191032871604, 0.001134298974648118, 0.00034334088559262455, 0.001053478685207665, 0.00035296875284984708, 0.0015266846166923642, 0.00063418532954528928, 0.0012445530155673623, 0.00073604157660156488, 0.0014341893838718534, 0.00083417078712955117, 0.00097390322480350733, 0.00064014462986961007, 0.00079081585863605142, 0.00046216297778300941, 0.0010502919321879745, 0.00047026370884850621, 0.0012449022615328431, 0.00045340150245465338, 0.00041620514821261168, 0.0011841203086078167, 0.00067828124156221747, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -32164, 2272, 3142, -5810, -180, -5742, -11328, -38780, 4587, 26347, 33548, -5536, -3470, -21057, 34809, -40168, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0006603869260288775, 0.00071563373785465956, 0.001182225882075727, 0.00099872366990894079, 0.00086693657794967294, 0.0011341407662257552, 0.00094182521570473909, 0.00058971386170014739, 0.00059489673003554344, 0.00062307872576639056, 0.00084664899623021483, 0.00055775867076590657, 0.0009400648414157331, 0.0012121455511078238, 0.00055755936773493886, 0.00063741125632077456, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -12,-8,-30,3,25,-6,6,97,-54,24,34,-11,23,-24,-11,17,14,-11,-18,-12,57,-10,24,127,-21,79,-9,-13,30,-21,21,-26,-15,47,14,-52,16,49,15,-19,-103,-22,13,45,32,22,-125,-47, 
  /* [1][0][][] */ -33,-15,29,22,-27,7,6,56,-58,-38,2,-46,-20,-19,0,-4,-23,116,-6,18,6,12,-25,-12,23,-45,15,21,-21,-89,-39,15,-24,1,36,2,1,-42,0,23,-14,-35,127,13,14,-6,20,-10, 
  /* [2][0][][] */ -23,-12,-13,-37,-1,-61,3,-24,2,9,17,21,14,10,-11,6,-7,-21,-21,-14,-4,-1,-2,-127,-9,70,-18,3,-5,-18,-1,-3,-4,49,13,2,22,15,23,-1,-41,6,-17,-3,-4,-7,17,8, 
  /* [3][0][][] */ -5,33,5,-33,-3,-2,5,-6,-23,-5,0,35,-127,8,-8,-5,-1,3,-19,0,-32,7,5,14,-9,-12,4,23,-8,19,8,15,1,-1,18,20,-10,28,38,8,8,3,22,-26,9,-7,2,20, 
  /* [4][0][][] */ 32,-37,3,11,25,28,19,-24,-27,6,-13,-15,5,9,4,21,22,-6,-72,2,1,10,12,70,4,-21,0,52,9,-78,24,9,14,-37,27,-127,11,32,-3,11,-21,21,5,-23,-11,-18,9,0, 
  /* [5][0][][] */ 29,1,-18,60,-1,-9,7,26,5,-10,39,11,2,53,-3,2,-22,22,30,6,12,3,5,-24,2,-47,-1,-25,-6,-12,3,6,57,-127,6,29,-16,-13,13,4,-95,51,22,-6,-9,6,-99,-9, 
  /* [6][0][][] */ 29,1,9,7,-14,-8,5,-12,-2,3,-5,8,-21,9,2,5,3,-14,127,11,6,7,17,-31,5,1,28,-16,-10,-3,-1,10,-5,-7,35,-37,1,-47,69,17,4,-11,-1,8,-7,5,7,-11, 
  /* [7][0][][] */ -44,-10,-7,34,-7,78,-2,41,2,25,-4,127,73,-5,-13,0,-6,-28,-14,-15,-27,-6,-23,64,1,-41,-45,-30,-7,-18,-17,-12,7,1,-16,-2,12,-67,86,2,22,27,-60,-52,20,-13,6,6, 
  /* [8][0][][] */ -46,-44,2,4,-3,-1,0,33,-3,-74,4,41,45,7,8,9,-9,59,-31,2,-45,19,-9,-9,2,-7,9,36,-13,116,-10,18,-7,9,-11,-127,-109,66,31,26,24,-11,115,-18,16,39,23,34, 
  /* [9][0][][] */ -24,5,-8,29,19,-34,-7,-5,62,-49,10,56,-56,3,21,-3,-10,26,-33,-17,57,8,-9,-18,6,7,50,-26,7,17,16,4,-4,18,76,-105,-14,-127,-102,10,-32,29,68,13,9,14,-21,-46, 
  /* [10][0][][] */ -18,-7,-28,-127,46,87,15,-17,1,26,28,9,45,-38,-31,17,33,-48,59,-37,33,-19,37,49,-46,-102,11,-40,50,39,42,-48,-27,-82,32,-3,20,-38,1,-28,-38,-69,-5,16,21,23,14,-30, 
  /* [11][0][][] */ -1,63,2,59,35,-68,-94,-10,-1,59,-5,-3,-15,71,-7,-82,30,48,-4,-11,-62,-111,7,-1,17,-51,28,-28,56,-34,26,-100,43,-9,-35,-106,95,19,5,-127,-2,57,113,-68,4,-47,41,43, 
  /* [12][0][][] */ 120,1,-20,11,2,20,3,103,18,-6,-61,-20,-5,8,-16,-4,-6,1,-9,-8,2,-3,-2,19,-8,12,-2,8,-7,12,-3,2,5,-68,-5,4,-13,-22,-25,-5,-16,-73,0,-127,-50,-13,77,-7, 
  /* [13][0][][] */ 11,2,-3,4,9,-10,2,0,-1,5,4,21,-3,3,5,-2,5,3,11,2,15,-15,7,-3,3,3,15,127,10,-6,8,-1,4,0,-40,21,10,-6,4,-18,-14,-5,2,7,2,-1,-10,-13, 
  /* [14][0][][] */ 62,-27,37,-60,52,24,42,-86,-54,-46,-10,124,-63,-1,55,20,57,29,-58,61,13,7,72,-10,16,61,-38,-104,28,-38,60,38,-5,73,-127,-55,-44,34,93,1,-29,7,46,-8,5,-7,9,-31, 
  /* [15][0][][] */ -8,-45,-77,-44,47,31,74,-51,-8,27,-13,-34,80,23,-104,72,63,54,69,-84,-102,-32,51,-20,-99,44,33,60,59,43,47,-47,25,55,90,127,-21,-113,-15,-33,87,61,110,-51,-1,-35,-13,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028066443279385567, 0.030414432287216187, 0.050244599580764771, 0.042445752769708633, 0.036844804883003235, 0.048200979828834534, 0.040027569979429245, 0.025062838569283485, 0.025283109396696091, 0.026480844244360924, 0.035982582718133926, 0.023704743012785912, 0.039952754974365234, 0.051516182720661163, 0.023696273565292358, 0.027089977636933327, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 1015, 43393, -1390, 34691, 4475, 139217, -1877, 44501, 1072, 33225, 26917, 493, -658, 32119, -1494, -2277, -309, -629, -173, -1766, -936, -1698, -923, -17464, -4888, 37414, 128391, 96702, 2475, 6537, -1509, -15, 25779, -11, 41473, -7564, 56693, 174, 49679, 1296, 399, 57197, -2450, 1854, 53104, -389, 394, 51814, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.2025595474988222e-05, 3.6739955248776823e-05, 0.00015777679800521582, 6.0877577197970822e-05, 0.00012329607852734625, 5.1629263907670975e-05, 0.00013785898045171052, 0.00013504526577889919, 9.264166874345392e-05, 4.2159284930676222e-05, 4.6658664359711111e-05, 0.000103842954558786, 4.3755600927397609e-05, 4.2046878661494702e-05, 0.00015994350542314351, 0.00016788262291811407, 0.00014396228652913123, 7.8366596426349133e-05, 0.00013976427726447582, 0.00013941930956207216, 9.6780393505468965e-05, 0.00018388946773484349, 9.027410123962909e-05, 0.00011044544953620061, 9.3804424977861345e-05, 0.00012302574759814888, 3.271704918006435e-05, 7.7417622378561646e-05, 0.0001076663174899295, 8.6334905063267797e-05, 0.00010639899119269103, 0.00013340015721041709, 4.7326680942205712e-05, 0.00014272143016569316, 2.7371703254175372e-05, 6.8188419390935451e-05, 0.00010306156036676839, 9.7274583822581917e-05, 0.00012058758147759363, 7.4886345828417689e-05, 0.00010812058462761343, 0.00010562898387433961, 0.00010059108171844855, 9.4522845756728202e-05, 3.5193923395127058e-05, 0.00015538415755145252, 0.0001116243947762996, 3.1475261494051665e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-92,97,71,54,-34,106,-65,61,-89,-80,47,52,-43,-71,-89,102,80,50,79,66,-75,-82,51,-31,-40,-64,-64,-67,62,-62,-113,-12,40,69,64,-64,54,-50,-22,51,-73,57,62,-93,12,74,-33, 81,-96,127,86,-77,-68,-58,-84,97,-103,-63,74,80,-107,-94,92,-39,98,83,127,85,-116,52,71,-50,-77,-68,-81,57,78,-30,-127,-86,78,81,84,-81,84,-84,-16,77,-95,82,89,-74,-127,93,-101, 34,-45,71,38,18,-42,-48,-38,44,-30,5,34,28,-78,-53,-1,-55,39,35,70,33,-55,32,26,-26,-45,-45,-24,30,31,88,-87,-85,42,36,34,-30,40,-37,-10,41,-41,34,44,-6,-8,37,-72, 
  /* [0][1][][] */ 91,-113,-40,94,56,-82,127,-90,86,-113,-72,81,83,-110,-13,-127,127,108,75,-38,83,107,-127,73,73,-76,-93,-99,-127,87,-70,-8,-87,69,107,96,-84,79,-80,89,85,-101,87,91,-88,108,93,-91, 127,-127,-63,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-21,96,-66,127,127,-51,127,127,69,127,127,-127,-127,-127,54,127,-29,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 64,-78,-31,66,37,-63,-50,-61,57,-41,-60,58,47,-54,-15,10,-63,52,58,-29,57,64,51,64,66,-64,-62,-45,35,55,127,16,-64,69,49,49,-49,60,-59,57,61,-58,54,63,-61,-67,58,-57, 
  /* [0][2][][] */ 44,-53,-45,50,28,-54,64,-43,40,-71,-4,39,56,-72,83,-80,74,49,35,-30,25,-11,-77,30,-22,-44,-49,-49,-74,32,-41,89,-73,36,49,41,-26,37,-41,-86,48,-50,42,45,-23,15,40,-74, 73,-75,-47,79,-56,-64,-74,-67,51,-76,-65,61,75,-47,127,31,-47,57,62,-43,54,-17,42,67,-47,-67,-80,-61,32,62,-24,115,-55,65,58,57,-48,62,-66,-105,69,-67,63,62,-85,49,63,-52, 42,-42,-25,46,28,-21,-18,-34,15,-25,-51,27,31,5,68,23,-36,22,28,-31,29,0,40,42,-23,-29,-48,-25,33,34,62,67,0,34,16,21,-22,30,-29,-54,28,-32,27,29,-62,9,31,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003486087778583169, 0.0015614480944350362, 0.0067055136896669865, 0.0025872969999909401, 0.0052400832064449787, 0.0021942437160760164, 0.0058590066619217396, 0.0057394234463572502, 0.0039372709579765797, 0.0017917695222422481, 0.0019829932134598494, 0.0044133253395557404, 0.0018596129957586527, 0.001786992303095758, 0.0067975991405546665, 0.0071350112557411194, 0.0061183972284197807, 0.0033305801916867495, 0.005939981434494257, 0.0059253205545246601, 0.0041131665930151939, 0.007815302349627018, 0.0038366492372006178, 0.0046939314343035221, 0.0039866878651082516, 0.0052285944111645222, 0.0013904744992032647, 0.0032902488019317389, 0.0045758183114230633, 0.0036692332942038774, 0.0045219571329653263, 0.0056695067323744297, 0.0020113838836550713, 0.006065660621970892, 0.0011632973328232765, 0.0028980078641325235, 0.0043801162391901016, 0.0041341697797179222, 0.0051249722018837929, 0.003182669635862112, 0.0045951246283948421, 0.0044892318546772003, 0.0042751207947731018, 0.0040172208100557327, 0.0014957417733967304, 0.0066038267686963081, 0.0047440365888178349, 0.0013376986607909203, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 939, 1181, 2432, 686, 11187, 23639, 3443, -25, -1004, -744, 1355, 1241, 3961, 1342, 34471, 3592, 2580, -1590, -342, 3619, -1873, 13110, 11432, 11264, 6640, 231, 4536, 5081, 10356, -649, 10002, 7962, 677, -386, 6276, 3431, -2099, 306, -642, 6412, 860, -610, -1034, -97, 1286, 3582, 1034, 1266, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0002804271352943033, 0.00061265064869076014, 0.00021922435553278774, 0.00025995570467785001, 0.00019288476323708892, 0.00017232869868166745, 0.00032707970240153372, 0.00019911488925572485, 0.00028822614694945514, 0.00059215846704319119, 0.00075628701597452164, 0.00022428874217439443, 0.00031371755176223814, 0.0005589646752923727, 0.00010420077887829393, 0.00034244847483932972, 0.00020247408247087151, 0.00025999831268563867, 0.00020763346401508898, 0.00024247194232884794, 0.00030990582308731973, 0.00019335508113726974, 0.00032246104092337191, 0.00013780784502159804, 0.0002356228360440582, 0.00024095206754282117, 0.001531916786916554, 0.00037059959140606225, 0.00016885432705748826, 0.00034270019386895001, 0.0002590285730548203, 0.00014993241347838193, 0.00055398023687303066, 0.00018694170285016298, 0.00058822747087106109, 0.00052844034507870674, 0.00065345899201929569, 0.00029822005308233202, 0.00018421180720906705, 0.00028735297382809222, 0.0001559656229801476, 0.00020748969109263271, 0.0002600042789708823, 0.00021881236170884222, 0.0015256030019372702, 0.00038113974733278155, 0.00023445165425073355, 0.00092871562810614705, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,7,3,81,-40,46,31,-35, 
  /* [1][0][][] */ 43,80,54,27,17,-47,107,127, 
  /* [2][0][][] */ -49,-14,-1,-1,-127,-21,14,14, 
  /* [3][0][][] */ 89,-5,-3,-113,-127,24,31,-24, 
  /* [4][0][][] */ -127,51,-14,-5,71,-19,49,30, 
  /* [5][0][][] */ -116,-32,17,-10,-127,12,10,95, 
  /* [6][0][][] */ -16,-127,18,-26,27,13,-10,32, 
  /* [7][0][][] */ -73,-2,-1,110,127,-37,-36,7, 
  /* [8][0][][] */ 76,0,-5,-127,1,-18,-55,-35, 
  /* [9][0][][] */ 4,-127,-5,-7,-6,94,-47,71, 
  /* [10][0][][] */ -86,-4,-10,14,-127,78,48,-23, 
  /* [11][0][][] */ 122,12,43,18,-60,-50,-35,-127, 
  /* [12][0][][] */ 3,7,43,-9,12,-82,127,65, 
  /* [13][0][][] */ 58,-26,-9,-19,127,121,118,-35, 
  /* [14][0][][] */ 127,78,-9,29,-126,-15,-25,-35, 
  /* [15][0][][] */ -12,-127,10,-8,13,13,-2,27, 
  /* [16][0][][] */ -47,-4,7,2,-127,-9,22,6, 
  /* [17][0][][] */ -35,100,-113,-3,2,-127,117,-87, 
  /* [18][0][][] */ 127,-37,-46,15,-66,32,4,105, 
  /* [19][0][][] */ 127,-50,-19,-11,54,-5,39,13, 
  /* [20][0][][] */ 117,29,-23,127,-4,33,11,-45, 
  /* [21][0][][] */ -2,47,-62,11,-16,90,-127,-97, 
  /* [22][0][][] */ -127,21,18,2,-27,2,-47,-17, 
  /* [23][0][][] */ -39,-51,6,26,-127,58,78,-16, 
  /* [24][0][][] */ 127,-4,-8,-13,-115,-5,0,14, 
  /* [25][0][][] */ 24,-18,-1,-27,127,53,52,-29, 
  /* [26][0][][] */ 5,-85,5,-35,3,-127,74,-53, 
  /* [27][0][][] */ -16,-127,28,-16,-6,-54,32,-12, 
  /* [28][0][][] */ -101,42,-11,2,-9,-16,127,77, 
  /* [29][0][][] */ -12,47,13,12,-2,45,-119,-127, 
  /* [30][0][][] */ 127,-18,0,7,-62,-3,-31,-23, 
  /* [31][0][][] */ -37,-8,76,-16,36,-124,127,84, 
  /* [32][0][][] */ -82,24,9,9,-127,-101,-92,57, 
  /* [33][0][][] */ -25,20,-1,27,-127,-61,-40,23, 
  /* [34][0][][] */ 2,-127,42,-5,-2,80,-73,64, 
  /* [35][0][][] */ -23,-48,-127,-11,0,-71,42,-56, 
  /* [36][0][][] */ 6,127,56,12,-14,10,-20,-36, 
  /* [37][0][][] */ -127,39,41,-13,59,-39,-8,-116, 
  /* [38][0][][] */ -127,-15,-56,-12,46,24,36,113, 
  /* [39][0][][] */ 10,-39,76,-3,2,-84,127,97, 
  /* [40][0][][] */ -35,-23,-21,-36,-127,115,105,-35, 
  /* [41][0][][] */ -127,49,13,-69,-93,-85,-88,44, 
  /* [42][0][][] */ -44,-127,-97,-2,-18,69,-114,-79, 
  /* [43][0][][] */ -76,10,-10,-127,104,57,71,4, 
  /* [44][0][][] */ 127,-5,16,-88,30,-24,-20,32, 
  /* [45][0][][] */ -17,-127,-3,-19,-5,-61,75,10, 
  /* [46][0][][] */ 110,-5,-6,-24,127,-32,-35,-2, 
  /* [47][0][][] */ 127,7,-4,126,-14,21,18,-44, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00062217022059485316, 0.0013592585455626249, 0.00048638254520483315, 0.00057675124844536185, 0.00042794414912350476, 0.0003823373990599066, 0.00072567601455375552, 0.00044176663504913449, 0.00063947349553927779, 0.0013137934729456902, 0.0016779375728219748, 0.00049761863192543387, 0.00069603003794327378, 0.0012401479762047529, 0.00023118525859899819, 0.0007597739459015429, 0.0004492195148486644, 0.00057684577768668532, 0.00046066637150943279, 0.00053796084830537438, 0.00068757316330447793, 0.00042898760875687003, 0.00071542878868058324, 0.00030574764241464436, 0.00052276503993198276, 0.00053458876209333539, 0.0033987900242209435, 0.00082223146455362439, 0.00037462898762896657, 0.00076033244840800762, 0.00057469424791634083, 0.00033264781814068556, 0.0012290893355384469, 0.00041475857142359018, 0.0013050719862803817, 0.001172425108961761, 0.0014497980009764433, 0.00066164648160338402, 0.0004087018605787307, 0.00063753622816875577, 0.00034603342646732926, 0.00046034739352762699, 0.00057685899082571268, 0.00048546845209784806, 0.003384782001376152, 0.00084561645053327084, 0.00052016659174114466, 0.0020604967139661312, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -42822, 22182, -14162, -11239, 21087, -3491, 37013, 40897, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00042578880675137043, 0.00069165247259661555, 0.0014709143433719873, 0.0016245800070464611, 0.00084401527419686317, 0.00056941038928925991, 0.00067194201983511448, 0.00097433698829263449, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-10,-43,13,0,-21,-9,-3,-110,121,-39,120,127,6,64,-23,-14,-26,10,13,-2,-6,-16,-24,22,-100,18,67,-14,17,21,-33,-1,-79,102,26,-5,-13,3,-4,115,-11,51,-24,-22,28,-19,-12, 
  /* [1][0][][] */ 1,36,127,8,-1,-20,2,-79,25,6,24,10,-18,5,-5,-118,5,-58,8,8,-29,40,17,-35,-17,-8,14,-1,16,-1,18,3,-1,19,23,9,-19,-32,72,-67,17,41,-11,30,-10,3,25,3, 
  /* [2][0][][] */ 5,-50,18,-42,36,33,-5,-24,4,6,-2,18,-9,58,4,3,-36,127,-28,-36,-24,22,-44,-11,125,1,-3,-13,-30,-6,4,-41,-8,-11,6,10,-13,-2,-15,4,17,-19,-17,2,0,23,-26,-43, 
  /* [3][0][][] */ -6,-83,-4,6,4,-6,-8,-1,-4,-13,17,20,10,-10,49,2,-12,-24,7,22,-6,22,-20,-2,3,49,-6,11,-3,6,127,2,14,9,-9,-2,-24,-13,-11,8,-12,9,-9,29,-5,3,2,28, 
  /* [4][0][][] */ -90,12,0,4,0,-35,-3,2,44,-44,20,-21,-25,4,-19,-9,8,14,2,29,13,-34,17,8,-3,42,14,105,6,5,-5,-25,1,-127,-34,8,11,-11,6,8,-54,-11,-9,14,-53,1,4,5, 
  /* [5][0][][] */ -16,30,18,-1,-49,16,1,41,17,7,21,2,-2,-46,-1,34,-12,-86,23,8,42,-48,13,44,8,9,-71,-38,-41,-26,20,-2,3,-67,6,-58,55,9,-33,18,15,-47,1,19,127,-13,-42,-7, 
  /* [6][0][][] */ -24,-27,-11,-12,34,-39,0,-24,-3,-19,32,-28,-15,42,7,-56,-1,6,4,-30,-37,55,-2,-85,-1,-17,-51,-70,23,42,-24,-3,-3,-68,-26,70,-62,-47,3,-56,-15,10,26,34,127,-28,37,9, 
  /* [7][0][][] */ 10,36,-72,31,-20,15,7,62,-11,2,66,-34,11,-32,-11,0,-15,-127,36,-44,60,33,21,-59,21,-17,19,3,-14,34,-11,3,6,31,2,-28,-7,-51,-33,-61,-12,-31,38,65,-32,-26,0,6, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018096024170517921, 0.029395230114459991, 0.062513858079910278, 0.069044649600982666, 0.035870648920536041, 0.024199940264225006, 0.028557535260915756, 0.041409321129322052, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -53507, -76, 9850, -288, 5564, -4844, 2135, 32573, 1660, 38772, -2222, 27503, -6403, -1190, 29536, 11934, 773, 19351, 32266, 12090, -264, -220, -353, 15267, -8341, 29844, 45856, 35203, 3997, 1710, -1745, 1008, 1430, 16000, -6992, 17600, -11736, 22023, -21960, 143635, 26835, 21462, 11778, -1523, 16599, 3252, 1522, -163, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031477559241466224, 0.00027871449128724635, 0.00017180957365781069, 0.00023794562730472535, 0.00012696093472186476, 9.6072835731320083e-05, 0.0005715796141885221, 0.00010687314352253452, 0.00012201667414046824, 0.00012678019993472844, 8.1536825746297836e-05, 0.00015600485494360328, 0.00026138947578147054, 0.00017415730690117925, 8.4903440438210964e-05, 0.00013168930308893323, 0.0001884719094960019, 0.00019564383546821773, 7.151858153520152e-05, 0.0001724569738144055, 0.00017789845878724009, 0.000190448306966573, 0.00014751580602023751, 0.00013567964197136462, 0.00017159857088699937, 0.00012091868848074228, 0.0005754366866312921, 9.6091062005143613e-05, 0.00014624552568420768, 0.00049069587839767337, 0.00010509335697861388, 0.00017341450438834727, 0.00061049126088619232, 0.00017778183973859996, 0.00017588739865459502, 0.00014007826393935829, 0.00031321236747317016, 0.0001210777772939764, 0.00027616275474429131, 1.8173897842643782e-05, 0.00012025538308080286, 5.0880924391094595e-05, 0.00013726495672017336, 0.00014938994718249887, 0.0001428319956175983, 9.8457683634478599e-05, 0.00017631771333981305, 9.5927563961595297e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 6,-3,20,110,4,81,-1,27,15,8,10,7,-8,-9,-45,9,-2,9,-24,-114,-6,-22,127,-9,-2,7,-6,8,-5,4,15,99,20,29,37,-27,1,34,-3,2,17,-68,-7,-9,17,4,-7,-11, 127,10,14,-127,27,87,11,10,123,127,7,43,-50,-23,4,8,127,-56,-61,-56,-99,25,-108,15,18,71,-32,-82,23,20,10,-122,5,-61,127,10,-39,-47,-6,116,-79,-99,-29,3,-34,-7,-127,23, -30,-3,7,16,-1,66,4,17,27,8,-13,31,-14,-3,15,4,-103,29,-4,77,-30,-12,-18,-6,-4,-59,-3,29,-17,4,4,-21,7,-23,17,-19,0,47,40,-13,50,37,-15,12,-42,4,-2,-6, 
  /* [0][1][][] */ 125,7,1,-99,14,-27,35,-17,8,9,-12,53,-7,-1,17,-33,-1,-49,-60,-87,11,-73,-123,-18,5,99,-15,-127,-8,32,12,-107,17,-52,-3,127,-3,58,-42,41,-62,-127,40,-89,-44,-13,-12,-5, 25,-127,-127,116,-127,-127,-127,-127,-127,-96,127,-127,127,127,34,-127,-84,127,127,-105,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-29,-41,127,-127,127,127,127,-81,127,127,127,-121,102,107, 54,5,48,-13,5,-60,44,18,-24,14,-104,-8,0,-41,127,4,63,-65,-70,85,14,-46,11,-33,1,6,-38,68,20,39,1,3,33,-43,9,66,-4,64,68,-10,-81,8,-84,-31,27,-16,-10,5, 
  /* [0][2][][] */ -51,-7,25,-18,7,33,-37,22,8,-23,10,32,5,-7,-38,17,4,22,-13,103,6,-31,-15,-12,-3,23,0,50,-10,2,46,-32,-18,-43,-31,-39,0,30,8,-21,9,-6,41,-38,-36,19,-10,17, 68,125,75,20,16,-21,123,35,19,-3,43,26,-6,-1,-90,24,-59,-56,-35,121,-36,50,12,20,32,-62,-40,30,77,0,127,22,85,-26,7,-35,-24,-18,-13,120,-27,-14,-41,44,20,-32,8,-127, -40,-4,7,-4,5,-5,-61,7,-17,-10,-40,-40,19,-10,-8,11,33,24,-7,-127,24,-9,5,-9,-7,11,-10,-54,-15,7,6,8,-20,87,-37,-23,-4,35,24,-60,4,7,-38,6,-43,127,-4,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0133779626339674, 0.011845366097986698, 0.0073019065894186497, 0.01011268887668848, 0.0053958394564688206, 0.0040830955840647221, 0.024292133748531342, 0.0045421086251735687, 0.0051857084035873413, 0.0053881583735346794, 0.003465315094217658, 0.0066302064806222916, 0.01110905222594738, 0.0074016852304339409, 0.0036083960440009832, 0.0055967951193451881, 0.0080100558698177338, 0.008314862847328186, 0.0030395397916436195, 0.0073294211179018021, 0.0075606843456625938, 0.0080940527841448784, 0.0062694214284420013, 0.005766384769231081, 0.0072929388843476772, 0.0051390440203249454, 0.024456057697534561, 0.0040838699787855148, 0.0062154345214366913, 0.02085457555949688, 0.0044664675369858742, 0.0073701161891222, 0.025945877656340599, 0.0075557283125817776, 0.0074752140790224075, 0.0059533263556659222, 0.013311524875462055, 0.0051458054222166538, 0.01173691637814045, 0.0007723906310275197, 0.0051108538173139095, 0.0021624392829835415, 0.0058337603695690632, 0.0063490727916359901, 0.0060703596100211143, 0.0041844514198601246, 0.007493502926081419, 0.0040769213810563087, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 77558, 8512, 7208, 8924, 1787, 11588, -2229, -311, 1116, 2614, 4202, 314, 2046, -972, 846, -2422, 4795, 11841, -311, 44733, 4150, 3160, 8780, -676, 4335, 5923, 29307, 13404, -103, -2827, 111, 2690, -2272, 10992, 3417, 9237, 8146, 5255, 30158, 2488, -1047, 3372, 1293, 4673, 5319, 2668, -1468, 3143, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 5.5971679103095084e-05, 0.0002657261211425066, 0.00021844428556505591, 0.00035925867268815637, 0.0012623433722183108, 0.00043325687875039876, 0.0008655667188577354, 0.00093279237626120448, 0.00052219344070181251, 0.00052406743634492159, 0.0005327618564479053, 0.00044201189302839339, 0.00046466855565086007, 0.0004894469166174531, 0.00050380744505673647, 0.0014925397699698806, 0.00034310901537537575, 0.00035624118754640222, 0.0016833283007144928, 6.1213715525809675e-05, 0.00028782093431800604, 0.00030560177401639521, 0.00045222439803183079, 0.00080144527601078153, 0.00028550377464853227, 0.00019635891658253968, 0.00013805886555928737, 0.00027298548957332969, 0.00084585475269705057, 0.00091654452262446284, 0.00046667249989695847, 0.00029969259048812091, 0.00087552826153114438, 0.00019871284894179553, 0.00031051551923155785, 0.00020218784629832953, 0.00044897911720909178, 0.00026300220633856952, 7.8143471910152584e-05, 0.0018317443318665028, 0.00057043653214350343, 0.00082139065489172935, 0.00036060859565623105, 0.00032370313419960439, 0.0002257183805340901, 0.00040982908103615046, 0.00078155577648431063, 0.00085695739835500717, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 67,25,12,-3,127,35,-51,-19, 
  /* [1][0][][] */ -6,-6,-2,127,13,-1,10,14, 
  /* [2][0][][] */ 30,-127,-21,43,-3,-72,89,9, 
  /* [3][0][][] */ 127,-40,-9,15,-5,-28,26,7, 
  /* [4][0][][] */ 3,-55,127,-21,-6,-46,8,-99, 
  /* [5][0][][] */ 49,6,-1,2,127,12,-12,-1, 
  /* [6][0][][] */ -20,102,-7,127,31,61,-70,-66, 
  /* [7][0][][] */ -3,127,-2,2,-4,-14,16,-2, 
  /* [8][0][][] */ 127,57,-7,5,-41,-32,9,-29, 
  /* [9][0][][] */ -127,22,12,23,56,19,-11,-1, 
  /* [10][0][][] */ -91,-14,14,127,44,31,-17,-2, 
  /* [11][0][][] */ -127,8,16,-61,43,2,-20,-42, 
  /* [12][0][][] */ 127,19,1,23,-55,-11,1,-49, 
  /* [13][0][][] */ -3,81,-127,-6,5,104,-66,65, 
  /* [14][0][][] */ -45,-21,-9,127,16,2,6,-19, 
  /* [15][0][][] */ -5,127,2,-2,-4,-16,12,-52, 
  /* [16][0][][] */ -4,-127,-19,1,-10,-92,112,-37, 
  /* [17][0][][] */ 26,127,-1,-10,2,85,-90,-18, 
  /* [18][0][][] */ -19,52,-127,5,17,60,-35,65, 
  /* [19][0][][] */ -94,28,1,6,-127,-11,29,37, 
  /* [20][0][][] */ -127,-19,-6,1,60,-29,41,-4, 
  /* [21][0][][] */ -55,2,-2,5,-127,-2,15,3, 
  /* [22][0][][] */ -127,-21,-2,-8,72,-17,29,44, 
  /* [23][0][][] */ -18,-15,-6,-9,-5,83,-127,-99, 
  /* [24][0][][] */ -10,42,-127,2,14,47,-16,78, 
  /* [25][0][][] */ 106,-51,4,127,-75,-3,-3,-60, 
  /* [26][0][][] */ 4,-20,0,5,-13,121,127,-28, 
  /* [27][0][][] */ 82,1,3,11,127,39,46,-32, 
  /* [28][0][][] */ -5,115,-74,3,13,69,-19,127, 
  /* [29][0][][] */ -4,10,-2,-6,-5,84,-127,-76, 
  /* [30][0][][] */ 6,-1,3,-127,-9,-5,1,-17, 
  /* [31][0][][] */ -80,8,-7,-10,-127,-1,12,11, 
  /* [32][0][][] */ -2,39,4,-127,-11,25,-74,-93, 
  /* [33][0][][] */ -58,-18,1,-6,-127,38,44,12, 
  /* [34][0][][] */ -127,71,9,35,34,-16,19,8, 
  /* [35][0][][] */ -8,127,-5,-19,19,-90,78,-27, 
  /* [36][0][][] */ 3,59,11,-23,-13,98,-127,-35, 
  /* [37][0][][] */ 19,-72,-18,18,25,-124,127,-19, 
  /* [38][0][][] */ 29,-127,-1,3,22,66,-59,67, 
  /* [39][0][][] */ 7,-127,-11,-7,-5,-7,-56,-106, 
  /* [40][0][][] */ 127,48,6,-21,-44,75,-122,-104, 
  /* [41][0][][] */ 6,-127,11,7,3,76,-58,122, 
  /* [42][0][][] */ 61,-12,-1,-127,-59,4,-3,-41, 
  /* [43][0][][] */ -106,-32,19,-127,75,15,-17,-14, 
  /* [44][0][][] */ -15,-28,-4,17,-21,103,127,-17, 
  /* [45][0][][] */ -127,-52,6,3,20,19,19,-19, 
  /* [46][0][][] */ 12,67,127,-3,1,16,11,19, 
  /* [47][0][][] */ 2,-2,9,127,-2,8,6,-8, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00015978778537828475, 0.00075859413482248783, 0.00062361411983147264, 0.0010256106033921242, 0.0036037343088537455, 0.0012368605239316821, 0.0024710174184292555, 0.0026629329659044743, 0.0014907562872394919, 0.0014961062697693706, 0.0015209269477054477, 0.0012618543114513159, 0.0013265344314277172, 0.001397271640598774, 0.0014382681110873818, 0.0042608981020748615, 0.00097950664348900318, 0.0010169963352382183, 0.004805560689419508, 0.00017475274216849357, 0.00082167034270241857, 0.00087243103189393878, 0.0012910088989883661, 0.0022879636380821466, 0.00081505539128556848, 0.00056056486209854484, 0.0003941300674341619, 0.00077931821579113603, 0.0024147436488419771, 0.002616548677906394, 0.0013322553131729364, 0.00085556152043864131, 0.0024994555860757828, 0.00056728487834334373, 0.00088645878713577986, 0.0005772052682004869, 0.001281744334846735, 0.00075081794057041407, 0.00022308375628199428, 0.005229258444160223, 0.0016284806188195944, 0.0023449037689715624, 0.001029464416205883, 0.0009241067455150187, 0.00064438016852363944, 0.0011699788738042116, 0.0022311832290142775, 0.0024464395828545094, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -6862, -22593, 25891, 23595, 2999, 599, 37622, 9998, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011830538278445601, 0.00067215407034382224, 0.0014144320739433169, 0.0011397278867661953, 0.0010294024832546711, 0.0011106713209301233, 0.00080429477384313941, 0.00078170886263251305, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -9,0,11,-100,6,28,9,5,0,7,0,-4,103,0,-1,3,0,-9,-8,1,83,-2,-3,8,34,37,11,8,8,7,5,-127,12,7,-1,3,-26,4,-15,33,8,-23,-4,8,6,2,6,6, 
  /* [1][0][][] */ -40,-11,-5,-5,47,30,-33,76,23,3,-29,-20,11,0,19,37,0,39,20,-49,-3,21,127,17,-29,-6,56,1,19,-3,19,-12,15,-11,-6,-18,4,-55,7,6,-5,-5,-85,-8,-36,4,-47,-96, 
  /* [2][0][][] */ -60,12,3,14,44,-10,31,23,-9,53,8,-2,0,0,7,53,0,7,-127,26,-3,9,2,-17,-36,2,35,5,7,31,24,3,4,-11,-10,-12,11,5,3,3,41,-12,-28,2,26,-57,26,17, 
  /* [3][0][][] */ 0,2,0,8,-4,30,3,-6,67,16,-3,-1,24,0,-33,-7,0,-3,-8,0,-5,-1,3,-19,-11,-8,-11,-6,-4,-1,-3,-8,-45,40,-53,-1,6,-1,-1,-127,1,6,3,-47,-1,-3,1,5, 
  /* [4][0][][] */ 1,-4,77,33,-1,-23,1,-5,0,0,-3,-12,-77,0,-13,4,0,11,5,2,73,8,0,1,-11,37,-6,45,-12,-2,0,106,7,7,-3,2,13,-14,-15,-17,-5,-127,6,7,2,0,-1,3, 
  /* [5][0][][] */ -9,43,5,-9,3,49,23,11,-18,30,6,59,27,0,-127,-1,0,13,-37,20,-8,11,-14,39,-21,-1,25,-7,-10,24,24,-15,51,31,-37,-5,4,18,-44,16,26,-11,-8,27,24,57,24,23, 
  /* [6][0][][] */ -20,-50,-1,4,40,-48,-17,6,26,-22,-10,84,-3,0,-127,39,0,-9,48,-17,-3,1,24,-37,34,-2,-4,-11,49,-10,-8,-3,96,-30,25,1,1,-7,-71,-25,-14,-13,-7,-29,-21,-83,-21,-25, 
  /* [7][0][][] */ -114,-22,-9,11,127,17,68,24,13,6,24,-38,-31,0,85,105,0,14,4,65,-12,0,-35,49,16,7,41,10,49,65,54,-9,-11,-12,-22,-20,3,23,21,34,78,0,-30,-15,60,5,66,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.050279784947633743, 0.028566548600792885, 0.060113362967967987, 0.048438433557748795, 0.043749604374170303, 0.047203529626131058, 0.034182526171207428, 0.033222626894712448, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 71181, 59847, 63131, 42446, -504, 13922, 2375, 32844, 26507, 27572, 29228, 183, -46664, -127, 49174, 715, -204, 41879, 838, 1045, -14751, 12957, 46991, 36195, -21806, 42591, 45592, 25012, -2453, 16452, -7224, -50985, 12590, 109403, 28809, 1445, 64760, -76, 168821, -25147, 15549, -27605, 1084, 103222, -1998, 71530, 1231, -22068, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.5238752944860607e-05, 6.6750442783813924e-05, 0.00012353225611150265, 0.00011555224045878276, 0.00013351145025808364, 0.00018330191960558295, 0.00011898366938112304, 5.1680064643733203e-05, 8.4349914686754346e-05, 3.1704334105597809e-05, 7.3392853664699942e-05, 2.2582120436709374e-05, 0.00017900014063343406, 0.005541567225009203, 5.3203839343041182e-05, 0.00020731023687403649, 0.0027484172023832798, 1.9694965885719284e-05, 0.0001053736632457003, 0.00016696195234544575, 0.00011071897461079061, 0.00014196328993421048, 0.00012702940148301423, 3.8347443478414789e-05, 9.3265429313760251e-05, 6.8167988501954824e-05, 3.0657622119178995e-05, 3.9487786125391722e-05, 0.00028442070470191538, 4.6735214709769934e-05, 4.2477655370021239e-05, 0.00018558312149252743, 0.00019296097161713988, 9.3591070253751241e-06, 8.3416976849548519e-05, 0.00018362664559390396, 1.3132291314832401e-05, 0.00043463456677272916, 2.8034282877342775e-05, 8.5986022895667702e-05, 5.6801080063451082e-05, 0.00018410547636449337, 0.00013648321328219026, 9.9277540357434191e-06, 0.00013600462989415973, 8.331507706316188e-05, 0.00020682036119978875, 0.0001155533391283825, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-6,-18,9,-39,-79,-68,-27,-50,9,67,35,-71,113,-43,-113,-84,36,-6,0,-71,-111,-80,-34,-125,-63,-22,71,14,95,26,-127,-88,-8,53,19,47,-127,79,-76,-14,106,-109,-2,-35,-87,107, 75,13,-28,-29,58,-127,-127,-81,60,-76,-115,110,38,-82,-1,62,-52,-114,59,7,11,-112,-127,-70,-4,-127,-119,-41,-54,20,-57,54,29,-127,64,83,13,71,-94,127,-127,5,125,-127,2,-22,-127,94, -33,44,8,-6,-63,-108,-58,-17,86,-7,-127,39,8,-71,-100,-11,-127,-25,27,12,-16,-75,-36,-24,-10,-29,-57,-13,-9,17,-25,9,108,-86,70,30,14,35,-4,16,-79,4,8,-78,-16,6,-55,14, 
  /* [0][1][][] */ -86,-127,-44,-44,-9,54,99,-105,-27,-108,-20,113,91,-64,27,-97,-121,-93,89,-76,42,-87,-103,-127,43,-121,-79,-39,127,-60,127,83,-43,-83,-15,84,-36,-76,-107,89,41,59,104,-109,-91,-118,83,120, 127,-83,-127,-127,127,40,94,-127,101,-127,-110,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-119,127,-100,-127,-127,-120,-127,-71,127,29,-112,127,127,-69,-127,-98,90,60,127,127,-117,-112,-127,126,127, -54,32,-60,-85,-118,-24,31,-37,127,-20,-75,35,55,-70,-25,-43,-37,-29,54,-71,56,-80,-38,-24,48,-5,-46,-61,15,-89,-35,20,30,-98,117,23,-36,-62,1,-14,36,54,10,-74,-57,-37,66,35, 
  /* [0][2][][] */ -62,-107,-34,-33,1,35,-5,-34,-38,-58,-16,59,77,-127,-127,-65,-43,-18,63,75,52,-31,-13,-60,32,-56,-10,-59,75,28,77,62,109,-26,-39,-11,-95,34,-17,31,9,38,15,-57,96,-78,4,31, 87,-74,-89,-84,82,19,7,-46,48,-71,-32,55,83,-26,15,92,-24,-31,77,118,80,-52,-19,-57,92,-69,-18,-98,-51,39,-45,112,-18,-49,66,5,-127,49,-15,0,10,32,14,-68,127,-100,-12,40, -29,30,-42,-35,-79,-18,22,-11,60,-4,-12,32,31,-43,110,-29,-93,-4,30,60,73,-27,-2,-3,42,1,-3,-65,-14,28,-20,40,-90,-43,65,2,-19,21,28,-38,6,36,-6,-16,63,-35,-4,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036226469092071056, 0.0028368937782943249, 0.005250120535492897, 0.0049109701067209244, 0.0056742364540696144, 0.0077903312630951405, 0.0050568059086799622, 0.0021964027546346188, 0.0035848713014274836, 0.0013474342413246632, 0.0031191962771117687, 0.00095974007854238153, 0.0076075056567788124, 0.23551659286022186, 0.0022611632011830807, 0.0088106850162148476, 0.1168077290058136, 0.00083703605923801661, 0.0044783805496990681, 0.007095883134752512, 0.0047055562026798725, 0.0060334396548569202, 0.0053987493738532066, 0.0016297663096338511, 0.003963780589401722, 0.0028971394058316946, 0.0013029489200562239, 0.0016782308230176568, 0.012087879702448845, 0.0019862465560436249, 0.001805300242267549, 0.0078872824087738991, 0.008200841024518013, 0.00039776202174834907, 0.0035452214069664478, 0.0078041320666670799, 0.00055812235223129392, 0.018471969291567802, 0.0011914570350199938, 0.0036544059403240681, 0.0024140458554029465, 0.0078244823962450027, 0.0058005363680422306, 0.00042192955152131617, 0.0057801967486739159, 0.0035408907569944859, 0.0087898653000593185, 0.0049110166728496552, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4599, 126, 9959, 7036, 7794, 7030, 11927, -33, 12, -370, 2371, 487, 13204, -88087336, 2779, 20321, -71108672, -116, -566, 12003, 4627, -19, 65, 432, 3730, -809, 64, 563, 3726, 1927, 2639, 16632, 3761, 383, 378, -2286, 387, 3237, -183, 14313, 2428, 12094, -474, -105, 13801, 151, 11246, 4465, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00045692300773225725, 0.00038566876901313663, 0.00031715535442344844, 0.00026553648058325052, 0.00025428502704016864, 0.00029624541639350355, 0.00031827218481339514, 0.0013010889524593949, 0.00034739056718535721, 0.002084256149828434, 0.00063530524494126439, 0.001822864986024797, 0.0001682731817709282, 1.8411687729980031e-09, 0.00093533302424475551, 0.00016219344979617745, 1.8411687729980031e-09, 0.0060148718766868114, 0.00037187372799962759, 0.00032203379669226706, 0.00022534627350978553, 0.0044747749343514442, 0.00030667969258502126, 0.0015072292881086469, 0.0010104501852765679, 0.0006631941650994122, 0.0022131972946226597, 0.0021576157305389643, 0.00030533125391229987, 0.0015257182531058788, 0.0011167670600116253, 0.00014229028602130711, 0.00020090023463126272, 0.0084111392498016357, 0.00041371423867531121, 0.00052610918646678329, 0.0039069852791726589, 0.00039496220415458083, 0.0022545675747096539, 0.00024274610041175038, 0.0011793287703767419, 0.00018662333604879677, 0.00039562661550007761, 0.0079677971079945564, 0.00036268401890993118, 0.0005026103463023901, 0.00025041642948053777, 0.00019142385281156749, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 16,-127,50,-43,28,-22,-50,20, 
  /* [1][0][][] */ 77,69,-30,-89,20,-14,-76,127, 
  /* [2][0][][] */ 35,7,-38,120,52,127,42,90, 
  /* [3][0][][] */ 72,74,-83,127,-101,-9,-7,17, 
  /* [4][0][][] */ -40,-92,73,14,13,22,-41,-127, 
  /* [5][0][][] */ 13,8,-35,37,-4,-24,40,127, 
  /* [6][0][][] */ 56,-25,-127,-84,104,23,53,-32, 
  /* [7][0][][] */ 127,14,17,-18,25,-8,82,-54, 
  /* [8][0][][] */ 21,-105,3,115,5,29,-3,-127, 
  /* [9][0][][] */ 117,-127,10,5,-5,9,-118,93, 
  /* [10][0][][] */ -127,-31,-115,16,-12,13,-88,51, 
  /* [11][0][][] */ -20,-43,-9,-100,-127,-36,45,-18, 
  /* [12][0][][] */ 9,2,-36,64,-70,-25,57,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -5,-32,-8,18,41,127,48,40, 
  /* [15][0][][] */ 36,7,14,-127,60,37,-50,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 18,27,127,23,-25,-10,24,29, 
  /* [18][0][][] */ 98,-127,24,44,-2,18,-113,6, 
  /* [19][0][][] */ -127,-14,29,71,-54,-53,-92,69, 
  /* [20][0][][] */ 36,30,-48,124,-30,-127,2,71, 
  /* [21][0][][] */ 57,22,127,7,-12,-11,61,9, 
  /* [22][0][][] */ -82,-19,-127,8,2,9,-106,3, 
  /* [23][0][][] */ -90,124,-18,-14,8,-2,127,-70, 
  /* [24][0][][] */ 5,-54,-49,83,-4,-62,95,127, 
  /* [25][0][][] */ 19,35,24,21,127,103,-78,-48, 
  /* [26][0][][] */ -79,-27,-127,0,7,17,-94,1, 
  /* [27][0][][] */ 0,-26,-32,0,-46,127,58,46, 
  /* [28][0][][] */ 3,-17,-15,42,24,127,47,51, 
  /* [29][0][][] */ 99,38,127,7,-21,-8,91,-1, 
  /* [30][0][][] */ -83,127,-28,-31,10,-6,102,-52, 
  /* [31][0][][] */ -40,-104,-22,8,47,-88,127,113, 
  /* [32][0][][] */ 8,4,-52,127,-4,88,83,120, 
  /* [33][0][][] */ -2,66,-15,-112,16,-15,-11,127, 
  /* [34][0][][] */ -21,96,-8,-96,33,-9,16,127, 
  /* [35][0][][] */ 127,4,-20,-29,12,36,105,-30, 
  /* [36][0][][] */ -127,-17,15,57,-35,8,-104,81, 
  /* [37][0][][] */ -5,-24,-14,20,31,127,50,50, 
  /* [38][0][][] */ 13,26,7,91,127,-2,-15,38, 
  /* [39][0][][] */ 6,22,37,-127,27,-2,-43,126, 
  /* [40][0][][] */ 96,35,127,1,-15,-1,100,-8, 
  /* [41][0][][] */ 3,-25,-24,78,54,127,64,94, 
  /* [42][0][][] */ -86,-7,127,27,-42,16,-27,63, 
  /* [43][0][][] */ -11,-53,7,101,-14,5,20,-127, 
  /* [44][0][][] */ 32,-1,-67,-127,61,-23,-9,-103, 
  /* [45][0][][] */ -86,127,-3,-48,17,1,76,-60, 
  /* [46][0][][] */ -127,-21,34,22,-27,33,-72,32, 
  /* [47][0][][] */ 116,15,123,2,28,-29,127,-10, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00097704760264605284, 0.00082468322943896055, 0.00067817966919392347, 0.00056780199520289898, 0.00054374273167923093, 0.0006334675126709044, 0.0006805677548982203, 0.002782144583761692, 0.00074283219873905182, 0.0044568064622581005, 0.0013584858970716596, 0.003897868562489748, 0.00035982191911898553, 3.937008052901092e-09, 0.0020000413060188293, 0.0003468214999884367, 3.937008052901092e-09, 0.012861721217632294, 0.00079518504207953811, 0.00068861129693686962, 0.0004818624584004283, 0.0095685003325343132, 0.00065577932400628924, 0.0032229386270046234, 0.00216066581197083, 0.0014181213919073343, 0.0047325240448117256, 0.004613672848790884, 0.00065289594931527972, 0.0032624739687889814, 0.0023880053777247667, 0.00030426215380430222, 0.00042958898120559752, 0.017985707148909569, 0.00088465341832488775, 0.0011249898234382272, 0.0083543844521045685, 0.00084455555770546198, 0.0048209871165454388, 0.00051906885346397758, 0.0025217821821570396, 0.00039906040183268487, 0.00084597629029303789, 0.017037700861692429, 0.00077553448500111699, 0.001074741710908711, 0.00053547043353319168, 0.00040932543925009668, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1178, -43603, -7765, -13018, -33210, -1264, -24368, -27107, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0019908386748284101, 0.0020643712487071753, 0.0024283460807055235, 0.0010837982408702374, 0.00099620886612683535, 0.0019458538154140115, 0.0014457893557846546, 0.00099199649412184954, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-24,4,0,127,-2,-3,-2,1,-116,-88,0,0,118,-1,0, 
  /* [1][0][][] */ 0,-30,2,89,74,14,18,6,1,-3,127,-44,0,30,-9,0, 
  /* [2][0][][] */ 0,-2,-3,-12,-57,6,11,4,1,1,-17,1,0,127,-10,0, 
  /* [3][0][][] */ 0,-13,-19,-127,82,23,68,15,-1,66,0,40,0,3,24,0, 
  /* [4][0][][] */ 0,43,-24,32,-48,31,127,12,1,-57,17,-10,0,-4,18,0, 
  /* [5][0][][] */ 0,-18,-10,-1,-25,-24,-12,15,-1,8,-5,-50,0,-6,127,0, 
  /* [6][0][][] */ 0,17,-3,1,48,-23,-23,-7,2,-112,116,63,0,127,60,0, 
  /* [7][0][][] */ 0,15,-15,127,5,-3,22,8,1,66,-54,75,0,-10,48,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.084610641002655029, 0.087735779583454132, 0.10320470482110977, 0.046061426401138306, 0.042338874191045761, 0.08269878476858139, 0.061446048319339752, 0.042159847915172577, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 19075, 26616, 12294, 10548, 49818, 15844, 25370, -12034, 7166, 29948, 14227, -445, 27074, 13199, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00013607957225758582, 0.00015072488167788833, 0.00028617869247682393, 0.00017007671704050153, 6.6594191594049335e-05, 0.0003305547870695591, 0.00015388318570330739, 1.8924733012681827e-05, 0.00025945351808331907, 0.00019591249292716384, 0.00073304632678627968, 0.00072724185883998871, 0.00023139963741414249, 0.00016134741599671543, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,78,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,16,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-25,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,34,-26,34,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-7,39,-39,52,-76,0,0,5,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,85,-58,0,-29,-111, 21,-7,18,0,4,14,9,22,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0057833818718791008, 0.0064058075658977032, 0.012162594124674797, 0.0072282603941857815, 0.0028302529826760292, 0.014048578217625618, 0.0065400353632867336, 0.00080430111847817898, 0.011026774533092976, 0.0083262808620929718, 0.031154468655586243, 0.030907778069376945, 0.0098344841971993446, 0.0068572647869586945, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 16048, -90683, 25299, 363927, 22914, 24125, 8657, -277247, 37906, 34704, 1292008, -1073741824, 68612, 41911, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00015360518591478467, 0.00019035763398278505, 3.5489978472469375e-05, 8.7952375906752422e-06, 0.00015471190272364765, 0.00013226666487753391, 0.00022880894539412111, 3.7019801766291494e-06, 4.9412374210078269e-05, 8.7136584625113755e-05, 4.488451850193087e-06, 1.1533876076441629e-09, 5.6564560509286821e-05, 6.4824183937162161e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 49,-4,29, -6,-27,8, -127,-123,-78, 
  /* [1][1][][] */ 6,-2,-3, -21,3,-12, 7,-30,0, 
  /* [1][2][][] */ 4,24,-2, 2,13,-6, 49,-14,10, 
  /* [2][0][][] */ 35,-14,-12, 80,113,-5, 50,-44,6, 
  /* [2][1][][] */ 12,5,-7, 74,127,-35, 26,-9,-10, 
  /* [2][2][][] */ 49,-79,15, 75,-54,-28, 35,-62,13, 
  /* [3][0][][] */ 10,35,6, 32,88,19, 1,4,-5, 
  /* [3][1][][] */ 24,39,8, 69,127,28, -13,-20,2, 
  /* [3][2][][] */ 4,3,3, 24,23,3, -2,-5,1, 
  /* [4][0][][] */ 60,92,1, 36,102,-1, 2,22,9, 
  /* [4][1][][] */ 51,97,47, 36,127,30, 43,64,-9, 
  /* [4][2][][] */ 49,67,20, 42,112,-2, -25,23,23, 
  /* [5][0][][] */ 2,-7,-127, -10,-9,-110, -16,20,-35, 
  /* [5][1][][] */ 6,-46,-122, 0,-49,-113, -4,7,-29, 
  /* [5][2][][] */ 3,15,-12, 7,3,-6, 5,16,-10, 
  /* [6][0][][] */ 27,-64,33, 50,-88,39, 10,-20,8, 
  /* [6][1][][] */ 40,-95,62, 68,-127,72, 9,-28,17, 
  /* [6][2][][] */ 24,-33,13, 19,-43,25, -11,8,-2, 
  /* [7][0][][] */ -32,15,3, -104,-39,0, -21,25,3, 
  /* [7][1][][] */ -14,-9,1, -127,-95,-8, -5,-5,5, 
  /* [7][2][][] */ -23,30,-8, -15,9,-2, -22,24,-3, 
  /* [8][0][][] */ 123,127,116, 123,127,115, 123,125,114, 
  /* [8][1][][] */ 123,125,115, 121,124,113, 122,124,113, 
  /* [8][2][][] */ 122,124,114, 121,124,113, 122,124,113, 
  /* [9][0][][] */ -24,-6,9, -16,-8,-1, 2,2,-11, 
  /* [9][1][][] */ 94,113,-8, 71,127,17, -9,19,26, 
  /* [9][2][][] */ -32,-29,10, -5,-38,-8, 8,1,-24, 
  /* [10][0][][] */ -24,-83,-18, 34,94,20, -9,-13,-3, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -17,-27,-1, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -21,-33,-3, 5,-52,3, 2,-119,-65, 
  /* [11][1][][] */ -58,-53,-26, -45,-76,-45, -25,-74,-67, 
  /* [11][2][][] */ -22,-58,-101, 117,127,57, -57,1,-66, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -52,-98,-18, -62,-112,-26, -10,-18,-6, 
  /* [13][1][][] */ 61,114,14, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -9,-20,2, 1,-19,-3, 0,4,-5, 
  /* [14][0][][] */ 48,-4,-35, 78,-25,-47, 28,-13,-23, 
  /* [14][1][][] */ 90,-15,-70, 127,-39,-84, 56,-21,-39, 
  /* [14][2][][] */ 52,-12,-47, 71,-23,-54, 21,-11,-22, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.039169318974018097, 0.048541191965341568, 0.0090499436482787132, 0.0022427854128181934, 0.039451532065868378, 0.033727996051311493, 0.058346278965473175, 0.00094400491798296571, 0.012600154615938663, 0.022219827398657799, 0.001144555164501071, 2.9411381774480105e-07, 0.014423961751163006, 0.016530165448784828, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.46765685081481934, } };
const TfArray<1, int> quant46_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.35028758645057678, } };
const TfArray<1, int> quant50_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45210134983062744, } };
const TfArray<1, int> quant53_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.45072415471076965, } };
const TfArray<1, int> quant54_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.22858645021915436, } };
const TfArray<1, int> quant58_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.16585233807563782, } };
const TfArray<1, int> quant61_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.25567817687988281, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.18918564915657043, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.28546431660652161, } };
const TfArray<1, int> quant66_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.053009569644927979, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.084687650203704834, } };
const TfArray<1, int> quant69_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
