/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.02.2024 03:12:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 27395, -39405, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00018131690740119666, 0.00012555964349303395, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 53,-33,-41,127,-42,-2,-19,63,111,-11,-31,-2,-19,47,-32,20,73,-85,0,-75,80,50,43,-50,-41,-59,-31,58,-26,-37,41,65, 
  /* [1][0][][] */ 57,83,79,-93,-83,84,-12,14,-44,-24,42,110,125,48,33,0,-44,4,-93,-99,-86,38,40,120,85,75,-52,-6,112,-119,-127,-23, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0046839974820613861, 0.003243608633056283, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -138, 138, 149, 506, -160, 186, -354, 200, -74, 60, 146, -334, 186, 170, -617, -492, -136, 6, 616, -368, -234, 77, 271, 164, -501, -484, -224, -183, 264, 47, 1014, 135, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3305986764607951e-05, 4.3956930312560871e-05, 4.1030747524928302e-05, 4.8912097554421052e-05, 4.1380946640856564e-05, 4.116608397453092e-05, 4.2453342757653445e-05, 4.3218744394835085e-05, 4.274809907656163e-05, 4.3357769754948094e-05, 4.4311145757092163e-05, 3.9687703974777833e-05, 4.1895000322256237e-05, 4.2753694287966937e-05, 4.4236036046640947e-05, 4.3832384108100086e-05, 4.4089931179769337e-05, 5.4105141316540539e-05, 6.7574939748737961e-05, 4.0715352952247486e-05, 4.289200296625495e-05, 4.1588584281271324e-05, 4.1739440348464996e-05, 4.0414659451926127e-05, 4.3410116632003337e-05, 4.3093488784506917e-05, 4.0600218198960647e-05, 4.02229925384745e-05, 4.457333852769807e-05, 3.9966253098100424e-05, 5.5052638344932348e-05, 4.3467971408972517e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -46,-52,89,-2,83,-12,-93,-105,52,-93,-113,-4,53,8,-42,47,-57,-36,-77,-56,-70,-109,0,105,-127,7,71,-59,105,2,-24,-78,77,-65,-96,63,-112,-80,-93,18,73,-88,-102,100,43,-108,107,-23,12,-58,-30,99,-83,-52,-95,102,24,65,111,-113,-73,78,-50,40,-4,14,64,80,52,87,82,-116,96,-119,42,75,-105,10,-66,21,50,13,93,-8,-62,-45,-89,104,28,113,-31,-110,14,69,30,5, 
  /* [1][0][][] */ -59,38,-89,3,-64,82,41,11,85,-100,-98,108,62,-18,26,66,112,-36,36,113,-37,-3,39,31,16,27,-40,94,18,11,101,-62,56,107,2,37,51,66,-5,-65,-55,13,-16,-92,-38,40,-22,-49,-23,-76,127,64,15,87,-75,-41,27,106,57,86,-46,114,-63,-88,-50,42,77,37,114,36,23,19,-111,82,-45,37,88,-43,-38,70,-73,77,-39,-111,32,114,-61,-56,87,82,79,26,95,99,32,1, 
  /* [2][0][][] */ 46,44,-85,103,-50,-59,97,102,-98,89,-33,125,93,-8,89,-115,-56,-24,35,54,-91,-13,120,26,-45,94,109,-3,-65,89,86,101,-75,-16,-85,-103,-91,105,118,-29,-116,-73,20,-3,-92,127,-18,-77,105,47,109,-86,-46,71,26,27,-73,108,-67,9,-6,61,-34,61,102,56,52,88,-87,79,15,-66,36,-88,36,19,-49,-24,7,9,45,-106,2,-40,5,-102,-14,-24,104,121,-41,7,-33,-77,-43,-65, 
  /* [3][0][][] */ 70,23,105,14,34,46,-90,38,69,55,63,11,71,100,82,37,101,104,-49,15,99,-58,-41,-94,31,-81,-48,127,34,-88,102,6,-43,-24,-18,0,-57,-18,38,47,-18,-77,-48,9,97,37,-42,-68,64,-90,32,-1,86,26,82,-92,-101,-102,-107,-25,-72,44,-32,84,47,-25,-35,-21,-25,-33,1,87,22,22,57,8,27,103,97,-20,-69,-32,24,86,47,46,-23,-104,-77,50,34,-39,110,-97,-79,116, 
  /* [4][0][][] */ 54,101,10,57,11,32,31,15,64,88,-9,50,25,-40,-13,-69,-30,-8,-54,19,106,-95,86,24,-15,-5,67,-55,-59,37,-70,-57,71,117,10,-111,-55,-10,-119,53,-55,-67,-78,-97,33,107,33,55,21,-43,-11,-83,-97,44,-91,21,33,-101,24,13,5,-80,-44,-66,-53,54,1,-32,25,-103,-106,-90,-57,24,100,59,60,-27,-8,-58,2,-40,-105,-21,-2,69,91,-2,-127,-79,47,42,28,97,-103,-15, 
  /* [5][0][][] */ 98,-90,62,91,14,-115,33,61,116,-121,2,-66,24,110,39,40,69,67,-72,99,42,57,22,-23,-127,-57,-16,-105,58,37,19,-102,-43,6,-61,27,-118,-32,55,23,-87,-47,48,104,-40,28,43,-50,-111,118,36,39,46,20,39,-17,113,59,-57,-37,43,-69,42,-85,-27,112,-25,27,88,9,114,-64,-49,71,-26,-84,17,-48,15,85,116,37,40,115,-80,85,0,48,80,-100,110,93,-7,36,80,-81, 
  /* [6][0][][] */ 15,-45,115,68,-84,-65,-9,62,-24,-84,0,-94,82,51,111,-127,37,-4,-8,102,-83,-126,106,54,-68,-91,-19,-60,-36,-120,40,-79,-95,-127,-58,-106,-10,35,-115,73,82,51,18,-16,-115,103,-94,-51,-89,8,-30,-72,48,-59,93,-31,7,-12,-76,108,-100,0,67,-75,-55,61,95,-57,67,-12,-110,-11,54,-61,-88,-43,-89,-106,-63,-25,27,-27,38,-34,-78,-90,-46,-102,79,91,98,18,-60,-72,73,-35, 
  /* [7][0][][] */ 108,74,-38,-42,-88,120,-14,1,120,4,-92,22,59,-85,50,78,58,22,17,112,58,40,-1,92,-67,106,44,60,-69,113,-19,39,32,25,76,104,-99,90,-8,-23,99,-71,87,73,53,0,105,-106,59,-41,-127,-65,-16,82,24,28,120,-87,17,-53,9,-4,84,-111,-67,-50,73,25,-107,20,72,89,92,20,64,63,-55,60,-94,46,98,-38,-16,-73,91,37,-105,99,86,10,89,65,-54,-35,-3,-64, 
  /* [8][0][][] */ 17,30,-19,-92,88,22,-78,-23,5,33,41,88,-7,-51,-85,-74,-74,93,-58,12,21,-25,79,107,-94,81,46,95,-76,10,-94,113,99,-37,39,-11,116,-3,-27,77,75,97,-115,-122,-4,-33,-32,108,20,-103,-78,-11,-67,-13,-36,-116,49,99,-94,101,102,42,39,127,-41,-54,-21,111,-101,45,27,-12,76,77,5,37,-55,106,84,77,31,89,-124,-91,22,42,69,-52,28,-40,-61,94,-95,-111,-53,63, 
  /* [9][0][][] */ 16,18,123,51,93,-86,-47,-112,46,72,-6,70,4,-80,-101,-21,8,5,-92,-41,5,101,-105,-105,127,-13,-10,31,-6,-25,-88,108,71,4,21,-16,-67,20,-20,-37,52,-65,59,-88,93,26,-98,56,59,-5,-68,-52,77,-65,-63,109,99,-45,3,-3,-86,119,115,-67,-52,6,107,58,-39,105,122,-88,20,93,-69,-87,-73,-115,-36,123,35,39,101,37,-43,-84,40,-9,99,40,-6,110,107,6,74,-30, 
  /* [10][0][][] */ -62,85,69,-59,-42,106,109,30,43,29,27,-62,96,87,-31,13,-29,81,-100,-62,-8,31,59,-63,11,63,-113,-123,-40,83,-88,-77,80,103,127,81,-40,13,-25,33,-28,119,-102,-33,-99,-52,5,-54,-2,8,53,17,63,26,-59,-25,-98,-6,27,-40,8,78,111,28,120,-66,-92,-25,34,-11,-86,-56,84,55,-78,94,-8,64,67,19,80,-7,67,104,-93,67,104,-16,45,11,-19,-67,-37,-39,-38,-58, 
  /* [11][0][][] */ 101,10,-27,101,127,28,49,23,110,96,-93,111,-30,-100,22,-80,-66,-117,47,26,29,72,19,-127,-119,-109,-35,63,74,-20,17,-23,-115,-85,52,49,-73,77,-38,-78,-33,106,-89,1,-51,-69,-101,-104,76,102,116,48,-118,-104,10,20,-80,-67,-54,-103,-103,90,70,-10,32,89,-71,14,77,52,-102,-82,35,94,-115,45,-90,29,-59,86,-123,-37,-83,-64,43,-102,8,-29,-108,-18,-2,-119,-97,-39,-94,-56, 
  /* [12][0][][] */ 11,76,-74,7,62,13,-30,40,-71,61,-10,21,-45,21,53,-77,-95,-29,-46,-84,37,-6,22,106,-86,-40,105,-111,104,21,-33,122,-89,-66,-34,26,-1,-70,-10,45,125,49,-107,-36,-25,-80,-32,125,-43,-109,-66,114,44,6,-80,96,-18,-51,55,74,71,118,-1,46,121,42,-43,118,70,112,49,84,88,109,-13,-13,-29,40,-115,-96,-53,100,60,19,-31,35,62,127,-85,-107,83,45,117,-5,35,83, 
  /* [13][0][][] */ 106,-54,91,101,71,119,87,67,79,-107,16,-22,92,79,70,-44,-112,-66,-63,25,77,-23,123,-42,-76,48,8,14,-79,-83,85,40,42,108,-9,45,-82,-24,31,71,-58,85,-48,16,-45,33,4,-25,38,115,-32,-100,-92,31,106,-77,-46,35,-18,-70,-19,119,-73,8,-49,-56,-89,87,-29,-7,104,7,-89,31,-73,-46,-98,72,86,-63,59,-101,106,24,-78,-100,99,127,-2,-49,-81,55,123,-43,71,-1, 
  /* [14][0][][] */ -66,-107,71,54,76,-42,-30,-121,-89,-47,53,73,-29,-87,-103,-91,-65,-72,5,10,-53,18,-15,45,-121,-84,-46,20,-121,-117,-86,24,90,-36,-46,-1,80,100,26,-122,-19,-121,23,72,51,-118,50,-96,99,31,75,38,85,-27,-30,-2,-57,7,40,86,-21,-92,-37,62,-95,-26,61,-116,-100,-97,-93,89,-3,66,36,-83,45,-117,39,23,30,-24,-123,-42,-127,-102,-115,90,94,-7,73,-57,80,86,-29,54, 
  /* [15][0][][] */ 5,-33,-30,58,91,-91,50,-103,47,-8,-79,2,100,-8,-98,-119,79,2,-91,18,38,9,62,98,82,55,29,89,13,50,55,-104,1,-3,-72,-12,-73,101,99,-76,7,100,-60,-30,19,-84,-52,-87,-13,-84,-16,22,-96,-109,-54,-19,61,41,-50,98,-53,-73,-5,107,-41,87,-79,-7,-68,-10,54,-82,12,-17,51,-111,-8,46,94,67,-88,50,-115,-69,-127,-42,-100,28,74,62,-111,-44,41,100,-110,97, 
  /* [16][0][][] */ -67,-3,127,-63,71,107,-56,36,44,47,-108,68,-12,-55,-52,-59,101,75,78,66,98,76,-40,48,-8,43,-64,81,-103,9,36,10,-97,69,47,48,-32,46,-56,-63,16,-51,64,85,68,96,91,-15,-54,-109,-15,100,-38,106,64,34,26,78,72,9,101,107,30,76,47,7,-35,97,31,86,-35,-19,30,101,58,100,-16,95,-106,-10,10,-72,44,8,8,97,93,2,66,11,10,109,53,-39,-86,19, 
  /* [17][0][][] */ 62,-81,-34,92,-69,-113,-52,-43,49,-55,79,29,62,94,-76,29,34,31,29,79,-30,-17,23,-37,-51,90,-74,-21,85,-57,5,40,-68,25,43,53,-67,120,-22,-52,-46,-13,20,-10,-38,21,117,-80,30,56,72,53,-37,112,39,-4,-124,109,-127,-72,87,-70,28,34,-26,-30,20,-112,-56,38,81,57,-34,-116,-47,3,72,-50,17,-61,-3,-26,-8,-63,-76,32,88,-8,53,51,-126,-101,54,91,56,31, 
  /* [18][0][][] */ -48,71,127,-20,38,2,-51,30,6,72,-53,-22,-19,30,58,-29,22,-11,47,10,61,-12,25,-29,72,-69,0,105,19,26,4,63,39,-17,-58,-70,-1,22,-13,63,-25,5,-34,19,-46,16,7,10,20,-20,42,22,-61,-11,44,48,15,16,0,-65,55,75,68,39,-43,-75,0,89,33,-55,-29,70,-36,4,-17,-28,45,54,18,-40,-33,18,-24,-38,71,9,46,37,-72,-40,5,100,52,-38,22,-10, 
  /* [19][0][][] */ 16,27,80,35,65,-92,96,92,93,-68,26,-17,-102,30,-63,58,73,-113,114,57,-27,79,-62,9,86,-87,26,-72,-99,-127,-72,46,82,-90,30,-4,6,-76,-63,-110,42,-126,-92,7,-94,27,76,-102,-32,35,-45,43,-40,12,4,-15,22,99,-3,-33,54,-61,102,64,-77,-7,-32,-5,-14,51,75,-57,-68,-119,-61,-87,-27,-122,11,109,57,-123,-35,78,-95,-12,4,-8,90,28,-6,65,-39,115,70,-53, 
  /* [20][0][][] */ -15,67,100,91,-69,89,15,56,11,8,-90,-4,-12,81,38,-77,-55,-39,-55,-34,16,-46,-79,-74,93,-80,-105,71,16,5,-44,107,105,39,-22,49,41,-38,-22,-108,-89,-40,-93,-105,-24,-68,-76,101,61,-127,-109,32,43,104,50,-7,92,66,93,84,104,-54,-70,-16,-33,-73,-51,17,-97,-84,-72,71,-65,-73,29,32,102,76,107,112,80,12,76,-31,55,112,-21,65,13,92,43,61,12,18,-10,-1, 
  /* [21][0][][] */ 89,82,57,-107,75,-77,77,14,-2,-70,-74,47,4,43,-53,-95,-104,-30,30,-15,116,-51,74,-84,36,-84,-37,66,19,10,-9,-24,4,20,-90,-112,115,103,-118,-40,-4,11,30,-12,-104,-83,-79,96,-24,-59,-7,92,34,69,-94,30,-57,57,-49,123,63,-78,16,-25,86,36,-38,-81,-107,-2,64,85,34,-25,77,61,-110,-30,63,106,16,99,41,-77,27,-101,69,-80,-103,81,98,-127,-41,-64,70,-33, 
  /* [22][0][][] */ 38,-44,-90,-101,89,-60,116,67,-95,93,-70,-98,119,-105,-114,-80,48,92,-127,-75,101,-71,41,38,92,5,-121,87,-52,-71,-61,-107,51,68,17,26,13,-10,-47,-117,9,-4,10,108,62,-109,102,-16,-59,-77,2,-13,-63,-93,-50,42,-11,-20,-22,-23,127,-75,-73,-122,-63,27,-113,-49,120,115,-18,7,-61,11,73,-90,54,-46,72,101,118,-90,-70,-113,89,95,111,-25,-49,41,-82,67,31,26,-27,108, 
  /* [23][0][][] */ 61,-90,-14,65,71,-122,8,-107,65,-89,94,84,14,-106,22,-41,99,-33,-114,96,109,-84,113,-32,-39,-5,88,11,83,55,78,-45,-47,49,33,44,103,-2,-109,3,-107,6,15,-115,-80,-93,127,32,80,-109,-78,-49,90,-61,-56,102,-97,-14,98,52,-106,-97,-57,-24,40,47,-123,-123,79,-8,124,-67,-10,-47,-39,-112,54,-22,101,120,-52,-61,36,-111,104,5,126,-14,-86,46,97,-14,125,-46,-29,94, 
  /* [24][0][][] */ -86,-60,-115,-78,-91,-118,-80,-101,55,106,72,34,103,50,-51,-127,-93,31,16,-56,84,-91,-67,-49,48,-38,62,46,94,47,-7,-67,-4,0,40,18,-65,-96,55,-31,-85,-110,91,-7,11,-47,33,60,-93,-57,-28,4,59,56,59,-84,-15,66,20,-11,80,-17,31,85,-100,85,-58,-96,-111,41,-68,-38,-48,36,84,89,53,-87,-115,-85,-90,-102,-74,-125,-9,52,-25,-109,15,-118,-1,-78,-29,18,-99,21, 
  /* [25][0][][] */ -91,-70,-93,-20,80,-79,-114,39,36,-125,-51,12,63,-14,-122,-35,-85,50,21,-111,58,72,-24,-70,1,-61,-115,26,64,-97,27,105,84,-121,35,59,85,-69,-36,-30,-95,85,-118,-11,85,28,57,23,-116,83,-76,-7,31,-24,-73,6,-32,42,-116,62,108,30,41,36,-8,63,-30,-15,-98,-16,-35,-124,21,-119,60,9,60,60,3,14,38,38,-56,70,-88,-60,-116,-102,-32,-50,95,17,-127,-22,-23,-87, 
  /* [26][0][][] */ 65,-126,-7,-16,-73,-8,-14,-16,-116,-127,110,87,-82,-54,10,-17,116,30,-91,-70,9,74,103,11,71,61,14,57,7,2,-98,-2,-32,-66,-114,-114,-71,87,-59,117,-108,104,58,32,-71,75,-47,106,-24,22,-8,101,6,-49,-7,-113,102,63,57,24,-3,-101,66,-11,118,-25,-61,64,-99,81,88,96,84,-91,-94,15,44,-116,-104,16,-34,86,81,-79,82,1,-51,10,-93,119,22,21,-66,115,52,91, 
  /* [27][0][][] */ 11,7,-61,-110,-122,-78,-75,-19,44,103,38,-115,-31,57,86,-33,67,-19,84,-91,-102,10,-33,-27,-109,46,-115,7,68,27,-37,-12,64,71,-98,-93,-98,-71,-121,94,-103,16,28,15,105,24,70,108,95,77,58,-83,-81,-93,-9,-38,106,-28,-122,-85,-64,-69,-39,52,39,-52,-120,114,55,8,-127,5,62,-49,-12,-91,48,-73,92,108,89,-31,120,-62,-81,-90,-37,31,-54,-6,14,-55,57,17,90,55, 
  /* [28][0][][] */ 84,0,65,50,-116,-78,-86,-68,-27,-116,63,70,-77,-71,7,102,97,114,-89,55,-12,29,-97,-65,-127,86,-78,-76,-56,-86,4,-39,-104,18,84,72,24,-100,-27,27,104,51,-81,53,-103,-4,19,52,21,-40,-71,-32,-85,21,49,43,41,-3,59,56,4,-22,-90,-22,58,81,-15,71,-76,37,-89,-28,69,33,0,-101,-113,-56,-78,43,-67,-84,121,-28,65,-109,71,-71,-87,-69,-64,-86,-27,61,-97,-58, 
  /* [29][0][][] */ 61,54,86,-42,-56,13,-120,8,115,-16,-93,-100,106,-110,-45,-44,-106,114,26,-64,-84,-29,62,8,-19,5,-37,-11,-110,-12,113,-7,61,3,-81,-66,-8,108,-13,111,51,114,-44,88,6,112,-60,-23,22,-11,62,-104,77,-107,120,49,-98,58,-53,119,-127,115,-101,-41,-69,-70,65,109,91,-87,36,-79,123,92,66,43,119,-63,-25,48,-6,-68,-13,-84,69,126,49,79,-43,105,95,82,-116,12,-2,78, 
  /* [30][0][][] */ 27,-48,44,56,-34,94,-23,9,102,7,21,-11,-66,20,68,24,22,42,76,-50,32,-48,-66,37,-46,54,-35,127,12,-74,-67,3,0,-44,-71,-48,72,-2,18,49,82,-47,0,108,101,-24,86,67,2,69,23,-83,77,-39,22,89,-42,-30,-22,-5,-77,29,17,-7,-54,-59,-39,116,-27,89,47,-8,-19,96,122,6,-28,-16,-30,-38,35,90,-66,-10,-69,46,-68,88,-24,-75,105,40,-23,13,9,-50, 
  /* [31][0][][] */ 94,-92,71,104,127,74,-54,-90,-34,-13,-74,-77,101,-121,-39,114,-47,-91,49,52,63,43,-22,115,61,-104,38,76,-62,-73,50,107,19,20,-48,-8,114,-29,-63,-107,60,-67,-30,42,8,-55,-38,35,70,28,121,-21,-104,-59,-76,25,-109,67,6,121,-42,27,93,-43,78,112,-37,-71,88,-103,-111,10,-49,-33,15,20,-56,-33,54,87,-74,22,57,71,59,101,-92,14,18,-49,10,-50,12,107,-2,17, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001840504352003336, 0.0018681695219129324, 0.0017438067588955164, 0.0020787641406059265, 0.0017586902249604464, 0.0017495586071163416, 0.001804267056286335, 0.0018367965240031481, 0.001816794159822166, 0.0018427051836624742, 0.0018832236528396606, 0.0016867273952811956, 0.0017805375391617417, 0.0018170319963246584, 0.0018800314282998443, 0.0018628763500601053, 0.0018738220678642392, 0.0022994684986770153, 0.0028719350229948759, 0.0017304024659097195, 0.0018229101551696658, 0.0017675147391855717, 0.0017739261966198683, 0.0017176229739561677, 0.0018449299968779087, 0.0018314732005819678, 0.0017255092971026897, 0.0017094771610572934, 0.001894366811029613, 0.0016985657857730985, 0.0023397370241582394, 0.0018473886884748936, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2331, 3495, 7918, 2728, -3718, -4556, 21356, 2082, 2666, -2363, 11560, -230, -9934, 2367, 21242, 6203, 14304, 6774, -4072, -7062, 4965, 32811, 27139, 25288, 1456, 1164, 5307, 2767, 2264, -5676, 10667, -3051, -281, 4871, -41, 889, 11692, 5413, -1866, 6416, 10114, 7857, 6874, 14460, 5234, 4629, 1924, 7511, 4564, -5355, -6219, 559, -245, -1316, 2882, 40, 209, -1310, -4770, 12462, -1057, 1537, -1280, -2294, -3245, 7205, 24144, 2760, -2350, 982, 1906, 3068, 1664, -1548, 594, 11942, -575, 20310, 18332, -1018, 7784, 2209, -378, 1478, 14386, 9058, 5398, 1390, 5608, 4600, -558, -9181, 928, -2576, -2081, -2456, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00026459840591996908, 0.00044635470840148628, 0.00031038251472637057, 0.00032246735645458102, 0.00028789558564312756, 0.00032487232238054276, 0.00015542608161922544, 0.00033818738302215934, 0.00022806097695138305, 0.00027936568949371576, 0.00017139124975074083, 0.00028618486248888075, 0.00025555118918418884, 0.0011948333121836185, 0.0001459929917473346, 0.00018507923232391477, 0.00012932137178722769, 0.00021464643941726536, 0.00048017516382969916, 0.00024086008488666266, 0.00012421522114891559, 8.1819103797897696e-05, 0.00011330082634231076, 6.5958935010712594e-05, 0.00015707194688729942, 0.00040534869185648859, 0.00056167546426877379, 0.00040842653834261, 0.00023188527848105878, 0.00034592504380270839, 0.00013892473361920565, 0.00025470778928138316, 0.00021346312132664025, 0.00023848999990150332, 0.00033756985794752836, 0.00027792216860689223, 0.00016224355204030871, 0.00019750891078729182, 0.00032921403180807829, 0.00028462064801715314, 0.0001265752362087369, 0.00033042737049981952, 0.00021806146833114326, 0.00016078967018984258, 0.00036844066926278174, 0.00021716335322707891, 0.00026517789228819311, 0.00028735905652865767, 0.00029206313774921, 0.00024954578839242458, 0.00024969561491161585, 0.0001654949301155284, 0.00047342025209218264, 0.00023446977138519287, 0.00026924334815703332, 0.00030315460753627121, 0.00044183930731378496, 0.00021494949760381132, 0.00032558254315517843, 0.00014802334771957248, 0.00073097943095490336, 0.0004330007650423795, 0.00022273646027315408, 0.00033853173954412341, 0.00057038635713979602, 0.00026648482889868319, 8.9528373791836202e-05, 0.00015971367247402668, 0.00048257547314278781, 0.00034140099887736142, 0.00021427719912026078, 0.00016571673040743917, 0.00081425451207906008, 0.00026953176711685956, 0.00029438786441460252, 0.00018044754688162357, 0.00024506481713615358, 9.240318468073383e-05, 9.855737880570814e-05, 0.00019472753047011793, 0.00018586796068120748, 0.00014555963571183383, 0.00018059070862364024, 0.00016875770234037191, 0.00012614797742571682, 0.00026386923855170608, 0.00043481320608407259, 0.00020948091696482152, 0.00011696450383169577, 0.00044403347419574857, 0.00017788994591683149, 0.00021697531337849796, 0.00024818954989314079, 0.00040740057011134923, 0.00029684594483114779, 0.00016313894593622535, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -15,74,-3,-127,-42,-39,-22,-60,-21,15,-2,69,11,-59,-6,46, 
  /* [1][0][][] */ -43,25,-62,4,-21,-13,12,-77,67,43,-48,33,9,13,30,-127, 
  /* [2][0][][] */ -18,16,-33,28,20,3,-35,-53,127,-28,18,38,-14,64,-58,3, 
  /* [3][0][][] */ 63,-83,14,-105,11,-48,7,-1,101,-4,61,21,-18,37,18,127, 
  /* [4][0][][] */ -74,45,18,48,22,-20,5,58,15,12,18,-25,-127,-14,-24,21, 
  /* [5][0][][] */ -4,69,114,9,17,84,-80,69,-46,63,-18,-25,36,-39,-127,14, 
  /* [6][0][][] */ 49,-70,118,-127,34,-15,-28,95,-84,-92,41,-50,-3,79,-15,85, 
  /* [7][0][][] */ 30,112,-27,-56,99,17,-5,-46,127,82,-26,18,27,-24,51,33, 
  /* [8][0][][] */ 9,-80,9,-77,35,-50,11,-64,31,41,76,-2,13,127,62,53, 
  /* [9][0][][] */ 2,-24,-8,127,44,1,31,-58,-56,110,37,-15,-3,-57,-12,-4, 
  /* [10][0][][] */ 12,18,-37,-127,7,-30,13,32,15,-30,13,-51,-33,-60,3,37, 
  /* [11][0][][] */ 12,1,31,-25,83,-51,108,-68,-100,43,-6,17,-6,127,-68,-28, 
  /* [12][0][][] */ 83,8,-127,-11,31,-113,37,30,14,60,-87,-62,-27,120,-16,24, 
  /* [13][0][][] */ -15,5,-22,10,8,-127,-1,19,2,-8,4,-4,12,-16,6,11, 
  /* [14][0][][] */ 42,-43,118,-42,69,-9,-127,-101,-30,-46,22,7,2,-77,-18,-27, 
  /* [15][0][][] */ -69,21,-22,-42,0,-7,127,38,-44,55,57,-41,-8,55,54,1, 
  /* [16][0][][] */ 7,66,127,104,-6,10,97,55,-87,13,-64,-12,-2,9,6,-90, 
  /* [17][0][][] */ -48,-109,-21,34,-75,-18,-69,15,-127,-36,21,-39,-3,48,61,-44, 
  /* [18][0][][] */ 4,28,-3,67,36,5,25,-6,69,45,-29,-18,9,127,58,16, 
  /* [19][0][][] */ 19,-24,31,9,111,8,-93,-58,-107,-65,-47,-127,-21,-47,-8,-33, 
  /* [20][0][][] */ 104,-40,-44,-8,30,-127,27,30,-31,41,-122,-39,11,6,-12,-28, 
  /* [21][0][][] */ 50,-2,53,-9,-10,21,-23,85,-2,-85,73,40,-2,127,42,66, 
  /* [22][0][][] */ -7,26,-26,127,-63,-15,113,79,-22,41,-27,26,-8,-3,42,11, 
  /* [23][0][][] */ 70,11,122,-110,82,3,-20,66,6,19,-8,-49,16,-19,-127,31, 
  /* [24][0][][] */ -127,46,8,-25,-5,109,30,-23,-13,24,108,-5,-78,13,69,-20, 
  /* [25][0][][] */ 27,23,14,17,13,6,65,-52,-3,-127,-12,-17,-11,-24,20,22, 
  /* [26][0][][] */ -32,-12,5,-1,-58,-20,-32,-38,-124,-38,-4,-45,6,127,-29,63, 
  /* [27][0][][] */ -14,32,-1,63,31,-28,-20,-32,65,7,-20,18,9,127,-13,3, 
  /* [28][0][][] */ 25,64,63,58,127,-20,43,40,-100,-19,-58,-47,18,89,55,-25, 
  /* [29][0][][] */ 5,-7,10,12,33,-7,14,46,-25,-9,-20,-127,2,-19,-16,8, 
  /* [30][0][][] */ -12,77,-43,72,-44,-28,51,-127,-51,60,-23,-10,55,33,86,95, 
  /* [31][0][][] */ -46,-14,-20,-62,0,13,-63,-114,29,75,-5,-127,-32,-40,-4,20, 
  /* [32][0][][] */ -127,-73,-12,61,45,35,-15,4,1,-45,-96,52,69,5,59,64, 
  /* [33][0][][] */ -1,-57,-30,-12,-90,-21,-70,3,56,16,7,-57,24,-120,127,36, 
  /* [34][0][][] */ 46,-5,75,33,55,24,-53,93,-83,-48,72,22,17,1,-22,127, 
  /* [35][0][][] */ -35,46,-66,12,-14,-29,36,-120,80,89,-91,-6,5,-12,82,-127, 
  /* [36][0][][] */ -41,49,7,127,31,37,95,18,2,25,-14,4,-6,32,-67,-64, 
  /* [37][0][][] */ -5,-3,12,-72,-4,8,-52,-57,-74,-19,9,4,12,-127,70,-40, 
  /* [38][0][][] */ 47,90,-12,-54,127,-5,39,-37,111,80,-21,-10,10,-34,50,19, 
  /* [39][0][][] */ -20,59,-5,-127,-10,0,-38,40,39,-65,-22,-15,12,65,38,35, 
  /* [40][0][][] */ -22,-10,-16,-120,-7,11,-25,-52,-127,-11,6,-9,-5,-112,108,-86, 
  /* [41][0][][] */ -5,-19,-36,-18,0,-38,12,-10,-30,13,-43,-3,-127,15,32,40, 
  /* [42][0][][] */ 127,100,-48,-28,-92,-44,-26,-69,-2,38,91,-65,-58,52,117,-125, 
  /* [43][0][][] */ -33,127,-101,9,76,8,91,-36,63,78,-19,16,26,-100,-89,-62, 
  /* [44][0][][] */ -39,-3,2,-39,65,11,-99,-127,-8,-8,27,10,-4,-29,65,-71, 
  /* [45][0][][] */ -20,53,-127,-30,22,-52,11,-73,14,20,14,-56,27,-13,46,-20, 
  /* [46][0][][] */ 15,-9,-10,-82,-9,4,28,-27,-119,-20,5,8,-15,-127,63,-32, 
  /* [47][0][][] */ 16,50,22,-13,127,-7,-32,15,-47,35,3,27,9,6,107,-32, 
  /* [48][0][][] */ -127,-68,-17,39,68,21,0,-22,6,-21,-97,45,66,11,64,40, 
  /* [49][0][][] */ 10,14,81,86,127,2,37,13,-121,-49,-34,-73,19,121,15,-65, 
  /* [50][0][][] */ 34,-14,-67,-22,20,-127,-25,-2,-24,-16,-11,-42,36,-25,2,24, 
  /* [51][0][][] */ 16,30,49,11,21,-1,8,21,-127,62,-3,-111,7,-114,-17,80, 
  /* [52][0][][] */ 24,51,15,48,48,-30,47,34,65,90,-45,-83,33,127,90,43, 
  /* [53][0][][] */ 1,-57,-14,-14,-87,-18,-71,-1,43,25,10,-59,27,-127,116,13, 
  /* [54][0][][] */ 44,-6,-42,18,127,89,-122,-50,-70,-14,-25,-67,3,-36,-26,-49, 
  /* [55][0][][] */ 61,-22,10,-1,43,-51,-67,-127,-43,-72,-70,7,-10,-32,23,-3, 
  /* [56][0][][] */ -23,17,20,-18,-11,-22,-97,66,-6,127,1,-8,28,9,-5,3, 
  /* [57][0][][] */ -4,20,-49,-17,-59,-46,114,88,-23,23,-7,4,32,29,127,-12, 
  /* [58][0][][] */ 47,13,-127,40,117,99,-43,39,-104,-28,-8,-11,-25,26,-13,-25, 
  /* [59][0][][] */ -102,67,117,26,-79,-68,127,127,26,-1,36,-10,14,18,76,-2, 
  /* [60][0][][] */ -3,2,-67,5,28,-127,-36,-12,-1,-20,4,-17,37,-12,-11,-4, 
  /* [61][0][][] */ 27,-13,32,127,88,18,31,14,-105,-1,13,38,-16,18,38,-51, 
  /* [62][0][][] */ -52,127,11,-44,-29,-3,-69,54,-18,-62,-77,-50,-15,-89,-56,-38, 
  /* [63][0][][] */ -56,39,-41,127,-87,15,-68,-38,-65,-14,-9,-26,13,46,34,45, 
  /* [64][0][][] */ 21,-4,10,36,-1,0,-5,67,21,-1,-25,-46,-13,-127,62,2, 
  /* [65][0][][] */ -1,-51,22,-123,40,-50,78,-31,-22,55,1,-127,-21,-5,20,-45, 
  /* [66][0][][] */ 16,-5,48,-16,4,20,-21,96,13,-65,51,48,13,127,12,65, 
  /* [67][0][][] */ -1,48,-22,-127,-4,-2,-57,42,87,-95,-24,0,22,79,67,37, 
  /* [68][0][][] */ -21,25,127,4,8,-5,4,8,-43,-16,-23,-40,7,-23,88,-23, 
  /* [69][0][][] */ 127,64,-10,-7,-88,-46,-14,-39,-3,22,74,-66,-66,48,69,-90, 
  /* [70][0][][] */ 50,-1,-48,-15,-26,19,60,127,-39,84,-41,-1,8,60,-23,27, 
  /* [71][0][][] */ -1,10,-13,14,-1,-72,-5,18,-30,18,-72,12,-127,2,40,45, 
  /* [72][0][][] */ 5,21,-127,13,5,11,23,81,-34,-25,13,0,19,16,0,1, 
  /* [73][0][][] */ -46,22,44,3,50,-39,-76,-127,19,-84,38,-14,14,-48,43,-17, 
  /* [74][0][][] */ -5,38,43,127,20,0,-86,79,-63,11,-42,45,23,-111,32,-96, 
  /* [75][0][][] */ -36,44,-58,7,16,20,1,-25,120,13,-3,15,30,127,-35,-7, 
  /* [76][0][][] */ -5,-11,-1,22,5,-10,-17,60,21,-33,-16,-127,-2,-4,4,7, 
  /* [77][0][][] */ -37,45,-17,127,-38,56,55,104,33,37,1,40,9,-7,-31,-25, 
  /* [78][0][][] */ 0,6,44,-103,47,-32,-41,36,37,-62,16,-29,30,127,13,34, 
  /* [79][0][][] */ -16,-94,-81,-50,-94,-11,30,-90,127,20,28,57,14,39,42,-60, 
  /* [80][0][][] */ -66,10,96,-88,42,-1,-8,-104,-44,32,-35,-96,47,127,67,-70, 
  /* [81][0][][] */ -42,42,-127,24,69,-125,-12,53,-8,-40,58,-6,27,-2,12,-2, 
  /* [82][0][][] */ 127,-21,-5,11,7,-113,-8,17,-23,-6,-93,-11,87,2,2,26, 
  /* [83][0][][] */ -36,75,-112,-83,-29,-10,50,-116,61,56,-47,-127,11,45,46,96, 
  /* [84][0][][] */ -43,40,62,-28,-1,-18,50,-127,-34,40,-2,-47,35,58,56,-8, 
  /* [85][0][][] */ -86,127,29,-114,-68,-23,-33,-2,-48,-12,-61,31,10,-5,-94,-29, 
  /* [86][0][][] */ 4,-4,-19,-1,-15,-37,127,29,-4,-26,-8,-2,4,25,80,-9, 
  /* [87][0][][] */ -20,-41,3,-123,15,-32,41,-12,-2,8,-8,-127,-20,9,8,-34, 
  /* [88][0][][] */ 71,-19,46,-6,36,-95,-14,27,-47,41,-127,-58,65,40,78,-18, 
  /* [89][0][][] */ 17,-18,-42,-45,25,-7,-30,-12,-41,2,37,-57,127,-2,25,-48, 
  /* [90][0][][] */ -1,-58,46,-65,75,-5,-67,85,60,-83,-43,-44,-15,115,16,-127, 
  /* [91][0][][] */ -50,-8,-33,-36,22,-11,-35,-96,15,49,1,-127,-39,-7,-5,15, 
  /* [92][0][][] */ -17,13,43,13,-1,-127,18,5,-2,-20,-3,-16,-1,-27,20,6, 
  /* [93][0][][] */ 35,-17,127,-7,-51,58,24,-33,-17,21,-66,-14,-21,2,32,1, 
  /* [94][0][][] */ 38,2,-13,-26,28,-12,-9,0,-39,-14,10,-66,127,-22,32,-29, 
  /* [95][0][][] */ 127,105,3,40,-91,-7,-81,-5,-22,-19,106,-36,-35,32,82,-85, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00077560485806316137, 0.0013083786470815539, 0.00090980972163379192, 0.00094523339066654444, 0.00084389484254643321, 0.00095228297868743539, 0.00045559316640719771, 0.00099131278693675995, 0.00066850445000454783, 0.00081889150897040963, 0.00050239113625138998, 0.00083888025255873799, 0.00074908521492034197, 0.003502358915284276, 0.00042794240289367735, 0.00054251408437266946, 0.00037907366640865803, 0.0006291830213740468, 0.0014075149083510041, 0.00070602184860035777, 0.00036410626489669085, 0.00023983250139281154, 0.00033211338450200856, 0.00019334233365952969, 0.00046041762107051909, 0.0011881795944646001, 0.0016464128857478499, 0.0011972015490755439, 0.00067971443058922887, 0.0010139938676729798, 0.00040722353151068091, 0.00074661296093836427, 0.00062571442686021328, 0.00069907453143969178, 0.00098950264509767294, 0.00081466021947562695, 0.00047557690413668752, 0.00057894858764484525, 0.00096500967629253864, 0.00083429517690092325, 0.00037102404166944325, 0.00096856628078967333, 0.00063919334206730127, 0.00047131520113907754, 0.0010799928568303585, 0.00063656072597950697, 0.00077730353223159909, 0.00084232212975621223, 0.00085611094255000353, 0.0007314818212762475, 0.00073192105628550053, 0.00048510750639252365, 0.0013877145247533917, 0.00068729021586477757, 0.00078922038665041327, 0.00088862283155322075, 0.0012951428070664406, 0.00063007138669490814, 0.00095436483388766646, 0.00043389390339143574, 0.0021426856983453035, 0.0012692348100244999, 0.00065289693884551525, 0.0009923222241923213, 0.0016719467239454389, 0.00078113446943461895, 0.0002624303160700947, 0.00046816118992865086, 0.0014145508175715804, 0.00100073276553303, 0.00062810070812702179, 0.00048575765686109662, 0.0023867860436439514, 0.00079006579471752048, 0.00086292537162080407, 0.00052893743850290775, 0.00071834702976047993, 0.00027085712645202875, 0.00028889661189168692, 0.00057079567341133952, 0.00054482603445649147, 0.0004266721080057323, 0.00052935705753043294, 0.00049467151984572411, 0.00036977164563722908, 0.00077346747275441885, 0.0012745475396513939, 0.00061404157895594835, 0.00034285255242139101, 0.0013015745207667351, 0.00052144046640023589, 0.00063600955763831735, 0.00072750641265884042, 0.0011941941920667887, 0.00087013054871931672, 0.00047820154577493668, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -7945, 21111, -19151, -2628, -9396, 9485, 28797, -53671, -3130, 13873, 23713, 16743, -9356, 13857, -4631, 10971, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00082290399586781859, 0.00045653578126803041, 0.00021068654314149171, 0.00028160345391370356, 0.00042318063788115978, 0.00041956125642172992, 0.00036310296854935586, 0.00025697608361952007, 0.00031470850808545947, 0.00031064765062183142, 0.00068113702582195401, 0.00050327210919931531, 0.00040119554614648223, 0.00019712770881596953, 0.00047923083184286952, 0.00048891152255237103, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -13,-18,8,-28,20,-3,-38,12,13,0,-16,5,-8,-13,-20,10,-11,10,-2,1,-6,-39,13,-5,-8,13,1,127,27,-29,38,-10,2,-11,-1,-5,-3,12,-42,-9,-12,11,0,43,10,11,6,-1,15,-1,-12,10,10,-13,-4,89,5,8,-27,-30,0,24,-2,-30,-36,-68,-16,30,0,0,17,-17,-5,-28,-8,-29,-19,20,1,-7,-23,-16,25,20,-5,-21,-5,-96,5,-11,-3,-6,35,-27,-36,-14, 
  /* [1][0][][] */ 37,-73,-82,-56,117,-18,67,29,-6,-115,-46,-19,-12,-5,-51,34,-65,-2,47,46,43,60,-29,-56,36,-26,-10,-85,43,-38,-59,25,-26,55,13,10,6,-16,35,12,-37,30,-54,-32,-37,109,19,21,23,-75,32,-45,-25,36,29,-6,-60,-18,-59,-31,25,-28,-22,-34,-94,127,-22,-24,-4,-12,-20,22,68,-110,-45,3,27,-66,65,25,22,-62,24,-5,-55,54,-14,35,30,-55,14,-1,39,16,44,111, 
  /* [2][0][][] */ 9,49,-82,-16,111,99,17,108,-9,-119,-20,-18,1,-19,36,33,2,-9,-41,77,13,-23,104,1,37,26,-12,-37,30,-11,40,-76,39,28,-26,29,-127,-90,2,17,0,-54,20,-7,32,-43,10,80,-57,30,-39,-11,77,2,-7,88,41,5,23,11,42,20,43,-42,33,-22,-34,-17,-47,-31,-4,-36,-49,-73,-8,74,98,59,32,-7,9,-45,22,0,-51,11,13,22,-22,30,-15,-39,-18,-31,-83,-11, 
  /* [3][0][][] */ 57,16,80,0,39,-25,18,-14,-11,-59,26,-12,-11,34,38,75,23,-17,25,5,127,2,25,20,59,-24,-7,15,26,30,-2,69,-93,46,36,-1,-26,-35,15,36,-70,-32,64,6,22,43,-39,-67,-45,-24,-47,47,8,-114,-11,7,-98,69,45,30,6,86,-20,-40,27,71,-2,-45,32,-7,-2,-54,45,-19,45,-8,5,-5,53,45,-18,-76,18,-17,-28,40,21,50,12,3,33,34,43,84,36,-29, 
  /* [4][0][][] */ 30,-2,15,-10,127,29,-8,-34,-46,-53,-35,-33,-55,27,-17,52,36,-76,-37,86,-31,22,23,-5,20,-4,13,-51,15,-12,67,-28,92,1,-11,25,48,19,6,20,-26,-10,-26,-43,-8,-46,-11,3,38,5,-19,4,-9,-36,9,-39,21,-9,-22,21,-8,56,60,20,33,59,-20,-6,-42,8,51,61,16,-79,-31,-34,29,42,83,-26,-14,-42,-6,-6,-76,10,33,49,-54,29,9,-32,8,23,31,-26, 
  /* [5][0][][] */ 4,-8,-16,14,15,-19,32,-41,-17,-35,-5,9,-7,24,-2,10,5,-8,11,-5,48,17,-48,64,14,-5,13,-92,0,18,17,24,-9,25,19,-44,16,14,1,9,-11,-8,11,-27,-10,0,-1,-10,-8,-18,8,-16,6,-33,-11,-59,-5,18,-19,13,50,11,-1,32,-9,62,6,63,5,92,11,27,7,5,-2,63,-31,-15,23,7,2,-15,-3,16,-9,22,-14,127,-4,19,17,-10,11,14,-52,17, 
  /* [6][0][][] */ 30,-88,28,-41,-16,20,30,42,3,3,-29,-91,-32,-7,-28,35,8,1,2,-3,-48,18,26,-13,-43,5,-15,-5,-12,12,35,-11,62,-1,52,-13,1,-8,10,-100,-23,91,-3,-19,20,-29,-22,21,-28,36,-33,56,-30,-56,1,12,9,-67,-11,11,0,56,55,-93,36,-48,6,-27,-4,-18,127,5,-42,5,-36,21,-68,-9,9,-10,15,53,29,3,-25,-23,43,5,15,13,34,-47,-16,-7,-44,-18, 
  /* [7][0][][] */ 3,112,55,14,127,58,42,-16,-30,-22,29,-15,-30,26,30,36,6,-32,16,28,35,-51,57,-3,-22,20,7,15,29,-21,5,15,50,-22,-58,-3,25,7,-14,77,-48,27,14,42,-9,-32,33,-22,-48,-23,26,1,17,-36,-16,82,56,3,-18,1,-1,-38,6,-29,-48,49,-29,-99,-9,-56,-2,63,-29,-36,8,7,72,65,27,-29,-60,-20,-3,-5,-12,41,-4,-26,-30,36,-47,-44,-60,-19,15,-6, 
  /* [8][0][][] */ -1,-3,51,17,-127,-28,45,-28,22,83,74,15,-14,14,16,7,-36,11,17,0,-37,2,-107,79,28,-40,60,-12,-4,8,-5,49,73,-15,1,-1,-26,-22,13,35,8,-26,42,5,-39,-8,42,7,-98,12,28,31,-54,-36,-47,41,13,-45,-87,-20,11,-39,-46,2,8,75,0,-49,24,-2,-44,-17,42,48,59,-9,-26,-43,-7,30,-81,-4,-21,-13,20,31,60,48,26,-47,53,48,10,-1,41,17, 
  /* [9][0][][] */ 2,-95,-24,16,93,72,-25,-30,26,-28,92,78,-12,13,82,-101,28,-22,-6,5,-55,-37,35,0,-14,7,-7,20,-17,12,2,-5,10,14,-105,13,-7,11,-22,65,47,-57,-11,52,-6,-15,-68,-36,33,21,-19,-73,65,27,-5,-51,-14,85,-8,-3,14,-35,-44,127,-86,-6,-12,-11,-5,38,-49,-70,37,-2,8,32,50,-52,13,10,-8,-18,-5,38,5,-56,17,1,4,-25,-65,39,-63,-8,2,-41, 
  /* [10][0][][] */ -37,-21,-28,-38,-25,-1,65,-23,38,18,31,39,25,-15,-3,-6,-1,27,-25,-16,0,27,17,19,-16,-18,19,-127,19,-44,62,-36,-2,28,-4,-11,-4,33,10,-8,2,-41,23,-46,14,2,21,12,-5,29,-25,-5,-33,-27,-7,-57,16,15,-9,-34,24,4,-8,15,-29,88,-9,-32,15,-31,-1,-13,-25,-6,16,57,-5,35,-9,14,-21,-7,4,30,-1,-16,-6,117,-6,-4,24,10,25,-30,44,-33, 
  /* [11][0][][] */ -88,22,1,1,16,-64,-16,-9,-54,-4,14,30,37,21,-35,-16,62,2,-66,-55,32,0,-13,9,84,-6,75,-2,-29,25,-37,16,-9,36,-4,-12,-22,-2,37,9,-25,-14,1,3,90,19,83,21,64,37,6,51,19,-78,8,-18,-79,-13,-46,-50,-8,-21,-13,47,1,-22,36,4,29,19,0,43,-19,19,27,15,-28,82,-120,87,-37,-24,-79,-75,127,29,40,7,8,42,-22,-65,-19,46,-25,-1, 
  /* [12][0][][] */ -14,-2,-41,1,55,15,8,-20,-5,23,32,-1,9,-12,29,-1,-25,-11,3,-21,-6,-9,-45,53,-11,34,-27,88,-18,38,-39,8,-15,18,3,30,-20,-20,12,14,6,-20,2,-1,-18,-5,30,19,4,4,-3,-25,-15,11,-20,-21,-14,-11,18,17,-19,-14,-16,49,35,-68,12,60,-31,-127,-10,47,2,4,16,77,-4,-9,-9,9,3,22,-44,-1,15,-16,3,-39,-2,15,13,5,-30,34,0,32, 
  /* [13][0][][] */ -70,63,2,-7,-70,8,-13,23,-23,-22,57,27,85,9,-11,6,-20,34,-52,-3,19,-22,46,-67,58,36,4,5,3,-31,-15,-111,-104,-16,17,25,-7,27,55,-18,-45,81,-10,27,52,13,-35,13,61,-31,34,95,61,-78,72,-12,-24,56,36,14,15,28,-23,30,13,-33,14,9,21,12,18,-127,21,-16,-87,9,55,43,-34,-55,86,-33,7,-21,30,-42,105,-2,-26,-13,1,14,40,-44,-17,14, 
  /* [14][0][][] */ -40,9,-8,-55,33,2,-20,40,-93,-3,17,4,-27,-67,-77,-23,-88,-11,80,12,29,-13,32,-113,-52,27,-53,-17,16,-24,-11,-41,-64,-38,23,20,-10,5,7,-7,9,91,-80,-5,-51,19,16,17,127,-11,26,-31,29,61,-98,34,-17,29,-111,9,16,30,56,11,8,18,3,-2,-53,11,66,36,33,-11,-39,14,64,-76,-36,-106,9,-29,17,48,40,-84,-42,-4,-39,20,16,45,18,32,14,-13, 
  /* [15][0][][] */ -34,-87,-1,-44,12,17,-12,-48,-20,22,-13,-26,51,-18,51,-9,-102,3,-16,15,-27,-6,-58,-57,-24,1,-6,27,-28,-12,59,-96,-3,20,11,2,-2,28,-104,-4,29,-73,-4,40,-21,-55,51,32,43,22,-12,-127,-17,52,-2,52,40,-13,-24,49,18,-3,52,-6,10,-20,-12,-11,-22,9,9,38,-39,10,-6,-31,-26,-9,6,-2,-16,43,3,72,-19,-57,-32,-44,-41,60,19,75,-47,-5,-3,-12, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.034973420202732086, 0.019402770325541496, 0.0089541776105761528, 0.01196814700961113, 0.017985176295042038, 0.017831353470683098, 0.015431876294314861, 0.010921483859419823, 0.013375110924243927, 0.013202524743974209, 0.028948321938514709, 0.021389065310359001, 0.017050810158252716, 0.0083779273554682732, 0.02036730945110321, 0.02077873982489109, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 25278, 62357, -1190, -239, 13199, -3984, 34, -731, 5758, 10323, -4330, -203, 616, 6443, 5498, -9137, -4027, 93, -79, 13780, -10014, 16428, -2622, 5349, 31108, 46, -4866, 18853, 13214, -19352, 1821, 21485, 23855, -9693, 2149, -52, -538, -1465, 5877, -7021, -5378, -300, -8433, -18, 30060, -2612, 12435, -2544, -14115, 1621, 48, -8, -2509, 22982, -3583, 14181, 18598, -48, 35886, 134, -9143, -1585, 1435, -145, -1920, 14676, -1431, -6953, -3360, 3086, -154, -3941, 1106, 40, -2014, -6119, 624, -1728, 47948, -5906, -6045, -10586, -717, -454, 67659, -12817, -10413, -28276, -6998, 9175, -3132, 38261, 313, -2955, -3338, 534, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 8.8227599917445332e-05, 9.1971778601873666e-05, 0.0001017899630824104, 0.0002227755612693727, 0.00025233393535017967, 0.00020033736655022949, 4.9759870307752863e-05, 9.2402762675192207e-05, 0.00023358631005976349, 0.00024112145183607936, 0.00024057738482952118, 0.00011364023521309718, 0.00027232090360485017, 0.00021140094031579792, 0.00040553597500547767, 0.0001541687233839184, 0.00020589896303135902, 0.00020050286548212171, 0.00022284702572505921, 8.2775637565646321e-05, 7.370535604422912e-05, 4.5354310714174062e-05, 0.00014067094889469445, 0.00011892028851434588, 8.341139619005844e-05, 0.00012806816084776074, 0.00017977207608055323, 0.0001599864917807281, 7.6181007898412645e-05, 0.00042235961882397532, 0.00039229399408213794, 0.00021922196901869029, 0.00011005882697645575, 0.00014678871957585216, 0.00023335764126386493, 0.0004479431954678148, 0.00035518049844540656, 0.00016755363321863115, 0.00022773434466216713, 0.00012499801232479513, 0.00022730421915184706, 0.00027425598818808794, 0.00034145682002417743, 9.6671697974670678e-05, 0.00037551930290646851, 9.9060169304721057e-05, 0.00010641958215273917, 0.00021179366740398109, 0.00072771857958287001, 9.9872391729149967e-05, 0.00051492382772266865, 0.0001748378126649186, 0.00021134602138772607, 0.00012000816786894575, 0.00024191696138586849, 0.00012177574535598978, 0.00015276252815965563, 0.00043847999768331647, 4.1562761907698587e-05, 0.00014867415302433074, 0.00028076465241611004, 0.00029329722747206688, 0.00013023124483879656, 0.00014869641745463014, 0.00011173477105330676, 0.00012942668399773538, 0.00031188625143840909, 0.00031847174977883697, 0.0002050255861831829, 0.00013811218377668411, 0.00019191582396160811, 9.5873401733115315e-05, 0.00026301690377295017, 0.00015631545102223754, 0.00036804264527745545, 0.00030281988438218832, 0.00013456404849421233, 8.8011198386084288e-05, 5.4324897064361721e-05, 0.00021303081302903593, 0.00022274295042734593, 0.00022899670875631273, 0.00016472087008878589, 0.00026321664336137474, 5.2308976592030376e-05, 0.0001207786044687964, 6.8446177465375513e-05, 0.00047066283877938986, 0.00023205693287309259, 0.00012438416888471693, 0.00030250375857576728, 2.6216508558718488e-05, 0.00012685374531429261, 0.00010816755093401298, 0.0002973992086481303, 0.00030860153492540121, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-72,-10,127,22,67,78,-59,-15,-18,-15,-4,-29,-1,36,1,-8,-43,27,23,18,-127,127,9,-88,8,50,-30,-127,-127,39,24,12,25,59,-21,-30,-10,30,-6,-12,27,-107,71,25,-65,38,47,-19,53,-25,19,2,-7,17,50,-91,-49,-60,-20,-11,1,12,37,68,-27,75,13,-9,18,18,127,24,23,24,0,-12,18,127,-7,-14,14,-27,20,122,19,-79,-16,-2,-30,-16,-40,2,-26,-15,27, 127,-127,75,105,-43,127,36,-118,70,4,-17,127,127,-99,-14,15,11,127,127,-110,127,-78,80,69,-127,-106,-66,-36,-53,45,-58,-20,-91,49,-127,-86,-43,-14,-55,58,0,127,127,86,-51,-111,-111,-50,-15,-127,42,83,66,-32,43,86,-49,42,-79,-114,-45,-41,-60,65,72,-64,28,30,-82,34,-18,91,118,127,11,21,1,59,-34,54,64,127,127,-22,-8,73,-114,127,-124,-100,5,-127,-90,-127,-37,109, -75,-13,30,-81,15,-27,65,-6,81,-35,-26,18,-19,-6,-9,-15,-8,-17,7,-4,-21,-109,29,2,-119,95,5,-57,117,49,-13,10,1,16,14,-31,-9,34,17,9,26,12,-120,67,18,-18,36,13,-15,12,-16,4,-12,0,-2,23,-67,6,-30,52,2,40,34,-1,-7,-41,-29,23,9,4,-3,35,11,-26,-7,6,-13,-6,-86,4,-21,-26,-15,3,-108,9,-34,-22,-54,22,-25,-32,30,-26,-13,3, 
  /* [0][1][][] */ -65,-75,74,-36,-47,91,20,127,-54,-22,-1,-118,27,-115,78,31,-2,-61,-18,89,52,-68,47,53,-100,-8,127,-23,-22,64,121,-104,-127,95,-85,-55,-35,32,-30,97,-48,-26,-4,48,-48,127,-23,65,15,97,20,-2,15,-55,26,31,127,121,-71,-87,127,-31,-34,127,71,-39,-15,-2,127,39,127,95,-40,101,-4,12,13,13,-32,8,-43,117,-79,112,2,33,-56,31,77,-127,-32,-8,127,-69,-23,0, 67,124,56,-114,127,79,86,38,-127,127,127,-36,-66,-127,-127,127,127,-65,-124,-50,107,97,-125,127,-108,-86,-43,127,-125,109,-127,-127,-90,127,105,127,127,-127,-110,127,-63,-97,109,-127,-127,-33,-127,-127,127,-111,85,42,127,127,127,-127,98,-127,-127,127,20,-78,-127,-99,-127,127,-127,127,-125,-127,-107,-84,-127,-80,127,127,-127,127,-79,127,127,32,-41,-127,58,127,95,47,127,13,127,1,-69,37,127,-127, -54,-14,-49,39,-56,-96,37,-25,19,-35,-28,94,2,90,13,9,-4,63,-7,127,2,-88,-41,9,-66,100,-73,-21,-70,-16,16,-62,-70,40,5,-17,-29,45,-71,42,127,-4,-40,31,-40,-56,16,44,7,121,-10,6,-39,-74,2,19,95,2,2,22,-34,127,93,-51,-43,12,38,-10,-78,121,-16,-88,1,-55,-16,-21,26,15,77,-35,-70,-43,58,15,-49,-17,74,24,14,61,-44,20,-44,98,-27,-5, 
  /* [0][2][][] */ -67,-1,-3,-20,13,-44,73,26,54,-29,-36,-4,19,16,-27,-1,-8,64,7,1,-54,-73,2,-6,-27,-48,36,-68,91,37,25,26,17,-12,-10,-45,-7,36,-3,-1,-15,-5,-67,104,4,35,12,37,-15,-32,11,-20,21,0,8,14,-70,24,-16,15,15,1,-18,-4,-1,-46,-45,16,-33,14,27,30,12,-21,30,1,17,4,-79,-12,-8,-12,18,16,-127,9,11,-44,-62,-49,-27,-47,9,57,-18,-8, 123,32,-127,-35,-71,-25,37,31,-65,-29,-21,-110,-78,109,-14,35,2,-52,-9,-126,93,-52,-39,1,-114,127,-51,21,-34,-23,-9,-3,-64,16,28,7,-23,-27,127,48,11,-15,67,-35,-39,77,-68,-43,-32,-4,-127,-127,-52,-26,1,39,-67,-7,10,39,-7,-17,10,-47,-53,34,65,-21,114,105,-24,-70,11,-59,4,3,99,3,52,22,13,-94,-49,4,1,11,127,39,-64,39,-19,-111,41,81,-9,26, -54,10,-17,27,16,-67,-127,4,-10,-9,-16,2,16,-26,18,-2,-9,-18,5,16,-45,-75,15,3,17,-88,20,4,-44,-41,-7,17,43,-23,-5,-23,-36,4,40,-43,20,-2,-50,-33,3,66,22,16,-9,-4,12,-9,17,6,-5,-5,-63,-11,3,-38,-11,11,86,-11,35,-2,0,30,0,3,-3,20,-18,14,0,15,35,1,75,-10,4,-8,-6,-15,73,4,44,-39,58,38,-16,-53,-8,5,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0037496727891266346, 0.0039088004268705845, 0.0043260734528303146, 0.0094679612666368484, 0.01072419248521328, 0.0085143381729722023, 0.0021147944498807192, 0.0039271172136068344, 0.0099274180829524994, 0.010247661732137203, 0.01022453885525465, 0.0048297098837792873, 0.011573637835681438, 0.008984539657831192, 0.017235279083251953, 0.0065521704964339733, 0.0087507059797644615, 0.0085213715210556984, 0.0094709983095526695, 0.0035179643891751766, 0.0031324776355177164, 0.0019275580998510122, 0.0059785153716802597, 0.0050541120581328869, 0.0035449843853712082, 0.0054428968578577042, 0.0076403133571147919, 0.0067994259297847748, 0.0032376928720623255, 0.017950283363461494, 0.016672493889927864, 0.0093169333413243294, 0.0046775001101195812, 0.0062385206110775471, 0.0099176997318863869, 0.019037585705518723, 0.015095170587301254, 0.0071210293099284172, 0.0096787093207240105, 0.0053124153055250645, 0.0096604293212294579, 0.011655879206955433, 0.014511913992464542, 0.0041085472330451012, 0.015959570184350014, 0.0042100572027266026, 0.0045228321105241776, 0.0090012308210134506, 0.03092803992331028, 0.0042445766739547253, 0.021884262561798096, 0.0074306069873273373, 0.0089822057634592056, 0.005100347101688385, 0.010281470604240894, 0.0051754689775407314, 0.0064924075268208981, 0.018635399639606476, 0.0017664172919467092, 0.0063186516053974628, 0.011932497844099998, 0.012465132400393486, 0.005534827709197998, 0.0063195973634719849, 0.004748727660626173, 0.0055006337352097034, 0.013255164958536625, 0.013535048812627792, 0.008713587187230587, 0.0058697676286101341, 0.0081564225256443024, 0.0040746196173131466, 0.011178218759596348, 0.006643406581133604, 0.015641812235116959, 0.012869845144450665, 0.0057189720682799816, 0.0037404759787023067, 0.002308808034285903, 0.0090538095682859421, 0.0094665754586458206, 0.0097323600202798843, 0.007000636775046587, 0.011186706833541393, 0.0022231314796954393, 0.005133090540766716, 0.0029089625459164381, 0.020003169775009155, 0.0098624192178249359, 0.0052863270975649357, 0.012856409884989262, 0.0011142016155645251, 0.005391283892095089, 0.0045971209183335304, 0.012639465741813183, 0.013115564361214638, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1496, 6979, 13050, 28353, 15391, -4037, -2244, 6529, 25459, -4605, 11301, 4591, 8269, 9776, 30068, 1527, 2320, 9120, 14600, 6837, -359, 365, 9899, -1246, 3750, -54, 12602, 7675, 5688, 39156, 42100, 18268, 9529, -1394, 9488, 2236, 1347, 3372, 27936, -917, 11910, 9056, 49844, -2938, 19341, 8070, 7945, 15579, 42850, 10033, -707, 8592, -3158, -167, -2068, 5045, -654, 14499, 6885, 7475, 5524, 14293, 8238, 6410, 10253, 7002, 4295, -4335, 7993, -3127, 3952, 8658, 19247, 6265, -4215, -6105, 6383, 309, 2404, -1680, 13773, 13142, 4511, 13431, 3104, 165, 7938, 85865, 8909, 8374, 4746, -232, 5990, 8645, 5277, 11261, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00026082532713189721, 0.00020808565022889525, 0.00014530566113535315, 8.2267848483752459e-05, 0.00019458829774521291, 0.0002450004976708442, 0.00035654276143759489, 0.00024780357489362359, 9.2316164227668196e-05, 0.00029723241459578276, 0.0002358351630391553, 0.00020453991601243615, 0.00015681017248425633, 0.00023763392528053373, 8.0181693192571402e-05, 0.00038121640682220459, 0.0002007109287660569, 0.00013683197903446853, 0.00015290832379832864, 0.00017230257799383253, 0.00033073403756134212, 0.00061520881718024611, 0.00019597771461121738, 0.00049952336121350527, 0.00070126052014529705, 0.00025678108795545995, 0.00017700679018162191, 0.00018849020125344396, 0.0002833171165548265, 9.027227497426793e-05, 6.7464934545569122e-05, 0.00013503317313734442, 0.00017414349713362753, 0.00021660912898369133, 0.00021159963216632605, 0.00026012977468781173, 0.00038239647983573377, 0.0004287843476049602, 9.6780291642062366e-05, 0.00057034665951505303, 0.00015628892288077623, 0.00017214205581694841, 5.4456002544611692e-05, 0.00036778941284865141, 0.00016811852401588112, 0.00018772295152302831, 0.00021975755225867033, 0.00017269157979171723, 9.5806528406683356e-05, 0.00020799788762815297, 0.00017037848010659218, 0.00020273028349038213, 0.00033029861515387893, 0.00023648911155760288, 0.00048941298155114055, 0.0002112641668645665, 0.00016293008229695261, 0.00012853348744101822, 0.00029856481705792248, 0.00019962586520705372, 0.00029623409500345588, 9.6859308541752398e-05, 0.00017433743050787598, 0.00015909865032881498, 0.00024244119413197041, 0.00027174636488780379, 0.00029284507036209106, 0.0003038923314306885, 0.00021069557988084853, 0.00024141078756656498, 0.00027036789106205106, 0.00018466039909981191, 0.00010858460154850036, 0.00016984407557174563, 0.00036406560684554279, 0.00022006295330356807, 0.00025965299573726952, 0.00034716335358098149, 0.00030500674620270729, 0.00026954890927299857, 0.00014703055785503238, 0.00012195250747026876, 0.0001823149505071342, 0.00014402743545360863, 0.00037930093822069466, 0.0002232840342912823, 0.00029483932303264737, 4.4908087147632614e-05, 0.0001608831953490153, 0.00027008564211428165, 0.00026705063646659255, 0.00034361190046183765, 0.00024310249136760831, 0.00018482102314010262, 0.00021074521646369249, 0.00015150947729125619, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 12,72,-15,77,25,32,8,-17,39,31,-57,110,9,-121,47,-127, 
  /* [1][0][][] */ 11,48,6,-21,46,-16,127,-113,-4,90,-12,-39,1,-39,40,3, 
  /* [2][0][][] */ -127,40,-25,-29,4,3,55,121,-40,53,115,-19,-81,43,19,-53, 
  /* [3][0][][] */ -53,71,39,68,-68,31,91,127,-3,80,-113,22,54,-90,-78,-59, 
  /* [4][0][][] */ 10,5,36,70,-20,67,-7,43,6,-14,3,10,29,-1,-127,-26, 
  /* [5][0][][] */ -13,-48,94,-5,33,-4,-9,35,-52,99,-36,-127,-29,58,-58,-40, 
  /* [6][0][][] */ 17,-11,24,-14,36,46,-67,-64,-14,-10,47,-5,127,-18,-6,-24, 
  /* [7][0][][] */ 43,-22,127,0,-38,-81,59,-5,-74,42,-122,-62,13,-11,45,10, 
  /* [8][0][][] */ 28,16,70,62,-46,59,20,46,37,2,14,-76,-24,5,-127,-63, 
  /* [9][0][][] */ 45,-118,62,31,21,-36,1,50,112,-9,62,20,-30,4,-127,-34, 
  /* [10][0][][] */ -26,-111,28,-10,-80,12,-4,74,97,127,31,-65,-33,99,71,-19, 
  /* [11][0][][] */ 59,-47,-15,-93,-7,-30,-112,-127,-36,49,-34,-27,27,-2,49,-46, 
  /* [12][0][][] */ -22,2,12,-21,-35,-31,-109,-39,-14,-71,-16,10,17,127,83,22, 
  /* [13][0][][] */ -35,-85,-44,17,-10,-39,8,-15,36,28,-12,-9,6,14,127,31, 
  /* [14][0][][] */ 5,-62,45,11,19,8,21,127,15,58,8,-49,15,34,-48,114, 
  /* [15][0][][] */ 22,-35,2,61,21,0,95,4,2,-127,7,-42,10,-22,-10,-38, 
  /* [16][0][][] */ 43,-73,-35,6,19,6,43,-73,121,80,82,16,13,102,75,127, 
  /* [17][0][][] */ -85,-62,38,108,116,64,-9,-48,127,-52,-3,-36,23,36,-103,11, 
  /* [18][0][][] */ -14,25,10,14,-123,4,-1,50,-81,-11,-17,-70,-3,-127,89,3, 
  /* [19][0][][] */ 112,-91,90,-82,100,11,-56,117,54,-52,39,23,-43,75,31,127, 
  /* [20][0][][] */ 46,-20,23,-60,-40,-3,-12,30,-29,-22,55,-6,-1,10,-19,127, 
  /* [21][0][][] */ -84,-33,43,-17,38,-2,-104,-85,-20,70,-12,-9,-127,7,48,-19, 
  /* [22][0][][] */ 21,-28,48,-39,33,-57,14,-9,-127,36,-13,-48,-28,-8,91,-29, 
  /* [23][0][][] */ 19,8,18,-4,10,0,-11,13,-6,-8,49,-4,127,-1,-2,-40, 
  /* [24][0][][] */ -30,30,-10,-30,-7,10,31,-28,-58,2,-49,-127,25,-110,13,-23, 
  /* [25][0][][] */ -127,-10,26,41,64,-34,-48,-84,6,60,-56,-103,-56,-63,18,-57, 
  /* [26][0][][] */ 23,-22,36,-127,115,-35,-23,0,126,-70,47,-27,-7,88,7,60, 
  /* [27][0][][] */ 105,-24,17,-30,-30,-49,-14,-18,-22,17,-127,30,17,-16,-13,31, 
  /* [28][0][][] */ -118,-11,-127,-72,43,-9,77,-76,4,62,-61,26,35,-37,-30,37, 
  /* [29][0][][] */ -63,-24,2,127,-7,20,6,-48,-17,-4,-84,54,21,-69,26,-38, 
  /* [30][0][][] */ 52,-20,127,-41,33,2,-16,50,-37,-74,55,-47,-20,28,-52,101, 
  /* [31][0][][] */ 14,-87,-9,-55,-12,-42,22,-48,-14,61,100,37,-22,88,75,127, 
  /* [32][0][][] */ -12,67,-32,34,-127,17,-68,-40,-57,-33,0,44,8,51,36,61, 
  /* [33][0][][] */ 42,-20,5,127,13,10,15,-41,-118,69,58,-12,19,-12,9,123, 
  /* [34][0][][] */ 65,-2,7,-15,80,-71,-127,-14,-58,98,-53,-3,-28,-1,-18,15, 
  /* [35][0][][] */ 76,25,-51,10,3,-127,-63,-7,-7,-14,-93,19,96,12,-40,-6, 
  /* [36][0][][] */ 6,0,-127,5,48,15,-39,18,-30,-21,1,-26,9,17,-16,8, 
  /* [37][0][][] */ 15,7,127,-10,-77,18,17,-69,-13,16,-46,30,18,-6,26,9, 
  /* [38][0][][] */ -88,35,34,58,96,127,20,-3,1,-29,94,-5,-39,50,-81,-53, 
  /* [39][0][][] */ -16,1,21,38,36,-23,-127,40,4,24,3,-45,2,-20,-4,-2, 
  /* [40][0][][] */ -45,79,-32,127,16,46,50,14,-20,-37,-12,44,27,28,-66,-56, 
  /* [41][0][][] */ -7,9,-22,-16,-35,8,127,98,-55,84,-20,-9,-8,75,49,-19, 
  /* [42][0][][] */ 34,-57,4,-21,46,8,-76,94,81,-127,95,51,-28,39,-92,24, 
  /* [43][0][][] */ -105,22,40,-10,52,35,-66,-75,-2,50,20,-36,-127,-14,46,-6, 
  /* [44][0][][] */ 7,6,-12,-4,-1,-20,-2,-47,127,-8,20,48,15,75,2,43, 
  /* [45][0][][] */ -73,-43,35,-91,58,22,-38,56,18,-86,-7,-10,43,127,-57,104, 
  /* [46][0][][] */ -57,27,-22,103,-87,-20,-1,-84,-127,44,-46,-23,3,42,3,-39, 
  /* [47][0][][] */ -26,-19,-109,127,2,54,10,-29,16,52,52,51,-29,-6,34,-15, 
  /* [48][0][][] */ -36,-18,19,-127,44,-10,-34,-27,-21,32,45,6,23,27,83,3, 
  /* [49][0][][] */ -40,20,41,118,-8,26,-9,-15,36,-60,-92,-72,-30,-41,-84,-127, 
  /* [50][0][][] */ 9,86,22,-127,56,16,-15,55,114,-38,-26,23,10,-39,23,-15, 
  /* [51][0][][] */ 19,-35,11,-22,27,-31,-40,-127,7,-94,-16,-4,-26,-28,7,0, 
  /* [52][0][][] */ 25,0,7,33,34,-8,-51,86,-74,127,-44,-49,58,89,-1,-33, 
  /* [53][0][][] */ -14,111,-17,-90,-44,-2,21,-38,-54,-61,-43,79,19,-127,-97,-19, 
  /* [54][0][][] */ 1,24,10,34,39,-25,16,-33,-8,37,-21,-12,-11,127,-53,-17, 
  /* [55][0][][] */ -127,92,85,-9,45,5,3,-12,-41,41,80,-51,-31,-27,112,-1, 
  /* [56][0][][] */ 87,-30,40,-100,108,0,-14,42,96,-29,27,127,-21,21,66,53, 
  /* [57][0][][] */ -30,3,7,63,-21,17,37,127,3,-9,2,-19,6,46,1,27, 
  /* [58][0][][] */ 14,118,3,-127,-4,22,6,18,92,-14,6,59,2,-82,60,76, 
  /* [59][0][][] */ 33,46,38,-92,-44,-13,25,-12,5,12,28,-57,-2,-127,-58,17, 
  /* [60][0][][] */ 53,6,112,-35,-34,127,25,-48,-16,54,-54,-2,43,12,25,-14, 
  /* [61][0][][] */ -28,18,-25,-39,-35,-2,120,127,-8,83,-22,-2,6,73,1,-59, 
  /* [62][0][][] */ -13,-40,3,3,-120,-11,-58,-5,-42,-30,-14,-92,14,-127,110,18, 
  /* [63][0][][] */ 27,-25,-7,-83,39,-19,-127,-121,-64,80,-25,41,90,-7,24,-40, 
  /* [64][0][][] */ -36,20,42,27,60,-8,-34,-127,16,-107,14,-45,-14,-32,6,-4, 
  /* [65][0][][] */ -127,7,36,-61,14,63,52,-48,-81,29,47,-23,-1,13,9,-11, 
  /* [66][0][][] */ 40,4,59,28,-22,26,-44,39,-24,-7,59,-49,5,51,-127,-32, 
  /* [67][0][][] */ 22,-34,-63,48,38,-77,-65,-127,32,-101,-63,-34,-112,-4,-99,31, 
  /* [68][0][][] */ -8,-26,-51,48,-57,-86,10,-38,-45,-39,47,-65,-20,45,127,-10, 
  /* [69][0][][] */ -26,39,-97,69,-2,-127,37,103,2,19,38,14,108,12,-26,11, 
  /* [70][0][][] */ 16,-4,-18,-43,-37,16,127,68,-15,55,-22,-4,7,37,20,-6, 
  /* [71][0][][] */ 12,4,-9,-52,43,10,15,69,-40,-48,-5,-6,11,-127,86,2, 
  /* [72][0][][] */ 57,16,-12,28,22,-70,-28,-127,-4,74,-70,35,50,54,64,69, 
  /* [73][0][][] */ -41,-127,-47,-77,-126,-32,30,-25,-24,7,-35,-27,12,-35,71,-6, 
  /* [74][0][][] */ -34,43,80,92,-18,-13,-127,108,8,-44,-37,-48,3,-7,-12,3, 
  /* [75][0][][] */ -29,13,-35,29,-25,87,78,127,0,59,-13,-38,-105,88,22,60, 
  /* [76][0][][] */ 12,-34,-29,-21,58,-56,-127,-96,-18,-20,11,-22,42,-14,62,-33, 
  /* [77][0][][] */ -39,4,-41,-40,-61,-6,-4,-48,127,6,-76,2,-16,42,31,-84, 
  /* [78][0][][] */ -103,-127,-24,121,82,83,-27,49,8,-67,-127,95,60,-13,91,52, 
  /* [79][0][][] */ 25,-13,29,-65,127,3,47,16,85,25,18,38,7,-22,16,-50, 
  /* [80][0][][] */ -23,-34,53,-127,-26,-51,-9,-9,-81,-45,-5,-57,-2,126,-40,5, 
  /* [81][0][][] */ 1,-52,81,47,7,96,-27,-1,32,0,-17,-30,-44,74,-127,29, 
  /* [82][0][][] */ -98,10,41,-127,12,-23,-5,-38,-53,-45,-22,-104,-25,-127,-81,19, 
  /* [83][0][][] */ 20,-19,-2,-94,-47,18,23,71,-91,17,-22,-99,1,-127,21,83, 
  /* [84][0][][] */ 127,28,18,51,-46,4,-35,22,-21,-9,97,0,-75,10,94,-51, 
  /* [85][0][][] */ 12,-11,-12,-46,38,-7,-56,127,-82,-110,-68,1,-17,92,92,-127, 
  /* [86][0][][] */ 5,18,9,22,-48,79,-46,41,-83,-35,43,-35,-8,-127,-21,16, 
  /* [87][0][][] */ 127,-23,9,-36,-74,-44,-4,12,-8,3,-105,11,43,6,18,67, 
  /* [88][0][][] */ 27,106,-16,-12,-54,-5,-12,-20,106,18,30,2,-25,-34,118,-127, 
  /* [89][0][][] */ 29,59,-80,-4,-38,-27,12,-50,61,36,7,-11,-13,4,-23,-127, 
  /* [90][0][][] */ -14,-40,1,-66,-62,16,127,-57,82,-63,9,-87,48,-24,-39,-8, 
  /* [91][0][][] */ 11,1,-30,-110,-47,12,20,-21,-35,13,69,59,17,-5,29,127, 
  /* [92][0][][] */ 33,2,43,15,65,-8,-81,-127,51,-70,5,-19,-31,-11,10,-18, 
  /* [93][0][][] */ 41,9,47,-103,-6,18,-42,36,55,-78,88,-17,-26,127,-43,6, 
  /* [94][0][][] */ -124,22,-88,1,68,-127,-27,18,-3,-64,89,-56,-3,7,-19,21, 
  /* [95][0][][] */ -7,50,14,-127,-18,-24,-15,19,12,-28,-60,-58,-14,34,-63,4, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0007867331150919199, 0.00062765326583757997, 0.00043828861089423299, 0.00024814630160108209, 0.00058694090694189072, 0.00073900033021345735, 0.0010754476534202695, 0.00074745528399944305, 0.00027845526346936822, 0.00089654856128618121, 0.00071135471807792783, 0.00061695819022133946, 0.00047298995195887983, 0.00071678037056699395, 0.00024185379152186215, 0.0011498713865876198, 0.00060540874255821109, 0.00041272927774116397, 0.0004612207121681422, 0.00051972002256661654, 0.00099760026205331087, 0.0018556677969172597, 0.00059113185852766037, 0.0015067231142893434, 0.0021152272820472717, 0.00077453436097130179, 0.00053390942048281431, 0.00056854711147025228, 0.00085457554087042809, 0.00027229022816754878, 0.00020349594706203789, 0.00040730350883677602, 0.00052527280058711767, 0.00065336283296346664, 0.00063825258985161781, 0.00078463507816195488, 0.0011534307850524783, 0.0012933515245094895, 0.00029192049987614155, 0.0017203489551320672, 0.0004714176757261157, 0.00051923585124313831, 0.0001642568240640685, 0.0011093711946159601, 0.00050709955394268036, 0.00056623283307999372, 0.00066285947104915977, 0.00052089337259531021, 0.00028898331220261753, 0.00062738853739574552, 0.00051391631131991744, 0.00061149976681917906, 0.00099628686439245939, 0.00071332725929096341, 0.0014762270729988813, 0.0006372407078742981, 0.00049144955119118094, 0.00038769835373386741, 0.00090056756744161248, 0.00060213584220036864, 0.0008935373043641448, 0.00029215883114375174, 0.00052585778757929802, 0.00047989271115511656, 0.00073128065560013056, 0.0008196745184250176, 0.00088331493316218257, 0.00091663707280531526, 0.00063552567735314369, 0.00072817259933799505, 0.00081551657058298588, 0.00055699516087770462, 0.0003275260969530791, 0.00051230436656624079, 0.0010981389787048101, 0.0006637806654907763, 0.00078319694148376584, 0.0010471564019098878, 0.00091999844880774617, 0.00081304623745381832, 0.00044349147356115282, 0.00036784799885936081, 0.00054992054356262088, 0.00043443311005830765, 0.001144093694165349, 0.00067349651362746954, 0.00088933028746396303, 0.00013545724505092949, 0.00048527546459808946, 0.0008146652253344655, 0.00080551061546429992, 0.0010364440968260169, 0.00073327531572431326, 0.00055747968144714832, 0.00063567538745701313, 0.00045700135524384677, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -9752, 3741, -12554, 34510, 27911, 8482, -7467, -5686, 25781, 3575, 29836, 21834, -10093, 13045, 35941, -33246, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00044114957563579082, 0.00027553856489248574, 0.00026304999482817948, 0.00021927537454757839, 0.00032754353014752269, 0.00034201203379780054, 0.00036179827293381095, 0.00037480125320143998, 0.00021721379016526043, 0.00029583164723590016, 0.00036269298288971186, 0.00057676219148561358, 0.00041697424603626132, 0.00037682437687180936, 0.00051710149273276329, 0.00028019706951454282, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,20,-6,15,54,80,-38,-23,45,13,2,-7,-6,18,22,61,20,-2,-2,-11,98,-64,9,-40,-24,-35,-49,-97,-2,-11,62,54,127,-4,-6,3,4,-26,-11,9,-56,8,26,-34,1,-25,-5,23,-16,19,1,-19,-26,-15,4,2,48,26,-27,-29,-55,25,-5,-19,4,11,73,-8,14,-13,7,-25,-42,7,20,3,-3,-82,-5,-11,30,-21,-70,-33,27,0,10,21,-13,13,12,-28,22,36,-5,124, 
  /* [1][0][][] */ 61,-110,44,79,-16,-62,-26,-74,-19,-98,8,44,20,-92,-30,-44,-108,-15,19,45,-22,-120,-52,63,127,-71,-68,19,-29,117,-29,49,12,18,-54,19,-18,-15,52,-18,16,-86,65,-35,-52,-7,44,-5,38,19,7,-66,73,-84,40,-28,6,31,-11,-94,41,-66,49,-48,9,-93,23,54,35,71,-40,-12,-116,38,-34,76,38,89,41,-34,57,15,-69,27,-88,70,-9,77,-54,10,23,9,9,-55,34,-5, 
  /* [2][0][][] */ 19,18,5,-26,7,5,-20,44,49,-7,13,45,9,-2,46,7,1,-27,9,-7,-20,-70,12,-74,-3,-24,-17,26,-4,18,127,-49,30,-63,-46,50,14,112,-35,-13,-11,-20,-7,36,-25,-55,-56,14,28,16,-13,-25,37,-11,6,-24,-31,0,-19,41,15,13,79,85,13,-78,23,-82,-11,-19,-13,0,1,14,-6,24,16,60,1,13,-6,78,13,-6,-8,22,12,7,26,4,-18,-58,-59,19,-7,53, 
  /* [3][0][][] */ -11,-24,-34,34,31,-23,5,-35,-17,16,7,10,2,-17,48,-10,38,-42,18,10,-7,-7,-11,20,-20,14,15,-1,23,-30,55,-13,15,-20,-12,53,-1,-5,-18,6,22,-61,25,-16,-10,1,3,2,-127,49,-22,25,-117,-54,-22,-37,32,3,-10,49,-8,14,11,17,-12,-91,-51,29,52,20,0,24,-51,13,-28,-41,-48,-56,28,-42,22,-27,32,64,46,42,32,16,30,-13,2,6,-28,-15,-19,-29, 
  /* [4][0][][] */ -4,-31,12,-69,-14,-27,-55,16,-31,-53,-30,-7,-4,70,14,10,43,-12,11,9,-7,45,53,12,-8,-6,9,19,-3,-14,-19,-3,-50,9,-6,15,34,-18,-4,-12,30,-2,-106,-29,36,-4,-22,-4,6,85,-9,-20,-24,-19,6,-9,-1,-29,22,37,10,9,-6,-8,45,-105,25,-26,-47,13,-15,9,-22,-1,-19,23,-26,57,58,4,17,9,127,-45,40,-26,-14,0,69,11,-6,22,-37,21,2,-39, 
  /* [5][0][][] */ -4,-4,-8,-4,-10,-14,2,103,68,-24,-8,-15,-25,31,44,42,-33,-3,5,-33,-39,6,-5,-23,13,10,27,76,66,18,51,49,-65,8,11,-2,-40,-47,-38,-20,-14,-12,-5,-6,57,16,-5,13,11,14,-22,7,-36,-15,6,-18,-26,-30,3,32,-57,27,-27,-42,13,18,-30,15,-8,31,1,-2,12,0,-6,-2,-11,18,19,127,18,-30,38,23,12,-18,20,-27,-10,-27,26,-123,-28,-41,-14,-109, 
  /* [6][0][][] */ -30,-2,-5,-57,3,-17,-28,32,-1,30,-21,4,48,-64,-7,-9,-1,-70,28,-5,2,-4,-26,6,82,-11,5,1,23,-3,20,-20,-4,-9,-24,-5,15,13,26,45,-4,-27,-55,-21,-4,-25,25,-127,27,21,23,21,16,2,-6,-40,24,-11,-11,14,32,23,14,22,48,66,30,-30,-19,-19,5,-41,24,7,48,-3,-30,39,11,9,-30,5,44,-30,8,40,17,-27,30,-1,-41,-17,-31,16,-4,6, 
  /* [7][0][][] */ 10,7,29,-24,-5,6,-6,-21,2,-3,-19,-13,-2,-88,30,7,3,-34,-6,-13,7,-25,-45,-11,-17,-3,4,-13,7,10,10,-3,-5,1,-7,-8,-1,-4,-29,25,5,-10,-17,17,-7,12,-23,72,-2,27,-15,-26,-22,-3,-6,-45,44,3,-1,7,-1,12,-6,-7,-18,42,21,-30,-15,-16,3,40,-5,-16,-5,11,50,7,-4,-18,-1,-33,32,-3,-31,127,-3,-6,-39,-21,0,14,-28,1,-7,-3, 
  /* [8][0][][] */ -68,44,-54,-7,26,-12,-8,23,13,79,-48,-3,4,41,79,-12,5,42,-81,18,23,28,-36,-2,-42,-14,9,13,55,-97,-7,13,13,13,13,-8,-15,34,-43,49,3,12,10,-127,-44,-7,45,-23,-54,29,-3,66,-108,80,14,-9,17,-31,-38,-27,-3,-37,-6,14,-23,37,27,-24,-8,5,35,94,-21,35,44,30,-4,-97,-7,-28,-17,-8,17,7,-70,1,23,-55,-4,37,-35,15,36,-30,-18,-12, 
  /* [9][0][][] */ 37,-59,-37,-27,-1,20,-21,21,20,-28,-7,25,-41,-20,5,20,-17,7,45,-17,-33,10,-23,-56,30,4,22,-15,-33,-42,-19,-22,0,6,23,34,4,35,-41,18,10,17,-28,-89,5,-6,28,-127,-36,3,-2,19,-21,5,-6,8,-50,32,-9,12,10,18,6,40,19,111,33,53,11,-5,6,-25,-16,-4,-47,6,64,-3,13,15,-15,3,17,-46,12,21,-20,5,-40,37,-33,-2,1,11,15,-15, 
  /* [10][0][][] */ 23,45,-24,24,64,-112,-19,-30,19,48,38,6,-11,14,8,-60,1,31,-31,45,-70,-4,-19,1,-70,-23,-41,55,15,16,-4,36,-20,-10,39,-14,83,-13,-11,0,1,79,28,-9,-49,-20,-54,14,-4,-25,-31,8,-9,-1,-9,-11,0,19,-10,-8,4,14,-10,29,24,34,37,23,14,2,26,37,-63,-29,-69,-17,3,24,-1,0,38,2,-62,-38,65,-59,76,-1,-13,4,32,-21,87,23,-13,-127, 
  /* [11][0][][] */ 54,45,-29,14,-8,8,62,1,3,-19,-23,-16,-13,10,44,5,-5,1,-104,-5,10,18,-2,2,-43,-11,-20,3,7,13,-9,0,-7,9,8,20,14,20,-5,20,1,36,61,-94,22,-43,7,-6,-127,14,2,-48,31,25,-17,12,-11,-15,0,0,9,-11,-18,14,-46,55,-17,6,19,-2,43,16,-48,-20,14,25,3,-35,-56,11,25,-2,89,56,8,-18,-12,-15,-4,25,-17,16,4,2,-24,19, 
  /* [12][0][][] */ -39,-2,8,2,-32,30,27,-10,127,6,-22,-2,-6,10,-26,-53,25,33,14,85,53,36,-2,-10,0,15,8,-34,-112,3,20,-39,6,-2,-10,-16,14,-11,37,-16,-45,-31,21,7,-4,35,21,-3,10,14,-51,7,1,-3,8,-10,77,-20,12,10,11,-17,1,-13,-14,37,-33,9,9,15,-13,-23,16,6,-70,4,26,-13,4,-68,-6,4,45,41,-17,-20,-17,-27,2,33,1,60,-13,-25,9,14, 
  /* [13][0][][] */ 31,-7,-25,23,35,0,12,3,-1,4,11,2,12,-13,12,-8,17,-69,-43,11,-4,-15,7,8,1,14,3,-5,-7,-30,-5,17,4,6,13,39,20,1,12,20,6,11,19,44,16,15,-14,-127,24,-7,6,11,-12,2,13,6,-16,10,31,13,10,17,-4,6,-6,-21,-23,-57,9,13,0,-34,-15,40,-12,15,-22,5,18,-4,38,-7,-13,19,14,24,9,11,-6,0,25,-10,10,10,-9,-11, 
  /* [14][0][][] */ -112,-56,25,48,18,-20,-50,29,-21,8,0,22,66,-3,-127,4,76,-23,-18,16,-10,-14,37,1,-110,3,35,-4,-34,-75,-14,-2,5,7,26,-73,36,33,7,32,2,50,-21,-40,19,113,65,53,-103,43,19,40,-45,-10,33,8,-3,4,44,64,49,55,15,53,6,-27,-42,41,-7,77,-60,-92,-73,8,-9,54,-7,52,92,-1,45,13,18,32,43,12,49,41,43,24,56,-21,-13,25,23,-32, 
  /* [15][0][][] */ 92,-24,43,-2,10,90,32,-12,-9,68,13,0,-79,-15,-15,41,26,35,40,-28,17,3,-93,51,24,10,52,-2,36,49,-46,-74,32,-48,40,-6,46,-31,-45,-101,-31,40,-2,45,0,46,-14,-46,114,-56,-55,37,57,-127,57,-102,-4,-64,17,29,-119,6,27,34,85,-27,-56,34,-35,70,-26,12,61,38,31,11,31,-45,71,-20,-21,-7,20,96,-13,14,5,-64,9,-9,75,-16,-75,80,16,-24, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018748857080936432, 0.011710388585925102, 0.011179625056684017, 0.0093192029744386673, 0.013920599594712257, 0.014535510912537575, 0.01537642627954483, 0.015929052606225014, 0.0092315860092639923, 0.012572844512760639, 0.015414451248943806, 0.024512393400073051, 0.017721405252814293, 0.016015036031603813, 0.021976813673973083, 0.011908374726772308, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10892, -8963, 3261, 62645, -1592, -4283, -11186, 2763, -2916, 1636, 3202, -1830, 1662, -7499, 6481, -5965, -1408, 16104, 23593, 2714, 3590, -2894, 649, -73, 16147, -824, -222, -4038, -5729, -7243, 6376, -9047, 1079, -1983, -1459, 14951, 1780, -4105, 18292, 537, 2, 1152, -9980, -7629, -8070, 63995, 333, 17425, 34564, -12843, -88, 8287, 7871, -60, -4919, 2896, -10611, 1895, 1077, -5052, -749, -625, -13384, -850, 1013, 16445, 27866, 24947, -12297, -239, -10260, -1304, 53920, 12419, 467, 612, 18876, 31670, 237, -7588, -2803, -5487, 775, -3077, 9, -5, 1133, -695, 1591, -2606, -386, -713, 1143, -118, 45, 47396, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00017363227379973978, 0.00013599234807770699, 0.0002292417484568432, 3.4690925531322137e-05, 0.00014004144759383053, 0.00016134044562932104, 0.00032364320941269398, 7.1430949901696295e-05, 0.00013114840839989483, 0.00034478827728889883, 0.00018017151160165668, 0.00031269557075574994, 0.00010292726074112579, 0.00040091588743962348, 0.00015735933266114444, 0.00013826969370711595, 9.5649382274132222e-05, 0.00029209896456450224, 7.0766924181953073e-05, 0.0001796726428437978, 4.2537802073638886e-05, 0.00017520831897854805, 0.00014839645882602781, 0.00033934216480702162, 0.00022656119836028665, 0.00022292295761872083, 0.00011712788545992225, 0.00019266291928943247, 0.00010842434858204797, 0.00011756320600397885, 0.00012744647392537445, 0.00017529100296087563, 0.00012341304682195187, 9.8916134447790682e-05, 0.00018977173021994531, 0.00015950894157867879, 0.00052427983609959483, 0.00010920545173576102, 5.5596108722966164e-05, 0.0001705832255538553, 0.00022127365809865296, 0.00026761519256979227, 0.00032620236743241549, 0.00015715116751380265, 0.00016719831910450011, 6.0308138927211985e-05, 0.00023654881806578487, 0.00019640444952528924, 7.7138371125329286e-05, 0.00018639280460774899, 0.00019446347141638398, 0.00015988253289833665, 0.00024496545665897429, 0.00027508614584803581, 0.00025869166711345315, 0.00051639636512845755, 0.00037202498060651124, 0.0002053076314041391, 9.0533780166879296e-05, 7.8171528002712876e-05, 0.00030941248405724764, 0.00014106067828834057, 0.00025109632406383753, 0.0001313538959948346, 0.0001628508762223646, 0.00017120652773883194, 8.7258580606430769e-05, 7.092969462973997e-05, 0.00032329570967704058, 0.00019904260989278555, 0.00019552765297703445, 0.00011205951886950061, 0.00010698442201828584, 0.0001638981921132654, 0.00015897558478172868, 0.00020812590082641691, 0.00051803083624690771, 4.9827318434836343e-05, 0.00025795397232286632, 0.00024718980421312153, 0.00014841223310213536, 0.00039202431798912585, 0.0001143869012594223, 0.00013735954416915774, 0.00011144427116960287, 9.2489201051648706e-05, 0.0001211181006510742, 0.00016978739586193115, 0.00019770300423260778, 0.00012488797074183822, 0.00017096199735533446, 0.00010731782822404057, 0.00014586096222046763, 0.00047700988943688571, 0.027675701305270195, 8.3066792285535485e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,7,-20,104,-17,23,-62,-52,16,-6,101,-9,3,-8,-4,59,6,16,-36,3,77,0,31,-34,2,16,44,49,21,14,23,48,-6,26,12,-15,5,49,-57,-27,20,10,27,17,-86,-55,24,-5,-11,-19,-8,-7,49,5,-9,1,-4,-36,30,-32,26,0,127,27,-12,-10,11,-51,65,36,2,-5,78,-33,68,4,16,-127,28,66,2,16,127,-14,38,28,-30,-19,36,-7,-14,82,2,18,-3,13, -49,13,-8,11,52,-8,-9,-127,37,13,-127,-4,-18,-11,4,98,20,-29,-16,-16,80,-96,127,26,-61,-32,-105,-16,28,35,-49,18,119,12,-13,-1,-23,127,-63,-127,9,-18,-29,14,45,-127,127,-45,-77,51,49,7,39,-65,31,55,35,42,-101,80,127,35,4,-20,43,-37,-90,-1,37,-30,-15,48,-48,-49,106,-4,-30,-59,-34,65,-63,65,-15,10,-10,47,53,-40,-27,52,-12,73,-127,-32,23,-127, 0,-3,-23,-72,8,19,39,22,-4,-2,4,61,0,-11,-11,8,-11,19,-16,18,7,25,24,-32,1,-32,8,13,-7,5,46,-79,44,17,10,-23,12,4,-30,-21,8,3,-17,8,23,-31,21,0,5,-7,5,-6,4,5,-6,8,-8,44,6,-4,10,-17,2,-16,-26,-18,30,-48,-105,-6,43,-16,-127,-24,-10,16,10,-10,6,12,-13,25,-37,-1,-39,20,25,37,-24,-17,26,-11,17,6,-2,-46, 
  /* [0][1][][] */ -42,59,-18,37,-85,-15,-11,-44,25,95,-47,-21,-31,-25,-7,64,127,-23,-91,-12,59,-127,-28,15,-36,-48,-127,-6,36,37,-50,26,-127,-77,-55,2,63,-3,-53,45,-20,88,0,-3,34,-50,-12,-32,127,44,-4,20,44,8,-37,-18,30,9,-125,127,-39,-89,21,127,-59,-34,-79,123,-37,127,-19,56,-36,-56,35,8,-35,-69,127,49,127,34,7,0,127,29,-99,45,-38,-35,-103,40,94,102,29,-59, 127,127,127,127,-46,-127,127,23,127,-127,15,-127,-108,127,127,127,-17,-127,-64,-127,127,22,-67,127,127,127,-56,-127,127,127,-127,127,-11,-127,-120,127,-127,-44,102,106,-127,-127,127,127,127,-118,-106,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-44,41,-108,-28,-72,-66,127,127,-66,127,127,-106,-127,127,-41,127,-127,-127,-127,127,-76,127,-41,127,79,127,-38,-127,-24,-105,-127,-127,-22,-127,-23,-127,-127,117, -25,66,-38,3,127,74,-20,48,5,23,-15,-6,-27,-29,-13,-5,-105,-20,-127,39,34,78,-12,-115,-35,-42,122,73,8,35,72,7,122,-48,127,-4,54,5,-99,12,36,24,-23,2,-23,-49,-12,-43,81,15,-13,38,-6,-5,-77,-15,23,20,127,-88,3,127,-2,-35,-109,-28,-75,98,16,-16,113,24,-19,-59,14,47,-29,-6,-42,-2,-46,8,46,23,-89,35,127,-45,31,-24,127,-9,-113,36,33,17, 
  /* [0][2][][] */ -5,-38,-22,-61,-4,14,39,31,-4,8,-21,53,25,-34,-11,7,41,3,15,23,-9,31,-17,-26,1,-25,8,5,-10,-8,49,-76,-40,67,-26,-26,30,-34,-67,16,8,10,-35,21,13,-72,-12,-1,-9,6,16,-9,7,0,-23,5,-3,44,-51,35,-8,-12,4,18,-5,-11,21,-54,-57,12,-22,-10,-120,-33,-1,18,14,-11,55,18,24,22,-40,14,13,27,-19,10,7,25,23,-6,20,41,-7,-32, -29,-10,-27,24,-44,76,-23,66,5,-6,53,-12,127,-6,-21,-17,-2,-39,-58,24,-23,80,-44,-112,-48,-48,100,70,12,42,54,-2,-124,64,-13,-23,-28,-26,-127,-5,45,-13,-15,36,-26,-43,-18,-48,-60,28,68,24,-13,-81,28,51,16,27,76,-54,21,-58,-9,2,20,-26,-127,-59,-12,-25,-63,24,37,-48,-31,-6,-45,23,-58,2,50,34,18,9,6,63,-92,127,19,125,-29,-18,113,-21,46,82, -10,-34,-26,30,13,67,-42,12,4,-8,-1,13,13,-49,-12,-15,-45,-5,17,21,-22,6,-21,4,-4,18,-3,52,-2,-7,33,29,17,42,19,-23,-6,-25,-33,7,12,-11,23,10,-73,-27,-13,4,-2,-16,-2,-5,-10,8,-18,-5,-3,-50,16,-27,-22,50,6,-27,-9,-3,35,-56,45,8,54,-22,30,-59,-18,23,11,13,-6,24,-28,31,88,-13,-16,56,39,-7,110,12,4,-20,12,-22,-6,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0073793712072074413, 0.0057796747423708439, 0.0097427740693092346, 0.0014743643114343286, 0.0059517612680792809, 0.0068569686263799667, 0.013754836283624172, 0.0030358154326677322, 0.0055738072842359543, 0.014653501100838184, 0.0076572890393435955, 0.013289561495184898, 0.0043744086287915707, 0.017038924619555473, 0.0066877715289592743, 0.0058764619752764702, 0.0040650987066328526, 0.012414205819368362, 0.0030075942631810904, 0.0076360870152711868, 0.0018078564899042249, 0.0074463533237576485, 0.0063068494200706482, 0.014422042295336723, 0.0096288509666919708, 0.0094742253422737122, 0.0049779349938035011, 0.0081881741061806679, 0.0046080346219241619, 0.0049964361824095249, 0.0054164747707545757, 0.0074498672038316727, 0.0052450541406869888, 0.004203935619443655, 0.0080652981996536255, 0.0067791296169161797, 0.022281892597675323, 0.0046412316150963306, 0.0023628345225006342, 0.0072497869841754436, 0.0094041302800178528, 0.011373645626008511, 0.013863600790500641, 0.0066789244301617146, 0.0071059283800423145, 0.0025630958843976259, 0.010053324513137341, 0.0083471890538930893, 0.0032783807255327702, 0.0079216938465833664, 0.0082646971568465233, 0.0067950072698295116, 0.010411031544208527, 0.011691161431372166, 0.010994396172463894, 0.021946845576167107, 0.01581106148660183, 0.0087255742400884628, 0.0038476856425404549, 0.0033222900237888098, 0.013150029815733433, 0.0059950784780085087, 0.010671594180166721, 0.0055825402960181236, 0.0069211623631417751, 0.0072762775234878063, 0.0037084894720464945, 0.0030145118944346905, 0.01374006737023592, 0.0084593109786510468, 0.0083099249750375748, 0.0047625293955206871, 0.0045468378812074661, 0.0069656730629503727, 0.0067564621567726135, 0.0088453507050871849, 0.022016309201717377, 0.0021176610607653856, 0.010963043197989464, 0.010505566373467445, 0.006307519506663084, 0.016661033034324646, 0.0048614433035254478, 0.0058377804234623909, 0.0047363815829157829, 0.0039307908155024052, 0.0051475190557539463, 0.0072159641422331333, 0.0084023773670196533, 0.0053077386692166328, 0.0072658848948776722, 0.0045610074885189533, 0.0061990907415747643, 0.020272919908165932, 1.1762173175811768, 0.0035303386393934488, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 18801, 1289, 8609, -796, 4631, 6226, 17005, 6227, -1261, 14728, 7905, 1544, 8033, 39714, -410, -2069, 9183, 12790, 2218, -144, -739, 13695, 5408, 2994, 10958, 5909, 5073, 5437, 84, -45, 6579, 9097, 14540, 1654, 8455, -665, 19906, 7597, 929, 5839, 1011, 13025, 13824, 6378, 3917, 11615, 17908, 6642, 5852, 4106, 380, -833, 16991, 7586, 10350, 20805, -343, 9720, 3763, 4251, 14059, 12183, 3777, 7727, 7675, 4250, 6231, -1095, 24951, 8720, 11683, -1357, -1784, 2988, 2182, 4219, 22606, 14697, 13622, -4230, 7929, -5720, -2075, 548, 7213, 5468, 6784, 3949, 10831, 5417, 8779, 4372, 14895, 22049, -12115, 18857, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013753869279753417, 0.00025739066768437624, 0.00015775757492519915, 0.00072837597690522671, 0.00034533228608779609, 0.00014648413343820721, 0.00018062138406094164, 0.00056490267161279917, 0.00037816277472302318, 0.00012241204967722297, 0.00017698791634757072, 0.00051664619240909815, 0.00034226084244437516, 0.00012080195301678032, 0.00025873086997307837, 0.00032901036320254207, 0.0002421610988676548, 0.00017916773504111916, 0.00020884850528091192, 0.00059758062707260251, 0.00040017766878008842, 0.00018313383043278009, 0.00027858495013788342, 0.00025525700766593218, 0.00016407050134148449, 0.00035710094380192459, 0.00028330535860732198, 0.00017609410861041397, 0.00046760129043832421, 0.00033871704363264143, 0.00021766799909528345, 0.00020818210032302886, 0.00013559003127738833, 0.00065898196771740913, 0.00019298732513561845, 0.0004644530126824975, 0.00011456969514256343, 0.00034812709782272577, 0.00048100759158842266, 0.00016685244918335229, 0.0004939790815114975, 0.00014169797941576689, 0.00015272054588422179, 0.00012255778710823506, 0.00028487856616266072, 0.00027782932738773525, 0.00015795887156855315, 0.00022194771736394614, 0.0002706226659938693, 0.00022007212101016194, 0.00032169301994144917, 0.00078244408359751105, 0.00015730185259599239, 0.00021178892347961664, 0.00022548776178155094, 9.017216507345438e-05, 0.00039479255792684853, 0.00018165040819440037, 0.00020062582916580141, 0.00037780936690978706, 0.00012144084757892415, 0.00011657452705549076, 0.00028151410515420139, 0.00035306235076859593, 0.00013431602565106004, 0.00025913032004609704, 0.00031022453913465142, 0.00032353351707570255, 0.00010840679169632494, 0.00012628703552763909, 0.00017129967454820871, 0.00035732335527427495, 0.00022861520119477063, 0.00045303828665055335, 0.00018257305782753974, 0.00030217762105166912, 0.00010508224659133703, 0.00030415301444008946, 0.00012092226097593084, 0.00028728178585879505, 0.00013044390652794391, 0.00036285826354287565, 0.00018897178233601153, 0.00043568658293224871, 0.00021599463070742786, 0.00028556320467032492, 0.00023927087022457272, 0.00034307606983929873, 0.00015298817015718669, 0.00029884502873755991, 0.0001591888430994004, 0.0003792125207837671, 0.00013944103557150811, 0.00012222460645716637, 0.00024307546846102923, 0.000176311019458808, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 34,-16,125,127,81,-26,15,-43,113,-5,-46,-74,33,78,-39,-104, 
  /* [1][0][][] */ 34,89,-38,-18,115,-1,5,30,62,68,-2,127,3,-42,126,-119, 
  /* [2][0][][] */ 24,-53,-6,-4,-44,59,-76,115,-87,-120,11,122,-1,-99,63,-127, 
  /* [3][0][][] */ 127,110,-13,28,-124,-1,-54,-1,0,5,112,-63,-55,80,-30,-26, 
  /* [4][0][][] */ -6,-5,26,2,-23,30,-27,42,-68,-47,-4,-4,1,-127,19,0, 
  /* [5][0][][] */ 127,-45,-25,-21,-26,-122,-17,18,-21,10,-114,-18,12,-15,24,63, 
  /* [6][0][][] */ -117,-80,-7,88,-57,-7,-45,20,-124,-66,-64,-39,12,43,32,127, 
  /* [7][0][][] */ -22,25,-59,52,56,-127,-31,41,2,-34,19,-5,-4,17,-58,9, 
  /* [8][0][][] */ 27,-48,-11,-10,7,31,-65,-68,-10,4,-68,5,-127,4,1,26, 
  /* [9][0][][] */ 16,-34,49,109,4,28,-10,-70,127,-100,19,-36,-9,56,-62,20, 
  /* [10][0][][] */ -114,-28,-19,-31,106,58,24,65,95,-72,-81,20,94,-65,-127,57, 
  /* [11][0][][] */ 26,5,-127,19,51,12,-30,21,-12,-26,-2,-13,2,21,-53,-3, 
  /* [12][0][][] */ 113,-70,-9,0,-10,-113,-70,-39,32,-13,-127,-8,-62,-24,-10,66, 
  /* [13][0][][] */ 48,-89,9,-44,89,-25,-79,-127,15,-71,22,19,52,-27,12,23, 
  /* [14][0][][] */ -43,47,-117,-68,67,-127,67,-74,30,50,-23,-97,9,96,-3,40, 
  /* [15][0][][] */ 46,-21,75,47,59,-42,-32,-3,15,-63,-74,-4,-127,-66,-30,57, 
  /* [16][0][][] */ -118,59,-4,14,-26,86,42,54,-14,25,127,-4,-11,-13,25,-34, 
  /* [17][0][][] */ -9,5,-43,-27,-19,21,32,65,-23,127,-24,18,-7,69,56,-7, 
  /* [18][0][][] */ 7,126,-59,-8,9,-1,63,-54,19,122,-69,127,14,-53,42,-92, 
  /* [19][0][][] */ 6,-13,43,11,11,47,-12,16,11,1,-42,-6,-127,8,-14,22, 
  /* [20][0][][] */ 89,-79,7,-74,-7,8,32,-66,-42,21,-127,-27,34,-7,37,-8, 
  /* [21][0][][] */ 25,-10,127,39,2,54,11,-19,1,7,-4,-9,-5,70,-5,-22, 
  /* [22][0][][] */ 29,7,17,18,-12,-5,20,127,20,-5,14,28,8,45,23,15, 
  /* [23][0][][] */ -24,6,-58,22,26,-127,5,31,-5,-21,-9,-11,-57,2,5,31, 
  /* [24][0][][] */ 21,-55,2,-68,52,0,-35,-20,25,23,89,107,-63,78,127,46, 
  /* [25][0][][] */ -127,-112,-47,1,-1,-11,0,-62,-59,0,-90,-11,18,38,53,66, 
  /* [26][0][][] */ -12,-11,36,9,11,24,-49,51,-76,-76,4,30,7,-127,33,-30, 
  /* [27][0][][] */ -86,66,-44,24,49,-3,-4,28,19,-43,127,41,-16,14,-11,-36, 
  /* [28][0][][] */ -14,-2,18,31,-2,-1,13,81,25,20,-32,-8,-127,-9,-5,44, 
  /* [29][0][][] */ -17,66,36,-51,37,-11,16,-28,-127,28,-23,5,-4,35,-86,17, 
  /* [30][0][][] */ -7,-7,-127,-31,13,-64,7,31,-22,-9,-4,-21,-41,-26,4,15, 
  /* [31][0][][] */ 127,-33,-99,0,25,-6,-37,47,-23,-3,-61,-40,-2,-4,-61,35, 
  /* [32][0][][] */ -105,60,13,33,22,64,23,16,16,-5,127,-16,-55,13,-8,-29, 
  /* [33][0][][] */ 7,0,127,-13,-50,33,11,-36,-1,15,-13,15,2,15,42,15, 
  /* [34][0][][] */ -53,-16,-79,-127,22,40,-7,-51,-17,-74,-19,-108,8,-1,44,21, 
  /* [35][0][][] */ 5,-29,42,56,52,-25,26,-31,-127,55,-17,26,-28,111,-40,-46, 
  /* [36][0][][] */ -122,64,-31,-28,-15,49,25,84,-7,7,127,-25,-15,37,9,-25, 
  /* [37][0][][] */ -38,22,127,-25,-57,-40,25,-31,17,20,1,18,2,-53,51,4, 
  /* [38][0][][] */ 0,-10,-23,22,30,-69,-48,-5,-30,-9,76,-9,127,14,-8,16, 
  /* [39][0][][] */ -32,-19,-16,-56,-68,-75,52,127,-39,-26,5,-52,-4,68,65,79, 
  /* [40][0][][] */ 63,8,-20,-11,-17,105,-37,-3,13,7,27,5,127,26,-29,-19, 
  /* [41][0][][] */ -17,-8,-34,-127,35,3,-41,-78,-2,-52,19,-47,-7,-14,-15,36, 
  /* [42][0][][] */ 59,64,-10,54,-127,-13,-62,-7,-69,-45,68,-91,-49,77,-27,47, 
  /* [43][0][][] */ 14,108,-35,127,20,20,36,-85,-43,82,-3,19,6,-47,47,33, 
  /* [44][0][][] */ -5,-33,-127,33,55,77,-49,58,-11,-22,30,-22,19,-22,-77,-1, 
  /* [45][0][][] */ 26,31,6,-127,-2,-4,45,-15,-28,14,-50,27,14,-106,34,-42, 
  /* [46][0][][] */ 25,50,57,-21,12,10,-42,62,8,-39,-27,17,14,127,54,-9, 
  /* [47][0][][] */ 17,-20,19,-52,-31,18,-77,52,-13,-46,26,33,5,-127,51,15, 
  /* [48][0][][] */ 20,-5,18,-127,-7,-25,4,12,11,-32,7,-15,-1,57,-5,69, 
  /* [49][0][][] */ 35,-43,-2,127,109,17,-4,50,-55,10,42,52,-9,48,116,-17, 
  /* [50][0][][] */ -31,-26,69,-24,1,124,-43,-72,35,-5,127,38,84,-14,-9,-61, 
  /* [51][0][][] */ 33,47,14,5,27,5,-42,19,35,-5,7,127,19,34,22,-52, 
  /* [52][0][][] */ -13,51,127,2,11,-27,27,-42,-33,13,-11,25,-6,100,-110,-1, 
  /* [53][0][][] */ -9,-10,-58,-127,-52,25,11,-43,-20,47,10,-7,28,-26,60,14, 
  /* [54][0][][] */ -2,9,-39,-52,33,3,-24,9,78,-27,27,-43,-21,127,21,27, 
  /* [55][0][][] */ 2,-45,-41,-23,2,-57,-11,-127,-1,-105,-27,-15,-45,-88,-39,-6, 
  /* [56][0][][] */ 52,51,31,65,11,-27,15,127,15,-23,9,-42,84,-19,-59,42, 
  /* [57][0][][] */ 84,-13,120,-26,-74,-67,-1,-33,29,1,-127,16,53,-45,55,21, 
  /* [58][0][][] */ 103,123,25,115,-127,-22,-2,35,-35,34,90,-36,-90,-67,-21,-103, 
  /* [59][0][][] */ 127,-32,1,10,-41,0,10,13,-20,29,-115,-30,-2,5,9,16, 
  /* [60][0][][] */ -127,34,-26,8,3,13,25,30,18,24,99,7,-24,-3,11,-22, 
  /* [61][0][][] */ -108,61,30,24,44,12,-96,-57,127,-118,114,3,64,-41,-113,-72, 
  /* [62][0][][] */ -50,-65,-127,89,74,107,13,81,34,-40,43,-41,-72,-13,-114,-24, 
  /* [63][0][][] */ -23,18,127,-52,-55,-45,33,-23,-4,6,-6,8,-13,-29,68,18, 
  /* [64][0][][] */ 19,63,-8,23,53,-1,92,-123,-9,114,-13,-12,-15,-127,-16,47, 
  /* [65][0][][] */ -5,26,5,-10,53,23,-2,-127,-19,-42,-16,-38,-14,-35,32,10, 
  /* [66][0][][] */ -127,8,-17,6,-46,16,11,-42,-77,-37,-73,45,58,23,48,77, 
  /* [67][0][][] */ -20,-66,-19,127,-15,-13,-43,30,83,46,36,-35,-35,-30,-88,-40, 
  /* [68][0][][] */ 15,9,-16,127,-68,-3,-7,-35,-60,23,19,-31,-28,-63,-25,-32, 
  /* [69][0][][] */ 127,120,27,92,8,-7,86,-108,-16,116,4,69,-20,-26,38,10, 
  /* [70][0][][] */ 13,-24,-26,-109,113,-20,68,42,102,-10,89,-61,-6,127,76,116, 
  /* [71][0][][] */ 8,48,17,84,43,-127,-33,98,28,-90,14,18,13,-49,-56,33, 
  /* [72][0][][] */ -125,-61,-38,35,1,26,-21,19,-66,-40,-120,41,52,12,-4,127, 
  /* [73][0][][] */ 0,-2,0,27,19,-20,-9,-1,38,-10,-11,18,23,127,-64,-21, 
  /* [74][0][][] */ 74,-40,73,-43,-37,4,30,-8,-51,-9,-118,40,-127,2,17,29, 
  /* [75][0][][] */ -22,-20,-20,127,-29,17,-6,-24,-58,18,-4,-25,1,-43,-8,-40, 
  /* [76][0][][] */ 6,-5,-13,34,24,3,-13,-127,7,-111,-1,20,-29,-25,39,-29, 
  /* [77][0][][] */ 127,-43,54,49,-30,-8,-41,3,56,-19,-35,49,53,9,-60,39, 
  /* [78][0][][] */ -18,4,38,-4,-2,-13,-62,23,28,-32,-32,-53,1,127,31,-42, 
  /* [79][0][][] */ 3,11,54,25,46,61,-58,-59,15,-50,68,-10,127,-23,-30,-46, 
  /* [80][0][][] */ -113,-97,-113,120,-5,29,60,-11,-127,44,-124,22,74,-107,-5,85, 
  /* [81][0][][] */ 53,9,-83,45,127,115,-39,-41,19,-92,-27,-81,-23,-13,-97,16, 
  /* [82][0][][] */ 99,127,-3,64,-95,-1,-85,-22,-46,6,102,-46,-34,99,-15,-56, 
  /* [83][0][][] */ 127,35,13,-26,3,-21,-4,28,28,19,77,-34,-54,-34,-15,-74, 
  /* [84][0][][] */ 1,-44,-51,-46,33,14,9,-127,-22,-65,24,10,-33,4,14,-14, 
  /* [85][0][][] */ -21,-25,-45,-48,-22,-16,87,73,-14,127,-1,-64,20,49,63,-12, 
  /* [86][0][][] */ 76,-28,2,29,6,-19,-7,-24,26,18,-127,18,31,4,-20,6, 
  /* [87][0][][] */ -35,21,6,-41,-20,48,-33,34,-1,-16,39,-13,7,-127,6,5, 
  /* [88][0][][] */ -7,-35,-82,-27,63,-24,-33,-127,6,-20,24,-30,-15,-5,42,-11, 
  /* [89][0][][] */ 14,-5,42,-127,24,-4,-39,103,60,-69,36,21,-24,28,34,51, 
  /* [90][0][][] */ 4,11,-48,42,47,-15,109,-87,59,127,-42,36,1,-18,-5,-3, 
  /* [91][0][][] */ 57,-18,-26,-20,26,-127,-29,-21,-16,-19,-73,-30,52,-10,17,14, 
  /* [92][0][][] */ -1,25,127,38,59,17,-13,37,-35,19,-47,14,18,92,-14,-21, 
  /* [93][0][][] */ 127,-36,-17,-22,-48,-66,33,34,-30,38,-103,-23,-15,22,-12,44, 
  /* [94][0][][] */ 16,-18,54,80,125,-32,-16,60,9,-20,0,65,-1,127,-31,-86, 
  /* [95][0][][] */ -127,52,23,52,4,45,11,2,23,-1,125,4,-20,42,-24,-50, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00049317622324451804, 0.00092293275520205498, 0.0005656756111420691, 0.0026117574889212847, 0.0012382674030959606, 0.00052525213686749339, 0.00064765900606289506, 0.002025586785748601, 0.0013559885555878282, 0.00043893620022572577, 0.00063463038532063365, 0.0018525522900745273, 0.0012272540479898453, 0.00043316284427419305, 0.00092773832147940993, 0.0011797414626926184, 0.00086832366650924087, 0.00064244662644341588, 0.00074887374648824334, 0.0021427611354738474, 0.0014349279226735234, 0.00065666798036545515, 0.00099892960861325264, 0.00091528199845924973, 0.00058831204660236835, 0.0012804665602743626, 0.001015855697914958, 0.00063142541330307722, 0.0016766906483098865, 0.0012145469663664699, 0.00078049808507785201, 0.00074648420559242368, 0.00048618885921314359, 0.002362929517403245, 0.00069199991412460804, 0.0016654018545523286, 0.00041081567178480327, 0.0012482887832447886, 0.0017247620271518826, 0.00059828738449141383, 0.0017712742555886507, 0.00050809030653908849, 0.00054761423962190747, 0.00043945878860540688, 0.0010214968351647258, 0.00099622015841305256, 0.00056639744434505701, 0.00079584395280107856, 0.00097037910018116236, 0.00078911858145147562, 0.0011535034282132983, 0.0028056311421096325, 0.00056404154747724533, 0.00075941730756312609, 0.00080853758845478296, 0.00032333278795704246, 0.0014156184624880552, 0.00065134878968819976, 0.00071938947075977921, 0.001354721374809742, 0.00043545375228859484, 0.00041800446342676878, 0.0010094328317791224, 0.0012659853091463447, 0.00048162063467316329, 0.00092917063739150763, 0.0011123805306851864, 0.0011601028963923454, 0.00038871719152666628, 0.0004528308636508882, 0.00061423389706760645, 0.0012812641216441989, 0.00081975175999104977, 0.0016244717407971621, 0.00065465719671919942, 0.0010835265275090933, 0.00037679626257158816, 0.0010906097013503313, 0.00043359425035305321, 0.0010301141301169991, 0.00046773627400398254, 0.0013011107221245766, 0.00067760125966742635, 0.0015622532228007913, 0.00077449780656024814, 0.0010239518014714122, 0.00085796008352190256, 0.0012301772367209196, 0.0005485738511197269, 0.0010715767275542021, 0.00057080778060480952, 0.0013597526121884584, 0.00049999752081930637, 0.00043826410546898842, 0.00087160232942551374, 0.00063220324227586389, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -36097, 3926, 2204, -8634, 352, -5775, -10701, -39050, 1185, 25928, 32677, -9069, -1017, -23489, 39478, -43942, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00067485705949366093, 0.00091529375640675426, 0.0010753729147836566, 0.0011448442237451673, 0.00075371767161414027, 0.0013065891107544303, 0.0011357143521308899, 0.00053957797354087234, 0.00071598147042095661, 0.00069462077226489782, 0.00093022780492901802, 0.00072496128268539906, 0.0012293595355004072, 0.0012291239108890295, 0.00048499033437110484, 0.00046108200331218541, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -14,-15,-23,10,25,-6,6,101,-54,9,45,-6,25,-17,-7,17,21,-29,-7,-4,58,-6,19,127,-18,85,-9,-21,33,-21,22,-26,-22,52,29,-50,19,45,14,-17,-107,-25,12,42,29,25,-116,-48, 
  /* [1][0][][] */ -33,-13,28,15,-30,8,-3,52,-53,-30,4,-42,-17,-20,0,1,-24,117,-7,20,12,8,-26,-13,22,-41,13,20,-21,-86,-37,24,-18,-4,30,1,-2,-39,-4,18,-15,-29,127,13,11,-6,19,-15, 
  /* [2][0][][] */ -23,-12,-14,-36,-2,-66,4,-19,-4,14,17,25,16,17,-14,8,-5,-25,-23,-9,-7,3,-2,-127,-10,74,-15,4,4,-20,1,-10,-9,54,12,-5,18,12,29,-4,-40,7,-20,-7,-3,-12,14,2, 
  /* [3][0][][] */ -6,35,-1,-28,0,0,5,-4,-15,-4,-3,38,-127,5,-6,0,-1,4,-16,4,-27,8,4,16,-5,-9,4,23,-10,13,4,13,2,2,17,21,-9,24,39,12,13,5,26,-28,7,-5,3,17, 
  /* [4][0][][] */ 37,-26,11,9,20,25,24,-19,-28,6,-16,-22,-4,7,-4,15,19,-11,-80,6,-10,10,12,74,-1,-25,8,50,5,-71,17,12,14,-36,33,-127,12,34,0,8,-16,15,12,-23,-4,-18,3,5, 
  /* [5][0][][] */ 32,5,-18,57,-1,-5,8,22,2,0,42,8,2,56,-2,1,-25,26,28,5,16,6,5,-27,1,-45,6,-18,-2,-7,1,5,70,-127,-2,29,-16,-11,14,6,-91,53,21,-6,0,0,-104,-5, 
  /* [6][0][][] */ 23,-5,2,5,-12,-6,4,-12,-5,2,-1,4,-17,12,6,4,-3,-14,127,5,2,11,16,-33,6,3,23,-14,-11,-4,-2,6,-2,-8,32,-35,1,-40,67,13,-1,-8,-5,10,-11,3,4,-11, 
  /* [7][0][][] */ -46,-14,-1,27,-8,83,-4,43,-6,39,-5,127,75,-9,-12,-2,-8,-23,-12,-20,-27,-6,-20,62,-4,-42,-49,-19,-9,-13,-12,-13,7,-4,-29,-1,4,-59,93,-3,20,30,-70,-55,13,-11,6,-2, 
  /* [8][0][][] */ -48,-49,1,5,-5,1,-1,36,-4,-66,-4,40,52,-1,7,6,-16,61,-29,9,-48,24,-5,-9,-1,4,5,42,-10,109,-9,24,-4,5,-18,-127,-109,65,38,22,24,-2,103,-26,10,28,16,32, 
  /* [9][0][][] */ -28,8,-15,30,17,-33,-2,-2,65,-43,12,57,-61,16,16,-4,-8,18,-39,-32,53,3,-11,-20,4,9,50,-24,7,18,4,-2,-2,19,76,-109,-16,-127,-93,10,-34,25,62,10,7,19,-14,-37, 
  /* [10][0][][] */ -19,-2,-31,-127,55,85,6,-18,1,35,20,14,48,-54,-31,25,28,-40,59,-29,40,-20,42,56,-49,-115,3,-35,48,33,46,-38,-27,-80,26,-2,19,-41,1,-33,-33,-63,0,17,17,15,13,-43, 
  /* [11][0][][] */ 2,40,12,65,40,-64,-69,-11,1,62,-22,4,0,51,-4,-80,24,56,9,-4,-48,-96,16,6,21,-34,13,-21,59,-48,31,-83,42,-17,-43,-89,87,18,2,-127,4,59,92,-70,-5,-47,22,35, 
  /* [12][0][][] */ 127,-2,-19,12,-1,18,-1,95,17,-10,-55,-26,-3,9,-5,-7,-6,3,-6,-12,-1,-3,1,18,-2,11,-3,5,-4,15,-5,7,3,-65,-6,8,-14,-13,-28,-2,-14,-77,7,-116,-51,-7,80,0, 
  /* [13][0][][] */ 8,2,-1,8,9,-11,3,2,2,7,5,24,-3,3,6,0,5,3,13,7,15,-10,9,-1,3,2,17,127,9,-6,8,-4,5,2,-41,23,8,-7,7,-15,-11,-1,0,4,-4,-2,-8,-15, 
  /* [14][0][][] */ 62,-30,43,-70,54,24,38,-99,-57,-64,-10,127,-70,10,70,13,60,26,-51,56,23,12,78,-13,27,59,-40,-122,30,-35,70,51,-10,79,-127,-50,-44,44,93,18,-35,9,50,1,-5,6,14,-36, 
  /* [15][0][][] */ -10,-61,-74,-31,58,20,79,-52,-6,9,-17,-30,88,30,-95,67,63,40,87,-78,-100,-15,50,-11,-84,43,21,49,55,45,51,-48,11,69,105,127,-15,-112,-13,-35,97,58,113,-48,-14,-29,-14,58, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028681425377726555, 0.038899984210729599, 0.045703347772359848, 0.048655878752470016, 0.032033000141382217, 0.055530034005641937, 0.04826785996556282, 0.022932063788175583, 0.030429212376475334, 0.029521383345127106, 0.039534680545330048, 0.030810853466391563, 0.052247777581214905, 0.052237764000892639, 0.020612088963389397, 0.019595984369516373, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2023, 38566, -1192, 50562, 4966, 128018, -4217, 48026, 2131, 30060, 27864, 2512, -6056, 34446, -1539, -2040, -1021, -155, 1984, -1711, 270, -5101, 1260, -19642, -5498, 36250, 128505, 101787, 2219, 454, -3172, 1135, 25541, -24, 26430, -3295, 41696, 4749, 51175, 2873, -430, 62115, 498, 4344, 57034, -477, -925, 51989, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1117803347297013e-05, 4.3322717829141766e-05, 0.00016734049131628126, 4.6292792831081897e-05, 0.00013826569193042815, 6.0362363001331687e-05, 0.00012778137170244008, 0.00012071497621946037, 8.6852989625185728e-05, 4.1277566197095439e-05, 5.8390727645019069e-05, 9.0742723841685802e-05, 5.1529445045161992e-05, 5.2441355364862829e-05, 0.00015675013128202409, 0.0001719370047794655, 0.0001628479512874037, 7.599130185553804e-05, 0.00011318548786221072, 0.00017893996846396476, 8.4436134784482419e-05, 0.00020189283532090485, 8.9875975390896201e-05, 0.00012629646516870707, 0.00010136968921869993, 0.00012952559336554259, 3.0228417017497122e-05, 6.8688314058817923e-05, 0.00011006677959812805, 0.0001406978553859517, 0.00010083896631840616, 0.00015679518401157111, 5.1190774684073403e-05, 0.00013108612620271742, 3.175181700498797e-05, 5.8981135225621983e-05, 0.00013982433301862329, 7.7804725151509047e-05, 0.00011232070391997695, 0.00012253827298991382, 0.00012726652494166046, 9.4531940703745931e-05, 8.3371443906798959e-05, 8.3518018072936684e-05, 3.6319241189630702e-05, 0.00014271907275542617, 0.00012062509631505236, 2.5770512365852483e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-93,95,70,52,-34,106,-64,59,-87,-79,46,52,-42,-70,-89,101,80,50,78,66,-70,-83,51,-33,-39,-62,-63,-66,61,-62,-115,-12,41,70,63,-65,53,-49,-25,50,-74,57,62,-93,11,76,-32, 82,-98,127,86,-77,-68,-57,-85,97,-100,-63,73,80,-108,-94,92,-38,98,83,127,84,-111,52,72,-52,-75,-68,-80,56,79,-29,-127,-85,79,82,83,-83,81,-81,-18,76,-94,83,89,-76,-127,92,-101, 35,-46,70,37,18,-40,-47,-40,42,-30,4,34,29,-77,-54,0,-53,41,33,69,32,-52,31,25,-28,-45,-44,-22,32,31,87,-89,-84,45,35,34,-31,37,-37,-12,39,-40,34,43,-2,-8,36,-74, 
  /* [0][1][][] */ 92,-112,-41,94,54,-83,127,-89,87,-112,-72,80,83,-106,-13,-127,127,107,74,-40,86,107,-127,72,73,-76,-92,-99,-127,86,-68,-9,-89,71,107,95,-86,79,-79,89,83,-100,88,90,-90,108,93,-92, 127,-127,-65,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-23,98,-64,127,127,-52,127,127,68,127,127,-127,-127,-127,53,127,-27,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 62,-77,-33,66,37,-61,-49,-62,57,-42,-62,58,49,-52,-16,11,-62,51,58,-29,56,64,50,63,66,-65,-62,-44,37,55,127,14,-63,70,47,49,-51,60,-59,56,60,-58,55,63,-62,-67,58,-56, 
  /* [0][2][][] */ 45,-51,-46,51,27,-52,64,-43,42,-73,-4,39,56,-71,83,-78,73,51,35,-31,25,-9,-76,30,-24,-43,-50,-50,-74,32,-41,89,-74,37,49,42,-27,38,-42,-87,47,-51,40,46,-23,17,40,-77, 71,-73,-48,80,-56,-63,-71,-68,51,-76,-67,59,74,-48,127,34,-46,60,61,-43,56,-16,43,66,-49,-66,-80,-61,31,61,-23,117,-55,65,59,58,-49,62,-67,-105,68,-66,61,63,-85,51,62,-55, 41,-40,-26,46,28,-19,-17,-34,15,-26,-51,28,32,4,67,25,-35,25,29,-32,28,1,40,41,-25,-28,-49,-25,33,33,61,66,-1,34,17,22,-22,30,-30,-54,29,-33,26,29,-62,10,31,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034475065767765045, 0.0018412155332043767, 0.0071119708009064198, 0.0019674436189234257, 0.0058762915432453156, 0.0025654004421085119, 0.0054307081736624241, 0.00513038644567132, 0.0036912520881742239, 0.001754296594299376, 0.0024816058576107025, 0.0038565655704587698, 0.0021900013089179993, 0.0022287575993686914, 0.0066618802957236767, 0.007307322695851326, 0.0069210375659167767, 0.0032296304125338793, 0.0048103830777108669, 0.0076049482449889183, 0.0035885355900973082, 0.0085804453119635582, 0.0038197287358343601, 0.00536759989336133, 0.0043082116171717644, 0.0055048377253115177, 0.0012847076868638396, 0.0029192531947046518, 0.0046778381802141666, 0.0059796585701406002, 0.0042856559157371521, 0.0066637950949370861, 0.0021756079513579607, 0.0055711604654788971, 0.0013494521845132113, 0.0025066982489079237, 0.005942534189671278, 0.0033067008480429649, 0.004773629829287529, 0.0052078766748309135, 0.0054088272154331207, 0.0040176073089241982, 0.0035432863514870405, 0.0035495157353579998, 0.0015435677487403154, 0.0060655605047941208, 0.0051265666261315346, 0.0010952467564493418, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 528, 918, 2176, 487, 9409, 14324, 2052, -103, -694, -587, 1109, 1075, 3349, 990, 23770, 2603, 1697, -1234, -286, 2753, -1721, 10573, 8819, 10278, 5082, 378, 3288, 3817, 9155, -508, 9943, 6048, 540, -127, 5145, 3275, -1610, 307, -714, 4960, 969, -527, -932, -19, 882, 3135, 692, 1051, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00046651836601085961, 0.00078025972470641136, 0.00027363011031411588, 0.00031798443524166942, 0.00023373361909762025, 0.00027971266536042094, 0.00052642455557361245, 0.00024188162933569402, 0.00041338129085488617, 0.00075930927414447069, 0.00092246331041678786, 0.00027746622799895704, 0.00038496364140883088, 0.0007746152114123106, 0.00015174910367932171, 0.00047938214265741408, 0.00028761487919837236, 0.00033474990050308406, 0.00023365164815913886, 0.00033063485170714557, 0.00035419760388322175, 0.0002411523018963635, 0.00041614274960011244, 0.00015298019570764154, 0.00031789881177246571, 0.00030157537548802793, 0.0021216366440057755, 0.00049757113447412848, 0.00019189491285942495, 0.00042844208655878901, 0.00026171191711910069, 0.00019878582679666579, 0.00072946044383570552, 0.00027139988378621638, 0.00071838439907878637, 0.00055501447059214115, 0.00084352761041373014, 0.00037656797212548554, 0.00022953264124225825, 0.00036723416997119784, 0.00016074729501269758, 0.00027446498279459774, 0.0003431297664064914, 0.00024348634178750217, 0.0022085132077336311, 0.00044022413203492761, 0.0003586651582736522, 0.0010949635179713368, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-4,66,-34,44,21,-32, 
  /* [1][0][][] */ 28,71,47,23,16,-41,103,127, 
  /* [2][0][][] */ -61,4,13,6,-127,-7,4,-18, 
  /* [3][0][][] */ 98,2,-14,-127,-116,13,40,-20, 
  /* [4][0][][] */ -127,48,-13,-14,71,-14,35,16, 
  /* [5][0][][] */ -99,-25,30,-16,-127,0,8,82, 
  /* [6][0][][] */ -6,-127,27,-8,-1,-2,1,37, 
  /* [7][0][][] */ -66,-5,1,103,127,-35,-35,8, 
  /* [8][0][][] */ 64,11,1,-127,8,-16,-54,-46, 
  /* [9][0][][] */ -1,-127,-1,-3,-1,83,-64,76, 
  /* [10][0][][] */ -109,-10,-6,13,-127,85,67,-16, 
  /* [11][0][][] */ 117,16,38,20,-66,-49,-37,-127, 
  /* [12][0][][] */ -1,15,45,-6,12,-73,127,61, 
  /* [13][0][][] */ 55,-28,-6,-11,116,127,104,-38, 
  /* [14][0][][] */ 127,61,-10,5,-74,-12,-29,-25, 
  /* [15][0][][] */ -13,-127,22,-7,3,-6,5,38, 
  /* [16][0][][] */ -66,-17,7,-1,-127,-7,17,9, 
  /* [17][0][][] */ -18,93,-94,11,-1,-127,122,-75, 
  /* [18][0][][] */ 127,-34,-45,17,-68,28,-1,116, 
  /* [19][0][][] */ 127,-43,-24,-5,51,2,29,-4, 
  /* [20][0][][] */ 109,25,-19,127,2,29,-5,-51, 
  /* [21][0][][] */ -7,43,-52,-10,-14,89,-127,-92, 
  /* [22][0][][] */ -127,25,34,-10,-35,3,-46,-28, 
  /* [23][0][][] */ -42,-62,-1,25,-127,66,83,-17, 
  /* [24][0][][] */ 127,-11,-14,-12,-68,-9,2,19, 
  /* [25][0][][] */ 15,-11,-6,-18,127,52,50,-30, 
  /* [26][0][][] */ 2,-97,4,-37,4,-127,89,-54, 
  /* [27][0][][] */ -20,-127,22,-13,-1,-52,28,-6, 
  /* [28][0][][] */ -115,56,-19,-15,9,-20,127,85, 
  /* [29][0][][] */ -13,41,15,3,5,45,-115,-127, 
  /* [30][0][][] */ 127,-33,4,14,-89,13,-61,-29, 
  /* [31][0][][] */ -20,-45,40,-42,32,-97,127,96, 
  /* [32][0][][] */ -79,24,11,6,-127,-104,-104,53, 
  /* [33][0][][] */ -27,11,3,20,-127,-61,-48,24, 
  /* [34][0][][] */ 4,-127,58,-10,0,89,-81,66, 
  /* [35][0][][] */ -21,-48,-127,-6,-2,-70,44,-54, 
  /* [36][0][][] */ 4,127,56,12,-8,8,-17,-29, 
  /* [37][0][][] */ -127,24,37,-13,44,-29,-5,-97, 
  /* [38][0][][] */ -127,-13,-49,-12,43,19,29,102, 
  /* [39][0][][] */ -4,-10,72,-11,25,-84,127,82, 
  /* [40][0][][] */ -29,-20,-11,-45,-127,110,120,-28, 
  /* [41][0][][] */ -127,38,10,-79,-81,-83,-90,42, 
  /* [42][0][][] */ -34,-127,-90,-6,-19,55,-88,-72, 
  /* [43][0][][] */ -75,4,-12,-127,100,55,67,5, 
  /* [44][0][][] */ 127,-1,14,-114,37,-26,-22,44, 
  /* [45][0][][] */ -1,-127,-5,1,-16,-87,80,7, 
  /* [46][0][][] */ 103,-7,-4,-30,127,-29,-28,3, 
  /* [47][0][][] */ 127,-1,-2,118,-1,19,7,-46, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00086699571693316102, 0.0014500648248940706, 0.00050852476852014661, 0.00059095455799251795, 0.00043437958811409771, 0.00051982881268486381, 0.00097832770552486181, 0.00044952216558158398, 0.00076824374264106154, 0.0014111296040937304, 0.0017143414588645101, 0.00051565392641350627, 0.00071543129161000252, 0.0014395747566595674, 0.0002820163790602237, 0.00089090224355459213, 0.00053451460553333163, 0.00062211212934926152, 0.00043422722956165671, 0.00061446457402780652, 0.00065825448837131262, 0.00044816674198955297, 0.00077337573748081923, 0.00028430428938008845, 0.00059079541824758053, 0.00056045933160930872, 0.0039429315365850925, 0.00092470541130751371, 0.00035662492155097425, 0.00079623330384492874, 0.00048637553118169308, 0.00036943124723620713, 0.0013556574704125524, 0.00050438003381714225, 0.0013350732624530792, 0.0010314603568986058, 0.0015676442999392748, 0.00069982843706384301, 0.00042657231097109616, 0.00068248214665800333, 0.00029873897437937558, 0.00051007629372179508, 0.00063768558902665973, 0.00045250440598465502, 0.0041043860837817192, 0.00081812951248139143, 0.0006665571709163487, 0.0020349223632365465, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -35434, 28348, -9738, -14308, 25327, 1085, 33063, 45576, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00046460161684080958, 0.00065993197495117784, 0.0013952008448541164, 0.0016596105415374041, 0.00073862681165337563, 0.00061195407761260867, 0.00064817315433174372, 0.0010237992973998189, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -45,-15,-43,14,3,-19,1,-6,-117,127,-34,118,103,5,76,-28,-4,-46,-5,-6,-4,-15,-24,-29,21,-91,8,55,-14,9,14,-37,3,-74,123,31,-5,-12,-8,-19,98,-6,50,-31,-33,23,-9,-12, 
  /* [1][0][][] */ -1,37,127,-5,-4,-22,1,-81,29,0,20,7,-17,9,-5,-119,4,-58,9,0,-28,33,23,-40,-14,-12,6,-7,11,-11,13,3,-2,15,14,12,-18,-30,62,-60,9,40,-8,21,-18,9,23,-6, 
  /* [2][0][][] */ 2,-50,18,-42,33,25,-13,-35,3,-2,-2,13,-14,61,2,-6,-41,127,-24,-30,-16,21,-41,-8,123,3,-2,-6,-31,-10,-1,-49,-10,-17,0,7,-12,-5,-15,8,19,-19,-21,-2,-1,25,-23,-44, 
  /* [3][0][][] */ -3,-85,1,9,0,0,-12,0,-7,-9,17,26,14,-17,50,-3,-10,-21,10,23,-13,17,-27,1,-3,48,-2,4,0,-2,127,3,13,14,-3,-5,-24,-13,-4,14,-12,1,-7,24,-6,2,-4,33, 
  /* [4][0][][] */ -106,9,-12,-2,2,-31,13,3,49,-48,20,-21,-35,3,-10,-11,4,-3,-11,14,20,-30,14,8,-2,44,2,110,1,6,-1,-25,8,-127,-27,17,0,-10,0,-1,-59,1,-11,15,-53,0,8,5, 
  /* [5][0][][] */ -31,30,17,1,-46,8,-2,51,30,-4,7,2,-1,-40,11,40,-9,-88,18,0,50,-47,10,43,14,-4,-74,-39,-45,-36,22,3,-1,-78,-9,-62,64,9,-46,14,18,-41,8,-3,127,-12,-43,-4, 
  /* [6][0][][] */ -30,-32,-24,-11,37,-32,15,-25,-6,-9,29,-16,-12,40,3,-48,1,-8,-6,-31,-32,49,-4,-70,4,-11,-53,-58,22,47,-12,6,12,-64,-20,64,-64,-54,7,-59,-13,9,21,36,127,-34,45,8, 
  /* [7][0][][] */ 11,30,-70,32,-22,15,0,53,-8,-4,62,-34,3,-32,-11,-10,-15,-127,41,-37,58,37,16,-59,17,-17,22,3,-15,33,-17,-4,-3,35,1,-30,-10,-51,-40,-63,-14,-28,38,63,-34,-23,-4,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019745567813515663, 0.0280471071600914, 0.059296034276485443, 0.070533446967601776, 0.03139163926243782, 0.02600804902613163, 0.027547359466552734, 0.043511468917131424, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51766, 246, 8570, -603, 5659, -4624, 1085, 22837, 1020, 27600, -3054, 23466, -6404, -996, 25590, 3799, 388, 18127, 33698, 11100, -151, -535, 362, 20466, -8296, 27065, 45687, 37318, 2765, 2046, -1072, 1307, 888, 17252, -6533, 12875, -11039, 20923, -22331, 111991, 25095, 20392, 12229, -1550, 15220, 3405, 1492, 50, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031425460474565625, 0.00031303364085033536, 0.00018642321811057627, 0.00030784937553107738, 0.00013943035446573049, 9.0661415015347302e-05, 0.00091449735919013619, 0.00015310572052840143, 0.00015960565360728651, 0.00017430185107514262, 8.5974621470086277e-05, 0.0001832840935094282, 0.0002931577037088573, 0.00025343237211927772, 9.9052565929014236e-05, 0.00040303621790371835, 0.00019675226940307766, 0.00021620297047775239, 7.1591406594961882e-05, 0.00015219544002320617, 0.00025349797215312719, 0.00018999673193320632, 0.0001724700559861958, 0.00010579156514722854, 0.00016041476919781417, 0.0001342396717518568, 0.00058731262106448412, 8.7238739070016891e-05, 0.0002342825464438647, 0.00041128587326966226, 9.1453599452506751e-05, 0.0001743591419653967, 0.0010005153017118573, 0.00017040512466337532, 0.00020639697322621942, 0.00018178840400651097, 0.0003528592933434993, 0.00012343340495135635, 0.00026447305572219193, 2.1976313291816041e-05, 0.00012919660366605967, 6.1588652897626162e-05, 0.00013594421034213156, 0.000140816715429537, 0.00015335336502175778, 0.00011237491708016023, 0.0002093274233629927, 0.00012319388042669743, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-4,20,110,4,82,0,28,15,8,9,7,-8,-8,-44,8,-2,8,-22,-114,-6,-23,127,-10,-3,7,-5,10,-4,4,16,98,20,28,38,-27,1,34,-2,2,17,-66,-8,-9,17,3,-7,-10, 127,9,15,-127,28,86,12,10,124,127,7,43,-51,-23,6,8,127,-56,-59,-56,-100,24,-110,14,17,72,-32,-84,24,21,8,-124,5,-62,127,10,-39,-46,-6,116,-79,-97,-30,2,-33,-8,-127,22, -33,-3,8,15,-1,64,5,17,28,8,-13,31,-15,-2,17,3,-103,29,-3,79,-31,-13,-18,-6,-4,-59,-3,30,-16,5,4,-22,8,-25,16,-18,0,48,42,-12,50,39,-16,10,-42,2,-1,-5, 
  /* [0][1][][] */ 124,6,1,-98,14,-27,37,-17,9,8,-12,53,-6,0,18,-33,0,-50,-59,-86,10,-74,-124,-18,5,99,-15,-127,-7,32,12,-107,17,-53,-3,127,-3,59,-43,41,-62,-127,39,-89,-44,-14,-12,-5, 27,-127,-127,116,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-107,127,127,112,127,127,-127,-127,29,-127,-127,93,127,-127,127,-30,-40,127,-127,127,127,127,-78,127,127,127,-120,102,106, 53,5,49,-13,5,-61,46,18,-24,14,-104,-8,0,-39,127,4,63,-65,-72,87,15,-46,12,-33,1,6,-39,69,21,39,0,3,32,-45,8,66,-5,65,70,-9,-81,9,-85,-32,27,-17,-10,6, 
  /* [0][2][][] */ -52,-7,25,-16,7,33,-37,22,8,-24,12,32,6,-5,-39,17,4,22,-14,106,6,-31,-16,-12,-3,22,1,53,-9,3,47,-32,-18,-43,-33,-38,-1,30,8,-22,10,-4,42,-37,-36,18,-11,17, 69,125,75,21,16,-21,126,35,19,-3,43,26,-5,0,-91,24,-58,-56,-37,123,-37,50,11,19,33,-64,-40,30,77,1,127,21,85,-25,7,-34,-26,-17,-15,118,-27,-11,-39,45,20,-31,7,-127, -42,-4,6,-3,5,-7,-61,8,-18,-11,-40,-40,20,-8,-9,11,32,24,-10,-127,24,-9,4,-8,-6,10,-10,-55,-15,8,5,8,-20,88,-38,-22,-5,36,25,-61,4,9,-37,6,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013355820439755917, 0.013303929939866066, 0.0079229865223169327, 0.013083598576486111, 0.0059257899411022663, 0.0038531101308763027, 0.038866136223077774, 0.0065069929696619511, 0.0067832400090992451, 0.0074078282341361046, 0.0036539211869239807, 0.0077895736321806908, 0.012459202669560909, 0.010770875029265881, 0.004209734033793211, 0.017129039391875267, 0.0083619710057973862, 0.0091886259615421295, 0.0030426345765590668, 0.0064683058299124241, 0.010773663409054279, 0.0080748610198497772, 0.0073299771174788475, 0.0044961413368582726, 0.0068176276981830597, 0.005705186165869236, 0.024960786104202271, 0.0037076463922858238, 0.0099570080637931824, 0.017479648813605309, 0.0038867779076099396, 0.0074102636426687241, 0.042521897703409195, 0.0072422176599502563, 0.0087718712165951729, 0.0077260071411728859, 0.014996519312262535, 0.0052459198050200939, 0.011240105144679546, 0.00093399331672117114, 0.0054908553138375282, 0.0026175177190452814, 0.005777629092335701, 0.0059847100637853146, 0.0065175178460776806, 0.0047759339213371277, 0.0088964151218533516, 0.0052357399836182594, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 41087, 6836, 5936, 7648, 1579, 8630, -1727, -239, 933, 2333, 2851, 307, 1883, -1032, 651, -1889, 4536, 10371, -271, 22075, 4043, 2679, 8298, -523, 3851, 5391, 24100, 7852, -86, -2259, 81, 1784, -1888, 8958, 2945, 6324, 6619, 3693, 21667, 1797, -763, 2651, 939, 3657, 4328, 1936, -1339, 2490, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00010453785216668621, 0.00033278358750976622, 0.0002602202002890408, 0.00041763196350075305, 0.0014037165092304349, 0.00058328121667727828, 0.0011067911982536316, 0.0011822161031886935, 0.00064452888909727335, 0.00060878414660692215, 0.00078798731556162238, 0.00048018511733971536, 0.00052957027219235897, 0.00048858817899599671, 0.00066589610651135445, 0.001920797280035913, 0.00034958621836267412, 0.00041038799099624157, 0.0018070110818371177, 0.00012271221203263849, 0.00030066052568145096, 0.00038242051959969103, 0.00048091218923218548, 0.0010282363509759307, 0.0003213674935977906, 0.00022023884230293334, 0.0001674076629569754, 0.0004646429733838886, 0.00093195348745211959, 0.0011445063864812255, 0.00060337036848068237, 0.00047438885667361319, 0.0010542651871219277, 0.00024950713850557804, 0.00035158186801709235, 0.00029144555446691811, 0.00055676279589533806, 0.0003579098847694695, 0.00010854323045350611, 0.0025185847189277411, 0.00076194142457097769, 0.001042183255776763, 0.00050311209633946419, 0.00041413443977944553, 0.00027902500005438924, 0.00056311028311029077, 0.00087284052278846502, 0.0010765340412035584, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 81,18,15,-1,127,12,-32,-8, 
  /* [1][0][][] */ -11,2,5,127,17,-5,4,16, 
  /* [2][0][][] */ 32,-127,-16,47,-12,-73,87,12, 
  /* [3][0][][] */ 127,-35,-2,17,-19,-38,28,8, 
  /* [4][0][][] */ 14,-48,127,-12,-14,-52,14,-102, 
  /* [5][0][][] */ 57,8,4,6,127,17,-7,-1, 
  /* [6][0][][] */ -18,93,-9,127,17,48,-71,-56, 
  /* [7][0][][] */ -2,127,-7,6,1,-9,16,-5, 
  /* [8][0][][] */ 127,37,1,-2,-54,-13,5,-36, 
  /* [9][0][][] */ -127,11,8,18,55,6,-10,3, 
  /* [10][0][][] */ -83,-16,14,127,37,31,-11,3, 
  /* [11][0][][] */ -127,-8,5,-71,34,-7,-25,-37, 
  /* [12][0][][] */ 127,25,4,14,-53,-20,-12,-42, 
  /* [13][0][][] */ -14,85,-127,6,5,110,-73,64, 
  /* [14][0][][] */ -62,-29,-13,127,21,10,-8,-26, 
  /* [15][0][][] */ -3,127,1,-4,-1,-17,16,-44, 
  /* [16][0][][] */ -21,-127,-14,18,7,-127,104,-21, 
  /* [17][0][][] */ 22,127,0,-14,7,80,-81,-24, 
  /* [18][0][][] */ -15,50,-127,0,6,54,-43,63, 
  /* [19][0][][] */ -79,15,5,0,-127,7,14,26, 
  /* [20][0][][] */ -127,-17,2,2,70,-38,37,4, 
  /* [21][0][][] */ -71,-4,-4,4,-127,-13,15,20, 
  /* [22][0][][] */ -127,-23,-2,8,94,-24,33,49, 
  /* [23][0][][] */ -20,-28,-7,-5,-1,87,-127,-86, 
  /* [24][0][][] */ -12,42,-127,8,10,52,-23,76, 
  /* [25][0][][] */ 92,-40,-1,127,-67,-21,12,-37, 
  /* [26][0][][] */ 2,-16,-7,1,-14,122,127,-33, 
  /* [27][0][][] */ 67,-12,-2,12,127,33,35,-18, 
  /* [28][0][][] */ -2,127,-63,7,-2,82,-30,117, 
  /* [29][0][][] */ -5,11,2,-5,4,82,-127,-74, 
  /* [30][0][][] */ 8,-10,4,-127,-9,-1,-2,-10, 
  /* [31][0][][] */ -51,3,0,-1,-127,6,3,1, 
  /* [32][0][][] */ 3,31,1,-127,0,26,-92,-95, 
  /* [33][0][][] */ -56,-5,-9,-8,-127,37,44,-4, 
  /* [34][0][][] */ -127,85,17,30,51,-21,6,1, 
  /* [35][0][][] */ -22,127,-9,-13,-5,-73,59,-39, 
  /* [36][0][][] */ 5,50,-3,-23,-2,94,-127,-33, 
  /* [37][0][][] */ 36,-68,-15,16,20,-127,120,-15, 
  /* [38][0][][] */ 27,-127,-14,-3,5,67,-57,61, 
  /* [39][0][][] */ 2,-127,-9,-3,3,-12,-49,-94, 
  /* [40][0][][] */ 106,34,14,-8,-39,70,-127,-88, 
  /* [41][0][][] */ 7,-126,19,1,-8,87,-60,127, 
  /* [42][0][][] */ 48,-6,-3,-127,-58,-6,-3,-28, 
  /* [43][0][][] */ -77,-20,12,-127,52,-4,-15,-11, 
  /* [44][0][][] */ -7,-23,-7,17,-23,91,127,-12, 
  /* [45][0][][] */ -127,-35,-7,9,5,9,25,-27, 
  /* [46][0][][] */ 21,73,127,1,-9,19,13,23, 
  /* [47][0][][] */ -4,-6,9,127,6,-2,-3,2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00023758610768709332, 0.00075632659718394279, 0.00059140974190086126, 0.00094916386296972632, 0.0031902659684419632, 0.0013256395468488336, 0.0025154354516416788, 0.0026868556160479784, 0.0014648388605564833, 0.0013836008729413152, 0.0017908809240907431, 0.0010913301957771182, 0.0012035692343488336, 0.001110428012907505, 0.0015134006971493363, 0.0043654497712850571, 0.00079451443161815405, 0.00093270029174163938, 0.0041068447753787041, 0.0002788915007840842, 0.00068331958027556539, 0.00086913787527009845, 0.0010929825948551297, 0.0023369016125798225, 0.00073038093978539109, 0.00050054298480972648, 0.00038047210546210408, 0.0010560071095824242, 0.0021180768962949514, 0.0026011518202722073, 0.0013712968211621046, 0.0010781568707898259, 0.0023960580583661795, 0.00056706188479438424, 0.00079904997255653143, 0.00066237646387889981, 0.0012653704034164548, 0.00081343180499970913, 0.00024668924743309617, 0.0057240580208599567, 0.0017316857120022178, 0.0023685991764068604, 0.0011434369953349233, 0.0009412149665877223, 0.00063414796022698283, 0.0012797965900972486, 0.0019837291911244392, 0.0024466691538691521, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5179, -25548, 25412, 24393, 1543, -792, 36956, 9667, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.001423663692548871, 0.00065878912573680282, 0.0013985515106469393, 0.0011380838695913553, 0.00093998148804530501, 0.0012318916851654649, 0.00084061326924711466, 0.00073414185317233205, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -10,3,11,-90,9,23,6,7,0,7,2,-3,91,0,-1,7,0,-10,-10,1,71,-4,0,6,27,39,16,13,1,5,2,-127,11,7,-3,1,-28,1,-12,27,7,-27,-13,2,-2,0,5,1, 
  /* [1][0][][] */ -39,-8,-2,-7,46,24,-33,74,22,6,-26,-21,14,0,16,39,0,42,21,-45,3,22,127,21,-26,-1,56,3,17,-5,18,-12,18,-3,-7,-15,6,-54,8,3,-4,-7,-82,-11,-36,6,-51,-94, 
  /* [2][0][][] */ -57,15,3,10,48,-11,31,24,-12,55,8,-9,0,0,7,57,0,8,-127,23,1,10,4,-16,-34,-1,37,6,8,31,27,0,10,-8,-9,-12,8,7,3,1,40,-8,-32,-1,22,-60,26,15, 
  /* [3][0][][] */ 1,4,-1,10,-4,27,4,-1,62,15,-9,-5,20,0,-29,-9,0,-1,-9,1,-5,-3,1,-18,-12,-5,-12,-6,-10,-4,0,-8,-49,42,-53,-1,14,-2,1,-127,4,3,-2,-49,-2,-4,-1,3, 
  /* [4][0][][] */ 0,-5,81,40,2,-18,-2,2,7,1,-2,-7,-89,0,-12,1,0,12,2,0,62,8,4,-2,-18,33,-1,50,-9,-5,-4,98,5,8,0,-1,23,-15,-12,-18,-4,-127,2,4,-2,0,-5,0, 
  /* [5][0][][] */ -5,43,1,-9,4,46,23,15,-21,31,6,53,26,0,-127,-3,0,18,-38,21,-11,14,-11,43,-20,0,29,-5,-13,18,22,-18,50,30,-41,-5,5,18,-45,16,23,-11,-8,29,20,60,18,25, 
  /* [6][0][][] */ -20,-58,-1,8,39,-47,-23,13,30,-22,-14,92,-6,0,-127,42,0,-1,49,-24,-9,1,30,-29,31,-6,-2,-15,54,-16,-15,-6,94,-31,29,-4,2,-8,-74,-23,-18,-15,-4,-24,-19,-83,-22,-30, 
  /* [7][0][][] */ -113,-19,-12,11,127,21,66,32,9,2,22,-37,-33,0,90,102,0,8,-4,59,-14,-5,-32,44,20,5,47,4,53,64,58,-6,-11,-20,-26,-28,-1,23,30,34,79,5,-33,-11,62,1,66,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.060505706816911697, 0.027998536825180054, 0.059438437223434448, 0.048368565738201141, 0.039949212223291397, 0.052355393767356873, 0.035726062953472137, 0.03120102733373642, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 73604, 57561, 62578, 43087, -690, 13301, 2641, 25856, 27973, 30703, 28201, 237, -46568, -127, 47040, 458, -204, 31764, 938, 1295, -14280, 6056, 47988, 39209, -15576, 27088, 36693, 23847, -2298, 15158, -6964, -51139, 12569, 122887, 32330, 1575, 52656, -480, 144766, -20865, 14689, -28048, 2364, 116443, -1041, 79796, 695, -22763, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.1903206591960043e-05, 6.9413930759765208e-05, 0.00014700357860419899, 0.00011584271123865619, 0.00015356503718066961, 0.00016019542817957699, 0.00013715395471081138, 6.4761370595078915e-05, 7.9202800407074392e-05, 2.9142323910491541e-05, 8.1987178418785334e-05, 2.8080874471925199e-05, 0.00018468753842171282, 0.005541567225009203, 5.6035325542325154e-05, 0.00023856086772866547, 0.0027484172023832798, 2.1655963791999966e-05, 9.7096715762745589e-05, 0.00017986682360060513, 0.00010322700836695731, 0.00015200205962173641, 0.00012098535808036104, 3.1145609682425857e-05, 7.5258263677824289e-05, 0.00010665364970918745, 3.7172299926169217e-05, 4.028284820378758e-05, 0.0003664579417090863, 5.9454352594912052e-05, 4.8083737056003883e-05, 0.00020775398297701031, 0.00019206223078072071, 7.6648502727039158e-06, 7.5309420935809612e-05, 0.00018944661132991314, 1.9111917936243117e-05, 0.00041305794729851186, 3.2464817195432261e-05, 7.8556608059443533e-05, 7.2507071308791637e-05, 0.00021635129814967513, 0.00010410429240437225, 7.7111244536354207e-06, 0.00014945790462661535, 7.479994383174926e-05, 0.00019538124615792185, 0.00012587888340931386, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-20,-7,-17,8,-38,-79,-69,-28,-50,9,65,33,-71,114,-43,-113,-86,37,-6,-2,-74,-111,-79,-35,-122,-62,-21,72,15,95,27,-127,-88,-7,54,19,48,-127,78,-78,-14,105,-109,-2,-35,-87,109, 77,11,-29,-28,57,-127,-127,-81,61,-76,-117,107,37,-82,-1,62,-52,-113,59,8,10,-112,-127,-69,-4,-127,-120,-41,-54,21,-56,53,30,-127,65,84,13,72,-92,127,-127,7,126,-127,2,-23,-127,96, -32,43,7,-5,-64,-108,-58,-17,88,-8,-127,37,8,-71,-102,-12,-127,-26,27,13,-16,-81,-35,-24,-11,-30,-57,-11,-10,18,-24,11,109,-86,71,32,14,36,-4,16,-79,3,8,-79,-17,4,-55,15, 
  /* [0][1][][] */ -87,-127,-44,-45,-9,56,99,-105,-27,-108,-20,112,90,-64,26,-97,-121,-92,89,-77,41,-90,-103,-127,41,-114,-79,-38,127,-60,127,85,-43,-84,-15,83,-35,-76,-109,90,42,59,106,-110,-92,-118,83,120, 127,-84,-127,-127,127,41,93,-127,102,-127,-112,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-120,-119,127,-97,-127,-127,-120,-127,-72,127,29,-109,127,127,-68,-127,-97,90,61,127,127,-117,-114,-127,126,127, -54,31,-61,-85,-118,-22,31,-38,127,-20,-76,36,56,-70,-26,-44,-37,-29,55,-71,56,-82,-38,-24,47,-7,-47,-61,14,-89,-35,21,31,-97,117,23,-36,-62,1,-15,37,53,10,-75,-58,-38,65,36, 
  /* [0][2][][] */ -62,-108,-35,-34,1,35,-5,-34,-38,-59,-16,58,77,-127,-127,-63,-43,-19,65,76,51,-38,-13,-60,33,-54,-11,-61,76,29,77,63,109,-26,-38,-9,-95,36,-18,30,9,38,15,-57,95,-78,4,31, 87,-75,-90,-83,82,19,6,-47,48,-71,-33,55,83,-26,16,93,-24,-32,76,118,82,-56,-19,-58,94,-66,-19,-102,-50,39,-45,110,-18,-49,68,6,-127,50,-15,0,11,33,15,-66,127,-100,-12,41, -29,29,-43,-37,-78,-19,22,-11,59,-4,-13,33,31,-43,112,-28,-93,-5,30,60,73,-30,-1,-2,43,1,-4,-66,-13,29,-20,40,-91,-43,65,4,-20,22,28,-39,7,36,-5,-15,62,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0034808861091732979, 0.0029500918462872505, 0.0062476522289216518, 0.0049233152531087399, 0.0065265139564871788, 0.0068083056248724461, 0.0058290427550673485, 0.0027523583266884089, 0.0033661189954727888, 0.0012385487789288163, 0.0034844549372792244, 0.0011934371432289481, 0.0078492201864719391, 0.23551659286022186, 0.0023815012536942959, 0.010138836689293385, 0.1168077290058136, 0.00092037842841818929, 0.0041266102343797684, 0.0076443399302661419, 0.0043871477246284485, 0.0064600873738527298, 0.005141877569258213, 0.0013236883096396923, 0.0031984762754291296, 0.0045327800326049328, 0.0015798227395862341, 0.0017120209522545338, 0.015574462711811066, 0.0025268099270761013, 0.0020435587503015995, 0.008829544298350811, 0.0081626446917653084, 0.00032575611840002239, 0.0032006504479795694, 0.0080514810979366302, 0.0008122564759105444, 0.017554963007569313, 0.0013797547435387969, 0.0033386556897312403, 0.0030815503560006618, 0.0091949300840497017, 0.0044244322925806046, 0.00032772278063930571, 0.0063519608229398727, 0.0031789974309504032, 0.0083037028089165688, 0.0053498521447181702, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4068, 145, 8637, 5196, 5449, 6084, 8523, -44, 32, -301, 2036, 364, 10803, -72659728, 2263, 21399, -58654704, -101, -459, 8774, 2886, -9, 21, 415, 3403, -831, 55, 599, 3240, 1510, 2251, 13548, 3461, 272, 207, -1583, 265, 2706, -145, 12226, 1835, 12438, -299, -79, 12983, 230, 7402, 3464, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00051576737314462662, 0.00040771876228973269, 0.00036398074007593095, 0.0003623873635660857, 0.00036492227809503675, 0.0003395428357180208, 0.00044636082020588219, 0.0017418758943676949, 0.0005067907040938735, 0.0025247940793633461, 0.00071873143315315247, 0.0022911641281098127, 0.00020443355606403202, 2.2320982839829639e-09, 0.0011680347379297018, 0.00015508667274843901, 2.2320982839829639e-09, 0.0071918340399861336, 0.00044200604315847158, 0.0004395496507640928, 0.00035529100568965077, 0.0051469909958541393, 0.00039047803147695959, 0.0015487988712266088, 0.0011183627648279071, 0.00069847551640123129, 0.0026713539846241474, 0.002137055154889822, 0.0003567930543795228, 0.0019509640987962484, 0.0013127302518114448, 0.00017350199050270021, 0.00022202701075002551, 0.011828304268419743, 0.000565040681976825, 0.00075200729770585895, 0.0057064322754740715, 0.00045860966201871634, 0.0027271071448922157, 0.0002853593323379755, 0.0015419035917147994, 0.00017871643649414182, 0.00053206458687782288, 0.010348571464419365, 0.00038651650538668036, 0.00050741748418658972, 0.00038027224945835769, 0.00025085813831537962, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 21,-127,51,-44,28,-16,-50,24, 
  /* [1][0][][] */ 78,73,-33,-126,26,-8,-109,127, 
  /* [2][0][][] */ 32,10,-44,127,49,123,48,94, 
  /* [3][0][][] */ 78,70,-83,127,-97,-6,-9,7, 
  /* [4][0][][] */ -35,-108,76,10,10,35,-46,-127, 
  /* [5][0][][] */ 29,9,-28,57,-2,-42,51,127, 
  /* [6][0][][] */ 59,-27,-127,-83,117,17,48,-39, 
  /* [7][0][][] */ 127,19,21,-26,30,-3,88,-59, 
  /* [8][0][][] */ 15,-93,5,97,9,20,-9,-127, 
  /* [9][0][][] */ 102,-127,10,-10,-10,18,-123,89, 
  /* [10][0][][] */ -121,-43,-127,22,4,8,-106,61, 
  /* [11][0][][] */ -23,-41,-4,-90,-127,-21,51,-19, 
  /* [12][0][][] */ 17,8,-33,75,-82,-22,61,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-28,-3,12,45,127,48,40, 
  /* [15][0][][] */ 46,-2,19,-127,71,32,-57,86, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 16,24,127,15,-34,-9,30,34, 
  /* [18][0][][] */ 88,-127,20,30,1,18,-122,4, 
  /* [19][0][][] */ -127,-17,30,74,-63,-46,-88,67, 
  /* [20][0][][] */ 35,29,-42,103,-15,-127,-6,61, 
  /* [21][0][][] */ 67,16,127,12,-10,-16,71,22, 
  /* [22][0][][] */ -80,-17,-127,2,9,10,-93,4, 
  /* [23][0][][] */ -108,127,-21,-22,18,-10,124,-86, 
  /* [24][0][][] */ 0,-62,-63,84,-8,-64,96,127, 
  /* [25][0][][] */ 17,37,40,35,127,120,-84,-53, 
  /* [26][0][][] */ -85,-30,-127,-3,12,9,-89,3, 
  /* [27][0][][] */ 2,-30,-35,7,-38,127,63,51, 
  /* [28][0][][] */ -4,-11,-14,38,25,127,44,46, 
  /* [29][0][][] */ 89,37,127,3,-20,-21,97,-19, 
  /* [30][0][][] */ -81,127,-28,-30,11,-3,96,-50, 
  /* [31][0][][] */ -47,-100,-22,2,33,-70,127,106, 
  /* [32][0][][] */ 1,4,-48,126,-14,97,86,127, 
  /* [33][0][][] */ 3,59,-6,-97,6,-1,-5,127, 
  /* [34][0][][] */ -25,82,-5,-101,31,-17,12,127, 
  /* [35][0][][] */ 127,14,-20,-48,17,42,111,-50, 
  /* [36][0][][] */ -127,-6,25,67,-46,15,-103,75, 
  /* [37][0][][] */ -3,-16,-4,27,25,127,59,48, 
  /* [38][0][][] */ 15,23,11,86,127,-4,-25,42, 
  /* [39][0][][] */ 4,31,42,-127,17,3,-39,125, 
  /* [40][0][][] */ 92,27,127,2,-7,-14,85,-6, 
  /* [41][0][][] */ -1,-30,-34,101,60,127,79,122, 
  /* [42][0][][] */ -80,-3,127,21,-36,9,-28,71, 
  /* [43][0][][] */ -15,-53,6,99,-13,2,12,-127, 
  /* [44][0][][] */ 36,-10,-78,-127,81,-20,-6,-123, 
  /* [45][0][][] */ -105,127,-7,-57,17,5,77,-69, 
  /* [46][0][][] */ -127,-24,40,30,-31,45,-93,54, 
  /* [47][0][][] */ 99,21,124,-2,31,-21,127,-24, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00090971810277551413, 0.00071914040017873049, 0.00064199464395642281, 0.00063918420346453786, 0.00064365530852228403, 0.00059889070689678192, 0.00078729784581810236, 0.0030723465606570244, 0.00089388497872278094, 0.0044532692991197109, 0.0012677091872319579, 0.0040411893278360367, 0.00036058292607776821, 3.937008052901092e-09, 0.0020601970609277487, 0.00027354416670277715, 3.937008052901092e-09, 0.012685063295066357, 0.00077961682109162211, 0.00077528419205918908, 0.0006266675191000104, 0.0090783387422561646, 0.0006887309136800468, 0.0027317944914102554, 0.0019725847523659468, 0.0012319814413785934, 0.0047117737121880054, 0.003769369563087821, 0.00062931689899414778, 0.0034411393571645021, 0.002315412973985076, 0.00030602538026869297, 0.00039161453605629504, 0.020862938836216927, 0.00099662714637815952, 0.0013264016015455127, 0.010065089911222458, 0.00080890249228104949, 0.0048101120628416538, 0.00050332100363448262, 0.0027196323499083519, 0.00031522268545813859, 0.00093846343224868178, 0.018252963200211525, 0.00068174354964867234, 0.00089499051682651043, 0.00067072984529659152, 0.0004424672806635499, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 309, -42802, -8292, -13703, -32082, -2527, -22931, -27979, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021917393896728754, 0.0022074047010391951, 0.0025368640199303627, 0.001102656708098948, 0.0010629594326019287, 0.0019892354030162096, 0.0015312961768358946, 0.00096440245397388935, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-19,4,0,124,-4,-3,-2,-2,-127,-89,-7,0,122,-6,0, 
  /* [1][0][][] */ 0,-31,2,84,71,14,22,8,-1,-6,127,-47,0,29,-15,0, 
  /* [2][0][][] */ 0,-2,-1,-9,-56,4,10,3,-1,4,-19,3,0,127,-8,0, 
  /* [3][0][][] */ 0,-14,-15,-127,86,24,72,16,-2,62,-2,45,0,-2,16,0, 
  /* [4][0][][] */ 0,50,-24,41,-56,31,127,4,1,-59,13,-4,0,-5,11,0, 
  /* [5][0][][] */ 0,-17,-12,0,-21,-22,-10,13,0,12,-5,-46,0,-3,127,0, 
  /* [6][0][][] */ 0,16,-6,-4,48,-19,-25,-10,2,-107,118,59,0,127,61,0, 
  /* [7][0][][] */ 0,12,-16,127,11,1,16,5,-1,76,-53,79,0,-5,49,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.09314892441034317, 0.09381469339132309, 0.10781671851873398, 0.046862911432981491, 0.04517577588558197, 0.084542505443096161, 0.065080083906650543, 0.040987104177474976, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 15337, 89237, 9598, 10258, 58461, 14858, 26935, -11088, 5464, 29009, 14126, -445, 25285, 11071, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00017147939070127904, 4.4936772610526532e-05, 0.00036863746936433017, 0.00016972975572571158, 5.6961496738949791e-05, 0.00034893339034169912, 0.00014510178880300373, 2.0492281691986136e-05, 0.00032894907053560019, 0.00020791610586456954, 0.00073174381395801902, 0.00072724185883998871, 0.00027096585836261511, 0.00018665957031771541, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,89,-2,-72,67,-95,76,-95,-27,4,-15,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-58,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,63,2,3,33,-26,33,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,67,2,-6,38,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,30,-2,-27,39,-34,20,-125,-13,-1,84,-58,0,-28,-111, 21,-7,18,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.007287873886525631, 0.0019098127959296107, 0.015667092055082321, 0.0072135147638618946, 0.0024208636023104191, 0.014829669147729874, 0.0061668260022997856, 0.00087092194007709622, 0.013980335555970669, 0.0088364342227578163, 0.031099112704396248, 0.030907778069376945, 0.011516048572957516, 0.0079330317676067352, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 8920, -51193, 9871, 155628, 17546, 32603, 6125, -154289, 14641, 13336, 160972, -1073741824, 22798, 17695, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00034867631620727479, 0.00035441020736470819, 6.7991451942361891e-05, 1.9477856767480262e-05, 0.00032381058554165065, 0.00012631027493625879, 0.00049293483607470989, 6.2372082538786344e-06, 0.00010768871288746595, 0.00023558370594400913, 3.5598746762843803e-05, 1.1533876076441629e-09, 0.00016774535470176488, 0.00012471851368900388, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 50,-3,32, -1,-21,17, -127,-122,-68, 
  /* [1][1][][] */ 7,-3,1, -16,6,-3, -1,-35,5, 
  /* [1][2][][] */ 0,20,2, -2,9,1, 39,-20,12, 
  /* [2][0][][] */ 27,-13,-9, 77,108,-2, 41,-46,5, 
  /* [2][1][][] */ 8,6,-3, 77,127,-31, 22,-12,-10, 
  /* [2][2][][] */ 61,-68,22, 82,-47,-22, 38,-59,16, 
  /* [3][0][][] */ 4,30,0, 36,97,24, 3,8,-2, 
  /* [3][1][][] */ 17,33,1, 69,127,28, -11,-16,6, 
  /* [3][2][][] */ 2,-1,2, 27,26,9, 1,-3,4, 
  /* [4][0][][] */ 38,75,-14, 12,83,-22, -17,9,-6, 
  /* [4][1][][] */ 44,104,55, 26,127,28, 32,56,-12, 
  /* [4][2][][] */ 58,82,39, 49,124,19, -18,26,28, 
  /* [5][0][][] */ 9,3,-119, -6,-1,-104, -6,30,-27, 
  /* [5][1][][] */ 3,-44,-127, -10,-52,-118, -5,10,-27, 
  /* [5][2][][] */ -2,11,-17, 2,-1,-12, 1,14,-11, 
  /* [6][0][][] */ 19,-65,30, 41,-88,36, 6,-22,9, 
  /* [6][1][][] */ 30,-97,56, 57,-127,67, 4,-29,17, 
  /* [6][2][][] */ 15,-38,9, 10,-45,23, -15,6,-1, 
  /* [7][0][][] */ -31,16,3, -115,-45,-1, -32,17,-4, 
  /* [7][1][][] */ -8,-5,5, -127,-94,-6, -7,-6,6, 
  /* [7][2][][] */ -16,39,-1, -8,17,6, -21,27,0, 
  /* [8][0][][] */ 125,126,116, 123,125,114, 120,119,110, 
  /* [8][1][][] */ 126,127,117, 124,125,114, 124,123,112, 
  /* [8][2][][] */ 124,127,117, 124,126,115, 124,123,111, 
  /* [9][0][][] */ -27,-10,4, -17,-12,-3, 2,0,-12, 
  /* [9][1][][] */ 95,111,-12, 77,127,16, -7,15,23, 
  /* [9][2][][] */ -28,-25,12, -1,-33,-6, 7,1,-29, 
  /* [10][0][][] */ -25,-84,-18, 33,94,20, -9,-13,-2, 
  /* [10][1][][] */ -60,-103,-14, 78,127,14, -18,-27,-1, 
  /* [10][2][][] */ -32,-20,2, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ 3,-9,12, 22,-27,14, 20,-82,-40, 
  /* [11][1][][] */ -29,-27,-8, -20,-47,-25, -2,-43,-39, 
  /* [11][2][][] */ 4,-25,-60, 118,127,70, -25,24,-31, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-18, -61,-111,-26, -9,-18,-6, 
  /* [13][1][][] */ 62,114,15, 58,127,24, 8,16,10, 
  /* [13][2][][] */ -8,-19,3, 2,-18,-2, 1,4,-4, 
  /* [14][0][][] */ 48,-4,-33, 79,-25,-47, 33,-8,-17, 
  /* [14][1][][] */ 91,-13,-68, 127,-37,-83, 59,-17,-34, 
  /* [14][2][][] */ 57,-6,-41, 74,-19,-50, 27,-5,-17, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.088912457227706909, 0.090374596416950226, 0.017337819561362267, 0.0049668531864881516, 0.082571692764759064, 0.032209116965532303, 0.12569837272167206, 0.0015904880128800869, 0.027460619807243347, 0.060073841363191605, 0.0090776802971959114, 2.9411381774480105e-07, 0.042775064706802368, 0.031803220510482788, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.56695294380187988, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.43999984860420227, } };
const TfArray<1, int> quant50_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.40273696184158325, } };
const TfArray<1, int> quant53_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53808611631393433, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.27888345718383789, } };
const TfArray<1, int> quant58_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.21595939993858337, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.33152961730957031, } };
const TfArray<1, int> quant62_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.2141534835100174, } };
const TfArray<1, int> quant65_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.34115102887153625, } };
const TfArray<1, int> quant66_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.038709864020347595, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11237531155347824, } };
const TfArray<1, int> quant69_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
