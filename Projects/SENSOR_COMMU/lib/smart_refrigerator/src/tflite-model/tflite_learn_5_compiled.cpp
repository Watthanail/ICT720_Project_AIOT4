/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 09.04.2024 11:48:54

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 416224;
#else
constexpr int kTensorArenaSize = 415200;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 17243, -28778, -32765, -27807, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00028558968915604055, 0.00020636753470171243, 0.00018827449821401387, 0.00021004915470257401, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 32,-16,-68,-35,127,-31,-9,-45,109,-15,60,80,-63,-26,17,-21,5,-56,-85,11,-8,63,-18,83,-13,-5,-12,1,65,-47,34,9, 
  /* [1][0][][] */ 57,74,-84,-12,-45,43,127,47,-48,-89,-94,28,95,-55,119,-119,125,-119,18,-55,11,-89,-98,-17,-20,-98,69,-63,-58,-108,-22,-32, 
  /* [2][0][][] */ -48,127,26,89,-41,-15,101,47,-98,-126,100,-68,-111,97,-114,84,57,86,98,-76,-29,0,-50,-35,23,-86,97,-118,-19,16,84,70, 
  /* [3][0][][] */ 86,-75,85,15,-39,113,45,-6,-6,-114,37,111,78,-12,-118,-20,116,-97,114,-16,-127,-4,-13,-28,92,-28,-99,93,-82,120,39,52, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.004263782873749733, 0.0030810157768428326, 0.0028108912520110607, 0.0031359815038740635, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 120, 85, -322, -267, 575, 24, 99, 39, 172, 731, -127, 34, 235, -451, -65, -239, 48, 49, -400, -209, 63, 771, 223, 137, 117, 1138, 284, 59, -253, -303, -384, -187, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.8063444410217926e-05, 4.2755775211844593e-05, 4.4408032408682629e-05, 4.4489795982372016e-05, 4.5296135795069858e-05, 4.4681502913590521e-05, 4.1427942051086575e-05, 4.3099749746033922e-05, 4.3699259549612179e-05, 5.0458515033824369e-05, 4.3942050979239866e-05, 3.9412167097907513e-05, 4.2845535062951967e-05, 4.3414434912847355e-05, 4.5314827730180696e-05, 4.1634091758169234e-05, 4.1039973439183086e-05, 4.438886753632687e-05, 4.2583578760968521e-05, 4.5780070649925619e-05, 4.4847944081993774e-05, 5.0098933570552617e-05, 4.9344871513312683e-05, 4.6935787395341322e-05, 4.1712308302521706e-05, 5.0101058150175959e-05, 4.2494917579460889e-05, 4.5780314394505695e-05, 4.1557599615771323e-05, 4.4395677832653746e-05, 4.1827133827609941e-05, 4.6952223783591762e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-42,95,-5,65,-5,-78,-90,45,-85,-97,-3,40,9,-30,41,-47,-25,-60,-38,-59,-92,5,99,-127,18,71,-42,100,14,-14,-67,79,-48,-83,61,-98,-67,-91,26,71,-76,-84,93,49,-92,100,-17,17,-46,-37,94,-65,-32,-78,103,16,53,106,-100,-64,74,-37,53,2,17,63,81,55,90,74,-103,91,-84,40,76,-85,13,-54,18,52,11,89,3,-50,-36,-77,99,30,109,-13,-111,16,66,35,23, 
  /* [1][0][][] */ -52,23,-80,5,-72,86,44,15,88,-102,-99,99,59,-33,33,67,99,-39,31,127,-58,-3,27,34,34,27,-47,97,-1,6,102,-59,55,113,2,15,42,70,-8,-63,-56,10,-31,-97,-28,42,-23,-53,-34,-99,115,68,2,92,-70,-58,32,80,52,80,-64,107,-65,-90,-54,42,77,40,104,21,0,3,-122,102,-58,38,86,-57,-40,59,-79,73,-66,-113,32,119,-79,-61,71,88,84,26,84,95,35,-9, 
  /* [2][0][][] */ 37,40,-61,77,-26,-55,76,73,-113,73,-54,111,81,-16,72,-127,-54,-32,45,68,-95,-22,102,14,-39,93,94,13,-58,99,65,79,-65,-32,-96,-99,-82,81,88,-32,-124,-90,4,-12,-98,104,-33,-83,93,53,74,-92,-38,53,22,21,-86,83,-54,2,-20,61,-19,82,95,33,40,82,-77,64,-5,-85,26,-75,35,25,-37,-29,-2,-9,37,-99,2,-50,-11,-108,-18,-35,94,104,-19,-7,-35,-75,-23,-57, 
  /* [3][0][][] */ 73,-12,31,-22,-81,56,-110,35,38,10,61,-1,78,91,70,-6,99,88,-56,21,108,-88,-68,-111,-36,-100,-83,100,46,-87,74,1,-63,-38,-11,-28,-93,-24,42,40,-26,-96,-100,-1,64,22,-45,-84,55,-72,29,3,89,26,89,-98,-122,-127,-112,-62,-101,35,-31,76,61,-35,-63,-42,-26,-70,-4,92,13,-105,53,-56,37,90,89,-75,-94,-124,36,77,22,39,-51,-116,-82,40,-6,-114,92,-93,-85,42, 
  /* [4][0][][] */ 45,127,32,56,11,-27,40,27,74,100,1,99,52,-17,0,-47,-4,6,-58,11,113,-71,102,36,4,-9,72,-9,-20,19,-53,-47,70,111,9,-70,-11,-4,-97,52,-43,-47,-46,-71,42,107,32,68,31,-55,-11,-76,-51,40,-79,21,59,-69,32,31,18,-42,-44,-67,-53,59,18,-28,20,-71,-37,-66,-41,24,110,89,53,3,7,-21,15,-7,-82,-17,12,76,99,2,-103,-66,77,45,37,91,-102,-7, 
  /* [5][0][][] */ 85,-88,75,61,21,-102,24,48,87,-111,-5,-68,6,94,34,24,61,61,-66,103,33,48,17,-26,-127,-53,-13,-87,51,44,19,-97,-33,-1,-75,15,-109,-36,34,18,-85,-51,39,94,-33,24,30,-52,-103,111,8,34,40,7,39,-14,96,32,-48,-44,33,-62,42,-56,-37,95,-27,20,77,3,95,-68,-45,73,-23,-70,17,-47,10,61,105,33,33,107,-78,77,-8,37,69,-93,109,79,-17,23,78,-73, 
  /* [6][0][][] */ 25,-51,119,83,-108,-53,4,73,-14,-77,13,-92,72,61,127,-122,48,9,-4,119,-74,-118,117,68,-69,-72,-2,-66,-26,-105,57,-68,-89,-115,-36,-113,-7,51,-110,87,98,65,29,-9,-108,117,-81,-43,-84,21,-30,-55,58,-45,109,-16,12,-20,-67,117,-92,2,79,-61,-43,76,108,-54,89,0,-114,1,61,-59,-87,-43,-72,-101,-54,-49,42,-35,51,-17,-67,-84,-43,-88,94,106,84,25,-49,-60,90,-22, 
  /* [7][0][][] */ 122,47,-48,-40,-103,127,-18,3,114,7,-94,-1,37,-89,50,70,51,17,0,124,55,35,-8,90,-79,111,42,31,-87,116,-16,43,21,29,76,79,-115,93,-8,-27,100,-75,85,72,54,1,109,-111,48,-68,-113,-59,-43,93,25,36,119,-108,6,-63,8,-21,86,-107,-62,-51,67,17,-104,21,50,85,85,31,56,45,-58,51,-100,21,93,-50,-19,-68,89,35,-117,98,84,11,63,69,-55,-37,6,-66, 
  /* [8][0][][] */ 9,54,-25,-84,94,15,-72,-17,17,38,45,112,19,-37,-82,-64,-62,95,-81,7,32,-20,88,110,-103,84,44,105,-63,8,-89,111,96,-32,40,16,127,0,-12,72,77,103,-103,-114,-9,-29,-27,111,27,-114,-57,-9,-46,-10,-37,-111,53,125,-99,111,112,58,34,96,-35,-46,-15,105,-90,56,55,1,75,68,15,41,-51,114,86,100,35,99,-112,-87,27,42,82,-44,35,-40,-60,99,-76,-100,-56,61, 
  /* [9][0][][] */ 23,23,118,55,112,-76,-23,-81,51,59,9,75,-4,-50,-73,-3,27,10,-66,-59,20,104,-72,-71,113,-11,4,52,13,-51,-67,86,61,5,34,-3,-40,19,-6,-20,50,-39,61,-64,78,25,-86,67,59,4,-58,-45,85,-67,-54,97,95,-27,10,21,-64,115,76,-69,-70,15,110,60,-27,99,127,-56,24,69,-74,-57,-68,-77,-13,111,39,43,100,28,-24,-60,47,-9,100,36,4,110,107,11,48,-23, 
  /* [10][0][][] */ -56,66,84,-57,-45,104,109,23,40,20,25,-68,88,77,-30,4,-40,76,-100,-53,-30,27,45,-65,34,61,-124,-111,-48,84,-109,-78,79,101,127,57,-52,12,-28,34,-32,105,-121,-43,-95,-61,1,-59,-11,10,26,18,59,28,-58,-41,-111,-35,18,-47,-12,69,110,33,118,-69,-97,-23,22,-29,-116,-81,64,70,-93,94,-6,52,66,1,78,-11,49,89,-100,57,87,-18,34,13,-7,-73,-46,-46,-35,-63, 
  /* [11][0][][] */ 119,4,-15,117,110,52,61,31,122,96,-83,123,-22,-93,31,-70,-60,-115,71,41,36,83,27,-118,-127,-103,-21,78,88,-10,26,-36,-92,-84,60,29,-68,79,-35,-60,-31,113,-98,5,-49,-71,-108,-97,86,116,113,55,-100,-105,19,26,-78,-32,-30,-93,-97,96,93,11,30,93,-60,45,76,44,-88,-77,45,105,-106,57,-71,38,-47,84,-117,-38,-75,-61,48,-87,15,-39,-101,-9,14,-124,-94,-34,-95,-58, 
  /* [12][0][][] */ 5,70,-50,-17,88,29,-31,38,-80,65,-11,15,-56,18,54,-82,-93,-25,-41,-66,36,-6,22,103,-92,-38,107,-98,100,37,-28,127,-78,-63,-61,16,2,-68,-27,47,123,46,-104,-33,-15,-75,-35,121,-39,-105,-84,117,42,-4,-72,98,-7,-63,61,66,70,119,13,69,110,39,-42,110,60,110,48,81,92,119,-7,-1,-21,40,-113,-103,-50,101,59,27,-30,39,57,125,-84,-101,91,55,105,-10,38,84, 
  /* [13][0][][] */ 116,-77,87,106,52,119,84,54,71,-112,15,-37,83,58,66,-48,-127,-75,-81,38,53,-33,102,-45,-59,53,-7,4,-96,-81,69,37,32,109,-3,19,-97,-20,29,69,-57,65,-67,0,-51,20,7,-38,22,97,-40,-92,-112,39,95,-94,-69,16,-27,-70,-45,99,-71,0,-44,-56,-98,87,-30,-27,76,-17,-105,45,-96,-57,-93,51,76,-85,47,-114,81,5,-89,-116,84,124,-19,-46,-89,40,121,-45,79,-9, 
  /* [14][0][][] */ -57,-89,83,64,96,-25,-17,-107,-79,-34,64,111,-21,-77,-87,-85,-49,-60,40,20,-45,30,-2,57,-112,-71,-33,45,-77,-113,-77,32,98,-24,-34,17,92,109,38,-107,-8,-108,33,85,62,-111,59,-81,109,61,70,46,127,-17,-17,11,-22,37,44,91,-19,-76,-29,66,-88,-15,73,-102,-85,-74,-44,87,42,77,48,-68,49,-102,50,30,40,9,-114,-40,-112,-87,-105,97,102,4,101,-53,80,97,-18,65, 
  /* [15][0][][] */ 30,-32,-34,100,80,-94,63,-100,66,-7,-72,7,107,1,-94,-114,88,6,-99,29,45,18,70,112,97,76,35,92,17,57,63,-105,-2,12,-43,-9,-75,119,123,-67,17,112,-53,-28,23,-83,-40,-84,-13,-86,-6,32,-106,-85,-55,-14,64,51,-54,118,-53,-75,-1,98,-23,103,-75,18,-55,3,55,-81,13,-8,49,-115,4,52,108,64,-86,55,-118,-69,-127,-42,-98,44,85,72,-121,-46,66,120,-97,116, 
  /* [16][0][][] */ -71,-4,110,-67,21,127,-54,42,46,54,-111,74,-31,-50,-50,-70,116,86,74,80,121,85,-39,59,-54,68,-65,65,-101,28,48,20,-107,85,65,56,-35,61,-56,-72,27,-45,78,98,70,112,111,-13,-60,-107,-2,124,-42,125,79,58,25,76,73,10,125,115,43,78,63,18,-37,91,52,108,-39,-7,32,105,69,91,-3,104,-112,-37,19,-95,68,20,16,107,102,16,87,19,-22,119,75,-29,-77,33, 
  /* [17][0][][] */ 52,-125,18,100,-47,-94,-52,-79,54,-86,96,43,93,56,-101,58,27,50,101,127,-99,-6,8,-40,36,84,-86,16,96,-50,-39,82,-36,-7,57,-8,-59,114,-68,-18,-79,-39,-15,-12,15,16,99,-99,77,96,-16,43,-28,93,102,-80,-123,93,-86,-97,18,-101,84,80,-67,-60,47,-87,-95,-3,91,21,6,-100,-77,51,123,-57,47,-76,13,-25,-85,-92,-106,68,78,-21,17,86,-105,-111,-2,103,30,22, 
  /* [18][0][][] */ -102,92,99,-75,-13,-116,-111,-3,-12,66,-115,-57,-44,26,52,-66,13,-32,48,-28,93,-54,13,-88,22,-104,-26,102,20,32,-8,37,36,-35,-109,-115,-41,27,-43,55,-49,-9,-58,-18,-123,7,18,-12,9,-33,64,24,-119,-15,-6,78,-52,27,-23,-126,76,101,5,27,-75,-127,-40,82,62,-85,-81,101,-106,-46,-97,-113,48,47,-10,-84,-65,-16,-37,-75,93,-43,62,62,-117,-84,-71,102,80,-61,42,-25, 
  /* [19][0][][] */ 14,49,75,33,95,-85,88,81,90,-57,25,3,-73,32,-56,60,69,-94,122,51,-18,74,-50,9,79,-78,27,-37,-82,-110,-60,42,76,-78,25,24,13,-68,-55,-95,39,-108,-70,7,-83,26,69,-89,-23,41,-26,39,-11,12,1,-11,26,115,12,-23,56,-25,91,59,-67,-4,-25,0,-7,65,101,-40,-50,-113,-48,-65,-22,-102,13,127,53,-90,-21,73,-82,-9,15,-5,83,25,16,64,-30,107,62,-17, 
  /* [20][0][][] */ 9,73,68,108,-59,92,22,68,32,19,-74,6,11,88,43,-53,-47,-34,-62,-34,25,-38,-68,-63,104,-74,-98,46,21,5,-36,124,95,51,-7,61,42,-22,-2,-96,-73,-26,-77,-92,-20,-56,-53,107,62,-119,-76,40,46,119,49,-2,114,92,93,92,112,-51,-62,-40,-17,-57,-44,24,-83,-66,-56,82,-56,-79,32,22,101,78,109,127,84,16,80,-17,60,117,-7,76,20,93,30,92,26,25,-9,5, 
  /* [21][0][][] */ 82,81,85,-80,110,-74,81,20,10,-37,-51,57,15,41,-26,-67,-73,-10,9,-13,96,-22,80,-57,89,-63,-13,89,23,-11,2,-23,6,22,-69,-82,118,89,-90,-17,2,15,33,-2,-68,-66,-72,94,-4,-56,-1,71,40,57,-76,29,-43,42,-38,127,47,-46,7,-6,64,35,-10,-44,-84,4,57,71,27,-1,69,78,-94,-4,71,90,23,100,32,-66,36,-73,69,-70,-83,74,118,-104,-28,-43,56,-17, 
  /* [22][0][][] */ 48,-22,-59,-77,109,-46,94,60,-73,95,-58,-80,127,-89,-101,-53,41,78,-54,-61,86,-63,39,28,115,-8,-105,110,-40,-57,-49,-87,60,61,8,39,25,-9,-37,-101,8,-3,6,96,51,-92,89,-15,-35,-35,20,-15,-35,-71,-48,26,-3,5,19,-9,104,-56,-62,-89,-46,24,-99,-34,98,95,6,6,-35,4,67,-67,39,-33,57,108,96,-65,-59,-93,76,83,110,-19,-47,33,-11,76,23,27,-19,89, 
  /* [23][0][][] */ 50,-68,10,53,113,-104,4,-78,55,-72,77,70,20,-97,17,-32,84,-31,-99,82,83,-72,100,-32,-12,-21,75,25,65,36,65,-43,-33,35,13,42,93,-13,-66,6,-100,-1,12,-100,-64,-88,96,28,75,-106,-72,-55,78,-64,-55,77,-51,-6,90,47,-106,-74,-55,-11,25,30,-104,-95,54,-11,117,-66,-4,-35,-23,-80,34,-14,88,127,-50,-39,15,-102,85,7,109,-27,-85,34,106,-6,91,-53,-39,77, 
  /* [24][0][][] */ -86,-48,-104,-83,-97,-110,-68,-97,59,117,87,37,101,67,-37,-127,-80,51,25,-40,100,-79,-54,-37,27,-13,82,62,115,72,11,-67,-11,17,44,31,-54,-83,47,-14,-71,-102,112,6,27,-33,48,76,-94,-42,-43,19,72,69,78,-67,-16,75,23,4,94,-4,46,112,-111,102,-45,-84,-88,62,-67,-29,-38,52,100,107,76,-76,-105,-93,-75,-99,-62,-109,7,69,-8,-98,32,-105,4,-102,-15,29,-84,44, 
  /* [25][0][][] */ -58,-24,-37,7,113,-55,-63,59,52,-68,-11,45,78,16,-71,7,-35,76,49,-88,72,100,21,-27,50,-28,-69,68,89,-76,50,100,102,-77,56,84,118,-35,-5,5,-54,101,-75,25,105,49,71,53,-63,107,-55,9,59,-3,-41,23,-11,75,-58,97,109,73,61,54,32,80,13,20,-55,5,7,-82,54,-74,92,47,74,96,37,36,59,68,-27,75,-45,-19,-61,-69,-5,-19,127,21,-84,9,-10,-59, 
  /* [26][0][][] */ 65,-122,-25,0,-125,2,3,5,-94,-109,121,86,-77,-46,26,-4,111,37,-86,-61,9,82,100,27,59,73,14,42,7,-3,-84,12,-34,-49,-83,-108,-69,100,-37,120,-87,117,62,41,-58,86,-29,116,-23,19,9,114,5,-36,8,-109,118,52,48,32,3,-99,69,-33,125,-6,-50,62,-86,79,81,104,80,-82,-90,5,42,-110,-88,7,-22,78,74,-65,92,13,-46,25,-88,127,5,29,-57,121,59,85, 
  /* [27][0][][] */ 16,22,-52,-100,-107,-59,-66,-19,35,92,33,-105,-22,62,77,-30,71,-5,64,-72,-76,13,-20,-23,-106,50,-86,10,74,48,-18,-15,63,64,-93,-66,-74,-62,-117,88,-86,17,33,21,93,30,63,98,89,82,52,-74,-71,-82,-2,-21,85,-11,-89,-69,-44,-47,-17,74,30,-44,-102,104,55,18,-100,11,74,-50,0,-72,53,-56,84,103,87,-20,127,-44,-64,-65,-19,28,-35,2,-23,-54,61,20,94,63, 
  /* [28][0][][] */ 75,1,87,38,-109,-71,-108,-87,-42,-115,52,80,-82,-103,-4,104,93,112,-75,70,-34,18,-114,-86,-122,75,-79,-64,-54,-81,-1,-26,-109,8,72,89,17,-123,-46,29,96,36,-95,45,-118,-19,4,40,21,-57,-80,-48,-78,12,46,35,81,-4,90,54,-14,-48,-111,19,51,67,-28,86,-85,42,-78,-51,78,33,-9,-104,-127,-68,-96,64,-82,-93,100,-38,55,-120,69,-94,-117,-82,-36,-66,-56,49,-117,-59, 
  /* [29][0][][] */ 42,54,57,-62,-92,16,-118,-9,83,-21,-104,-87,99,-100,-49,-63,-91,97,38,-44,-70,-36,49,3,-49,24,-41,-20,-87,17,90,-12,53,-10,-87,-50,-7,89,-21,88,36,88,-48,74,-12,93,-59,-29,16,13,44,-96,78,-105,115,55,-105,43,-41,102,-113,99,-77,-32,-57,-69,48,85,109,-79,23,-83,101,75,64,25,127,-63,-31,13,0,-86,7,-81,56,100,42,73,-26,91,74,68,-90,21,22,67, 
  /* [30][0][][] */ 23,-76,-72,32,-101,20,-74,-22,113,-24,-10,-44,-103,12,51,11,-13,28,95,-111,37,-112,-124,5,-121,16,-75,113,-15,-111,-104,0,-87,-81,-126,-63,8,-26,-10,22,82,-86,-21,92,98,-53,96,53,-79,77,17,-110,96,-61,-19,96,-83,-57,-85,-60,-109,-12,-80,-30,-117,-97,-106,91,-68,106,48,-41,-92,100,33,-96,-61,-82,-85,-67,23,25,-108,-24,-118,22,-112,107,-43,-127,77,55,-38,-9,6,-79, 
  /* [31][0][][] */ 75,-97,31,98,19,50,-53,-92,-25,-19,-72,-89,89,-123,-41,98,-60,-83,22,47,58,33,-33,98,35,-94,32,23,-66,-65,39,100,16,22,-76,-19,83,-25,-62,-102,57,-68,-31,26,7,-49,-33,21,62,27,81,-24,-120,-50,-69,25,-125,50,-15,99,-43,-18,75,-81,63,106,-42,-67,70,-123,-127,-1,-98,-33,-11,0,-51,-48,46,76,-68,-60,56,65,52,81,-89,18,18,-42,-77,-66,6,98,5,-29, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020426963455975056, 0.0018171204719692469, 0.0018873413791880012, 0.0018908162601292133, 0.0019250856712460518, 0.001898963819257915, 0.0017606874462217093, 0.0018317393260076642, 0.0018572184490039945, 0.0021444868762046099, 0.0018675371538847685, 0.0016750170616433024, 0.0018209351692348719, 0.001845113467425108, 0.0019258800894021988, 0.0017694488633424044, 0.0017441988456994295, 0.0018865268211811781, 0.0018098021391779184, 0.00194565299898386, 0.0019060375634580851, 0.0021292045712471008, 0.0020971570629626513, 0.0019947709515690804, 0.0017727731028571725, 0.0021292949095368385, 0.0018060340080410242, 0.0019456633599475026, 0.0017661979654803872, 0.0018868162296712399, 0.0017776531167328358, 0.001995469443500042, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1873, 4255, 10751, 2664, -2866, -3319, 18829, 2251, 2750, -1658, 10888, -249, -7908, 2170, 14710, 7011, 12500, 4953, -4605, -5888, 4542, 30866, 18950, 14893, 1316, 833, 3886, 3666, 2254, -4504, 6077, -3306, -267, 4628, 145, 1226, 10599, 4606, -1848, 4857, 9360, 5578, 5177, 11644, 4502, 6011, 2000, 7905, 4115, -5552, -7245, 731, -214, -1262, 2652, 23, 217, -930, -4239, 9963, -905, 1448, -1173, -2097, -3573, 8377, 26398, 2019, -2773, 842, 1518, 1952, 1854, -1386, 664, 13079, -490, 15747, 13768, -656, 9123, 1768, -360, 1368, 14214, 7682, 4104, 1418, 5867, 4057, -349, -8772, 755, -2031, -1792, -2384, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00034545126254670322, 0.00037812715163454413, 0.00022307275503408164, 0.00033372535835951567, 0.00035980259417556226, 0.00044275174150243402, 0.00017572288925293833, 0.00031586590921506286, 0.00021814188221469522, 0.00039909943006932735, 0.00018277679919265211, 0.00026304018683731556, 0.00032372432178817689, 0.001310382504016161, 0.00021003582514822483, 0.00016504846280440688, 0.0001496743643656373, 0.00029277853900566697, 0.00042250799015164375, 0.00028533962904475629, 0.0001418834290234372, 8.794119639787823e-05, 0.0001618539827177301, 0.00011311637354083359, 0.00018995531718246639, 0.00055549020180478692, 0.00076730444561690092, 0.00029431967413984239, 0.00023773380962666124, 0.00043548279791139066, 0.00023993280774448067, 0.00023405822867061943, 0.00022289880143944174, 0.0002471034531481564, 0.00029594666557386518, 0.00019792898092418909, 0.00018096200074069202, 0.00023197893460746855, 0.00034333817893639207, 0.00036764348624274135, 0.00013769188080914319, 0.00046564723015762866, 0.00029103437555022538, 0.00019912068091798574, 0.00042687184759415686, 0.00016843143384903669, 0.00025370522052980959, 0.00027664026129059494, 0.00032828652183525264, 0.00023359073384199291, 0.00022191664902493358, 0.0001589430175954476, 0.00059010222321376204, 0.00023195832909550518, 0.00029332051053643227, 0.00034744231379590929, 0.000618267513345927, 0.00028331822250038385, 0.00036293111043050885, 0.00018859603733289987, 0.00080045522190630436, 0.00045341919758357108, 0.00022697377426084131, 0.00037208705907687545, 0.00051996880210936069, 0.00022979400819167495, 8.2493374065961689e-05, 0.00020289835811126977, 0.00041733539546839893, 0.00040128847467713058, 0.00026466872077435255, 0.00026848382549360394, 0.00073325738776475191, 0.00029836280737072229, 0.00029002464725635946, 0.00016561926167923957, 0.00028379555442370474, 0.00011872879258589819, 0.00013223187124822289, 0.00021779164671897888, 0.00016166103887371719, 0.00019616280042100698, 0.0001929350255522877, 0.00018208257097285241, 0.00012780634278897196, 0.00031045216019265354, 0.00057521759299561381, 0.000205022151931189, 0.00012006449105683714, 0.00050045171519741416, 0.00027948647039011121, 0.00022277646348811686, 0.00030762088135816157, 0.00050942698726430535, 0.00034129063715226948, 0.00016708628390915692, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -26,76,13,-127,-34,-19,-19,-56,-14,3,13,75,29,-62,0,52, 
  /* [1][0][][] */ -24,20,-58,-3,-22,-40,26,-80,61,45,-64,7,10,6,34,-127, 
  /* [2][0][][] */ 15,9,-25,53,57,36,-69,-86,127,-53,-10,-4,-12,86,-88,46, 
  /* [3][0][][] */ 50,-60,21,-107,24,-18,-3,-3,100,-17,80,29,3,34,25,127, 
  /* [4][0][][] */ -77,27,1,27,0,-17,14,41,3,-2,33,-31,-127,-21,1,27, 
  /* [5][0][][] */ 17,65,114,-5,16,77,-92,64,-64,83,-18,-45,34,-57,-127,32, 
  /* [6][0][][] */ 23,-63,121,-127,45,-2,-31,101,-61,-80,65,-22,-5,84,-16,66, 
  /* [7][0][][] */ 45,127,-35,-44,98,14,-1,-63,121,102,-40,12,28,-30,51,47, 
  /* [8][0][][] */ 14,-98,22,-91,31,-49,23,-73,26,56,86,-13,24,127,88,71, 
  /* [9][0][][] */ 3,-30,-4,127,45,-12,40,-55,-59,109,25,-17,-3,-57,-11,-13, 
  /* [10][0][][] */ -19,17,-48,-127,6,-2,-8,46,36,-23,27,-14,-24,-31,3,18, 
  /* [11][0][][] */ 0,16,20,-25,80,-34,81,-58,-84,42,4,34,-7,127,-63,-27, 
  /* [12][0][][] */ 60,-8,-111,-1,32,-54,16,25,12,40,-74,-52,-39,127,-18,20, 
  /* [13][0][][] */ -14,8,-23,8,1,-127,-2,14,0,-16,9,-6,14,-20,14,15, 
  /* [14][0][][] */ 37,-16,90,-31,54,14,-127,-110,-29,-40,13,8,15,-70,-34,-25, 
  /* [15][0][][] */ -103,22,-37,-57,-3,5,127,61,-43,63,100,-18,0,97,69,6, 
  /* [16][0][][] */ 20,60,127,81,-1,27,83,57,-89,18,-52,-13,11,1,4,-64, 
  /* [17][0][][] */ -36,-109,-7,35,-68,-21,-60,8,-127,-37,11,-51,1,39,57,-37, 
  /* [18][0][][] */ 15,57,-1,81,40,5,26,-14,67,35,-42,-44,28,127,58,14, 
  /* [19][0][][] */ 32,-29,39,4,89,27,-84,-64,-101,-77,-26,-127,-24,-54,2,-22, 
  /* [20][0][][] */ 89,-46,-81,-31,-4,-127,1,17,-50,61,-91,3,6,13,7,4, 
  /* [21][0][][] */ 74,-25,63,-18,14,-7,-29,98,-15,-91,78,40,-8,127,32,85, 
  /* [22][0][][] */ -25,32,-19,127,-46,22,101,69,-17,20,0,25,8,-5,29,12, 
  /* [23][0][][] */ 81,3,96,-69,41,2,-20,29,2,-2,-10,-41,12,-35,-127,48, 
  /* [24][0][][] */ -127,49,11,-22,19,110,25,-29,-13,18,113,-21,-81,12,66,-31, 
  /* [25][0][][] */ 22,19,18,16,16,11,70,-48,-1,-127,-8,-19,-8,-33,15,21, 
  /* [26][0][][] */ -30,2,-6,10,-48,-15,-40,-31,-105,-31,-5,-34,10,127,-37,48, 
  /* [27][0][][] */ -9,25,8,59,36,-27,-16,-25,58,11,-20,4,1,127,-8,12, 
  /* [28][0][][] */ 14,80,61,58,127,5,22,39,-96,-18,-45,-30,13,87,51,-29, 
  /* [29][0][][] */ 6,-3,9,24,25,-8,1,35,-15,-20,-31,-127,8,-8,-31,-3, 
  /* [30][0][][] */ -13,81,-40,78,-36,-9,46,-127,-48,48,-21,-9,62,32,74,89, 
  /* [31][0][][] */ -54,-24,-24,-72,-11,-8,-53,-111,27,97,-20,-127,-48,-43,7,14, 
  /* [32][0][][] */ -127,-77,-9,52,48,29,-10,15,3,-35,-94,50,68,10,60,64, 
  /* [33][0][][] */ -15,-50,-32,-17,-81,-6,-78,4,71,10,27,-50,37,-123,127,39, 
  /* [34][0][][] */ 50,-7,61,20,50,15,-51,79,-81,-47,70,23,12,-2,-13,127, 
  /* [35][0][][] */ -49,51,-82,12,-13,-15,32,-125,98,110,-81,5,-1,-14,84,-127, 
  /* [36][0][][] */ -54,26,-5,109,29,25,127,52,6,61,-7,10,-31,28,-63,-60, 
  /* [37][0][][] */ 0,-16,25,-70,20,7,-28,-41,-62,-21,15,-15,6,-127,47,-21, 
  /* [38][0][][] */ 38,90,-3,-40,127,-5,31,-31,113,61,-19,1,14,-22,45,7, 
  /* [39][0][][] */ -23,71,0,-127,-13,8,-51,25,41,-85,-33,-29,20,72,43,39, 
  /* [40][0][][] */ 8,-23,9,-78,-5,-19,-17,-49,-127,7,-21,-37,-10,-110,77,-57, 
  /* [41][0][][] */ -13,-23,-34,-23,11,-27,21,-5,-25,10,-35,-12,-127,3,31,41, 
  /* [42][0][][] */ 127,94,-35,-18,-81,-41,-27,-58,-2,22,76,-53,-58,43,86,-101, 
  /* [43][0][][] */ 3,117,-60,19,59,0,103,-53,39,66,-62,-19,47,-127,-84,-41, 
  /* [44][0][][] */ -26,-4,-6,-33,51,-6,-94,-127,-10,-3,3,15,0,-27,62,-70, 
  /* [45][0][][] */ 5,58,-127,-35,41,-68,24,-101,-3,17,-2,-101,43,-38,49,-11, 
  /* [46][0][][] */ 11,4,-19,-77,-16,18,17,-35,-118,-28,5,9,-5,-127,65,-27, 
  /* [47][0][][] */ 16,53,19,-14,127,-20,-35,15,-52,47,-3,27,0,6,115,-34, 
  /* [48][0][][] */ -127,-72,-17,30,66,6,13,-12,3,-10,-102,45,60,15,80,44, 
  /* [49][0][][] */ 28,8,98,87,125,-10,45,19,-127,-77,-52,-93,29,124,32,-83, 
  /* [50][0][][] */ 19,-21,-94,5,39,-127,-59,-26,-12,-41,5,-35,35,-7,-3,3, 
  /* [51][0][][] */ 15,33,38,11,21,10,-10,15,-127,65,12,-111,7,-120,-24,97, 
  /* [52][0][][] */ 11,55,4,57,61,1,11,29,65,76,-31,-59,34,127,57,26, 
  /* [53][0][][] */ 2,-46,-10,-18,-80,-2,-84,-10,43,17,20,-62,25,-127,111,23, 
  /* [54][0][][] */ 83,-18,-32,6,127,107,-116,-46,-100,-27,-33,-103,19,-64,-7,-28, 
  /* [55][0][][] */ 56,-1,0,10,38,-39,-67,-127,-41,-71,-73,6,-1,-20,13,-16, 
  /* [56][0][][] */ -12,17,16,-22,-11,-24,-93,60,-13,127,-5,-20,26,2,-3,10, 
  /* [57][0][][] */ 1,17,-38,-28,-49,-44,126,89,-35,22,-3,-6,33,17,127,-2, 
  /* [58][0][][] */ 50,25,-127,27,84,101,-20,46,-106,-25,1,3,-33,20,-5,-15, 
  /* [59][0][][] */ -101,61,114,22,-74,-61,127,123,23,10,39,-17,6,6,68,1, 
  /* [60][0][][] */ 3,-7,-62,-6,7,-127,-20,-5,-11,-9,-4,-15,18,-15,5,9, 
  /* [61][0][][] */ 27,-5,28,127,76,18,22,0,-98,-8,9,33,-7,19,30,-46, 
  /* [62][0][][] */ -44,127,20,-54,-25,-1,-79,53,-27,-63,-74,-60,-15,-104,-60,-32, 
  /* [63][0][][] */ -34,32,-25,127,-76,7,-64,-34,-58,-30,-31,-40,31,65,42,34, 
  /* [64][0][][] */ 17,4,10,58,10,11,-24,59,31,2,-23,-48,-10,-127,42,-8, 
  /* [65][0][][] */ -10,-35,3,-124,40,-32,59,-48,-19,39,3,-127,-11,-6,17,-42, 
  /* [66][0][][] */ 46,-17,77,-22,21,15,-23,103,1,-88,38,26,5,127,2,89, 
  /* [67][0][][] */ 7,61,-25,-127,-18,-3,-64,29,81,-110,-40,-16,40,89,76,37, 
  /* [68][0][][] */ -26,44,127,26,10,1,-7,-9,-45,-24,-30,-42,25,-18,79,-43, 
  /* [69][0][][] */ 127,82,-20,1,-86,-27,-31,-45,-4,16,76,-62,-56,46,58,-82, 
  /* [70][0][][] */ 38,2,-47,-7,-28,27,53,127,-29,82,-25,12,13,63,-15,16, 
  /* [71][0][][] */ 3,-6,-11,5,1,-74,2,18,-36,24,-71,11,-127,-5,41,52, 
  /* [72][0][][] */ 17,23,-127,18,11,12,29,89,-51,-33,1,-17,28,17,-5,7, 
  /* [73][0][][] */ -38,25,41,10,45,-38,-82,-127,19,-74,28,-21,20,-41,34,-18, 
  /* [74][0][][] */ 8,39,36,127,16,-7,-80,73,-65,7,-56,31,29,-114,37,-96, 
  /* [75][0][][] */ -6,31,-43,24,25,2,7,-35,127,13,-12,-16,10,113,-53,14, 
  /* [76][0][][] */ -3,-16,0,13,3,-12,-8,67,18,-34,-16,-127,-7,-10,12,16, 
  /* [77][0][][] */ -19,14,-10,127,-45,13,70,100,21,39,-13,40,-27,-15,-22,-20, 
  /* [78][0][][] */ -9,-6,32,-115,43,-41,-20,54,33,-34,21,-25,19,127,32,33, 
  /* [79][0][][] */ 1,-87,-89,-65,-94,-23,23,-82,127,36,22,54,15,34,43,-62, 
  /* [80][0][][] */ -34,3,115,-79,19,-42,20,-109,-77,37,-64,-127,49,101,77,-71, 
  /* [81][0][][] */ -49,39,-127,22,67,-117,-17,56,-4,-38,66,1,20,0,11,0, 
  /* [82][0][][] */ 127,0,-7,19,13,-104,-27,9,-24,-11,-106,-11,97,1,-12,27, 
  /* [83][0][][] */ -35,82,-127,-77,-33,-28,39,-122,64,61,-55,-124,13,63,44,91, 
  /* [84][0][][] */ -47,35,50,-38,-2,-41,53,-127,-37,62,-9,-45,21,62,62,-9, 
  /* [85][0][][] */ -76,127,26,-119,-70,-24,-35,-13,-60,-6,-72,15,6,-16,-96,-22, 
  /* [86][0][][] */ -2,5,-27,4,-28,-35,127,28,4,-28,-5,5,11,35,84,-22, 
  /* [87][0][][] */ -15,-31,2,-106,7,-34,46,-14,-9,13,-19,-127,-7,6,5,-40, 
  /* [88][0][][] */ 127,-26,68,-16,42,-106,9,17,-70,23,-105,-74,52,20,72,21, 
  /* [89][0][][] */ 19,-31,-36,-62,33,-8,-19,-6,-44,4,46,-68,127,-16,35,-41, 
  /* [90][0][][] */ 2,-49,32,-50,58,2,-48,80,57,-88,-42,-29,-3,120,13,-127, 
  /* [91][0][][] */ -31,3,-28,-42,13,-17,-32,-85,-3,70,-20,-127,-28,-11,-10,18, 
  /* [92][0][][] */ -18,21,39,12,0,-127,12,-1,-2,-22,3,-18,1,-28,18,11, 
  /* [93][0][][] */ 38,-24,127,-20,-52,58,30,-30,-23,24,-62,-19,-25,-9,37,12, 
  /* [94][0][][] */ 36,9,-16,-24,23,0,-14,-8,-38,-16,14,-64,127,-23,23,-27, 
  /* [95][0][][] */ 127,90,-4,25,-110,-13,-61,-7,-25,-17,100,-45,-47,25,90,-75, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00091564754256978631, 0.0010022576898336411, 0.00059127301210537553, 0.00088456703815609217, 0.00095368688926100731, 0.0011735506122931838, 0.00046576824388466775, 0.00083722907584160566, 0.00057820335496217012, 0.0010578464716672897, 0.00048446521395817399, 0.00069721008185297251, 0.00085805845446884632, 0.0034732786007225513, 0.00055671756854280829, 0.00043747478048317134, 0.00039672444108873606, 0.00077603402314707637, 0.0011198928114026785, 0.00075631658546626568, 0.00037607390549965203, 0.00023309550306294113, 0.00042900754488073289, 0.00029982443084008992, 0.0005034924834035337, 0.0014723733766004443, 0.0020338047761470079, 0.0007801189785823226, 0.00063013337785378098, 0.0011542836437001824, 0.00063596200197935104, 0.00062039092881605029, 0.00059081194922327995, 0.00065496843308210373, 0.00078443146776407957, 0.00052462733583524823, 0.0004796549619641155, 0.00061487959465011954, 0.00091004662681370974, 0.00097446987638249993, 0.00036496386746875942, 0.0012342369882389903, 0.00077141099609434605, 0.00052778603276237845, 0.0011314596049487591, 0.00044644161243923008, 0.00067246693652123213, 0.0007332582026720047, 0.00087015092140063643, 0.0006191518041305244, 0.00058820866979658604, 0.00042129179928451777, 0.0015641154022887349, 0.00061482499586418271, 0.00077747058821842074, 0.00092092494014650583, 0.0016387698706239462, 0.00075095868669450283, 0.00096197932725772262, 0.00049988960381597281, 0.0021216736640781164, 0.0012018255656585097, 0.00060161302099004388, 0.0009862479055300355, 0.0013782208552584052, 0.00060908828163519502, 0.00021865559392608702, 0.00053779908921569586, 0.0011061824625357985, 0.001063648727722466, 0.00070152664557099342, 0.00071163888787850738, 0.0019435600843280554, 0.00079083559103310108, 0.00076873466605320573, 0.00043898774310946465, 0.00075222388841211796, 0.0003147006209474057, 0.0003504916385281831, 0.00057727500097826123, 0.00042849613237194717, 0.0005199459264986217, 0.00051139044808223844, 0.000482625124277547, 0.00033876142697408795, 0.00082287949044257402, 0.0015246624825522304, 0.0005434284103102982, 0.00031824098550714552, 0.0013264892622828484, 0.00074080232298001647, 0.00059048767434433103, 0.00081537495134398341, 0.0013502788497135043, 0.00090461940271779895, 0.00044287618948146701, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -5650, 27352, -18556, -3251, -8164, 8465, 21943, -58062, -10276, 16685, 23088, 8984, -6640, 9460, -3690, 8386, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00076066388282924891, 0.00033194912248291075, 0.00022924030781723559, 0.00021564812050200999, 0.00040166606777347624, 0.00036014910438098013, 0.00033251583226956427, 0.00031022235634736717, 0.00028538506012409925, 0.00023864733520895243, 0.00078229844802990556, 0.00058891618391498923, 0.00046050053788349032, 0.00023721353500150144, 0.00042513338848948479, 0.00047780657769180834, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -14,-12,6,-39,12,-1,-39,2,15,0,-11,-1,-7,-13,-30,15,-5,7,3,0,14,-36,9,-2,0,3,3,127,32,-38,37,-14,-6,12,2,-3,-18,8,-45,-5,-13,9,-3,39,10,19,13,-3,22,2,-11,0,12,-24,-16,85,7,2,-33,-33,-7,26,-5,-22,-39,-67,-17,40,4,4,17,-12,-17,-33,-4,-23,-24,13,0,2,-13,-25,17,21,-7,-16,-9,-99,-2,-16,-6,-8,45,-35,-40,-18, 
  /* [1][0][][] */ 52,-83,-77,-75,127,-5,74,49,-26,-103,-70,-27,5,-15,-77,66,-84,11,66,54,8,38,-7,-78,7,-28,-23,-87,36,-31,-83,38,-37,47,-2,-10,-5,-16,-14,31,-44,44,-52,-18,-41,116,-2,-7,22,-93,2,-65,-37,36,49,22,-60,-27,-47,-42,21,-22,-20,-42,-101,113,-20,-15,-14,-43,-36,25,47,-123,-32,-3,44,-73,45,3,0,-38,15,-2,-66,24,-37,22,24,-52,-9,5,20,18,27,104, 
  /* [2][0][][] */ -6,63,-105,-8,88,98,35,75,6,-111,2,-24,-14,-10,35,19,14,-11,-55,59,25,-2,71,24,61,17,-1,-38,43,-1,52,-46,31,53,-24,47,-127,-76,33,40,10,-52,13,-20,19,-44,6,67,-29,25,-21,-7,94,-13,-14,56,25,18,24,4,25,31,39,-35,27,0,-26,11,-48,-1,-9,-44,-58,-89,9,61,71,62,24,-9,30,-40,8,-13,-31,22,22,37,-16,14,-14,-30,2,-46,-57,6, 
  /* [3][0][][] */ 77,9,117,-6,43,-56,3,-13,-23,-66,21,-40,13,27,44,123,29,-10,39,-3,127,-1,54,26,51,-13,-29,30,31,33,-14,90,-88,12,26,-13,-20,-26,2,45,-77,-21,91,6,19,60,-40,-87,-70,-34,-45,35,-9,-125,5,31,-112,88,59,33,11,86,-19,-45,20,63,-5,-49,28,-14,-4,-60,55,-29,58,1,5,-5,59,54,-20,-89,11,-12,-52,34,12,62,17,32,42,49,31,122,36,-43, 
  /* [4][0][][] */ 28,-4,27,-9,127,39,-18,-18,-48,-41,-31,-32,-42,18,-13,51,30,-82,-30,81,-24,14,30,-25,2,-12,7,-40,8,-10,57,-28,79,8,-27,4,32,16,2,6,-32,-2,-23,-30,-2,-46,-19,-1,40,0,-23,8,-2,-39,11,-23,21,-21,-34,26,-2,53,54,26,32,37,-19,-2,-44,7,28,57,7,-74,-41,-18,24,39,76,-36,-5,-35,-6,-14,-65,14,34,53,-48,30,6,-39,1,15,26,-21, 
  /* [5][0][][] */ 2,-19,-17,7,32,-22,37,-29,-20,-43,-11,9,-5,22,3,18,-2,-1,17,-11,39,17,-37,73,19,-5,15,-94,-8,34,17,33,1,-3,9,-55,30,24,-2,6,-2,-3,32,-23,-9,5,14,-16,-15,-16,19,-16,4,-28,0,-41,-5,15,-21,17,69,8,11,38,1,59,-1,71,8,96,12,31,12,16,-8,73,-34,-4,24,16,-3,-6,-6,25,-22,20,-13,127,3,33,-10,-10,6,20,-54,10, 
  /* [6][0][][] */ 13,-82,14,-32,-18,-1,46,15,1,-2,-18,-59,-34,4,-27,24,10,-11,-5,-8,-32,43,12,18,-17,11,-11,-7,-13,15,44,-2,68,1,67,5,8,-11,31,-92,-12,85,7,-37,12,-22,-15,28,-3,37,-21,80,-6,-48,-5,-13,2,-59,1,5,-8,57,52,-73,38,-20,-3,-27,-1,13,127,8,-27,15,-32,26,-87,-3,28,7,39,47,30,6,-31,13,46,35,22,14,55,-29,-6,1,-23,-18, 
  /* [7][0][][] */ -6,127,36,22,116,42,54,-33,-20,-31,36,-17,-28,32,28,14,17,-32,-4,30,39,-36,28,18,-1,25,19,9,31,-10,14,12,47,-1,-33,22,33,16,6,78,-32,18,24,19,-8,-35,30,-14,-23,-23,33,21,19,-32,-38,38,52,9,-23,5,-5,-29,8,-14,-45,76,-32,-90,-4,-36,8,58,-7,-31,11,7,59,61,38,-12,-36,-33,5,-3,-4,65,2,9,-24,14,-26,-38,-40,-24,29,6, 
  /* [8][0][][] */ -12,1,47,30,-119,-43,53,-24,26,96,61,17,-12,19,27,-7,-53,12,3,0,-44,6,-127,78,27,-18,70,-13,10,20,9,66,89,-33,8,1,-11,-5,19,35,18,-39,46,3,-47,-12,36,18,-105,11,31,47,-51,-27,-27,37,8,-54,-81,-20,20,-29,-16,-9,6,89,-16,-64,24,-2,-40,-30,63,58,57,-14,-27,-29,-5,30,-87,14,-5,-3,29,37,78,54,41,-38,61,61,9,-3,55,24, 
  /* [9][0][][] */ 21,-102,-33,36,99,105,-39,-23,35,-21,88,90,-19,14,87,-127,16,-36,-10,22,-70,-55,25,-22,-9,18,4,16,-24,5,0,-19,7,22,-98,36,12,20,-15,80,22,-74,-10,72,7,-29,-93,-43,15,14,-24,-70,58,35,-19,-65,-11,100,-23,1,17,-45,-38,125,-106,-24,2,2,-11,25,-52,-94,42,-5,3,20,64,-67,12,-1,-6,-42,27,19,17,-60,35,-10,3,-54,-42,30,-69,-21,-5,-31, 
  /* [10][0][][] */ -49,-21,-39,-41,-16,-10,69,-21,30,20,21,33,24,-11,-4,-9,-9,18,-26,-13,-7,24,16,16,-9,-4,11,-127,26,-41,54,-32,-2,21,1,-4,-1,32,11,-1,7,-31,9,-42,6,-11,19,13,-7,29,-27,-4,-29,-26,-5,-51,16,10,-5,-38,22,19,7,11,-33,77,-12,-24,11,-26,7,-14,-25,-3,18,46,-12,40,-16,10,-26,-2,17,27,12,-14,-3,104,2,-9,3,9,18,-42,47,-27, 
  /* [11][0][][] */ -87,19,-4,8,28,-69,-19,-3,-52,1,-3,25,31,25,-21,-21,47,-5,-72,-50,16,0,-15,8,80,20,64,-1,-16,31,-31,23,-1,12,-3,-5,2,13,33,10,-15,-5,9,1,75,5,65,22,52,32,0,52,22,-51,28,-14,-71,-11,-27,-45,0,-7,6,17,-8,-20,22,0,25,20,0,24,-10,14,27,11,-24,89,-117,64,-32,-8,-53,-66,127,31,43,4,20,46,-16,-50,-21,44,-17,6, 
  /* [12][0][][] */ -1,-11,-28,-6,58,16,-5,-15,-21,11,25,-1,1,-19,23,8,-35,-8,21,-15,-4,-17,-27,42,-22,30,-22,97,-21,32,-34,7,-11,24,3,16,-28,-21,5,0,-6,-10,-7,-1,-18,10,23,18,-5,-4,-2,-42,-24,-1,-8,-3,-7,-17,18,17,-19,-31,-5,47,36,-76,6,47,-21,-127,-19,57,-9,7,12,77,9,-15,3,4,-8,23,-54,-3,-4,-16,-8,-53,-7,21,-8,2,-35,41,-19,11, 
  /* [13][0][][] */ -76,59,7,13,-56,3,-21,12,-48,-16,43,39,89,20,-24,-16,-16,23,-36,-9,9,-3,63,-61,60,53,-2,-4,11,-29,-31,-97,-89,-47,11,10,12,35,49,-21,-31,97,19,14,42,9,-28,1,69,-20,34,96,76,-60,84,-29,-31,62,51,-3,18,28,-19,26,-9,-31,-2,2,19,38,25,-127,34,-14,-80,17,50,50,-43,-44,99,-34,21,-28,44,-20,90,25,-9,-4,6,32,36,-28,-12,23, 
  /* [14][0][][] */ -27,10,-6,-56,36,-18,-7,30,-94,-1,14,23,-24,-66,-83,-20,-88,-17,75,15,32,-8,22,-93,-42,18,-57,-20,6,-25,-10,-25,-73,-26,20,8,-23,-7,3,-7,0,86,-84,-10,-56,32,4,11,127,-30,21,-12,25,49,-101,25,-16,22,-92,2,2,24,42,35,3,24,-10,-2,-52,16,51,41,35,-2,-28,13,51,-79,-19,-92,7,-34,4,43,23,-74,-49,2,-42,31,21,54,14,46,15,-23, 
  /* [15][0][][] */ -48,-77,-17,-36,9,13,2,-70,-18,15,1,-32,39,-8,55,-26,-89,1,-25,10,-13,10,-75,-39,-5,6,2,20,-15,-11,73,-92,-2,25,25,16,0,29,-92,3,37,-77,3,27,-31,-55,60,39,57,24,-4,-127,3,50,-5,36,36,-6,-17,47,11,4,57,-10,10,-4,-9,-12,-20,28,19,34,-33,2,-1,-33,-31,-2,1,14,-1,48,-1,78,-8,-37,-27,-29,-40,59,29,86,-33,-11,8,-7, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.03232821449637413, 0.014107837341725826, 0.00974271260201931, 0.0091650448739528656, 0.01707080751657486, 0.015306336805224419, 0.014131923206150532, 0.013184449635446072, 0.012128865346312523, 0.010142511688172817, 0.033247683197259903, 0.025028936564922333, 0.019571272656321526, 0.010081575252115726, 0.018068168312311172, 0.020306779071688652, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 19052, 64511, -1672, -802, 13689, -4596, -270, -1165, 5428, 12245, -4761, -167, 783, 5437, 4972, -9129, -4276, -669, -872, 15240, -11758, 16986, -3090, 8760, 23896, -242, -6553, 18358, 16292, -18596, 1615, 21955, 23564, -10748, 2673, 585, -104, -815, 6152, -7569, -5164, -26, -7662, 37, 30653, -1269, 13150, -1924, -14191, 1206, -4, -338, -2098, 23261, -3156, 15077, 22675, -45, 35799, 320, -9410, -737, 870, -480, -1520, 13826, -854, -5902, -3010, 3152, 216, -4176, 212, 337, -1934, -5865, -595, -2246, 37422, -7601, -5110, -10858, -483, -43, 55276, -11872, -10072, -27650, -6267, 10805, -2881, 34193, -521, -2705, -2057, 489, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012528538354672492, 8.8618042354937643e-05, 0.00011670372623484582, 0.0002217896981164813, 0.0002532544604036957, 0.00016737525584176183, 6.1007031035842374e-05, 9.4090566562954336e-05, 0.00027843244606629014, 0.00019598084327299148, 0.0002330817369511351, 0.00013253377983346581, 0.00028324846061877906, 0.00022671913029626012, 0.00042344219400547445, 0.00016492734721396118, 0.00020139916159678251, 0.00018597197777125984, 0.00021644421212840825, 7.6688549597747624e-05, 6.4501109591219574e-05, 4.0554841689299792e-05, 0.00015257376071531326, 8.3398437709547579e-05, 8.1805199442896992e-05, 0.00012917944695800543, 0.00017314075375907123, 0.00016616682114545256, 7.9384786658920348e-05, 0.00049534137360751629, 0.00040724439895711839, 0.00024925544857978821, 0.00012297448120079935, 0.00013958441559225321, 0.00025393409305252135, 0.00044863356743007898, 0.00038837161264382303, 0.00020555881201289594, 0.00025777725386433303, 0.00010618385567795485, 0.00025031575933098793, 0.00026819983031600714, 0.00034682141267694533, 8.2623118942137808e-05, 0.00037422662717290223, 9.8654629255179316e-05, 0.00011880760575877503, 0.00033548451028764248, 0.0007468222756870091, 0.00013524778478313237, 0.00038653929368592799, 0.00019469844119157642, 0.00024396801018156111, 0.00011845946573885158, 0.00026080771931447089, 0.00011544497101567686, 0.00012087093637092039, 0.00050297682173550129, 4.1194769437424839e-05, 0.00017048577137757093, 0.00028873886913061142, 0.00032761439797468483, 0.00010720241698436439, 0.00017627474153414369, 0.00015369146422017366, 0.00012955084093846381, 0.00026744877686724067, 0.00037020278978161514, 0.00021167618979234248, 0.00011754209117498249, 0.00020251644309610128, 0.00010788024519570172, 0.0002526389725971967, 0.00014169217320159078, 0.00038315568235702813, 0.00032801920315250754, 0.00014217960415408015, 9.5178678748197854e-05, 6.87306237523444e-05, 0.00016762047016527504, 0.00021110834495630115, 0.00025431354879401624, 0.00015699901268817484, 0.00028303949511609972, 6.4116495195776224e-05, 0.00012963786139152944, 8.4530816820915788e-05, 0.00053767336066812277, 0.00028198788641020656, 0.00013996860070619732, 0.00031815690454095602, 3.0605064239352942e-05, 0.00018752507457975298, 0.000107484360341914, 0.00037285615690052509, 0.00029406714020296931, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-71,-11,127,22,70,79,-59,-14,-18,-15,-4,-30,1,37,0,-9,-43,28,20,18,-127,127,7,-81,8,50,-28,-125,-127,39,24,12,26,61,-18,-31,-9,30,-6,-13,27,-106,71,24,-66,37,48,-17,52,-24,19,4,-5,17,49,-90,-49,-62,-19,-11,-1,10,37,67,-26,73,13,-8,18,19,127,24,23,26,-1,-11,19,127,-6,-16,14,-27,21,126,19,-80,-17,1,-32,-16,-38,3,-26,-16,27, 127,-127,75,105,-43,127,41,-118,69,4,-18,127,127,-97,-12,15,10,127,127,-113,127,-76,82,69,-127,-112,-64,-34,-56,45,-59,-20,-89,55,-127,-85,-43,-14,-56,62,-1,127,127,83,-52,-112,-111,-49,-15,-127,42,84,67,-30,45,85,-47,42,-81,-114,-45,-41,-62,67,71,-62,26,28,-79,34,-18,89,119,127,13,18,1,61,-33,51,64,127,127,-22,-10,75,-116,127,-119,-101,4,-127,-88,-127,-37,106, -75,-12,29,-81,15,-25,68,-7,80,-34,-27,18,-19,-3,-8,-12,-8,-16,8,-5,-24,-102,30,1,-125,97,8,-55,111,49,-15,10,1,12,14,-29,-9,34,18,13,24,11,-119,64,17,-18,36,15,-13,10,-17,5,-9,2,-2,22,-65,7,-35,52,3,41,34,0,-7,-39,-32,24,10,4,-4,34,11,-26,-6,4,-12,-4,-85,2,-23,-25,-18,3,-114,11,-37,-22,-48,23,-25,-30,30,-25,-14,1, 
  /* [0][1][][] */ -65,-74,75,-35,-48,93,19,127,-50,-21,0,-118,25,-115,78,31,-2,-60,-16,87,54,-71,48,49,-98,-10,127,-21,-24,63,122,-102,-127,91,-87,-56,-37,32,-31,92,-48,-27,-4,47,-48,127,-24,66,16,96,20,-1,15,-54,27,31,127,121,-72,-86,127,-33,-35,127,70,-38,-16,1,127,40,127,96,-40,101,-6,12,15,13,-31,10,-45,124,-79,111,3,33,-58,30,78,-127,-32,-8,127,-69,-23,1, 66,125,58,-113,127,83,91,38,-127,127,127,-38,-64,-127,-127,127,127,-63,-122,-52,103,91,-122,127,-107,-87,-41,127,-127,108,-127,-127,-87,127,106,127,127,-127,-110,127,-64,-97,109,-127,-127,-36,-127,-127,127,-111,84,43,127,127,127,-127,101,-127,-127,127,19,-79,-127,-101,-127,127,-127,127,-124,-127,-107,-84,-127,-79,127,127,-127,127,-78,127,127,30,-41,-127,62,127,93,47,127,12,127,-1,-66,36,127,-127, -54,-13,-49,37,-56,-93,36,-26,19,-34,-28,92,1,96,14,11,-3,64,-6,125,2,-84,-41,7,-78,105,-69,-20,-70,-17,16,-61,-69,36,5,-17,-29,45,-71,40,127,-5,-40,30,-40,-58,15,46,9,118,-11,7,-38,-71,3,19,95,2,0,22,-35,127,94,-53,-43,12,36,-8,-76,124,-19,-89,0,-54,-16,-21,27,15,75,-36,-72,-44,57,13,-48,-15,71,24,16,61,-43,20,-41,98,-27,-4, 
  /* [0][2][][] */ -68,2,-3,-21,13,-42,66,24,56,-29,-36,-2,18,19,-27,4,-7,66,6,0,-52,-81,1,-8,-31,-50,34,-68,84,38,25,26,18,-8,-12,-46,-7,36,-6,0,-16,-8,-66,103,3,32,11,37,-15,-31,11,-20,23,0,8,14,-70,24,-17,13,15,-1,-20,-5,-1,-46,-46,18,-31,14,26,30,14,-20,27,5,17,5,-77,-12,-10,-9,17,15,-127,5,11,-43,-57,-50,-27,-47,11,58,-19,-8, 120,34,-127,-35,-72,-22,39,30,-65,-29,-20,-108,-77,114,-13,42,2,-50,-8,-127,95,-52,-39,0,-116,127,-49,21,-38,-21,-9,-5,-61,20,26,6,-23,-27,127,53,11,-15,69,-34,-37,74,-66,-43,-33,-6,-127,-127,-51,-25,1,40,-65,-7,12,38,-7,-19,9,-48,-54,34,63,-20,114,110,-24,-70,12,-58,3,4,100,5,51,23,11,-99,-49,3,3,7,127,41,-59,39,-19,-108,42,81,-10,27, -55,14,-17,25,16,-64,-127,2,-11,-9,-16,4,14,-25,19,2,-7,-16,4,16,-47,-70,13,1,12,-92,20,3,-49,-39,-7,16,43,-20,-7,-24,-36,4,40,-40,22,-3,-50,-34,2,66,22,16,-9,-6,11,-8,16,6,-5,-6,-62,-12,2,-38,-11,9,86,-11,34,-1,-2,32,1,5,-5,18,-17,15,-1,15,36,2,75,-11,2,-10,-6,-18,76,0,40,-38,62,38,-17,-53,-6,4,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0053246286697685719, 0.0037662666290998459, 0.0049599083140492439, 0.0094260619953274727, 0.010763314552605152, 0.0071134483441710472, 0.002592798788100481, 0.0039988490752875805, 0.011833379045128822, 0.0083291856572031975, 0.0099059734493494034, 0.0056326854974031448, 0.012038059532642365, 0.0096355630084872246, 0.017996292561292648, 0.0070094121620059013, 0.0085594644770026207, 0.0079038087278604507, 0.0091988788917660713, 0.0032592632342129946, 0.0027412970084697008, 0.0017235807608813047, 0.006484384648501873, 0.0035444335080683231, 0.0034767207689583302, 0.0054901260882616043, 0.0073584821075201035, 0.007062089629471302, 0.0033738533966243267, 0.021052008494734764, 0.017307886853814125, 0.010593356564640999, 0.0052264155820012093, 0.0059323376044631004, 0.010792198590934277, 0.019066926091909409, 0.016505792737007141, 0.0087362490594387054, 0.010955533012747765, 0.0045128138735890388, 0.010638419538736343, 0.011398492380976677, 0.014739910140633583, 0.0035114826168864965, 0.015904631465673447, 0.0041928216814994812, 0.0050493231974542141, 0.01425809133797884, 0.031739946454763412, 0.0057480307295918465, 0.016427919268608093, 0.0082746837288141251, 0.010368640534579754, 0.005034527275711298, 0.011084327474236488, 0.0049064112827181816, 0.0051370146684348583, 0.021376514807343483, 0.0017507777083665133, 0.0072456453926861286, 0.012271401472389698, 0.013923611491918564, 0.0045561026781797409, 0.007491676602512598, 0.0065318872220814228, 0.0055059106089174747, 0.011366572231054306, 0.015733618289232254, 0.008996238000690937, 0.0049955388531088829, 0.0086069488897919655, 0.0045849103480577469, 0.010737155564129353, 0.0060219173319637775, 0.016284115612506866, 0.013940815813839436, 0.0060426332056522369, 0.0040450938977301121, 0.0029210513457655907, 0.0071238698437809944, 0.0089721046388149261, 0.010808325372636318, 0.006672457791864872, 0.012029178440570831, 0.0027249511331319809, 0.0055096088908612728, 0.003592559602111578, 0.022851116955280304, 0.011984485201537609, 0.005948665551841259, 0.013521667569875717, 0.0013007152592763305, 0.0079698152840137482, 0.0045680850744247437, 0.015846386551856995, 0.012497853487730026, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1928, 8674, 12699, 29176, 15853, -3452, -1763, 4335, 30270, -4105, 8381, 3968, 8154, 10466, 31574, 1018, 2198, 8874, 14677, 6346, -239, 368, 11486, -932, 5961, -21, 11687, 5753, 6616, 40574, 51551, 17561, 7082, -654, 10606, 2288, 1644, 3579, 15235, -800, 11019, 9040, 42595, -2823, 28776, 8109, 6728, 12676, 47888, 9403, -440, 6879, -2539, -181, -2512, 6295, -485, 13878, 5651, 10258, 5030, 16977, 6686, 5903, 10462, 8270, 4669, -4827, 5962, -2426, 5070, 10539, 21307, 4305, -4457, -4032, 5996, 249, 2372, -1015, 12578, 11653, 4771, 20253, 2780, 205, 15651, 42064, 6816, 12072, 5808, -184, 7128, 7818, 4709, 12408, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023544856230728328, 0.00017164215387310833, 0.00014965301670599729, 7.8109776950441301e-05, 0.00018824920698534697, 0.00030337454518303275, 0.00047024217201396823, 0.00037431239616125822, 7.679867121623829e-05, 0.00033420507679693401, 0.00032027778797782958, 0.00021997587464284152, 0.00015586437075398862, 0.00022261834237724543, 7.4988878623116761e-05, 0.00050747051136568189, 0.00021006996394135058, 0.00013971966109238565, 0.00015023999731056392, 0.00019023983622901142, 0.0002784597163554281, 0.00065376778366044164, 0.00017462710093241185, 0.000689517124556005, 0.00043595631723292172, 0.00022951027494855225, 0.00018986762734130025, 0.00024256517644971609, 0.00025109719717875123, 8.7080530647654086e-05, 5.4928110330365598e-05, 0.00014243372424971312, 0.00023394954041577876, 0.00034726131707429886, 0.00018945139891002327, 0.00025535229360684752, 0.00031624146504327655, 0.00040826163603924215, 0.00017752626445144415, 0.00070211366983130574, 0.00016881639021448791, 0.00017509749159216881, 6.3808809500187635e-05, 0.00037270129541866481, 0.00011340995843056589, 0.00018887134501710534, 0.00025770318461582065, 0.0002135997056029737, 8.5483865404967219e-05, 0.00022332485241349787, 0.00026996701490134001, 0.00024349222076125443, 0.00041729366057552397, 0.00029323858325369656, 0.00040495130815543234, 0.00017723783093970269, 0.00022100615024100989, 0.00013494069571606815, 0.00036093307426199317, 0.0001448977563995868, 0.00031917649903334677, 8.4225081081967801e-05, 0.00021379989630077034, 0.00016980504733510315, 0.00023723991762381047, 0.00023475846683140844, 0.00027941082953475416, 0.00027337032952345908, 0.00028378755087032914, 0.00029174389783293009, 0.00021999297314323485, 0.00014932271733414382, 9.8813346994575113e-05, 0.00023660081205889583, 0.00034705933649092913, 0.00032956583891063929, 0.00027528044302016497, 0.00030561702442355454, 0.00031949757249094546, 0.00037819021963514388, 0.00016447945381514728, 0.00014367140829563141, 0.00018268614076077938, 9.4746523245703429e-05, 0.00042342132655903697, 0.00029974625795148313, 0.00015052927483338863, 9.032533853314817e-05, 0.000201831353479065, 0.00018850128981284797, 0.00022154302860144526, 0.00038036593468859792, 0.00020573148503899574, 0.00020449163275770843, 0.00023890018928796053, 0.00014142239524517208, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 19,91,-39,65,49,13,-6,-33,5,37,-61,90,21,-127,67,-103, 
  /* [1][0][][] */ 18,65,-18,-27,20,-21,127,-119,-10,85,-19,-16,-5,-61,39,22, 
  /* [2][0][][] */ -117,9,-50,-22,-2,-5,67,105,-27,65,127,-26,-52,4,27,-62, 
  /* [3][0][][] */ -65,48,62,89,-52,38,99,127,42,99,-126,23,63,-55,-95,-85, 
  /* [4][0][][] */ 1,-6,45,80,-12,67,4,52,13,-11,0,5,12,5,-127,-25, 
  /* [5][0][][] */ -19,-4,53,-11,18,-13,-19,15,-82,104,-25,-127,-9,23,-71,-25, 
  /* [6][0][][] */ 16,-12,30,-15,44,59,-67,-69,-1,-1,62,-15,127,-21,-8,-43, 
  /* [7][0][][] */ 28,2,127,-5,-15,-34,3,-5,-67,19,-89,-51,23,3,23,-18, 
  /* [8][0][][] */ 8,21,93,75,-61,94,21,76,59,-10,-8,-81,-53,16,-127,-103, 
  /* [9][0][][] */ 42,-119,46,65,1,-16,-5,27,124,-10,53,-5,-16,11,-127,-36, 
  /* [10][0][][] */ -56,-127,20,-7,-93,-5,-46,47,100,126,64,-47,-54,78,60,-27, 
  /* [11][0][][] */ 50,-34,12,-88,14,-4,-99,-127,-46,28,-19,-47,47,-34,25,-52, 
  /* [12][0][][] */ -4,-8,20,-62,-42,-23,-87,-7,-57,-92,-18,-5,25,127,85,61, 
  /* [13][0][][] */ -44,-122,-70,44,2,-54,12,-36,48,21,-9,-21,10,13,127,40, 
  /* [14][0][][] */ 13,-72,65,45,25,46,24,127,18,50,19,-49,17,45,-60,126, 
  /* [15][0][][] */ 31,-24,-7,56,5,-14,99,-10,8,-127,-2,-46,13,-17,-11,-32, 
  /* [16][0][][] */ 46,-75,-57,25,7,-8,39,-64,127,67,95,10,8,110,71,125, 
  /* [17][0][][] */ -58,-82,49,127,112,45,9,-40,126,-45,10,-44,11,53,-99,31, 
  /* [18][0][][] */ -23,34,-9,30,-99,-13,-26,34,-84,-16,-13,-36,-9,-127,75,-3, 
  /* [19][0][][] */ 51,-53,38,-95,66,21,-124,96,68,-87,51,30,-40,85,11,127, 
  /* [20][0][][] */ 47,-31,69,-66,0,15,-26,52,-12,-45,103,-14,17,10,-35,127, 
  /* [21][0][][] */ -54,-18,-3,-32,5,25,-79,-48,-26,51,-3,-2,-127,-17,26,-2, 
  /* [22][0][][] */ 15,-12,19,-28,7,-55,0,-15,-127,21,-15,-35,-23,-15,64,-15, 
  /* [23][0][][] */ 16,2,15,-18,3,12,-7,7,-7,-4,54,-15,127,-13,8,-35, 
  /* [24][0][][] */ -19,-8,21,-88,-26,-21,71,7,-42,16,5,-127,3,-118,60,9, 
  /* [25][0][][] */ -127,-18,-28,5,63,-26,-93,-121,-19,39,-53,-31,-68,-70,16,-52, 
  /* [26][0][][] */ 48,-4,62,-110,127,-15,12,11,114,-42,55,-34,4,95,22,82, 
  /* [27][0][][] */ 102,-38,24,-36,-28,-54,7,-22,-27,34,-127,12,20,-18,12,41, 
  /* [28][0][][] */ -127,-28,-127,-95,86,-30,57,-59,-1,44,-89,23,52,4,-56,41, 
  /* [29][0][][] */ -68,-22,-20,127,-4,4,6,-58,-10,8,-90,39,14,-74,24,-46, 
  /* [30][0][][] */ 81,5,127,-28,54,50,-8,91,-42,-82,84,-51,-23,13,-60,80, 
  /* [31][0][][] */ 4,-90,-6,-51,-3,-63,26,-33,-12,53,120,32,-23,98,82,127, 
  /* [32][0][][] */ -8,71,-24,39,-127,31,-71,-36,-58,-37,3,45,11,49,29,70, 
  /* [33][0][][] */ 29,-9,25,127,22,7,7,-62,-116,46,52,-41,-6,-10,-8,121, 
  /* [34][0][][] */ 23,-17,21,-11,80,-37,-127,-18,-41,91,-46,9,-33,16,-7,-1, 
  /* [35][0][][] */ 72,12,-15,11,21,-127,-24,-17,-26,1,-82,-1,91,22,2,13, 
  /* [36][0][][] */ 23,-10,-127,-6,36,15,-23,31,-39,-31,16,-25,7,6,-6,21, 
  /* [37][0][][] */ 4,5,127,-23,-72,22,48,-64,-21,47,-51,21,13,-21,38,0, 
  /* [38][0][][] */ -127,29,-8,14,36,66,18,-19,13,-2,103,-5,-35,7,-2,-22, 
  /* [39][0][][] */ -16,-1,10,32,31,-8,-127,31,9,33,1,-38,-5,-25,0,-3, 
  /* [40][0][][] */ -17,60,-32,127,26,40,25,3,-69,-38,-22,59,25,40,-63,-19, 
  /* [41][0][][] */ 9,24,-53,-31,-58,-23,127,86,-61,93,-25,8,-4,59,49,-6, 
  /* [42][0][][] */ 44,-64,-32,-36,23,45,-67,62,55,-105,127,19,-23,12,-47,53, 
  /* [43][0][][] */ -65,21,32,-40,24,32,-79,-52,-27,29,-19,-22,-127,-3,14,2, 
  /* [44][0][][] */ 16,15,-17,-11,7,-20,-8,-58,127,-5,24,40,29,79,-5,54, 
  /* [45][0][][] */ -49,-108,5,-72,43,-11,-24,48,35,-84,-38,-37,51,127,-57,96, 
  /* [46][0][][] */ -51,19,-29,101,-79,-13,12,-82,-127,52,-46,-1,-6,28,-4,-37, 
  /* [47][0][][] */ -17,-16,-93,127,16,63,7,-43,19,53,64,68,-23,-26,39,-20, 
  /* [48][0][][] */ -13,-3,33,-127,22,-19,-4,8,-44,7,35,-16,-7,39,81,54, 
  /* [49][0][][] */ -26,33,38,127,21,27,-42,-20,21,-42,-79,-27,-38,-47,-56,-96, 
  /* [50][0][][] */ -7,57,31,-103,71,10,-22,46,127,-24,-23,6,-2,-42,5,-26, 
  /* [51][0][][] */ 5,-26,14,-20,34,-1,-50,-127,-1,-67,9,-8,-10,-24,-7,1, 
  /* [52][0][][] */ 25,22,-28,36,33,-18,-69,99,-82,127,-21,-35,88,88,19,-44, 
  /* [53][0][][] */ -4,82,8,-82,-24,-11,37,-19,-57,-37,-31,47,15,-127,-76,1, 
  /* [54][0][][] */ -5,10,18,26,48,-25,8,-29,2,29,-10,-17,-9,127,-39,-11, 
  /* [55][0][][] */ -101,127,81,-18,28,22,-31,-11,-62,5,101,-32,-21,-42,89,7, 
  /* [56][0][][] */ 58,7,16,-86,81,-6,-10,23,57,-39,35,127,-26,16,72,58, 
  /* [57][0][][] */ -33,-16,20,55,-26,13,34,127,-11,4,0,-26,9,52,2,5, 
  /* [58][0][][] */ 20,123,-12,-127,9,30,-17,13,95,-10,-2,78,7,-81,38,66, 
  /* [59][0][][] */ 22,52,40,-126,-49,-10,26,-14,14,24,27,-64,-23,-127,-60,20, 
  /* [60][0][][] */ 50,-24,113,-36,-28,127,27,-43,-7,35,-50,-13,22,15,26,-11, 
  /* [61][0][][] */ -20,51,-57,-52,-77,16,118,127,-25,66,12,4,3,64,31,-37, 
  /* [62][0][][] */ -18,7,-2,-9,-61,18,-37,10,-24,-13,-3,-44,9,-127,89,12, 
  /* [63][0][][] */ 29,-42,13,-93,49,0,-110,-127,-38,103,-1,4,64,-9,26,-64, 
  /* [64][0][][] */ -21,2,26,51,75,-5,-31,-127,22,-96,11,-46,1,-25,1,11, 
  /* [65][0][][] */ -127,26,27,-59,11,74,31,-50,-85,24,48,-7,-4,18,-20,-24, 
  /* [66][0][][] */ 70,9,99,13,-39,13,-25,49,-45,-11,63,-87,-12,46,-127,-10, 
  /* [67][0][][] */ 42,-16,-39,78,34,-28,-61,-74,31,-127,-81,-25,-71,6,-78,12, 
  /* [68][0][][] */ 23,-17,-55,44,-63,-73,14,-43,-37,-2,50,-63,-34,41,127,-7, 
  /* [69][0][][] */ -39,40,-70,55,4,-127,31,88,25,30,64,13,103,17,3,-10, 
  /* [70][0][][] */ 6,2,-37,-44,-38,15,127,96,-18,46,-17,14,2,32,24,5, 
  /* [71][0][][] */ 12,-7,-27,-37,30,-4,10,54,-24,-44,-3,6,20,-127,77,18, 
  /* [72][0][][] */ 21,44,-18,19,22,-45,-36,-127,6,67,-39,28,33,45,51,64, 
  /* [73][0][][] */ -32,-127,-16,-60,-63,-21,40,-22,-6,10,-18,-41,23,-37,56,-13, 
  /* [74][0][][] */ -38,37,66,102,-4,6,-127,111,25,-25,-35,-38,-5,-5,-12,-9, 
  /* [75][0][][] */ -66,45,-39,29,-4,61,66,94,1,53,3,-32,-127,88,-6,4, 
  /* [76][0][][] */ 26,-23,-47,-23,33,-64,-127,-87,-18,-9,-9,-5,49,-8,48,-36, 
  /* [77][0][][] */ -35,7,-35,-31,-43,-11,-11,-45,127,17,-57,11,-16,37,29,-86, 
  /* [78][0][][] */ -84,-127,-22,88,56,84,-53,36,-11,-84,-110,48,40,-26,66,52, 
  /* [79][0][][] */ 41,-11,19,-50,127,-6,31,9,65,17,-7,24,-7,-20,10,-45, 
  /* [80][0][][] */ -8,-33,64,-104,-7,-36,14,14,-62,-31,4,-31,11,127,-20,32, 
  /* [81][0][][] */ 27,-10,42,37,10,39,-32,-12,4,-14,-10,-37,-1,39,-127,10, 
  /* [82][0][][] */ -94,-10,37,-118,5,-37,2,-26,-42,-11,-54,-100,-26,-127,-101,20, 
  /* [83][0][][] */ 0,24,-46,-70,-60,12,-19,59,-94,-11,-3,-100,51,-127,-7,88, 
  /* [84][0][][] */ 127,31,28,45,-46,-2,-68,19,-11,-36,103,0,-65,13,60,-70, 
  /* [85][0][][] */ 17,-25,-6,-57,35,-27,-40,127,-95,-109,-72,-56,-40,56,98,-113, 
  /* [86][0][][] */ 23,4,19,4,-75,92,-84,53,-118,-102,35,-25,-40,-127,-24,50, 
  /* [87][0][][] */ 127,-29,19,-9,-24,-54,-16,-18,-2,14,-87,-11,10,-23,-3,30, 
  /* [88][0][][] */ 60,45,-34,-15,-23,-14,-37,5,63,-9,46,14,-14,-28,127,-65, 
  /* [89][0][][] */ 31,71,-93,-14,-52,-18,17,-76,39,41,16,-25,-44,-10,-21,-127, 
  /* [90][0][][] */ -8,-18,3,-83,-65,22,127,-48,69,-48,13,-82,30,-25,-44,-11, 
  /* [91][0][][] */ 10,10,-20,-92,-43,0,23,-33,-56,24,51,52,4,-15,31,127, 
  /* [92][0][][] */ 23,-9,11,2,62,-6,-85,-127,56,-80,-14,-29,-20,-11,-12,-20, 
  /* [93][0][][] */ 82,-20,47,-104,-29,1,-35,45,62,-92,63,-24,-27,127,-40,9, 
  /* [94][0][][] */ -84,36,-77,38,78,-127,-32,-3,14,-53,82,-26,-3,10,-30,-6, 
  /* [95][0][][] */ -44,94,12,-127,-17,7,-50,-8,14,-37,-60,-64,-7,14,-71,-23, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00069483293918892741, 0.00050653365906327963, 0.00044164143037050962, 0.00023050999152474105, 0.00055554276332259178, 0.000895289471372962, 0.0013877330347895622, 0.001104634371586144, 0.00022664078278467059, 0.00098627351690083742, 0.00094517268007621169, 0.00064917141571640968, 0.00045997180859558284, 0.00065696961246430874, 0.0002212998952018097, 0.0014975976664572954, 0.00061993807321414351, 0.00041232709190808237, 0.00044337369035929441, 0.00056141731329262257, 0.00082176324212923646, 0.0019293359946459532, 0.00051534251542761922, 0.0020348359830677509, 0.0012865519383922219, 0.00067730841692537069, 0.00056031887652352452, 0.00071583478711545467, 0.00074101367499679327, 0.00025698359240777791, 0.00016209849854931235, 0.00042033658246509731, 0.00069040915695950389, 0.0010248038452118635, 0.00055909057846292853, 0.00075357087189331651, 0.00093326112255454063, 0.001204822096042335, 0.00052389828488230705, 0.0020720097236335278, 0.00049819453852251172, 0.0005167307099327445, 0.000188306366908364, 0.0010998798534274101, 0.00033468444598838687, 0.00055737874936312437, 0.00076050858478993177, 0.00063035468338057399, 0.00025227168225683272, 0.00065905461087822914, 0.00079670042032375932, 0.00071857060538604856, 0.00123147654812783, 0.00086537719471380115, 0.001195052987895906, 0.00052304705604910851, 0.00065221189288422465, 0.00039822387043386698, 0.0010651506017893553, 0.00042760817450471222, 0.00094192265532910824, 0.00024855686933733523, 0.00063094549113884568, 0.00050111213931813836, 0.00070011941716074944, 0.00069279636954888701, 0.00082457007374614477, 0.00080674391938373446, 0.00083748629549518228, 0.00086096621816977859, 0.00064922188175842166, 0.00044066671398468316, 0.00029160836129449308, 0.00069823331432417035, 0.0010242077987641096, 0.00097258272580802441, 0.00081238092388957739, 0.00090190727496519685, 0.00094287015963345766, 0.0011160782305523753, 0.00048539577983319759, 0.00042398911318741739, 0.00053912558360025287, 0.00027960672741755843, 0.0012495599221438169, 0.00088458205573260784, 0.00044422736391425133, 0.00026655936380848289, 0.00059562508249655366, 0.00055628671543672681, 0.00065379624720662832, 0.0011224990012124181, 0.00060713477432727814, 0.00060347584076225758, 0.00070501904701814055, 0.00041735204285942018, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 802, 3548, -11932, 31401, 28097, 7935, -4607, -6203, 15526, 585, 24245, 17769, -9151, 8442, 35242, -30183, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.0004274969978723675, 0.00031713652424514294, 0.00022729048214387149, 0.00026727092335931957, 0.0002894793578889221, 0.00033857583184726536, 0.00025497606839053333, 0.00042534965905360878, 0.00025870843091979623, 0.00023985444568097591, 0.00035401104832999408, 0.00072628149064257741, 0.00042960376595146954, 0.00041974696796387434, 0.00044979198719374835, 0.00030617200536653399, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,8,-15,13,41,77,-36,-20,49,6,15,15,-1,7,22,72,5,-5,-3,-13,98,-55,4,-21,-24,-35,-42,-103,-10,-4,51,41,118,-14,9,-7,-2,-20,-16,-1,-27,14,12,-30,-5,-31,-14,18,-11,15,0,3,-33,-18,1,-9,32,26,-17,-34,-56,24,-7,-15,18,5,54,-5,7,5,-1,-34,-65,-4,-6,3,-9,-85,11,-25,41,-9,-58,-41,23,-25,-2,19,-4,-1,14,-40,31,15,-15,127, 
  /* [1][0][][] */ 54,-99,34,76,-17,-50,-7,-48,-14,-81,4,13,22,-63,-41,-39,-80,4,23,13,-37,-99,-51,23,127,-55,-70,1,-30,100,-10,40,2,3,-34,9,-33,2,62,-21,8,-65,76,-18,-57,9,41,-8,38,17,-12,-56,66,-60,30,-30,12,35,-3,-108,34,-73,20,-54,11,-83,26,31,42,45,-43,-11,-106,36,-10,59,27,84,24,-23,45,23,-57,28,-81,44,-13,43,-58,-3,23,6,14,-36,32,-3, 
  /* [2][0][][] */ 23,22,4,-18,8,-10,-14,31,68,-15,7,68,-5,10,56,11,-9,-11,9,-5,-23,-70,12,-54,-7,-12,-16,29,-7,13,127,-60,14,-68,-24,51,21,112,-34,-25,-2,-23,-9,40,-55,-47,-53,15,27,36,-26,-29,31,-7,2,-27,-22,4,-9,24,0,11,83,92,4,-74,24,-74,-3,-17,-6,5,-14,15,-27,21,15,54,10,20,8,88,31,-8,-17,10,12,11,29,3,-5,-60,-49,2,-3,60, 
  /* [3][0][][] */ -11,-26,-28,21,23,-7,3,-18,-13,9,10,12,15,-5,41,-4,45,-36,14,1,-15,3,-22,3,-8,10,-1,-12,26,-36,47,-14,18,-18,-14,48,-13,6,-15,9,11,-60,17,-33,-9,5,-6,6,-127,35,-17,21,-115,-49,-17,-34,20,11,1,45,-4,15,6,12,-22,-86,-34,18,36,23,-16,24,-41,-3,-3,-38,-34,-40,15,-50,26,-10,14,59,35,40,34,5,20,0,-4,2,-20,-1,-16,-22, 
  /* [4][0][][] */ 2,-36,15,-78,-11,-13,-50,12,-28,-55,-30,-22,10,82,13,4,58,-18,15,2,-4,30,57,2,-4,0,16,12,8,-14,-1,1,-37,3,1,15,41,-30,5,-17,9,5,-115,-37,36,-4,-10,-20,3,93,-20,-24,-29,-16,12,-4,2,-31,20,42,18,-4,8,-13,38,-121,15,-17,-56,19,-26,6,-9,20,-23,28,-19,78,54,-5,16,8,127,-54,44,-20,-30,-13,72,9,-5,11,-32,19,-6,-46, 
  /* [5][0][][] */ -4,-2,-7,-10,-2,-13,-2,99,51,-16,-10,-28,-19,28,40,25,-12,-7,5,-36,-55,-12,-4,-43,8,6,28,80,67,5,61,48,-48,25,-3,-3,-46,-52,-37,-7,-42,-14,-5,-14,55,12,6,9,10,4,-10,8,-30,-29,8,1,-16,-23,-2,33,-47,30,-24,-41,1,4,-17,4,-10,21,5,2,34,2,-1,-1,-1,23,6,126,1,-49,18,39,6,-15,31,-21,5,-21,25,-127,-39,-26,-9,-124, 
  /* [6][0][][] */ -31,9,-10,-60,5,-16,-11,7,-8,29,-15,2,41,-66,13,-13,0,-67,20,15,4,10,-15,31,76,-6,1,11,21,-5,5,-15,-15,12,-23,13,30,9,12,41,-3,-27,-43,-24,-4,-29,25,-127,11,33,28,17,3,7,-8,-41,38,-6,4,11,23,26,-6,16,30,65,25,-29,-22,-6,14,-22,11,1,47,-10,-27,31,1,4,-11,-20,58,-27,8,44,33,-11,28,16,-32,2,-15,10,-10,14, 
  /* [7][0][][] */ 12,21,38,-16,-4,-3,-6,-30,0,-8,-19,-11,-10,-84,26,7,2,-29,-19,-7,12,-25,-30,0,-25,-12,8,-13,10,4,4,-5,-13,11,-10,-18,10,-16,-25,28,6,-12,-12,29,2,9,-10,73,-2,23,-9,-20,-21,4,1,-45,38,3,-4,2,-9,11,-14,6,-24,37,16,-30,-6,0,10,36,-7,-3,-15,6,45,3,-2,-9,1,-41,42,3,-25,127,5,7,-29,-14,-8,24,-27,3,-1,5, 
  /* [8][0][][] */ -52,50,-37,0,45,-17,-18,30,1,62,-39,12,3,41,69,-23,-1,25,-71,22,25,22,-14,0,-43,-21,17,23,41,-98,-3,8,22,20,2,8,1,18,-53,39,5,15,0,-127,-20,-1,52,-16,-50,21,12,55,-108,61,8,9,7,-29,-36,-8,1,-24,-1,29,-35,36,28,-11,-10,1,38,86,-5,31,33,24,-13,-76,-14,-29,-26,-31,10,3,-44,20,27,-28,15,44,-29,10,22,-22,-10,-13, 
  /* [9][0][][] */ 24,-53,-28,-24,14,18,-18,14,35,-28,-6,7,-48,-18,10,23,-4,4,26,-24,-23,-5,-13,-42,38,6,33,-10,-33,-31,-15,-7,-15,17,12,25,10,40,-26,18,16,9,-13,-77,14,-17,32,-127,-34,4,-7,22,-4,10,-6,2,-48,31,-15,15,9,9,19,35,28,121,36,44,20,-10,14,-28,-16,14,-34,15,57,-8,18,15,-20,16,22,-42,5,44,-2,12,-55,32,-41,13,-2,20,9,-14, 
  /* [10][0][][] */ 26,44,-16,37,75,-120,-10,-38,7,41,37,-12,-26,5,8,-66,6,44,-17,36,-74,-19,-16,-19,-63,-24,-45,47,17,14,9,42,-21,-8,29,-16,83,-30,-3,3,-17,64,50,-21,-45,-19,-40,10,-4,-15,-38,-5,-6,-12,1,-8,10,16,-20,-12,-5,10,-15,22,4,34,45,24,27,-3,38,47,-39,-13,-50,-10,-1,15,-24,22,18,-9,-56,-26,47,-37,91,-4,-18,6,21,-10,66,38,-12,-127, 
  /* [11][0][][] */ 47,39,-21,18,1,7,48,5,-7,-19,-20,-12,-11,9,32,-1,-3,-11,-93,-3,8,13,14,-4,-39,-23,-12,11,6,11,-2,-1,-6,9,0,27,20,10,-15,19,1,25,54,-99,38,-35,1,2,-127,14,8,-54,20,17,-11,20,-8,-17,3,11,12,-15,-12,13,-54,56,-18,15,13,-2,30,18,-43,-23,18,23,0,-31,-54,6,6,-12,81,39,20,1,-4,-4,8,21,-22,5,-2,12,-17,17, 
  /* [12][0][][] */ -33,0,2,-10,-27,44,10,10,127,16,-17,11,9,11,-34,-49,26,24,14,74,52,35,-4,-30,2,10,20,-29,-115,-3,29,-48,9,-10,-4,-13,7,-2,27,-16,-46,-25,-9,0,-9,34,15,-11,11,-3,-38,19,0,-7,4,-2,69,-18,9,17,17,-10,10,-10,-3,28,-34,5,-5,16,-23,-39,21,4,-76,4,28,-1,19,-66,-9,5,31,46,-13,-32,-28,-24,20,23,-4,42,-7,-34,11,17, 
  /* [13][0][][] */ 35,-5,-24,31,26,-1,7,4,-11,-3,14,3,15,-8,10,-17,19,-74,-35,9,-6,-20,17,6,6,9,-6,-8,-7,-39,-5,22,5,10,2,49,23,-5,0,12,0,9,23,33,24,21,-6,-127,20,0,3,4,-18,0,19,10,-6,13,15,18,10,16,-4,7,-13,-14,-18,-50,8,10,-5,-27,-7,42,-6,15,-22,9,10,0,20,-18,-18,13,14,35,11,17,-4,8,20,-4,1,21,-8,-4, 
  /* [14][0][][] */ -107,-56,34,42,37,-34,-27,10,-16,13,-3,3,51,2,-127,-5,69,-8,-3,37,-4,-7,29,14,-102,6,23,-3,-46,-66,-29,7,-11,1,25,-71,39,39,-5,22,17,31,4,-32,21,108,60,59,-106,41,10,36,-48,0,35,-10,3,5,64,58,38,47,9,43,1,-17,-46,41,3,79,-54,-82,-71,-3,-2,42,-16,39,86,2,62,6,33,35,36,10,45,28,28,44,65,-5,7,19,21,-36, 
  /* [15][0][][] */ 80,-15,34,17,-1,60,26,-24,-20,57,-4,5,-92,-3,-4,35,11,37,60,-11,4,9,-76,72,7,7,59,8,28,35,-65,-83,4,-43,38,3,44,-44,-54,-102,-16,25,0,26,-9,56,-14,-35,99,-31,-39,23,40,-124,69,-95,9,-58,4,27,-127,8,21,25,72,-14,-48,45,-25,71,-19,14,45,25,10,7,28,-60,68,-1,-17,-6,34,83,-12,6,3,-47,13,-3,60,3,-73,61,27,-6, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018168622627854347, 0.013478301465511322, 0.009659845381975174, 0.011359013617038727, 0.012302872724831104, 0.014389472082257271, 0.010836482979357243, 0.018077360466122627, 0.0109951077029109, 0.010193813592195511, 0.01504546869546175, 0.030866963788866997, 0.018258159980177879, 0.017839245498180389, 0.019116159528493881, 0.013012310490012169, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10657, -9208, 3154, 51102, -1907, -4646, -10106, 3451, -2938, 770, 3264, -1991, 232, -2825, 5492, -6482, -1235, 17713, 25748, 2607, 3131, -2832, 237, 1131, 17514, -1059, -745, -3565, -5565, -7674, 4909, -9148, 640, -2184, -355, 12150, 1578, -4369, 20684, -79, -279, 2360, -9508, -7687, -7106, 68104, 400, 14683, 35252, -12947, -105, 7305, 7140, -419, -5502, 2419, -12893, 1825, 1820, -6353, -1581, -888, -11908, -1455, 1597, 12915, 29279, 27195, -12801, 140, -10281, -854, 34718, 10858, 527, 447, 18705, 32937, -428, -7167, -1337, -6946, 596, -3069, 1036, -117, 1158, -1077, 1798, -3218, 733, -839, 15, 28, 48, 50766, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019292507204227149, 0.00011625632760114968, 0.00024769667652435601, 4.1138475353363901e-05, 0.0001595550129422918, 0.00016588882135692984, 0.00030256854370236397, 7.8342774941120297e-05, 0.00012813523062504828, 0.00045941985445097089, 0.00016341745504178107, 0.0003267277788836509, 9.1541020083241165e-05, 0.00046950325486250222, 0.00017275894060730934, 0.00012102217442588881, 0.00010379144077887759, 0.0002805365074891597, 6.2959217757452279e-05, 0.0002301652857568115, 4.17309784097597e-05, 0.00019637096556834877, 0.00015924537729006261, 0.00037994919694028795, 0.00020608677004929632, 0.00021031740470789373, 0.00013923815276939422, 0.00018064901814796031, 0.00011469981836853549, 0.00010911340359598398, 0.00014581605501007289, 0.00017134564404841512, 0.00012915664410684258, 9.2315611254889518e-05, 0.00019937817705795169, 0.00019033087301068008, 0.00039235109579749405, 0.00012176845484646037, 5.061900446889922e-05, 0.00015465746400877833, 0.00021517513960134238, 0.00039155260310508311, 0.00035948285949416459, 0.000164787721587345, 0.00017352230497635901, 5.2187522669555619e-05, 0.00024114400730468333, 0.00023824820527806878, 7.5903546530753374e-05, 0.0001771376992110163, 0.0001827049272833392, 0.00017285799549426883, 0.00024548490182496607, 0.00030130689265206456, 0.00027121228049509227, 0.00050260772695764899, 0.00029639151762239635, 0.0001985248236451298, 0.00010922901128651574, 8.5975349065847695e-05, 0.0002631987736094743, 0.00016827121726237237, 0.0002938462421298027, 0.00013293528172653168, 0.00020901455718558282, 0.0002292220015078783, 8.9015433331951499e-05, 6.671714800177142e-05, 0.00033529350184835494, 0.00025322503643110394, 0.00019129637803416699, 0.00010893660510191694, 0.00016932495054788888, 0.00015289186558220536, 0.00016501458594575524, 0.00024023005971685052, 0.00049068481894209981, 5.4096679377835244e-05, 0.00026419598725624382, 0.00026571215130388737, 0.00016592176689300686, 0.00030566644272767007, 0.0001329179503954947, 0.00012044807226629928, 0.00014643107715528458, 9.9918084742967039e-05, 0.00014686926442664117, 0.00017270492389798164, 0.00025015827850438654, 9.6731993835419416e-05, 0.00023264788615051657, 0.00011758581240428612, 0.00015505215560551733, 0.0004522897070273757, 0.025592513382434845, 7.662768621230498e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,5,-20,104,-16,22,-63,-54,18,-6,99,-9,4,-9,-4,55,5,15,-33,2,74,2,32,-34,2,16,42,48,20,14,24,48,-6,26,10,-15,4,49,-64,-27,20,9,26,17,-85,-55,25,-5,-11,-21,-8,-6,49,5,-9,1,-3,-36,27,-31,27,-1,127,27,-12,-11,11,-52,66,36,3,-6,79,-34,67,3,17,-127,29,67,2,15,127,-14,37,30,-27,-19,35,-7,-15,81,1,20,-3,13, -48,11,-8,11,52,-9,-11,-127,39,14,-127,-4,-16,-12,5,93,18,-31,-12,-15,77,-96,127,25,-61,-32,-105,-15,26,36,-49,18,118,11,-14,0,-24,127,-68,-127,8,-19,-30,15,46,-127,127,-44,-77,49,49,7,38,-63,32,56,36,41,-100,85,127,34,4,-20,43,-38,-94,-2,38,-32,-18,47,-49,-49,105,-4,-29,-59,-34,65,-65,60,-15,9,-11,46,56,-40,-28,53,-14,72,-127,-32,23,-127, 1,-4,-23,-73,8,18,37,21,-4,-1,3,63,-1,-13,-10,9,-14,16,-15,17,7,24,23,-33,0,-32,9,12,-8,6,46,-78,44,16,9,-22,11,4,-35,-21,8,3,-16,8,21,-31,20,1,6,-9,5,-4,4,6,-5,8,-8,43,6,-3,11,-17,3,-17,-26,-18,30,-50,-104,-8,42,-17,-127,-24,-12,17,10,-11,5,12,-12,23,-37,-3,-41,21,26,36,-25,-17,25,-11,18,6,-2,-45, 
  /* [0][1][][] */ -40,58,-17,38,-84,-15,-12,-44,26,96,-44,-22,-29,-26,-6,60,127,-25,-91,-14,58,-127,-27,15,-36,-48,-127,-6,37,36,-50,28,-127,-75,-57,4,64,-3,-54,46,-19,85,1,-4,34,-53,-13,-31,127,42,-4,21,44,9,-36,-17,32,9,-124,127,-38,-88,19,127,-58,-35,-84,127,-35,127,-19,51,-37,-56,35,7,-35,-70,127,48,127,35,6,-1,127,28,-95,48,-38,-35,-104,40,96,101,28,-58, 127,127,127,127,-45,-127,127,24,127,-127,15,-127,-105,127,127,127,-16,-127,-59,-127,127,23,-66,127,127,127,-56,-127,127,127,-127,127,-11,-127,-126,127,-127,-44,94,109,-127,-127,127,127,127,-120,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-41,42,-108,-29,-70,-67,127,127,-70,127,127,-108,-127,127,-43,127,-127,-127,-127,126,-77,127,-42,127,80,127,-39,-127,-23,-106,-127,-127,-24,-127,-22,-127,-127,118, -24,66,-38,3,127,71,-23,49,6,24,-14,-5,-25,-31,-12,-6,-105,-23,-127,37,31,77,-11,-118,-34,-41,122,70,10,35,72,9,124,-48,127,-3,54,5,-100,14,36,23,-23,0,-24,-54,-13,-42,80,14,-12,40,-6,-4,-76,-14,24,20,127,-89,1,127,0,-35,-109,-28,-74,99,16,-17,114,23,-17,-57,10,46,-29,-7,-44,-5,-46,8,46,24,-91,34,127,-46,32,-23,127,-10,-112,34,33,19, 
  /* [0][2][][] */ -5,-38,-21,-60,-3,16,39,30,-2,10,-20,53,24,-34,-6,8,42,1,9,21,-9,31,-16,-26,1,-25,8,4,-9,-6,50,-74,-41,67,-29,-25,32,-34,-60,17,7,9,-34,18,12,-78,-12,-1,-10,6,16,-7,7,1,-22,6,-1,44,-50,34,-4,-11,4,18,-5,-9,21,-52,-55,11,-21,-14,-122,-32,-1,17,14,-12,58,16,22,22,-41,15,11,26,-21,9,5,25,21,-5,19,39,-7,-31, -28,-9,-27,25,-44,74,-26,66,5,-6,53,-11,127,-7,-17,-16,-1,-42,-60,23,-22,80,-43,-113,-47,-47,100,69,14,44,54,-1,-124,62,-16,-23,-28,-26,-127,-2,43,-14,-14,36,-27,-44,-18,-47,-61,29,68,25,-12,-80,29,51,17,26,73,-55,20,-59,-9,1,20,-26,-127,-55,-10,-27,-62,22,36,-46,-30,-7,-45,25,-56,0,49,37,18,10,4,62,-92,127,15,125,-32,-18,113,-21,46,83, -10,-32,-26,29,13,66,-45,12,3,-6,-1,14,13,-50,-9,-11,-43,-8,13,18,-23,6,-21,2,-4,19,-3,52,-2,-6,35,29,15,42,19,-22,-5,-26,-28,8,10,-11,21,8,-75,-32,-12,5,-2,-15,-1,-4,-9,8,-17,-5,-1,-50,13,-30,-21,50,9,-27,-10,-2,35,-53,45,7,55,-22,31,-55,-19,21,10,11,-5,20,-30,34,90,-14,-18,54,39,-9,109,11,2,-19,10,-23,-7,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0081993155181407928, 0.004940893966704607, 0.010527108795940876, 0.0017483851406723261, 0.0067810877226293087, 0.0070502748712897301, 0.012859162874519825, 0.0033295678440481424, 0.0054457471705973148, 0.019525343552231789, 0.0069452417083084583, 0.013885930180549622, 0.0038904931861907244, 0.019953887909650803, 0.0073422547429800034, 0.005143442191183567, 0.0044111362658441067, 0.011922800913453102, 0.0026757668238133192, 0.009782024659216404, 0.0017735665896907449, 0.0083457659929990768, 0.0067679286003112793, 0.016147840768098831, 0.0087586874142289162, 0.0089384894818067551, 0.0059176213108003139, 0.0076775830239057541, 0.0048747421242296696, 0.0046373195946216583, 0.0061971819959580898, 0.0072821895591914654, 0.0054891575127840042, 0.0039234133437275887, 0.0084735723212361336, 0.008089061826467514, 0.016674920916557312, 0.0051751593127846718, 0.00215130764991045, 0.0065729417838156223, 0.0091449432075023651, 0.016640985384583473, 0.01527802087366581, 0.0070034782402217388, 0.0073746978305280209, 0.002217969624325633, 0.010248620063066483, 0.010125548578798771, 0.0032259006984531879, 0.0075283520855009556, 0.007764959242194891, 0.0073464647866785526, 0.010433107614517212, 0.012805542908608913, 0.011526522226631641, 0.02136082760989666, 0.01259663887321949, 0.0084373047575354576, 0.0046422327868640423, 0.0036539523862302303, 0.011185947805643082, 0.007151526864618063, 0.012488464824855328, 0.0056497491896152496, 0.0088831186294555664, 0.0097419349476695061, 0.0037831559311598539, 0.0028354788664728403, 0.014249972999095917, 0.010762063786387444, 0.008130095899105072, 0.0046298056840896606, 0.0071963099762797356, 0.0064979041926562786, 0.0070131197571754456, 0.010209777392446995, 0.020854104310274124, 0.0022991087753325701, 0.011228329502046108, 0.011292766779661179, 0.0070516746491193771, 0.012990823946893215, 0.0056490129791200161, 0.0051190429367125034, 0.0062233209609985352, 0.0042465184815227985, 0.0062419436872005463, 0.0073399590328335762, 0.010631727054715157, 0.0041111097671091557, 0.0098875351250171661, 0.0049973968416452408, 0.0065897167660295963, 0.019222311675548553, 1.087681770324707, 0.0032566764857620001, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 18258, 1451, 7925, -525, 5201, 4794, 15229, 7134, -1165, 16962, 6977, 1880, 6893, 37064, -350, -1662, 9070, 8273, 2265, -169, -650, 14916, 4474, 3652, 8518, 3774, 4804, 4532, 23, -34, 6549, 10835, 13543, 2009, 6834, -610, 16609, 6373, 729, 4754, 827, 12179, 13961, 4677, 3435, 11459, 15499, 6086, 4339, 3203, 298, -751, 16869, 7213, 7024, 14634, -196, 7049, 2770, 3656, 11865, 8166, 2375, 6913, 5959, 4035, 4749, -792, 18401, 7885, 8662, -1009, -1461, 3800, 1738, 3118, 22272, 14423, 13544, -2292, 4530, -4406, -1813, 511, 5873, 3821, 6450, 4827, 10744, 4460, 9751, 3819, 15065, 19719, -10089, 12627, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00014262465992942452, 0.00022474140860140324, 0.00017215807747561485, 0.0010416228324174881, 0.00030634441645815969, 0.00018554956477601081, 0.00020633084932342172, 0.00049604219384491444, 0.00039927681791596115, 0.00010766804916784167, 0.00020292194676585495, 0.00042955312528647482, 0.0003937518922612071, 0.00013004579523112625, 0.00022837999858893454, 0.00043288888991810381, 0.0002471913758199662, 0.00028048446984030306, 0.00019901836640201509, 0.00069640605943277478, 0.00038414137088693678, 0.00016828416846692562, 0.00033649656688794494, 0.00022275633818935603, 0.00020685078925453126, 0.00056008005049079657, 0.00030190142570063472, 0.00020054855849593878, 0.0006499879527837038, 0.00038842414505779743, 0.00021990631648804992, 0.00017347051471006125, 0.00014407350681722164, 0.00055102107580751181, 0.00024611738626845181, 0.00044742098543792963, 0.00013383012264966965, 0.00041283393511548638, 0.00061813479987904429, 0.00020210037473589182, 0.00062247802270576358, 0.00015578528109472245, 0.00015333596093114465, 0.00016592269821558148, 0.00033049142803065479, 0.00028243771521374583, 0.00018609380640555173, 0.00023624037567060441, 0.00036518232082016766, 0.00028649778687395155, 0.00041757154394872487, 0.00086572335567325354, 0.00015733620966784656, 0.00022343409364111722, 0.00032912037568166852, 0.00012645212700590491, 0.00043203405220992863, 0.00024778925580903888, 0.00027913556550629437, 0.00043958780588582158, 0.00014176187687553465, 0.00016767982742749155, 0.00043831096263602376, 0.00039802567334845662, 0.00017022909014485776, 0.00028114457381889224, 0.00041017853072844446, 0.00044837416498921812, 0.00014562933938577771, 0.00014875242777634412, 0.00023073524062056094, 0.00046655800542794168, 0.00027959849103353918, 0.00034740226692520082, 0.00024432517238892615, 0.00040138108306564391, 0.00010726413893280551, 0.00031032026163302362, 0.00012094162229914218, 0.00054314482258632779, 0.00023387320106849074, 0.00047401327174156904, 0.00021666576503776014, 0.00052446982590481639, 0.0002739785413723439, 0.00041294842958450317, 0.00024696014588698745, 0.00028041601763106883, 0.00015601428458467126, 0.00036084261955693364, 0.0001448599505238235, 0.00043714951607398689, 0.0001394832506775856, 0.00013937373296357691, 0.00029244771576486528, 0.00026042378158308566, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 23,-17,117,119,67,-32,28,-36,127,-28,-55,-68,49,87,-31,-76, 
  /* [1][0][][] */ 48,89,-18,2,98,-19,-3,34,61,97,-48,127,21,-32,103,-107, 
  /* [2][0][][] */ 16,-41,-3,2,-51,37,-35,98,-78,-69,12,91,-3,-127,82,-88, 
  /* [3][0][][] */ 127,108,-4,24,-117,-16,-69,-31,-6,-13,94,-58,-58,85,-49,-27, 
  /* [4][0][][] */ 0,-4,13,1,-23,34,-17,44,-66,-39,-4,2,-2,-127,11,20, 
  /* [5][0][][] */ 114,-57,-17,11,-18,-97,-44,13,-4,-1,-127,0,29,3,-9,22, 
  /* [6][0][][] */ -127,-76,-5,100,-42,7,-34,36,-101,-73,-59,-19,19,44,-7,81, 
  /* [7][0][][] */ -25,24,-86,59,52,-127,-40,33,8,-35,18,6,-9,17,-51,13, 
  /* [8][0][][] */ 27,-53,-13,-6,19,28,-55,-70,-10,15,-62,11,-127,0,4,17, 
  /* [9][0][][] */ 26,-41,49,127,17,31,1,-86,113,-84,22,-15,-13,41,-74,34, 
  /* [10][0][][] */ -105,-65,-9,-63,82,31,57,94,92,-96,-99,15,105,-76,-127,94, 
  /* [11][0][][] */ 49,-28,-127,29,56,24,-27,51,-12,-43,-24,-5,7,31,-53,-8, 
  /* [12][0][][] */ 111,-78,19,-8,1,-73,-54,-5,59,-7,-127,-14,-48,3,-4,52, 
  /* [13][0][][] */ 25,-96,26,-77,98,13,-91,-127,82,-71,38,5,21,23,50,9, 
  /* [14][0][][] */ -46,20,-85,-44,86,-127,52,-53,59,34,-13,-92,27,104,-10,18, 
  /* [15][0][][] */ 29,-9,70,40,51,-38,-25,7,23,-54,-56,2,-127,-61,-11,56, 
  /* [16][0][][] */ -105,51,-5,7,-14,76,48,84,-20,33,127,2,2,4,18,-29, 
  /* [17][0][][] */ -18,-1,-50,-25,-25,1,27,60,-17,127,-35,6,-6,93,61,-13, 
  /* [18][0][][] */ -7,127,-39,4,18,-14,78,-60,41,124,-70,126,35,-33,28,-126, 
  /* [19][0][][] */ 2,-17,39,19,6,45,-2,18,15,8,-38,-12,-127,4,-13,23, 
  /* [20][0][][] */ 84,-52,-24,-98,-46,36,35,-103,-73,25,-127,-48,22,-11,56,22, 
  /* [21][0][][] */ 38,7,127,48,-16,58,33,-3,-11,47,-35,2,-15,81,12,2, 
  /* [22][0][][] */ 17,12,25,4,-11,6,25,127,11,-3,15,34,-4,40,18,17, 
  /* [23][0][][] */ -20,24,-94,15,18,-127,7,31,0,-25,-8,-17,-66,3,-2,44, 
  /* [24][0][][] */ 26,-56,3,-74,69,3,-12,-6,29,37,80,95,-56,90,127,40, 
  /* [25][0][][] */ -127,-91,-52,-10,0,5,12,-46,-74,9,-77,0,7,29,29,62, 
  /* [26][0][][] */ 0,0,39,-9,0,15,-38,50,-75,-52,1,19,0,-127,35,-14, 
  /* [27][0][][] */ -110,50,-46,13,40,-27,9,23,19,-18,127,16,-29,-2,-11,-15, 
  /* [28][0][][] */ -20,-9,22,33,-3,-3,14,88,27,17,-31,-8,-127,-5,-15,37, 
  /* [29][0][][] */ -18,67,36,-36,48,-12,22,-30,-127,37,-33,10,-6,34,-90,18, 
  /* [30][0][][] */ 5,-16,-127,-29,16,-62,-9,14,-16,-35,-5,-25,-35,-26,13,15, 
  /* [31][0][][] */ 124,-44,-127,12,31,10,-47,58,-24,-16,-90,-27,16,-8,-84,41, 
  /* [32][0][][] */ -118,57,22,27,1,76,24,31,13,4,127,-3,-50,18,-8,-23, 
  /* [33][0][][] */ 8,-14,127,-28,-62,20,3,-32,-7,3,-9,20,-4,20,32,22, 
  /* [34][0][][] */ -22,-30,-34,-127,21,19,22,-18,-32,-78,-44,-119,-2,-5,47,21, 
  /* [35][0][][] */ -4,-41,51,56,71,-26,14,-35,-120,38,1,37,-28,127,-36,-57, 
  /* [36][0][][] */ -107,62,-27,-10,4,37,66,105,7,37,127,-15,2,13,26,-24, 
  /* [37][0][][] */ -31,1,127,-34,-69,-67,24,-27,27,11,0,-4,1,-53,60,7, 
  /* [38][0][][] */ 4,-3,-3,14,56,-59,-59,15,-18,-12,91,-6,127,28,-5,0, 
  /* [39][0][][] */ -19,-32,3,-46,-59,-79,50,127,-49,-25,2,-53,-7,65,43,63, 
  /* [40][0][][] */ 55,5,-15,-4,-5,87,-9,7,17,-1,8,4,127,15,-23,-27, 
  /* [41][0][][] */ 4,0,-38,-127,40,-4,-10,-86,-2,-42,27,-41,-13,-29,-6,33, 
  /* [42][0][][] */ 49,37,30,110,-107,-11,-114,2,-71,-77,78,-66,-57,127,-48,-1, 
  /* [43][0][][] */ 25,110,-28,127,27,30,33,-83,-42,76,-9,29,-12,-45,47,38, 
  /* [44][0][][] */ 2,-40,-127,17,49,80,-39,69,-18,-38,45,-38,10,-28,-60,-1, 
  /* [45][0][][] */ -7,21,-1,-127,-13,7,62,1,-5,36,-23,29,1,-96,38,-47, 
  /* [46][0][][] */ 10,35,55,-26,11,7,-37,63,13,-45,-26,12,14,127,45,-15, 
  /* [47][0][][] */ 17,-21,27,-49,-37,11,-65,68,-10,-24,9,41,15,-127,39,16, 
  /* [48][0][][] */ -5,1,11,-127,-10,-17,0,6,10,-22,7,-22,4,47,-3,49, 
  /* [49][0][][] */ 42,-38,-7,107,108,10,-6,46,-61,16,37,46,-13,37,127,-8, 
  /* [50][0][][] */ -37,3,89,-14,11,127,-26,-55,49,-14,108,54,107,8,-29,-82, 
  /* [51][0][][] */ 27,37,20,8,18,-2,-51,17,41,-9,6,127,10,31,30,-49, 
  /* [52][0][][] */ -3,37,127,2,2,-38,3,-37,-23,-6,-5,22,1,99,-109,-24, 
  /* [53][0][][] */ 18,-38,-40,-127,-43,4,6,-61,-28,33,15,-4,30,-43,56,14, 
  /* [54][0][][] */ 4,8,-30,-35,12,13,-15,7,59,-26,-1,-33,-10,127,22,21, 
  /* [55][0][][] */ -15,-12,-41,-26,16,-51,-7,-127,-4,-83,-4,5,-37,-90,-55,-9, 
  /* [56][0][][] */ 40,40,30,64,4,-19,16,127,26,-24,0,-34,71,-7,-51,31, 
  /* [57][0][][] */ 80,-37,127,-10,-51,-45,-1,-19,22,14,-92,20,65,-35,50,12, 
  /* [58][0][][] */ 92,93,17,112,-127,-24,-7,44,-12,32,99,-29,-88,-59,-33,-89, 
  /* [59][0][][] */ 127,-39,0,1,-25,-16,-16,13,-27,12,-110,-18,8,6,0,21, 
  /* [60][0][][] */ -127,38,-14,-1,9,1,29,22,8,13,79,-13,-39,-5,26,-16, 
  /* [61][0][][] */ -97,66,28,21,59,-10,-98,-85,127,-115,88,11,65,-20,-84,-50, 
  /* [62][0][][] */ -16,-26,-127,37,48,93,-3,100,14,-47,18,-26,-83,-4,-99,1, 
  /* [63][0][][] */ -34,12,127,-45,-54,-61,35,-27,8,18,13,0,-22,-55,73,14, 
  /* [64][0][][] */ 33,64,-18,40,61,-15,95,-105,-1,127,0,-5,13,-98,-3,51, 
  /* [65][0][][] */ 7,18,3,-13,50,14,-12,-127,-28,-71,-30,-43,-17,-41,33,16, 
  /* [66][0][][] */ -127,-1,-14,6,-42,8,15,-35,-74,-43,-94,54,68,30,45,82, 
  /* [67][0][][] */ -2,-60,13,127,-7,5,-32,57,64,18,3,-9,-13,-34,-91,-19, 
  /* [68][0][][] */ 17,13,-12,127,-75,-3,12,-37,-62,19,25,-18,-32,-86,-38,-31, 
  /* [69][0][][] */ 64,85,9,113,56,-6,60,-127,18,90,24,60,-4,-43,20,-7, 
  /* [70][0][][] */ 35,-17,-2,-80,107,-21,52,32,67,-18,67,-29,24,92,34,127, 
  /* [71][0][][] */ 6,50,10,71,50,-127,-42,96,32,-78,16,13,15,-47,-55,35, 
  /* [72][0][][] */ -127,-67,-23,45,18,48,-35,12,-57,-31,-92,31,43,15,-4,99, 
  /* [73][0][][] */ -31,2,-6,70,35,-32,5,-45,83,23,10,10,19,127,-43,-57, 
  /* [74][0][][] */ 83,-65,25,-32,-42,-38,36,-19,-43,-10,-127,21,-126,-11,40,65, 
  /* [75][0][][] */ -17,-14,-19,127,-16,11,3,-25,-61,24,-12,-20,-3,-47,-10,-41, 
  /* [76][0][][] */ 6,-20,-10,37,24,4,-25,-127,6,-114,5,10,-35,-28,36,-33, 
  /* [77][0][][] */ 127,-36,36,38,-41,11,-40,9,44,-14,-24,55,45,21,-53,37, 
  /* [78][0][][] */ -26,-12,49,-1,6,-3,-61,38,44,-34,-40,-27,20,127,22,-31, 
  /* [79][0][][] */ -1,20,38,14,49,54,-58,-63,9,-44,72,-24,127,-25,-31,-42, 
  /* [80][0][][] */ -127,-121,-87,116,15,57,22,9,-71,10,-121,17,75,-70,-30,70, 
  /* [81][0][][] */ 53,27,-88,27,127,99,-34,-24,-20,-75,-29,-74,-19,-20,-109,43, 
  /* [82][0][][] */ 126,127,2,45,-114,-32,-66,-15,-61,13,124,-64,-43,106,7,-52, 
  /* [83][0][][] */ 127,40,17,-28,11,-20,-11,34,40,14,75,-41,-48,-24,-25,-84, 
  /* [84][0][][] */ -7,-56,-55,-19,47,33,-2,-127,-23,-56,24,20,-30,-9,0,-15, 
  /* [85][0][][] */ -20,5,-33,-53,6,-17,55,62,-3,127,-9,-38,20,51,65,-28, 
  /* [86][0][][] */ 106,-20,14,6,14,-34,-2,-27,-1,4,-127,7,24,23,-15,21, 
  /* [87][0][][] */ -19,44,12,-37,-10,80,-37,66,-8,-37,28,14,17,-127,3,13, 
  /* [88][0][][] */ -23,-32,-77,-32,72,15,-32,-127,17,-38,1,-12,-38,-4,29,-29, 
  /* [89][0][][] */ 14,-8,23,-127,40,14,-62,109,81,-74,35,7,-21,47,30,53, 
  /* [90][0][][] */ -11,8,-35,86,83,7,118,-111,73,127,-37,49,17,-6,-18,-29, 
  /* [91][0][][] */ 50,-9,-43,-17,-10,-127,-10,-1,-8,-7,-43,-12,26,-20,5,26, 
  /* [92][0][][] */ 22,2,127,54,54,1,-7,43,-28,28,-75,17,25,99,-2,-14, 
  /* [93][0][][] */ 127,-46,-30,-24,-18,-59,18,55,-29,48,-112,-15,-13,17,-16,51, 
  /* [94][0][][] */ 30,-21,50,89,113,-44,-7,66,-5,-9,-1,67,-12,127,-34,-89, 
  /* [95][0][][] */ -100,46,41,40,31,35,28,-2,12,7,127,-7,-11,27,-7,-31, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00044825449003838003, 0.00070633890572935343, 0.00054107495816424489, 0.0032737124711275101, 0.0009628086700104177, 0.00058316299691796303, 0.00064847641624510288, 0.0015590090770274401, 0.0012548855738714337, 0.0003383894800208509, 0.00063776259776204824, 0.0013500407803803682, 0.0012375212972983718, 0.00040872039971873164, 0.00071777461562305689, 0.0013605247950181365, 0.00077689677709713578, 0.00088153354590758681, 0.00062549405265599489, 0.0021887319162487984, 0.0012073164107277989, 0.00052889966173097491, 0.0010575737105682492, 0.00070010003400966525, 0.00065011053811758757, 0.0017602733569219708, 0.00094884482678025961, 0.0006303032860159874, 0.0020428446587175131, 0.0012207766994833946, 0.00069114268990233541, 0.00054519978584721684, 0.00045280804624781013, 0.0017318020109087229, 0.00077352137304842472, 0.0014061976689845324, 0.00042061417479999363, 0.001297494163736701, 0.0019427334191277623, 0.00063518044771626592, 0.0019563836976885796, 0.00048961694119498134, 0.00048191897803917527, 0.00052147777751088142, 0.0010387002257630229, 0.00088767241686582565, 0.00058487348724156618, 0.00074247893644496799, 0.0011477300431579351, 0.00090043275849893689, 0.0013123839162290096, 0.0027208784595131874, 0.00049449136713519692, 0.00070223014336079359, 0.0010343911126255989, 0.0003974258725065738, 0.0013578381622210145, 0.00077877583680674434, 0.00087729404913261533, 0.0013815787388011813, 0.00044554282794706523, 0.00052700028754770756, 0.001377565786242485, 0.0012509532971307635, 0.00053501233924180269, 0.00088360818335786462, 0.0012891484657302499, 0.0014091933844611049, 0.00045769786811433733, 0.00046751339687034488, 0.00072517688386142254, 0.0014663432957604527, 0.00087874894961714745, 0.0010918491752818227, 0.00076788861770182848, 0.0012614990118891001, 0.00033712002914398909, 0.0009753043414093554, 0.00038010693970136344, 0.0017070478061214089, 0.00073503918247297406, 0.0014897744404152036, 0.00068095797905698419, 0.0016483542276546359, 0.00086108606774359941, 0.0012978540034964681, 0.00077617011265829206, 0.00088131835218518972, 0.00049033667892217636, 0.0011340908240526915, 0.00045527977636083961, 0.0013739154674112797, 0.0004383813648018986, 0.00043803715379908681, 0.00091913272626698017, 0.00081848487025126815, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -42539, 3517, 1680, -8105, -421, -8967, -7575, -34158, 7015, 31052, 35515, -7191, -1751, -21388, 45548, -49382, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00074650876922532916, 0.00089751160703599453, 0.0011160150170326233, 0.0010396958095952868, 0.00072846817784011364, 0.0008849669829942286, 0.0011127620236948133, 0.00053024332737550139, 0.0006076333811506629, 0.00061350950272753835, 0.00083522603381425142, 0.00056846870575100183, 0.001185867702588439, 0.0013602180406451225, 0.0005234144045971334, 0.00050237256800755858, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,-3,-26,12,24,-1,7,105,-46,13,42,-6,17,-17,-15,17,18,-18,-7,-1,65,-6,21,127,-17,89,-11,-16,33,-14,22,-31,-16,45,24,-44,21,45,22,-16,-105,-19,21,42,36,24,-120,-54, 
  /* [1][0][][] */ -33,-9,19,12,-31,8,3,52,-57,-36,3,-46,-26,-16,2,-2,-18,114,-13,16,3,5,-25,-14,25,-41,12,22,-23,-80,-39,16,-22,-10,34,1,0,-37,1,12,-15,-30,127,15,13,0,18,-7, 
  /* [2][0][][] */ -24,-9,-13,-32,-1,-59,5,-20,2,10,16,27,16,12,-12,9,-1,-19,-24,-12,-3,2,-1,-127,-11,69,-14,4,1,-19,-2,-4,-5,53,10,-4,22,8,25,2,-38,6,-18,-7,-4,-9,17,5, 
  /* [3][0][][] */ -6,33,2,-29,-2,1,4,-5,-21,-3,1,37,-127,6,-5,-4,4,8,-19,-4,-32,6,6,14,-5,-10,2,27,-7,18,4,15,3,1,15,18,-12,28,40,4,13,7,21,-29,9,-6,2,21, 
  /* [4][0][][] */ 41,-35,9,15,23,26,22,-26,-32,0,-16,-22,-3,11,0,15,22,-4,-84,4,-5,12,16,80,2,-29,5,51,9,-77,18,5,11,-36,34,-127,13,38,-2,18,-15,21,12,-23,-9,-22,4,8, 
  /* [5][0][][] */ 27,1,-18,65,-2,-3,4,28,5,-3,40,12,4,53,5,1,-24,23,32,4,14,4,2,-29,5,-49,4,-17,-5,-12,4,8,64,-127,-1,30,-18,-17,17,2,-93,63,16,-6,-12,-2,-100,-10, 
  /* [6][0][][] */ 26,-1,7,3,-15,-6,5,-16,-2,5,-2,3,-16,9,7,3,1,-12,127,10,5,8,19,-37,4,2,27,-12,-14,-6,-7,11,-3,-6,29,-37,-3,-42,68,14,-2,-12,-7,7,-10,6,9,-9, 
  /* [7][0][][] */ -44,-18,-4,34,-8,72,-4,40,1,27,-8,127,78,-9,-1,-2,-3,-17,-3,-18,-23,-3,-16,61,0,-39,-45,-30,-10,-18,-10,-4,7,9,-27,1,6,-60,84,-1,21,17,-62,-51,9,-5,6,-3, 
  /* [8][0][][] */ -45,-51,1,0,-6,0,-4,34,-4,-62,1,44,53,4,7,3,-13,61,-33,6,-46,22,-1,-12,-5,2,10,47,-13,108,-12,26,-6,11,-23,-127,-114,61,31,29,18,-11,101,-27,7,32,22,26, 
  /* [9][0][][] */ -18,4,-2,22,19,-40,2,-7,52,-47,4,54,-62,1,20,-2,-5,21,-43,-23,49,8,-8,-16,-4,3,49,-28,14,14,9,3,5,16,83,-111,-7,-127,-106,10,-27,22,64,15,9,13,-22,-41, 
  /* [10][0][][] */ -19,-7,-31,-127,45,78,6,-13,-7,30,18,10,54,-46,-25,19,38,-35,57,-35,34,-23,40,54,-46,-107,5,-36,44,27,42,-35,-31,-70,24,-8,14,-38,2,-34,-31,-67,-9,14,12,20,15,-40, 
  /* [11][0][][] */ -4,51,0,64,33,-66,-88,-15,0,74,-18,11,-1,56,-5,-85,28,51,1,-14,-57,-114,15,-2,7,-45,26,-14,54,-49,23,-88,57,-11,-50,-106,92,16,6,-127,-6,67,94,-84,-13,-61,39,31, 
  /* [12][0][][] */ 127,-4,-18,11,2,20,1,99,20,-10,-59,-27,-1,12,-10,-5,-13,2,-6,1,2,4,6,18,-7,15,0,8,-6,13,-5,0,0,-67,-9,7,-15,-16,-29,-3,-18,-77,4,-125,-52,-12,79,-5, 
  /* [13][0][][] */ 12,4,-1,4,7,-10,0,-1,-1,7,3,22,-6,4,8,-1,6,1,11,5,13,-9,10,-4,2,-1,20,127,9,-3,7,0,4,2,-37,20,10,-4,4,-13,-15,-5,2,6,1,0,-7,-12, 
  /* [14][0][][] */ 68,-21,48,-83,54,22,40,-101,-58,-58,-10,118,-74,-5,66,13,49,21,-59,72,17,14,76,-14,17,66,-39,-124,24,-37,65,43,-14,74,-127,-50,-40,52,91,9,-38,-4,57,5,6,1,7,-25, 
  /* [15][0][][] */ -14,-60,-78,-31,66,36,78,-48,-7,25,-13,-29,93,22,-107,69,56,59,86,-93,-102,-26,57,-20,-91,46,33,63,60,49,54,-49,27,64,95,127,-21,-121,-7,-33,95,70,112,-59,-10,-34,-13,62, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.031726621091365814, 0.038144242018461227, 0.04743063822388649, 0.044187072664499283, 0.030959896743297577, 0.037611097097396851, 0.047292385250329971, 0.022535340860486031, 0.025824418291449547, 0.026074152439832687, 0.035497106611728668, 0.02415991947054863, 0.050399374216794968, 0.057809263467788696, 0.02224511094391346, 0.021350834518671036, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 3646, 37412, -972, 39359, 4529, 133913, -2644, 53881, 3858, 32631, 27163, 2332, -658, 32354, -558, -2799, -406, -1067, 2033, -1679, 400, -2995, -615, -21899, -4393, 40628, 131675, 99750, 2559, 1976, -2120, 237, 25446, 552, 31313, -10717, 43644, 1709, 56306, 2365, -66, 64123, -1227, 1827, 48199, -416, 3076, 49973, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.0338239311240613e-05, 3.6398698284756392e-05, 0.00015260986401699483, 5.5423293815692887e-05, 0.00015890185022726655, 5.6787415815051645e-05, 0.00013382878387346864, 0.00010830399696715176, 7.3706105467863381e-05, 3.9110695070121437e-05, 4.6155975724104792e-05, 9.3641494459006935e-05, 4.472292130230926e-05, 3.8569673051824793e-05, 0.00016715349920559675, 0.00016721937572583556, 0.00019390528905205429, 8.3395156252663583e-05, 0.00011653366527752951, 0.00014225738414097577, 8.7077016360126436e-05, 0.00019076699391007423, 9.8128992249257863e-05, 0.00013825819769408554, 8.4686253103427589e-05, 0.00011197074491064996, 3.2390311389463022e-05, 7.3372313636355102e-05, 0.00012934429105371237, 0.00012358547246549278, 0.00011278348392806947, 0.00014343694783747196, 4.7602166887372732e-05, 0.00013063698133919388, 3.0260103812906891e-05, 7.0808731834404171e-05, 0.00013468998076859862, 8.8547967607155442e-05, 0.00010180042590945959, 8.9072862465400249e-05, 0.00011278456076979637, 9.2473608674481511e-05, 8.7267995695583522e-05, 9.1470239567570388e-05, 2.8011099857394584e-05, 0.00017477157234679908, 9.4834707851987332e-05, 2.6555231670499779e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-94,97,71,53,-34,106,-64,60,-89,-79,47,53,-42,-73,-89,101,78,49,77,67,-72,-83,51,-32,-40,-64,-64,-66,61,-62,-113,-14,41,71,64,-65,53,-49,-24,50,-73,58,62,-96,11,75,-33, 80,-97,127,86,-78,-68,-56,-83,96,-103,-63,73,80,-108,-96,92,-38,95,83,127,85,-112,53,71,-53,-77,-70,-81,56,78,-30,-127,-85,79,82,84,-82,83,-82,-18,76,-93,83,90,-75,-127,93,-103, 34,-47,70,38,18,-41,-47,-39,43,-31,5,35,30,-78,-55,-1,-54,38,34,70,34,-53,32,26,-28,-46,-45,-24,31,31,87,-89,-83,44,35,34,-30,38,-37,-10,41,-39,35,43,-6,-9,37,-75, 
  /* [0][1][][] */ 92,-113,-40,95,56,-82,127,-90,87,-114,-71,81,85,-111,-14,-127,127,109,74,-39,84,107,-127,74,73,-75,-94,-99,-127,86,-70,-10,-87,71,107,97,-84,79,-80,89,84,-99,88,90,-91,108,94,-93, 127,-127,-64,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-23,97,-66,127,127,-52,127,127,68,127,127,-127,-127,-127,54,127,-29,14,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-79,-32,66,37,-62,-48,-62,56,-41,-60,58,49,-54,-16,11,-63,51,58,-30,57,64,50,64,66,-64,-63,-45,36,54,127,14,-63,68,48,50,-49,59,-59,56,60,-58,54,62,-63,-67,58,-56, 
  /* [0][2][][] */ 45,-51,-46,49,27,-53,64,-43,41,-73,-4,39,56,-73,83,-79,72,50,34,-32,26,-10,-77,30,-24,-44,-47,-49,-75,31,-41,88,-73,37,50,42,-26,37,-43,-88,48,-50,41,44,-23,16,40,-76, 72,-74,-49,80,-57,-64,-72,-67,52,-78,-66,60,74,-49,127,32,-46,58,61,-45,55,-16,41,66,-50,-67,-76,-61,31,61,-24,114,-56,65,58,58,-49,61,-66,-107,69,-67,61,62,-86,50,63,-53, 41,-41,-26,46,28,-20,-17,-35,15,-25,-51,29,32,5,68,25,-36,23,28,-34,28,1,39,42,-26,-29,-48,-25,33,33,61,65,-1,34,16,23,-23,30,-29,-55,28,-33,26,29,-65,9,32,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029893752653151751, 0.0015469446079805493, 0.006485919002443552, 0.0023554898798465729, 0.0067533282563090324, 0.0024134651757776737, 0.0056877234019339085, 0.0046029197983443737, 0.003132509533315897, 0.0016622045077383518, 0.0019616289064288139, 0.0039797634817659855, 0.0019007241353392601, 0.0016392110846936703, 0.0071040233597159386, 0.00710682338103652, 0.0082409745082259178, 0.0035442940425127745, 0.0049526807852089405, 0.0060459384694695473, 0.0037007729988545179, 0.0081075970083475113, 0.0041704820469021797, 0.0058759730309247971, 0.0035991657059639692, 0.0047587566077709198, 0.0013765881303697824, 0.0031183231621980667, 0.0054971324279904366, 0.0052523822523653507, 0.004793297965079546, 0.0060960701666772366, 0.0020230920054018497, 0.0055520716123282909, 0.0012860543793067336, 0.003009370993822813, 0.0057243243791162968, 0.0037632884923368692, 0.0043265181593596935, 0.0037855966947972775, 0.0047933435998857021, 0.0039301281794905663, 0.0037088897079229355, 0.0038874850142747164, 0.0011904716957360506, 0.0074277915991842747, 0.0040304749272763729, 0.0011285973014310002, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 553, 756, 1979, 427, 7550, 15604, 2040, 4, -744, -548, 1189, 782, 2681, 1032, 21036, 2602, 1977, -878, -276, 3293, -1472, 10258, 9241, 10418, 4622, 205, 3676, 3968, 7616, -447, 7301, 4848, 515, -201, 4050, 2833, -1650, 350, -538, 5072, 1041, -434, -773, 66, 924, 3061, 683, 844, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00041630849591456354, 0.00092176406178623438, 0.00028473453130573034, 0.00034491519909352064, 0.00029069409356452525, 0.0002583439345471561, 0.00054484058637171984, 0.00028447606018744409, 0.00038685006438754499, 0.00078872853191569448, 0.00084437918849289417, 0.00032867692061699927, 0.0004600178508553654, 0.00071729085175320506, 0.00017074642528314143, 0.00048507502651773393, 0.00026648456696420908, 0.0004246002936270088, 0.00026088373851962388, 0.0002814657345879823, 0.00042319504427723587, 0.00024780887179076672, 0.00039862116682343185, 0.0001516801567049697, 0.00034538848558440804, 0.00033889239421114326, 0.0018886826001107693, 0.00047391961561515927, 0.00022691127378493547, 0.00047582588740624487, 0.00035665734321810305, 0.00025243448908440769, 0.00075391121208667755, 0.00027977913850918412, 0.00090767943765968084, 0.00064184051007032394, 0.00082467758329585195, 0.00035866588586941361, 0.00027534770197235048, 0.00036995919072069228, 0.00017234367260243744, 0.00027901388239115477, 0.00036032154457643628, 0.0003337678499519825, 0.0020878978539258242, 0.00044369077659212053, 0.00033191256807185709, 0.0013637009542435408, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,4,-6,70,-32,42,20,-32, 
  /* [1][0][][] */ 37,70,57,25,19,-50,103,127, 
  /* [2][0][][] */ -36,-9,-7,2,-127,-13,17,4, 
  /* [3][0][][] */ 102,3,-15,-127,-117,27,25,-31, 
  /* [4][0][][] */ -127,41,-6,-10,79,-3,37,18, 
  /* [5][0][][] */ -108,-25,23,-8,-127,17,7,84, 
  /* [6][0][][] */ -5,-127,23,-22,0,4,-1,26, 
  /* [7][0][][] */ -68,-3,4,93,127,-29,-32,6, 
  /* [8][0][][] */ 83,9,10,-127,6,-25,-51,-44, 
  /* [9][0][][] */ -15,-127,-10,-7,5,97,-62,82, 
  /* [10][0][][] */ -111,2,-4,22,-127,82,70,-13, 
  /* [11][0][][] */ 125,24,46,22,-61,-52,-29,-127, 
  /* [12][0][][] */ 7,11,49,-6,5,-87,127,61, 
  /* [13][0][][] */ 63,-36,0,-27,127,126,126,-37, 
  /* [14][0][][] */ 127,64,-20,12,-110,-11,-35,-19, 
  /* [15][0][][] */ -1,-127,16,-10,-11,6,-2,28, 
  /* [16][0][][] */ -55,-8,7,0,-127,-6,19,8, 
  /* [17][0][][] */ -34,109,-127,3,13,-126,105,-90, 
  /* [18][0][][] */ 127,-27,-37,16,-58,20,7,106, 
  /* [19][0][][] */ 127,-60,-31,0,37,4,42,11, 
  /* [20][0][][] */ 123,17,-26,127,-3,35,-6,-49, 
  /* [21][0][][] */ 5,57,-54,6,-30,95,-127,-111, 
  /* [22][0][][] */ -127,23,25,-7,-38,3,-55,-30, 
  /* [23][0][][] */ -41,-60,-2,20,-127,64,78,-18, 
  /* [24][0][][] */ 127,-19,-16,-13,-89,-4,-12,13, 
  /* [25][0][][] */ 17,-10,0,-22,127,51,51,-30, 
  /* [26][0][][] */ 5,-91,3,-39,2,-127,87,-58, 
  /* [27][0][][] */ -17,-127,27,-15,-3,-57,33,-9, 
  /* [28][0][][] */ -109,34,-18,21,-11,-30,127,107, 
  /* [29][0][][] */ -8,49,11,7,-3,41,-107,-127, 
  /* [30][0][][] */ 127,-20,-2,14,-85,-8,-28,-6, 
  /* [31][0][][] */ -2,-23,54,-17,7,-96,127,65, 
  /* [32][0][][] */ -82,17,8,11,-127,-102,-100,55, 
  /* [33][0][][] */ -30,11,1,24,-127,-55,-47,19, 
  /* [34][0][][] */ 7,-127,47,-2,-1,83,-68,64, 
  /* [35][0][][] */ -20,-50,-127,-13,-4,-72,45,-57, 
  /* [36][0][][] */ 3,127,54,6,-17,13,-26,-38, 
  /* [37][0][][] */ -127,38,31,-16,50,-28,-11,-114, 
  /* [38][0][][] */ -127,-21,-51,-13,46,31,31,104, 
  /* [39][0][][] */ -1,-48,68,4,23,-95,127,113, 
  /* [40][0][][] */ -35,-15,-7,-33,-127,105,116,-25, 
  /* [41][0][][] */ -127,38,8,-72,-82,-86,-96,42, 
  /* [42][0][][] */ -49,-127,-106,1,-12,77,-124,-89, 
  /* [43][0][][] */ -69,3,-13,-127,89,55,56,-4, 
  /* [44][0][][] */ 127,-6,20,-91,33,-31,-15,43, 
  /* [45][0][][] */ -14,-127,-8,-9,-6,-71,80,3, 
  /* [46][0][][] */ 104,-2,-1,-24,127,-31,-28,2, 
  /* [47][0][][] */ 127,-8,-8,122,-2,26,9,-39, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0007123975083231926, 0.0015773456543684006, 0.00048724486259743571, 0.00059022748610004783, 0.00049744301941245794, 0.00044208459439687431, 0.00093234481755644083, 0.00048680254258215427, 0.00066198752028867602, 0.0013496920000761747, 0.0014449227601289749, 0.00056244013831019402, 0.00078719406155869365, 0.0012274460168555379, 0.00029218554846011102, 0.00083007250213995576, 0.00045601505553349853, 0.00072658661520108581, 0.00044643075671046972, 0.00048165122279897332, 0.00072418194031342864, 0.00042405675048939884, 0.00068213051417842507, 0.00025955887394957244, 0.00059103738749399781, 0.00057992112124338746, 0.0032319608144462109, 0.00081098306691274047, 0.00038829623372294009, 0.00081424514064565301, 0.00061032094527035952, 0.00043197220657020807, 0.0012901116861030459, 0.00047876505414023995, 0.001553243724629283, 0.001098333508707583, 0.0014112088829278946, 0.00061375804943963885, 0.00047118187649175525, 0.00063308340031653643, 0.00029491880559362471, 0.00047745552728883922, 0.00061659124912694097, 0.00057115190429612994, 0.0035728628281503916, 0.00075925473356619477, 0.00056797708384692669, 0.0023335991427302361, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -44361, 30809, -12635, -13696, 21512, 1747, 30100, 42298, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00044998733210377395, 0.00066065625287592411, 0.0015432040672749281, 0.0016486651729792356, 0.0007813909905962646, 0.00051639048615470529, 0.00069242221070453525, 0.00097299378830939531, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -46,-17,-35,18,5,-19,3,13,-114,127,-42,126,125,13,84,-15,-4,-27,7,15,2,9,-30,-49,28,-106,16,65,-9,15,25,-27,2,-73,125,16,0,-8,-4,-33,111,-5,55,-23,-25,39,-20,-15, 
  /* [1][0][][] */ 3,31,127,2,-9,-23,6,-89,39,-8,25,-2,-22,8,-8,-120,11,-64,13,12,-23,37,26,-31,-22,-5,11,3,12,-3,9,-2,-9,20,15,17,-10,-38,67,-70,10,43,-15,33,-21,18,27,-2, 
  /* [2][0][][] */ 8,-48,19,-42,32,26,-8,-31,9,-2,-1,13,-12,56,8,0,-39,127,-25,-30,-13,27,-40,-12,117,0,-2,-8,-30,-8,5,-39,-7,-12,1,10,-10,0,-13,4,15,-20,-17,0,3,32,-24,-39, 
  /* [3][0][][] */ 2,-85,-6,12,3,-5,-7,2,-4,-15,18,20,11,-10,53,5,-6,-21,4,27,-2,23,-23,2,5,52,-2,8,-4,3,127,3,13,10,-3,-3,-23,-15,-7,11,-9,7,-9,32,-6,2,0,37, 
  /* [4][0][][] */ -99,7,2,-3,-3,-34,-3,3,45,-42,20,-24,-32,1,-20,-13,2,6,0,28,14,-28,16,4,-9,50,7,116,0,-2,-8,-28,-2,-127,-30,17,9,-6,0,-2,-51,-2,-12,18,-56,7,9,4, 
  /* [5][0][][] */ -28,27,17,6,-50,15,1,44,24,-2,19,-3,-9,-43,2,41,0,-91,20,6,50,-42,8,43,13,10,-83,-42,-41,-38,18,-3,-4,-69,-5,-72,65,5,-48,12,30,-41,-1,4,127,-7,-38,-3, 
  /* [6][0][][] */ -36,-25,-16,-8,43,-34,-1,-24,-17,-2,31,-12,-11,42,4,-62,1,5,-1,-36,-43,44,-8,-77,6,-14,-52,-69,27,46,-15,0,8,-69,-17,67,-72,-47,13,-52,-11,6,21,39,127,-42,39,13, 
  /* [7][0][][] */ 16,35,-72,23,-19,14,2,64,-1,-6,66,-34,7,-34,-9,-1,-20,-127,37,-41,63,42,16,-58,21,-18,25,1,-17,29,-10,5,4,39,3,-30,-9,-53,-37,-62,-13,-31,38,64,-27,-24,-6,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019124461337924004, 0.028077889233827591, 0.065586172044277191, 0.070068269968032837, 0.033209115266799927, 0.02194659411907196, 0.029427943751215935, 0.041352234780788422, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52872, -124, 9001, -670, 5332, -5762, 1466, 22852, 1427, 28582, -2143, 19610, -6258, -820, 24768, 4503, 666, 15544, 31465, 11767, -187, -294, 937, 11474, -8191, 22481, 46827, 32406, 3355, 450, -1585, 1198, 870, 15425, -6834, 14958, -10980, 22190, -22639, 125423, 22231, 21091, 10365, -1568, 17658, 2737, 1261, 236, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035871961154043674, 0.00032854906748980284, 0.00018095903214998543, 0.0003631988656707108, 0.00016023528587538749, 9.7549906058702618e-05, 0.00081432942533865571, 0.00015201255155261606, 0.0001544178812764585, 0.00016894172586034983, 9.1007743321824819e-05, 0.00021738497889600694, 0.00030081046861596406, 0.00031589996069669724, 9.9295815743971616e-05, 0.00034000739105977118, 0.00023952225456014276, 0.00025999222998507321, 7.6357260695658624e-05, 0.00018556896247901022, 0.00025225791614502668, 0.00024798087542876601, 0.00023620118736289442, 0.00018237392941955477, 0.00015591482224408537, 0.00016675599908921868, 0.00063479930395260453, 0.0001047620753524825, 0.00020297442097216845, 0.0017220674781128764, 9.6681607828941196e-05, 0.00019246881129220128, 0.0010507210390642285, 0.00018478596757631749, 0.00018763389380183071, 0.00016323437739629298, 0.00037900917232036591, 0.00011842338426504284, 0.00028244443819858134, 2.0042531104991212e-05, 0.00014564704906661063, 5.9763366152765229e-05, 0.00015626176900696009, 0.00018181552877649665, 0.00013723592564929277, 0.00013907623360864818, 0.00023904866247903556, 0.00011992915824521333, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,110,4,81,-1,28,15,8,9,7,-8,-9,-44,9,-2,8,-23,-114,-6,-22,127,-10,-3,7,-6,9,-5,5,15,99,20,29,38,-27,1,33,-3,2,18,-67,-8,-8,17,2,-6,-10, 127,10,15,-127,28,86,11,10,122,127,7,43,-51,-24,5,8,127,-56,-58,-57,-99,25,-110,14,16,71,-32,-84,23,21,9,-124,5,-61,127,10,-40,-47,-6,117,-78,-96,-30,3,-34,-8,-127,23, -32,-3,7,15,0,64,4,17,26,8,-13,31,-14,-3,16,4,-103,29,-3,77,-30,-12,-18,-7,-5,-59,-3,29,-17,5,5,-23,7,-23,16,-19,-1,46,41,-12,50,38,-16,11,-43,3,-2,-6, 
  /* [0][1][][] */ 126,7,1,-98,13,-26,35,-17,8,8,-12,53,-6,-1,18,-32,0,-49,-59,-85,11,-74,-125,-18,5,99,-14,-127,-8,33,11,-108,17,-53,-3,127,-3,57,-42,41,-62,-127,39,-87,-45,-13,-13,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,30,-127,-127,94,127,-127,127,-29,-41,127,-127,127,127,127,-79,127,127,127,-119,101,107, 53,4,48,-13,6,-61,44,18,-24,14,-104,-8,0,-41,127,4,63,-65,-69,85,15,-46,10,-33,1,6,-37,69,20,40,1,3,32,-44,9,66,-5,63,69,-10,-81,9,-85,-31,27,-15,-10,6, 
  /* [0][2][][] */ -52,-6,25,-16,6,35,-38,22,7,-24,12,32,7,-6,-37,18,4,22,-13,105,7,-31,-17,-12,-3,22,-1,52,-10,3,46,-31,-18,-43,-32,-39,-1,30,8,-22,9,-4,42,-37,-36,19,-11,18, 69,126,74,22,16,-20,123,35,17,-4,44,26,-5,-1,-89,25,-58,-56,-35,121,-36,50,11,20,32,-63,-41,30,77,1,127,22,85,-26,7,-35,-25,-18,-13,120,-27,-12,-40,45,20,-30,7,-127, -41,-5,6,-3,6,-5,-61,7,-19,-11,-40,-40,20,-10,-8,12,33,24,-8,-127,24,-9,4,-9,-6,10,-10,-54,-15,8,6,8,-20,87,-37,-22,-4,36,25,-61,4,8,-38,7,-44,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015245582908391953, 0.013963335193693638, 0.0076907584443688393, 0.015435951761901379, 0.0068099992349743843, 0.0041458709165453911, 0.034609001129865646, 0.0064605334773659706, 0.0065627600997686386, 0.0071800230070948601, 0.0038678289856761694, 0.0092388615012168884, 0.012784444727003574, 0.013425747863948345, 0.0042200721800327301, 0.014450314454734325, 0.010179695673286915, 0.011049670167267323, 0.0032451834995299578, 0.0078866807743906975, 0.010720961727201939, 0.010539187118411064, 0.010038550011813641, 0.0077508916147053242, 0.0066263796761631966, 0.0070871296338737011, 0.026978969573974609, 0.0044523882679641247, 0.0086264126002788544, 0.073187865316867828, 0.0041089681908488274, 0.008179924450814724, 0.044655643403530121, 0.0078534036874771118, 0.0079744402319192886, 0.0069374609738588333, 0.016107888892292976, 0.0050329938530921936, 0.012003888376057148, 0.00085180753376334906, 0.0061899996362626553, 0.0025399429723620415, 0.0066411248408257961, 0.0077271601185202599, 0.005832526832818985, 0.0059107397682964802, 0.010159567929804325, 0.0050969892181456089, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 65807, 6964, 6066, 7334, 1427, 10430, -1580, -224, 788, 1953, 2988, 310, 1659, -851, 700, -1841, 4351, 10541, -241, 28002, 3148, 2929, 6675, -442, 3296, 4987, 28902, 9751, -87, -2280, 67, 2088, -2158, 9587, 2389, 6189, 6525, 4389, 23123, 1732, -919, 2366, 888, 3829, 4302, 2174, -1210, 2353, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.5821586758829653e-05, 0.00032855040626600385, 0.00025578279746696353, 0.0004384042986202985, 0.0015695384936407208, 0.00048214526032097638, 0.0012097647413611412, 0.0012404941953718662, 0.00073213968425989151, 0.0007015861920081079, 0.00076056516263633966, 0.00051637599244713783, 0.00060385547112673521, 0.00053781503811478615, 0.00064612017013132572, 0.0019715684466063976, 0.00037629384314641356, 0.00040599837666377425, 0.002089198213070631, 9.6933879831340164e-05, 0.00037847788189537823, 0.00034330043126828969, 0.00059730227803811431, 0.0011251922696828842, 0.00037149735726416111, 0.00023894877813290805, 0.00014133464719634503, 0.00037777470424771309, 0.00091208697995170951, 0.0011481590336188674, 0.00061215361347422004, 0.00039217557059600949, 0.00091306795366108418, 0.00022942894429434091, 0.00043688819278031588, 0.00030305283144116402, 0.00056354550179094076, 0.00031142652733251452, 0.00010268674668623134, 0.0026328477542847395, 0.00065118353813886642, 0.0011654800036922097, 0.00053868320537731051, 0.00039376373752020299, 0.00027327804127708077, 0.00049810652853921056, 0.00093348231166601181, 0.001138086779974401, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 94,44,-4,-1,127,17,-49,-37, 
  /* [1][0][][] */ -4,-4,2,127,6,-3,9,13, 
  /* [2][0][][] */ 26,-127,-14,46,-11,-65,78,16, 
  /* [3][0][][] */ 127,-34,-4,17,-12,-29,36,5, 
  /* [4][0][][] */ 1,-45,127,-12,-3,-46,7,-79, 
  /* [5][0][][] */ 77,6,1,1,127,6,-12,1, 
  /* [6][0][][] */ -19,82,-12,127,19,55,-60,-56, 
  /* [7][0][][] */ -7,127,-2,-3,-1,-9,9,-5, 
  /* [8][0][][] */ 127,41,-6,12,-42,-21,7,-43, 
  /* [9][0][][] */ -127,20,11,16,53,16,-11,-1, 
  /* [10][0][][] */ -82,-22,24,127,40,28,-25,13, 
  /* [11][0][][] */ -127,-2,19,-62,35,9,-24,-39, 
  /* [12][0][][] */ 127,28,3,24,-51,-19,-2,-45, 
  /* [13][0][][] */ -11,89,-127,-15,0,115,-77,78, 
  /* [14][0][][] */ -55,-34,-10,127,17,16,-7,-27, 
  /* [15][0][][] */ -5,127,2,-4,-2,-13,8,-47, 
  /* [16][0][][] */ -12,-127,-25,4,-1,-106,110,-21, 
  /* [17][0][][] */ 20,127,0,-13,4,74,-77,-21, 
  /* [18][0][][] */ -5,47,-127,1,3,57,-29,62, 
  /* [19][0][][] */ -78,13,-1,-9,-127,0,14,37, 
  /* [20][0][][] */ -127,-26,-6,0,61,-29,32,8, 
  /* [21][0][][] */ -69,-7,0,2,-127,-7,17,13, 
  /* [22][0][][] */ -127,-26,-9,-2,76,-24,32,58, 
  /* [23][0][][] */ -23,-19,-3,-9,-7,76,-127,-93, 
  /* [24][0][][] */ -9,39,-127,0,10,49,-16,79, 
  /* [25][0][][] */ 102,-37,-13,127,-71,-17,10,-43, 
  /* [26][0][][] */ 0,-20,-7,-3,-13,125,127,-32, 
  /* [27][0][][] */ 64,-13,-5,13,127,33,38,-19, 
  /* [28][0][][] */ 3,119,-71,-1,4,78,-26,127, 
  /* [29][0][][] */ -4,13,-6,-3,0,84,-127,-86, 
  /* [30][0][][] */ 3,-5,1,-127,-7,-3,0,-11, 
  /* [31][0][][] */ -61,5,10,8,-127,14,23,-3, 
  /* [32][0][][] */ -20,43,9,-127,-6,38,-94,-123, 
  /* [33][0][][] */ -66,-5,0,1,-127,46,41,-3, 
  /* [34][0][][] */ -127,62,13,22,35,-22,23,23, 
  /* [35][0][][] */ -9,127,-10,-3,6,-84,69,-36, 
  /* [36][0][][] */ -5,49,12,-28,-10,97,-127,-27, 
  /* [37][0][][] */ 38,-81,-16,26,29,-127,116,-9, 
  /* [38][0][][] */ 29,-127,12,6,3,61,-65,73, 
  /* [39][0][][] */ 3,-127,-14,-5,-13,-6,-54,-107, 
  /* [40][0][][] */ 124,56,-6,-16,-75,101,-127,-127, 
  /* [41][0][][] */ 13,-119,16,-6,4,71,-60,127, 
  /* [42][0][][] */ 40,-4,-5,-127,-42,-3,-2,-28, 
  /* [43][0][][] */ -110,-43,9,-127,64,19,-19,-15, 
  /* [44][0][][] */ 10,-26,-14,16,-31,88,127,-7, 
  /* [45][0][][] */ -127,-61,5,1,18,0,23,-1, 
  /* [46][0][][] */ 20,94,127,5,-11,11,7,23, 
  /* [47][0][][] */ -5,-2,8,127,14,5,8,8, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00014619799912907183, 0.0007297516567632556, 0.00056812568800523877, 0.0009737509535625577, 0.0034861420281231403, 0.0010709051275625825, 0.0026870393194258213, 0.0027552933897823095, 0.0016261740820482373, 0.0015583109343424439, 0.0016893106512725353, 0.0011469358578324318, 0.0013412388507276773, 0.0011945547303184867, 0.0014351139543578029, 0.0043791010975837708, 0.00083579582860693336, 0.00090177333913743496, 0.0046403715386986732, 0.00021530230878852308, 0.00084064685506746173, 0.00076251331483945251, 0.0013266833266243339, 0.0024991931859403849, 0.00082514225505292416, 0.00053073524031788111, 0.00031392197706736624, 0.00083908502710983157, 0.0020258596632629633, 0.0025502052158117294, 0.0013596699573099613, 0.00087107118451967835, 0.0020280384924262762, 0.00050959049258381128, 0.00097038352396339178, 0.00067311839666217566, 0.0012517053401097655, 0.00069171743234619498, 0.00022808015637565404, 0.0058478852733969688, 0.0014463603729382157, 0.0025886774528771639, 0.001196483033709228, 0.00087459868518635631, 0.00060698483139276505, 0.001106357085518539, 0.0020733813289552927, 0.0025278336834162474, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -3887, -24654, 24877, 22257, 3275, 783, 38160, 10022, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0014489977620542049, 0.00075174635276198387, 0.0010596141219139099, 0.001278217532671988, 0.0011653727851808071, 0.0013013703282922506, 0.00087535468628630042, 0.00067263055825605989, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -14,-3,14,-96,12,30,4,6,5,3,6,-8,102,0,-1,7,0,-10,-4,-1,83,-6,-2,3,32,37,13,11,7,5,5,-127,12,8,0,-2,-27,0,-16,33,8,-27,-11,2,-1,-3,5,3, 
  /* [1][0][][] */ -38,-5,0,-5,45,32,-32,76,19,6,-28,-17,11,0,18,37,0,44,17,-46,-1,22,127,20,-28,-3,55,0,20,-4,16,-13,14,-8,-6,-18,6,-51,12,4,-8,-8,-78,-8,-33,4,-49,-92, 
  /* [2][0][][] */ -63,18,4,16,46,-12,30,26,-8,56,7,-7,-1,0,8,53,0,13,-127,26,-3,13,5,-15,-33,1,35,9,8,31,22,2,5,-2,-14,-10,10,11,7,-3,35,-7,-29,-1,23,-57,23,15, 
  /* [3][0][][] */ 3,0,0,7,-7,25,1,-6,65,15,-2,-4,26,0,-31,-4,0,-2,-9,2,-4,-3,4,-19,-12,-6,-13,-2,-8,-2,0,-7,-46,45,-52,-1,5,1,1,-127,3,4,4,-52,1,-3,4,8, 
  /* [4][0][][] */ 0,-3,83,35,3,-18,-2,-3,2,-4,-1,-8,-80,0,-12,3,0,9,6,1,68,4,1,-5,-16,30,-5,45,-5,-2,1,98,5,3,-1,-3,15,-10,-12,-16,-4,-127,2,4,1,-2,-1,-2, 
  /* [5][0][][] */ -7,43,2,-7,3,45,23,13,-19,29,5,55,27,0,-127,-3,0,15,-38,19,-12,9,-12,40,-22,-4,27,-3,-10,21,23,-16,51,28,-38,-6,3,17,-45,18,24,-9,-11,29,21,58,21,22, 
  /* [6][0][][] */ -22,-57,-1,6,39,-51,-18,6,28,-28,-13,84,0,0,-127,42,0,-10,53,-18,-2,3,22,-32,30,1,-6,-13,46,-11,-10,-1,93,-34,27,5,-3,-7,-71,-23,-13,-15,-2,-26,-21,-81,-16,-22, 
  /* [7][0][][] */ -118,-27,-8,7,127,22,68,25,13,4,30,-32,-26,0,88,105,0,10,0,64,-9,-4,-32,45,20,10,47,8,52,65,58,-6,-8,-17,-22,-22,5,27,27,36,77,0,-24,-10,64,4,68,80, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.061582405120134354, 0.031949218362569809, 0.045033600181341171, 0.05432424321770668, 0.049528341740369797, 0.055308237671852112, 0.03720257431268692, 0.028586799278855324, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 64684, 57741, 62530, 42466, 195, 14180, 2754, 29527, 21131, 26887, 28055, 861, -46480, -127, 32642, 1139, -204, 40581, 3566, 1115, -14136, -1843, 48766, 39095, -24353, 36909, 43192, 21366, -2473, 14910, -7677, -51034, 10078, 105161, 21809, 1939, 53667, -332, 163674, -26251, 14220, -27232, 2544, 112399, -1386, 83645, 2009, -23057, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.3244125309865922e-05, 6.8867033405695111e-05, 0.00015557125152554363, 0.00011228190851397812, 0.00024932340602390468, 0.0001949243014678359, 0.00013291386130731553, 5.430060627986677e-05, 0.0001073986422852613, 2.8637745344894938e-05, 6.7842578573618084e-05, 2.3793520085746422e-05, 0.00017661610036157072, 0.005541567225009203, 7.948037819005549e-05, 0.00022802232706453651, 0.0027484172023832798, 1.5568180970149115e-05, 7.0946560299489647e-05, 0.0001978319778572768, 9.9849152320530266e-05, 0.00010327162453904748, 0.00011893749615410343, 3.191826181137003e-05, 0.00010410413960926235, 7.5315583671908826e-05, 3.1922641937853768e-05, 4.029400588478893e-05, 0.00024639128241688013, 5.329865962266922e-05, 5.0652826757868752e-05, 0.00020131152996327728, 0.00023788295220583677, 8.6920490502961911e-06, 0.00011505941802170128, 0.00016410398529842496, 1.6483314539073035e-05, 0.00047126272693276405, 2.8742748327204026e-05, 9.0998975792899728e-05, 6.3817729824222624e-05, 0.00018468414782546461, 0.00011249860835960135, 8.345669812115375e-06, 0.00017343353829346597, 7.0922134909778833e-05, 0.0002021259133471176, 0.00010040652705356479, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-7,-16,7,-40,-79,-68,-26,-51,8,65,33,-71,113,-43,-113,-85,37,-6,-1,-74,-110,-79,-34,-126,-63,-21,70,15,95,25,-127,-90,-7,53,18,48,-127,78,-77,-14,106,-109,-3,-34,-87,107, 76,12,-28,-28,58,-127,-127,-80,61,-76,-116,108,37,-82,-1,62,-52,-113,58,8,11,-111,-127,-70,-4,-127,-120,-40,-56,21,-56,54,29,-127,64,85,13,73,-93,127,-127,6,125,-127,1,-22,-127,94, -32,43,7,-4,-64,-109,-59,-17,87,-8,-127,38,7,-71,-101,-11,-127,-25,27,12,-15,-76,-36,-24,-10,-30,-58,-11,-11,18,-23,9,108,-87,70,31,14,36,-4,16,-79,3,7,-79,-17,6,-56,15, 
  /* [0][1][][] */ -87,-127,-44,-44,-11,54,99,-106,-26,-107,-20,112,90,-64,27,-97,-121,-93,89,-77,42,-88,-103,-127,43,-121,-77,-37,127,-60,127,84,-43,-84,-14,83,-35,-77,-107,90,42,59,104,-109,-91,-118,81,119, 127,-84,-127,-127,127,40,94,-127,100,-127,-110,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-119,127,-101,-127,-127,-122,-127,-71,127,29,-111,127,127,-68,-127,-97,89,61,127,127,-116,-113,-127,124,127, -53,30,-61,-85,-120,-24,31,-38,127,-21,-76,36,54,-70,-25,-43,-37,-29,54,-71,56,-81,-38,-23,48,-6,-46,-59,15,-89,-35,19,30,-99,118,23,-36,-63,2,-14,36,53,11,-74,-58,-37,65,35, 
  /* [0][2][][] */ -62,-107,-34,-33,-1,35,-5,-35,-37,-58,-16,61,77,-127,-127,-64,-43,-19,63,76,51,-35,-13,-60,32,-56,-11,-59,75,29,77,62,109,-25,-38,-10,-95,35,-17,31,10,38,14,-57,96,-78,3,30, 87,-75,-89,-85,81,19,7,-47,48,-70,-32,56,84,-26,15,92,-24,-32,77,118,80,-54,-18,-57,92,-69,-19,-101,-52,40,-45,111,-18,-49,67,6,-127,51,-15,-2,10,33,15,-66,127,-100,-12,39, -29,29,-42,-37,-80,-18,22,-12,59,-6,-12,33,31,-43,110,-29,-93,-5,31,59,73,-29,-1,-1,42,2,-4,-65,-14,29,-20,40,-91,-43,66,3,-20,21,27,-39,7,36,-5,-14,63,-34,-4,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039628753438591957, 0.002926848828792572, 0.0066117779351770878, 0.0047719809226691723, 0.010596244595944881, 0.0082842828705906868, 0.005648838821798563, 0.0023077756632119417, 0.0045644422061741352, 0.0012171041453257203, 0.0028833094984292984, 0.0010112245799973607, 0.0075061842799186707, 0.23551659286022186, 0.0033779160585254431, 0.0096909487619996071, 0.1168077290058136, 0.0006616477039642632, 0.0030152287799865007, 0.00840785913169384, 0.0042435890063643456, 0.0043890438973903656, 0.0050548436120152473, 0.0013565260451287031, 0.0044244257733225822, 0.00320091238245368, 0.0013567121932283044, 0.0017124952282756567, 0.010471629910171032, 0.0022651930339634418, 0.002152745146304369, 0.0085557401180267334, 0.01011002529412508, 0.00036941206781193614, 0.0048900251276791096, 0.0069744191132485867, 0.00070054084062576294, 0.020028665661811829, 0.001221566810272634, 0.0038674564566463232, 0.0027122534811496735, 0.0078490758314728737, 0.0047811907716095448, 0.0003546909720171243, 0.0073709250427782536, 0.0030141905881464481, 0.0085903508588671684, 0.0042672771960496902, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3445, 48, 9256, 5162, 5378, 6155, 8045, -30, 6, -302, 2019, 383, 11653, -68249248, 2462, 11614, -55094332, -89, -450, 7873, 3238, -13, -27, 376, 3193, -673, 64, 640, 4166, 1484, 2112, 13243, 3640, 207, 179, -1445, 303, 3505, -112, 7364, 1891, 11715, -243, -56, 11601, 117, 7036, 4410, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00060391559964045882, 0.00074307527393102646, 0.00034351577050983906, 0.00035958937951363623, 0.00037211147719062865, 0.00034200202208012342, 0.00047430221457034349, 0.0017109169857576489, 0.0006003787275403738, 0.002544074784964323, 0.00072083063423633575, 0.0022409951779991388, 0.00018977698346134275, 2.3763435663681776e-09, 0.0010675577213987708, 0.0002840499219018966, 2.3763435663681776e-09, 0.0079960310831665993, 0.00044432911090552807, 0.00049204449169337749, 0.00032479481888003647, 0.0054542580619454384, 0.00039305165410041809, 0.0016882999334484339, 0.0011790521675720811, 0.00079960620496422052, 0.0026653427630662918, 0.0019564712420105934, 0.0002695877046789974, 0.0019810085650533438, 0.0013894428266212344, 0.0001776568969944492, 0.00020696315914392471, 0.015838440507650375, 0.0007533396128565073, 0.00082652480341494083, 0.0049929060041904449, 0.00036702622310258448, 0.0031418930739164352, 0.00047048545093275607, 0.001491983188316226, 0.00019020137551706284, 0.0006637327023781836, 0.015741433948278427, 0.00043215116602368653, 0.00060456764185801148, 0.00039734816527925432, 0.00020581301942002028, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 13,-127,60,-53,32,-21,-58,14, 
  /* [1][0][][] */ 73,62,-27,-92,17,-17,-85,127, 
  /* [2][0][][] */ 32,8,-39,127,51,125,49,93, 
  /* [3][0][][] */ 81,71,-84,127,-91,-12,-8,11, 
  /* [4][0][][] */ -36,-95,77,16,9,28,-39,-127, 
  /* [5][0][][] */ 20,-3,-33,37,-1,-24,43,127, 
  /* [6][0][][] */ 60,-21,-127,-108,103,23,52,-50, 
  /* [7][0][][] */ 127,18,16,-18,36,-7,80,-55, 
  /* [8][0][][] */ 22,-103,6,112,1,13,-6,-127, 
  /* [9][0][][] */ 108,-127,7,5,-9,6,-120,94, 
  /* [10][0][][] */ -127,-46,-124,7,-22,15,-93,60, 
  /* [11][0][][] */ -20,-43,-7,-106,-127,-28,48,-14, 
  /* [12][0][][] */ 16,7,-40,76,-69,-28,58,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-31,-4,8,38,127,49,39, 
  /* [15][0][][] */ 36,6,18,-127,61,44,-47,72, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 13,26,127,25,-23,-12,28,33, 
  /* [18][0][][] */ 95,-127,22,38,-2,17,-127,6, 
  /* [19][0][][] */ -127,-13,29,67,-61,-47,-89,58, 
  /* [20][0][][] */ 36,27,-41,110,-29,-127,1,60, 
  /* [21][0][][] */ 58,24,127,4,-10,-10,66,11, 
  /* [22][0][][] */ -73,-19,-127,6,10,4,-98,8, 
  /* [23][0][][] */ -100,122,-20,-19,6,-14,127,-78, 
  /* [24][0][][] */ 10,-52,-52,83,-7,-63,93,127, 
  /* [25][0][][] */ 12,40,28,24,127,111,-75,-52, 
  /* [26][0][][] */ -82,-30,-127,1,9,18,-93,1, 
  /* [27][0][][] */ -5,-28,-32,6,-39,127,71,48, 
  /* [28][0][][] */ 2,-22,-25,47,30,127,58,69, 
  /* [29][0][][] */ 89,31,127,-1,-16,-12,84,-9, 
  /* [30][0][][] */ -75,127,-19,-31,13,-7,94,-45, 
  /* [31][0][][] */ -42,-102,-22,7,30,-74,127,118, 
  /* [32][0][][] */ 9,0,-56,122,-13,106,94,127, 
  /* [33][0][][] */ 0,62,-13,-111,9,-11,-9,127, 
  /* [34][0][][] */ -18,84,-10,-92,34,-17,12,127, 
  /* [35][0][][] */ 127,2,-20,-33,25,19,80,-33, 
  /* [36][0][][] */ -127,-4,33,77,-49,1,-119,93, 
  /* [37][0][][] */ -11,-25,-13,29,26,127,49,58, 
  /* [38][0][][] */ 9,17,1,75,127,-5,-23,33, 
  /* [39][0][][] */ 0,28,33,-127,25,-3,-37,113, 
  /* [40][0][][] */ 96,25,127,3,-12,-1,88,-8, 
  /* [41][0][][] */ -3,-28,-31,86,53,127,73,102, 
  /* [42][0][][] */ -86,-2,127,20,-39,15,-30,65, 
  /* [43][0][][] */ -11,-59,6,103,-18,1,17,-127, 
  /* [44][0][][] */ 43,-4,-70,-127,76,-29,-9,-109, 
  /* [45][0][][] */ -78,127,4,-43,12,-5,73,-54, 
  /* [46][0][][] */ -127,-19,42,18,-33,30,-79,35, 
  /* [47][0][][] */ 115,30,127,7,38,-28,126,-14, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010005373042076826, 0.0012310901656746864, 0.00056911987485364079, 0.00059574982151389122, 0.00061649578856304288, 0.00056661193957552314, 0.00078580033732578158, 0.002834562212228775, 0.00099467765539884567, 0.0042148968204855919, 0.00119423633441329, 0.0037127693649381399, 0.00031441307510249317, 3.937008052901092e-09, 0.0017686765640974045, 0.00047059977077879012, 3.937008052901092e-09, 0.01324742753058672, 0.00073614239227026701, 0.00081519485684111714, 0.00053810392273589969, 0.0090363435447216034, 0.00065118842758238316, 0.0027970913797616959, 0.0019533950835466385, 0.0013247478054836392, 0.0044158073142170906, 0.0032413841690868139, 0.00044663948938250542, 0.0032820363994687796, 0.0023019597865641117, 0.0002943331201095134, 0.00034288628376089036, 0.026240341365337372, 0.0012480956502258778, 0.0013693452347069979, 0.0082719987258315086, 0.00060807081172242761, 0.0052053323015570641, 0.00077947688987478614, 0.0024718435015529394, 0.0003151161945424974, 0.0010996393393725157, 0.026079624891281128, 0.00071596656925976276, 0.0010016176383942366, 0.000658306700643152, 0.00034098076866939664, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -900, -42187, -7064, -13806, -30122, -2295, -24997, -26245, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021212887950241566, 0.0023865399416536093, 0.0024027111940085888, 0.0013240289408713579, 0.0012458836426958442, 0.0023324312642216682, 0.0018777981167659163, 0.0011996147222816944, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,5,-1,122,2,1,0,-1,-127,-90,-5,0,115,-3,0, 
  /* [1][0][][] */ 0,-28,0,84,71,14,23,4,0,-7,127,-44,0,29,-12,0, 
  /* [2][0][][] */ 0,-1,-2,-12,-61,3,9,2,-1,4,-15,0,0,127,-7,0, 
  /* [3][0][][] */ 0,-10,-16,-127,81,27,68,18,-1,61,-1,42,0,0,16,0, 
  /* [4][0][][] */ 0,52,-32,38,-58,27,127,8,1,-64,18,-11,0,-9,14,0, 
  /* [5][0][][] */ 0,-15,-11,-1,-23,-24,-13,16,0,10,-4,-42,0,-4,127,0, 
  /* [6][0][][] */ 0,16,-5,2,52,-19,-21,-7,0,-103,110,64,0,127,59,0, 
  /* [7][0][][] */ 0,13,-15,127,7,-1,16,9,1,65,-52,76,0,-9,46,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.090154774487018585, 0.10142794996500015, 0.10211522132158279, 0.056271228939294815, 0.052950054407119751, 0.099128328263759613, 0.079806417226791382, 0.050983622670173645, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 9097, 66923, 9268, 9070, 10610, 12882, 5923, -3173, 4121, 27359, 15338, -445, 24730, 9281, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.0002868511073756963, 6.0175876569701359e-05, 0.00037420151056721807, 0.00019149026775266975, 0.00031210755696520209, 0.00040384882595390081, 0.00065909978002309799, 2.8823311367887072e-05, 0.00041715701809152961, 0.00023303380294237286, 0.0008506398880854249, 0.00072724185883998871, 0.00028192231548018754, 0.00022057905152905732, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,91,-2,-72,66,-95,78,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-42,-57,-14,-8,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,33,-26,34,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,38,-39,52,-77,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,39,-34,21,-126,-13,0,84,-58,0,-28,-111, 21,-7,19,0,4,14,9,23,-116,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.012191171757876873, 0.0025574746541678905, 0.015903564170002937, 0.0081383362412452698, 0.013264570385217667, 0.017163574695587158, 0.028011739253997803, 0.001224990701302886, 0.017729172483086586, 0.0099039366468787193, 0.036152195185422897, 0.030907778069376945, 0.011981697753071785, 0.0093746092170476913, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 7139, -34828, 21195, 197920, 2303, 17641, 253, 195572, 18720, 8063, 519533, -1073741824, 15687, 21875, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00027429903275333345, 0.00045677553862333298, 6.3047671574167907e-05, 1.7474920241511427e-05, 0.00029611040372401476, 0.00016733347729314119, 0.0004358339065220207, 6.4444998315593693e-06, 0.00010974160250043496, 0.00035266505437903106, 1.0980664228554815e-05, 1.1533876076441629e-09, 0.00025131276925094426, 0.00011036378418793902, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 45,-6,26, -6,-26,10, -127,-121,-73, 
  /* [1][1][][] */ 2,-7,-5, -22,0,-10, 2,-34,0, 
  /* [1][2][][] */ -1,18,-5, -3,9,-6, 42,-16,8, 
  /* [2][0][][] */ 31,-8,-10, 76,116,-6, 33,-52,-3, 
  /* [2][1][][] */ 7,9,-7, 65,127,-39, 11,-16,-18, 
  /* [2][2][][] */ 50,-75,16, 75,-52,-28, 25,-69,5, 
  /* [3][0][][] */ 6,29,0, 37,95,21, 3,7,-2, 
  /* [3][1][][] */ 21,32,4, 68,127,27, -11,-17,6, 
  /* [3][2][][] */ 6,1,2, 28,29,8, 0,-1,3, 
  /* [4][0][][] */ 33,68,-1, 6,75,-4, -24,1,5, 
  /* [4][1][][] */ 38,89,60, 23,121,41, 30,55,-4, 
  /* [4][2][][] */ 56,80,44, 53,127,26, -14,29,34, 
  /* [5][0][][] */ 7,2,-119, -5,3,-103, -6,31,-30, 
  /* [5][1][][] */ 3,-46,-127, -2,-47,-113, -1,13,-24, 
  /* [5][2][][] */ -3,8,-12, 3,-2,-5, 1,14,-11, 
  /* [6][0][][] */ 27,-62,38, 48,-86,44, 6,-21,9, 
  /* [6][1][][] */ 39,-95,66, 66,-127,77, 5,-29,18, 
  /* [6][2][][] */ 23,-32,18, 17,-41,31, -14,8,0, 
  /* [7][0][][] */ -28,18,6, -107,-37,1, -28,20,-1, 
  /* [7][1][][] */ -15,-7,3, -127,-89,-6, -10,-7,4, 
  /* [7][2][][] */ -23,31,-6, -15,11,1, -25,22,-2, 
  /* [8][0][][] */ -90,-91,-98, -93,-93,-101, -127,-124,-125, 
  /* [8][1][][] */ -81,-86,-96, -85,-89,-99, -120,-120,-123, 
  /* [8][2][][] */ -8,-15,-39, -10,-17,-41, -70,-75,-88, 
  /* [9][0][][] */ -20,0,4, -11,-3,-4, 4,6,-15, 
  /* [9][1][][] */ 92,116,-13, 68,127,11, -11,18,22, 
  /* [9][2][][] */ -34,-32,10, -6,-39,-6, 3,-4,-26, 
  /* [10][0][][] */ -25,-83,-17, 34,95,21, -9,-13,-1, 
  /* [10][1][][] */ -59,-103,-13, 79,127,15, -17,-26,1, 
  /* [10][2][][] */ -31,-19,3, 36,23,-10, -8,-1,8, 
  /* [11][0][][] */ -14,-27,-3, 9,-45,3, 9,-104,-56, 
  /* [11][1][][] */ -49,-47,-24, -38,-68,-43, -16,-63,-58, 
  /* [11][2][][] */ -11,-44,-85, 118,127,62, -43,11,-51, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-18, -62,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,15,10, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 47,-4,-35, 79,-26,-50, 31,-10,-21, 
  /* [14][1][][] */ 89,-17,-72, 127,-40,-88, 58,-19,-38, 
  /* [14][2][][] */ 56,-9,-44, 76,-19,-51, 27,-5,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.069946251809597015, 0.11647775769233704, 0.016077155247330666, 0.0044561042450368404, 0.075508147478103638, 0.042670033872127533, 0.11113763600587845, 0.0016433473210781813, 0.027984106913208961, 0.089929580688476562, 0.0028000692836940289, 2.9411381774480105e-07, 0.064084753394126892, 0.028142763301730156, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.60359126329421997, } };
const TfArray<1, int> quant46_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,64,64,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,65,65,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.4502221941947937, } };
const TfArray<1, int> quant50_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45077663660049438, } };
const TfArray<1, int> quant53_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.58437669277191162, } };
const TfArray<1, int> quant54_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.31817787885665894, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19428203999996185, } };
const TfArray<1, int> quant61_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.33885636925697327, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.20034776628017426, } };
const TfArray<1, int> quant65_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.37727537751197815, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.066980354487895966, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,16,16,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10269081592559814, } };
const TfArray<1, int> quant69_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,16,16,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension44, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension46, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension47, 196608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 202800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension49, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 98304), (TfLiteIntArray*)&g0::tensor_dimension50, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension51, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension53, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension55, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension57, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64560), (TfLiteIntArray*)&g0::tensor_dimension58, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension59, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension61, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension62, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension63, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28672), (TfLiteIntArray*)&g0::tensor_dimension65, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension66, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension68, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1024), (TfLiteIntArray*)&g0::tensor_dimension69, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
