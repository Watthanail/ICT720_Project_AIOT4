/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 09.03.2024 06:54:15

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238608;
#else
constexpr int kTensorArenaSize = 237584;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 31333, -48204, -49558, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00016387594223488122, 0.00011092185013694689, 0.00012065927876392379, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 42,61,101,-67,-48,21,32,11,-9,32,7,-5,-8,-68,88,26,-21,78,85,127,27,-11,22,-57,-91,80,-49,11,112,1,-48,15, 
  /* [1][0][][] */ 53,-29,-68,33,0,123,-41,2,124,-37,5,-63,-57,110,45,-42,94,-55,-9,-127,-108,32,118,78,29,30,24,-8,-110,-41,18,-18, 
  /* [2][0][][] */ -63,75,-73,77,82,-35,-50,107,88,41,117,3,-83,-65,79,109,-65,-75,19,-127,66,109,-34,-72,86,-39,-23,-98,-50,-61,88,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0051591750234365463, 0.0034920638427138329, 0.0037986193783581257, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 661, 363, 138, 332, 344, 67, 1312, 448, 370, -620, 409, -447, -444, 271, 505, 375, 308, 349, 712, 816, -29, 486, 402, 45, 417, -298, 73, -443, 1614, -768, 441, -494, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.7327288232045248e-05, 5.923747448832728e-05, 6.2811828684061766e-05, 6.638283230131492e-05, 5.8838708355324343e-05, 5.4731732234358788e-05, 6.6641274315770715e-05, 5.890995089430362e-05, 6.4477608248125762e-05, 5.6778779253363609e-05, 6.5185304265469313e-05, 5.341260475688614e-05, 4.9341728299623355e-05, 6.0194059187779203e-05, 5.7446086429990828e-05, 5.5838361731730402e-05, 5.8510671806288883e-05, 5.2703820983879268e-05, 5.7821514928946272e-05, 6.8861285399179906e-05, 5.0604234274942428e-05, 5.2029427024535835e-05, 6.4122861658688635e-05, 5.9927613619947806e-05, 5.6285094615304843e-05, 5.6865246733650565e-05, 6.4092862885445356e-05, 5.4311327403411269e-05, 7.1546703111380339e-05, 5.6341028539463878e-05, 6.1953956901561469e-05, 5.3877061873208731e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ 3,-57,120,6,108,-4,-85,-86,54,-78,-83,36,70,-25,-56,59,-50,-5,-75,-47,-46,-103,32,106,-91,-6,56,-32,127,-22,-8,-43,86,-42,-84,60,-94,-54,-92,49,83,-62,-82,111,64,-110,107,-8, 
  /* [1][0][][] */ -69,54,-56,13,-29,52,-8,13,80,-85,-127,67,67,-46,34,38,102,-40,44,116,-38,-8,23,28,13,22,-51,105,-3,15,26,-59,67,99,-10,18,59,45,5,-63,-88,13,-17,-123,-29,49,-24,-40, 
  /* [2][0][][] */ 34,38,-51,84,-19,-58,127,83,-89,77,-19,92,79,22,77,-102,-49,-35,28,50,-86,0,107,31,-20,54,116,5,-58,83,112,80,-61,-21,-49,-86,-72,80,93,-41,-95,-64,12,30,-69,98,-13,-59, 
  /* [3][0][][] */ 80,20,39,-11,-43,53,-127,44,63,29,53,17,90,62,61,13,88,104,-38,17,110,-68,-47,-78,-15,-66,-84,106,37,-76,48,21,-28,-10,-5,2,-68,-1,45,66,-10,-64,-72,-15,72,39,-24,-58, 
  /* [4][0][][] */ 61,119,6,59,-10,-22,-30,26,78,94,-39,51,38,-60,-8,-71,-23,18,-50,20,115,-83,79,38,-26,23,26,-35,-53,39,-109,-35,83,124,17,-84,-37,6,-90,70,-49,-46,-61,-127,41,115,46,62, 
  /* [5][0][][] */ 114,-88,68,81,48,-99,-2,56,118,-113,-36,-47,31,62,20,43,58,84,-85,100,43,49,22,-52,-127,-38,-44,-79,55,-1,-11,-93,-26,15,-75,29,-119,-17,42,42,-89,-46,52,66,-30,29,41,-49, 
  /* [6][0][][] */ 34,-7,122,92,-41,-25,61,85,3,-35,43,-60,93,104,122,-56,67,6,13,108,-41,-52,127,70,-28,-72,67,-31,1,-34,113,-40,-56,-79,16,-64,26,64,-61,89,104,79,35,41,-56,103,-43,-1, 
  /* [7][0][][] */ 120,87,-25,-29,-52,109,-75,11,127,16,-117,17,63,-112,48,61,53,34,7,113,64,34,-4,92,-68,117,10,69,-77,107,-69,47,41,40,64,100,-88,91,4,-4,85,-60,86,21,57,14,106,-93, 
  /* [8][0][][] */ 30,38,-30,-70,63,36,-105,-8,22,42,35,99,14,-70,-73,-51,-53,102,-50,20,40,-20,76,105,-88,101,9,80,-53,14,-111,112,94,-11,42,8,105,21,-8,84,82,97,-85,-127,1,-12,-9,100, 
  /* [9][0][][] */ -10,1,95,34,63,-114,-49,-127,30,34,-25,38,-41,-75,-107,-31,-7,-12,-106,-75,-10,94,-116,-113,92,-21,-12,9,-22,-65,-78,80,45,-16,24,-19,-87,7,-46,-57,32,-78,44,-93,63,7,-106,42, 
  /* [10][0][][] */ -42,89,86,-47,-1,90,37,34,48,37,-6,-58,94,40,-24,4,-27,83,-75,-46,-3,23,47,-49,22,65,-127,-78,-48,73,-123,-56,88,99,98,65,-26,13,-15,48,-36,107,-87,-72,-72,-32,6,-41, 
  /* [11][0][][] */ 90,7,-25,97,105,29,69,19,96,82,-90,91,-21,-56,23,-82,-67,-127,56,31,17,69,11,-124,-118,-119,-17,58,67,-12,28,-34,-105,-89,47,33,-74,55,-40,-85,-43,93,-87,12,-54,-73,-105,-101, 
  /* [12][0][][] */ 0,74,-71,-7,84,0,-21,27,-95,55,-27,2,-60,33,48,-97,-119,-47,-63,-95,17,-18,8,99,-85,-61,113,-121,93,7,-25,115,-106,-90,-58,10,-13,-96,-28,31,114,33,-127,-48,-34,-101,-51,120, 
  /* [13][0][][] */ 127,-67,98,82,99,123,56,66,81,-85,23,8,94,29,45,-27,-103,-35,-70,25,76,-26,121,-33,-42,57,-19,35,-69,-97,61,49,51,113,-19,47,-74,-1,21,92,-34,78,-41,-6,-28,32,7,-23, 
  /* [14][0][][] */ -37,-73,95,75,91,-11,-64,-94,-57,-21,59,92,-15,-112,-86,-76,-43,-35,19,31,-25,34,5,72,-98,-43,-65,50,-109,-109,-120,54,118,-1,-28,16,102,127,45,-81,7,-92,43,57,77,-90,73,-69, 
  /* [15][0][][] */ 7,1,-18,90,102,-102,13,-83,70,11,-100,-16,115,-13,-75,-127,87,16,-81,33,59,19,61,115,59,78,25,105,6,69,3,-94,24,17,-58,-8,-52,103,127,-59,-8,120,-42,-58,32,-54,-32,-64, 
  /* [16][0][][] */ -34,-14,102,-60,55,127,-59,48,60,55,-83,103,2,-78,-62,-37,107,103,62,62,120,75,-20,59,-13,72,-83,78,-78,-1,32,30,-83,92,55,69,-28,77,-47,-33,46,-32,76,72,71,102,104,-6, 
  /* [17][0][][] */ 13,-115,34,87,-53,-106,-34,-95,51,-98,127,29,104,107,-95,103,47,28,127,116,-113,25,40,-23,25,49,-33,15,123,-9,8,76,-53,-30,78,37,-43,124,-90,-68,-51,-42,-24,36,29,-5,122,-97, 
  /* [18][0][][] */ -93,109,127,-40,1,-98,-98,21,-6,84,-101,-64,-29,46,83,-54,52,-28,78,-6,101,-32,22,-70,29,-93,3,110,34,60,-52,53,48,-22,-98,-105,-6,26,-15,51,-51,13,-34,-3,-96,28,23,10, 
  /* [19][0][][] */ 21,44,82,51,59,-58,127,91,80,-30,58,-9,-58,61,-16,61,83,-94,103,63,-10,92,-4,33,70,-74,68,-59,-40,-49,-12,51,66,-57,55,18,29,-31,-30,-95,62,-68,-46,50,-41,30,71,-51, 
  /* [20][0][][] */ -9,98,76,107,-90,91,35,63,26,19,-105,-10,-1,127,52,-86,-57,-44,-69,-28,26,-49,-76,-61,76,-84,-102,51,28,27,-53,119,112,45,-8,56,47,-28,-10,-119,-103,-33,-94,-101,-27,-66,-64,121, 
  /* [21][0][][] */ 116,101,83,-99,117,-67,20,29,20,-56,-78,55,18,11,-51,-86,-105,-8,38,-9,127,-46,80,-70,62,-63,-54,96,12,11,-58,-8,26,40,-89,-103,123,120,-110,-8,2,18,37,-43,-90,-70,-69,107, 
  /* [22][0][][] */ 51,-52,-53,-81,91,-27,83,60,-65,84,-44,-63,110,-127,-108,-55,41,96,-91,-48,90,-58,42,39,95,17,-123,102,-39,-74,-54,-76,56,71,23,28,9,9,-47,-72,22,0,12,78,60,-90,89,-11, 
  /* [23][0][][] */ 82,-104,3,33,98,-85,0,-91,58,-73,96,103,23,-127,-8,-20,78,-4,-109,81,95,-81,108,-28,2,1,52,30,73,12,71,-23,-28,55,14,40,81,17,-116,32,-73,3,9,-108,-57,-87,102,19, 
  /* [24][0][][] */ -53,-22,-91,-61,-65,-86,-118,-76,89,127,41,59,124,27,-45,-114,-76,69,24,-46,112,-84,-52,-20,53,-3,22,78,96,47,-37,-41,20,32,48,35,-44,-68,72,11,-64,-84,110,-42,32,-16,56,80, 
  /* [25][0][][] */ -63,-88,-74,-30,83,-50,-66,44,29,-115,-6,49,61,-18,-127,-5,-64,58,19,-118,58,74,5,-66,34,-61,-107,29,86,-113,83,121,72,-107,34,70,84,-47,-42,-14,-61,87,-106,28,91,20,51,21, 
  /* [26][0][][] */ 67,-90,-17,-17,-68,19,10,-4,-66,-94,127,91,-48,-58,-19,-3,92,39,-69,-54,23,60,104,55,63,67,-57,55,21,-11,-34,15,-8,-32,-47,-62,-57,98,-46,118,-57,94,56,49,-47,63,-9,97, 
  /* [27][0][][] */ 7,3,-71,-110,-127,-71,-49,-25,36,90,54,-106,-35,79,76,-19,60,-19,57,-89,-102,12,-30,-28,-108,40,-86,-11,61,27,-11,-17,52,60,-91,-77,-97,-55,-119,79,-94,9,22,44,91,16,64,97, 
  /* [28][0][][] */ 84,71,100,68,-74,-45,-23,-30,-36,-63,122,37,-45,-1,73,86,112,63,8,74,-24,62,-49,-24,-52,54,46,-42,-28,51,41,16,-85,28,113,72,57,-74,-8,9,106,54,-56,127,-46,-6,23,58, 
  /* [29][0][][] */ 34,31,38,-65,-100,-1,-90,-9,77,-30,-67,-103,86,-76,-60,-53,-108,82,17,-77,-88,-41,38,-11,-45,-6,-26,-43,-110,-21,127,-19,32,-15,-84,-57,-25,87,-24,74,36,87,-58,105,-16,85,-67,-40, 
  /* [30][0][][] */ 42,-22,-42,42,-69,22,-88,1,123,0,-16,-31,-72,-7,50,2,-8,58,85,-82,55,-85,-93,27,-95,52,-87,122,-21,-85,-127,27,-51,-38,-96,-33,21,7,9,50,81,-53,2,54,104,-18,104,64, 
  /* [31][0][][] */ 70,-99,31,96,41,55,-41,-109,-42,-28,-93,-100,93,-85,-54,104,-66,-101,31,44,56,28,-41,97,37,-123,33,30,-78,-81,55,101,9,10,-102,-17,91,-45,-76,-127,47,-78,-36,26,-5,-62,-49,17, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002436409704387188, 0.0025175926275551319, 0.0026695027481764555, 0.0028212703764438629, 0.0025006451178342104, 0.0023260985035449266, 0.0028322541620582342, 0.0025036728475242853, 0.0027402983978390694, 0.0024130980018526316, 0.0027703754603862762, 0.0022700356785207987, 0.0020970234181731939, 0.0025582474190741777, 0.0024414586368948221, 0.0023731302935630083, 0.0024867034517228603, 0.0022399122826755047, 0.0024574142880737782, 0.0029266045894473791, 0.0021506799384951591, 0.0022112505976110697, 0.0027252216823399067, 0.0025469234678894281, 0.0023921164683997631, 0.0024167730007320642, 0.0027239467017352581, 0.0023082313127815723, 0.0030407346785068512, 0.0023944936692714691, 0.0026330430991947651, 0.0022897750604897738, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -283, 1017, 2334, 4206, 11012, -665, -439, 14970, 953, 8462, 702, -1208, 3972, -2292, 3071, -2054, 94, -1786, 621, 1994, 3575, 3085, 5412, 738, -3136, -1357, 788, 1420, 1290, 3845, -474, 2478, 4146, 3876, 4510, 1768, 12537, 1747, 689, -1163, 912, 15051, -1139, 2060, 9390, -46, 1614, 5785, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00025043063214980066, 0.00036237042513675988, 0.00013627843873109668, 0.00013656627561431378, 8.5595929704140872e-05, 0.00018349541642237455, 0.00050012813881039619, 6.537306762766093e-05, 0.00031325255986303091, 9.6931667940225452e-05, 0.00018902435840573162, 0.00028517816099338233, 0.00016610480088274926, 0.00023677937861066312, 0.00023121770936995745, 0.00014749755791854113, 0.00014537000970449299, 6.555965228471905e-05, 0.00033230727422051132, 0.00027746090199798346, 0.00018680593348108232, 0.00015456242545042187, 0.00012100941967219114, 0.00023215587134473026, 0.00016491330461576581, 0.00029702435131184757, 0.00023309842799790204, 0.00038210491766221821, 0.00022608294966630638, 0.00016317730478476733, 0.00018757539510261267, 0.00025576350162737072, 0.00017224688781425357, 0.00019811383390333503, 0.00010040879715234041, 0.00013731425860896707, 7.1790957008488476e-05, 0.00014993439253885299, 0.00016378448344767094, 0.00019259349210187793, 0.00020710457465611398, 6.1537757574114949e-05, 0.00018554764392320067, 0.00014136973186396062, 8.8644628704059869e-05, 0.0001371969556203112, 0.00017673254478722811, 0.00013773264072369784, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 34,-15,-61,7,-127,25,-73,4, 
  /* [1][0][][] */ -127,44,115,-4,-113,-29,-14,-13, 
  /* [2][0][][] */ 23,86,-37,11,-72,-127,-28,93, 
  /* [3][0][][] */ -83,25,-10,127,7,-48,-51,-35, 
  /* [4][0][][] */ 31,-13,41,-125,-20,26,-127,23, 
  /* [5][0][][] */ 65,127,-57,-61,-44,-11,19,-113, 
  /* [6][0][][] */ 55,-51,32,98,-49,-127,-12,-102, 
  /* [7][0][][] */ 51,114,-59,-66,-69,-24,16,-127, 
  /* [8][0][][] */ -3,-23,52,-10,13,4,-58,-127, 
  /* [9][0][][] */ -84,0,-93,11,-127,-72,-93,-32, 
  /* [10][0][][] */ 104,0,75,-54,-127,4,77,104, 
  /* [11][0][][] */ 127,-30,-70,-4,52,11,-86,-7, 
  /* [12][0][][] */ -17,-102,127,2,20,14,-85,70, 
  /* [13][0][][] */ 45,-79,79,-34,0,-127,28,-126, 
  /* [14][0][][] */ -127,35,123,14,-35,-72,52,-49, 
  /* [15][0][][] */ 41,110,-29,-37,-66,14,57,-127, 
  /* [16][0][][] */ 32,110,-50,57,-6,-39,-18,127, 
  /* [17][0][][] */ 39,69,-3,62,-63,89,-127,31, 
  /* [18][0][][] */ 69,-34,127,-27,78,-102,21,-32, 
  /* [19][0][][] */ 17,1,13,127,32,-36,-43,-89, 
  /* [20][0][][] */ 14,18,-15,27,-16,60,-127,2, 
  /* [21][0][][] */ 3,-8,50,40,30,127,62,-47, 
  /* [22][0][][] */ 85,-127,-13,51,-96,83,11,23, 
  /* [23][0][][] */ -42,-98,-10,-127,-3,-79,-18,-122, 
  /* [24][0][][] */ 12,24,-23,-51,-32,-127,-36,49, 
  /* [25][0][][] */ 61,77,127,9,3,21,-60,2, 
  /* [26][0][][] */ -127,46,125,-38,-76,-24,101,-5, 
  /* [27][0][][] */ -64,43,-21,-106,18,127,-29,79, 
  /* [28][0][][] */ 10,-121,72,62,50,13,-29,127, 
  /* [29][0][][] */ -126,56,89,-35,-127,5,94,-40, 
  /* [30][0][][] */ 105,-108,1,64,-127,-24,30,-79, 
  /* [31][0][][] */ 59,78,46,-49,-120,-19,7,127, 
  /* [32][0][][] */ -32,-3,88,-58,32,-2,-127,-96, 
  /* [33][0][][] */ 43,45,96,-127,25,40,-44,69, 
  /* [34][0][][] */ -3,-108,87,-42,33,127,54,-93, 
  /* [35][0][][] */ 58,16,85,-11,2,127,9,-46, 
  /* [36][0][][] */ -4,44,-28,26,39,-127,-8,27, 
  /* [37][0][][] */ 22,-16,61,12,-126,127,-43,-19, 
  /* [38][0][][] */ -127,-21,-70,-11,83,-29,-91,-39, 
  /* [39][0][][] */ 21,6,36,-110,-29,50,-127,17, 
  /* [40][0][][] */ 84,-20,-72,-127,65,54,53,-21, 
  /* [41][0][][] */ 33,-19,-11,127,-111,10,-101,-60, 
  /* [42][0][][] */ -80,22,71,127,-55,-59,-49,5, 
  /* [43][0][][] */ 83,-118,88,32,-127,23,92,65, 
  /* [44][0][][] */ 18,-28,35,-81,-27,127,27,20, 
  /* [45][0][][] */ -41,41,-48,12,83,-57,-127,-38, 
  /* [46][0][][] */ -79,-82,-10,-27,17,127,-42,-104, 
  /* [47][0][][] */ -95,-73,-46,9,10,127,-40,-61, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0030734292231500149, 0.0044472189620137215, 0.0016724877059459686, 0.0016760202124714851, 0.001050482620485127, 0.0022519617341458797, 0.0061378609389066696, 0.00080229603918269277, 0.0038444162346422672, 0.0011896013747900724, 0.0023198160342872143, 0.0034998708870261908, 0.0020385340321809053, 0.0029058931395411491, 0.0028376372065395117, 0.0018101752502843738, 0.0017840646905824542, 0.00080458592856302857, 0.0040782666765153408, 0.003405160503461957, 0.0022925902158021927, 0.0018968792865052819, 0.0014850974548608065, 0.0028491509146988392, 0.0020239113364368677, 0.0036452542990446091, 0.0028607184067368507, 0.0046894121915102005, 0.0027746204286813736, 0.0020026061683893204, 0.00230203359387815, 0.0031388772185891867, 0.0021139131858944893, 0.0024313672911375761, 0.0012322746915742755, 0.0016851999098435044, 0.00088106008479371667, 0.0018400814151391387, 0.0020100576803088188, 0.0023636184632778168, 0.0025417068973183632, 0.00075522687984630466, 0.0022771477233618498, 0.0017349709523841739, 0.0010878980392590165, 0.0016837602015584707, 0.0021689638961106539, 0.0016903345240280032, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -2670, 391, -13798, 9142, 8287, -4050, 8935, 1537, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00010876926535274833, 0.00018908549100160599, 7.0793154009152204e-05, 0.00012833907385356724, 0.00012633134610950947, 0.00013147422578185797, 0.0001560490345582366, 0.00015119947784114629, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 11,31,27,24,-10,-22,51,37,7,11,4,-5,43,-37,48,-8,-53,-38,-127,-1,38,-37,33,44,-1,-2,42,4,-1,-40,5,39,-38,49,49,13,52,73,-47,-60,13,18,-91,-46,30,11,-24,-51, 
  /* [1][0][][] */ -6,-38,-7,72,-27,0,-10,-18,21,22,-18,-39,-5,-6,13,0,44,28,58,-44,8,33,15,-42,8,-11,-26,-43,-32,-2,-19,-14,-23,-37,-91,60,17,12,-127,-9,23,-12,75,30,106,-19,-35,50, 
  /* [2][0][][] */ -5,-2,36,-31,-13,-25,-15,127,-35,83,-45,-10,108,0,39,-25,-49,-58,4,35,-14,-25,24,-2,8,45,3,29,13,11,78,21,-63,-16,29,45,1,65,56,-101,36,28,-28,-24,23,41,0,-13, 
  /* [3][0][][] */ 31,-1,-127,-23,12,-6,43,-42,-14,-24,-1,18,-44,-57,38,24,15,49,5,25,-49,19,-66,-7,-32,-58,24,13,-64,-51,-55,15,64,37,-33,13,-48,-2,32,-6,26,-51,-17,16,49,-45,45,-9, 
  /* [4][0][][] */ 16,45,-14,-5,14,0,-78,-125,-31,26,-18,84,0,-25,7,60,46,47,-83,-7,22,0,-38,-3,39,-7,-2,2,-22,11,-4,-33,27,-29,-127,32,-28,-1,46,44,-28,-32,80,44,10,-58,17,21, 
  /* [5][0][][] */ -73,-21,114,7,84,17,62,9,-127,-1,-95,-21,-83,-68,50,64,-17,22,12,14,46,33,41,11,-32,-9,22,-20,-38,-6,-21,-19,-21,46,63,31,-18,76,-25,-16,62,-50,-61,47,-18,26,25,18, 
  /* [6][0][][] */ 105,59,-33,31,24,-21,-113,-82,9,5,3,73,-27,-39,3,47,-37,35,20,-10,123,-34,58,127,10,-48,-1,-26,-61,-12,-34,-70,50,-37,24,-18,-1,31,-42,51,-63,-40,-67,-36,-22,-57,53,3, 
  /* [7][0][][] */ 5,49,33,-67,51,-41,-33,-21,11,12,36,28,-35,-6,25,-6,-19,17,-25,56,-43,0,-6,57,0,-26,9,38,-4,30,-42,-13,48,-8,-30,-40,-58,9,127,-6,18,-30,-21,-15,39,0,52,4, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0046226936392486095, 0.0080361329019069672, 0.0030087090563029051, 0.005454410333186388, 0.0053690820932388306, 0.0055876546539366245, 0.0066320840269327164, 0.0064259776845574379, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1328, -3189, 389, -542, -235, 304, 857, 11780, -5265, 12367, 10203, -4682, 3831, -1006, 7227, -1084, 1226, -81, 1642, -2298, -4139, -5051, -14480, -2609, 10492, 445, 4136, 3856, 6551, 2573, 9029, -3940, -8681, 705, -1911, -6525, 3533, 8298, -2923, 10325, 1392, -883, -3313, -593, -6683, 8201, -379, 6208, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00017123515135608613, 0.00027778407093137503, 0.00017384822422172874, 0.00024904849124141037, 0.00011171454389113933, 0.00047400998300872743, 0.00036481846473179758, 0.00064460135763511062, 0.00028032562113367021, 0.00012789697211701423, 0.00013849258539266884, 0.00016209464229177684, 0.0002037195663433522, 0.00027328066062182188, 0.00017440842930227518, 0.00019616480858530849, 0.00063846295233815908, 0.0003753139462787658, 0.00011083466233685613, 0.00021206703968346119, 0.00015913412789814174, 9.4763279776088893e-05, 9.9635683000087738e-05, 0.00036263882066123188, 9.1240450274199247e-05, 0.00029362292843870819, 0.00010191601177211851, 0.00020447233691811562, 0.000229123659664765, 0.00015318456280510873, 0.00015041974256746471, 0.00012336447252891958, 0.00019741222786251456, 0.00021765830751974136, 0.00040607567643746734, 0.00012924549810122699, 0.00011298793833702803, 9.5619754574727267e-05, 0.00036584222107194364, 0.00016825746570248157, 0.00028342579025775194, 0.00022545343381352723, 0.00015294307377189398, 0.00021803964045830071, 0.00028802931774407625, 0.00011994810483884066, 0.00025221667601726949, 0.00011329826520523056, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 111,81,73,27,-4,-85,30,31,-70,-13,-18,125,53,29,-5,8,52,-37,83,94,96,-10,4,5,-67,-81,37,-12,-5,-41,30,60,78,-111,15,27,-28,14,-6,-127,-4,-91,-59,-21,8,-127,89,-127, 127,9,71,-97,54,58,27,-44,-103,-113,22,127,13,-39,-127,32,-6,111,56,72,18,116,101,46,116,-60,-29,-127,-105,-19,-127,127,50,-80,-90,127,14,-82,-87,-121,27,127,-62,34,-48,-82,106,18, 70,6,44,-81,-8,-62,43,10,-33,3,15,61,30,35,36,2,-52,10,60,64,-15,-3,-56,-2,-65,-62,-80,-35,-33,-65,-20,29,87,-64,32,23,-62,-67,0,-84,-11,-24,113,-46,13,-84,18,-76, 
  /* [0][1][][] */ 59,6,39,66,56,66,14,-127,88,-127,-126,-65,12,48,-69,114,-127,97,82,73,47,126,73,-51,-57,117,65,8,61,-7,-123,98,84,84,-78,79,-78,-27,-2,-87,-22,-66,6,-105,49,12,49,-18, -12,127,-127,75,127,54,-127,13,103,-38,-12,92,-127,127,-30,7,37,-127,-127,8,127,69,127,-118,-118,75,-52,-19,-15,-8,48,-2,127,-22,109,-64,92,-127,127,86,127,75,-112,-3,122,42,-127,-20, 21,3,23,-127,70,44,20,-101,127,-45,-127,-9,14,31,-52,127,66,-7,31,46,57,-124,33,127,-98,127,-82,-37,27,3,-62,82,12,57,127,64,-73,-46,-66,-25,-31,-20,127,127,127,-11,99,-24, 
  /* [0][2][][] */ 3,53,36,66,-20,7,35,35,9,-24,-12,-52,50,-73,26,-58,-12,21,73,-32,125,11,12,-68,-127,-59,116,81,14,-65,-86,69,22,48,-22,3,-74,9,10,18,-16,-93,10,-27,2,9,34,-74, 13,12,5,3,-4,-127,-3,-68,1,-54,-12,-68,2,-68,-24,29,6,-59,14,127,74,127,64,37,57,-52,-70,36,-127,-25,-83,7,15,127,-69,10,-119,-93,28,-17,-86,68,-26,14,-43,-52,101,-30, -5,2,37,-53,18,-7,40,35,-11,18,15,26,40,-60,46,-6,-10,-35,45,-76,35,-33,-49,67,-75,-63,-127,13,-23,-127,12,33,43,-44,-30,54,-127,-79,-26,-8,-26,-8,-1,2,-17,29,-10,-45, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0072774938307702541, 0.0118058230727911, 0.0073885493911802769, 0.010584560222923756, 0.0047478680498898029, 0.020145423710346222, 0.015504784882068634, 0.02739555761218071, 0.011913838796317577, 0.0054356209002435207, 0.0058859349228441715, 0.0068890219554305077, 0.0086580812931060791, 0.011614427901804447, 0.0074123581871390343, 0.0083370041102170944, 0.027134675532579422, 0.015950841829180717, 0.0047104731202125549, 0.0090128490701317787, 0.0067632002755999565, 0.0040274392813444138, 0.0042345165275037289, 0.015412149950861931, 0.0038777189329266548, 0.012478974647819996, 0.0043314304202795029, 0.00869007408618927, 0.0097377551719546318, 0.0065103438682854176, 0.0063928388990461826, 0.0052429898642003536, 0.0083900196477770805, 0.0092504778876900673, 0.017258215695619583, 0.0054929335601627827, 0.0048019872047007084, 0.0040638395585119724, 0.015548293478786945, 0.0071509419940412045, 0.012045595794916153, 0.0095817707479000092, 0.006500080693513155, 0.0092666847631335258, 0.012241245247423649, 0.005097794346511364, 0.010719208046793938, 0.0048151761293411255, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -2182, -2128, 2417, -566, -2765, 3053, 3949, 27630, 2431, 2002, 5629, 3468, 2929, 12136, 7398, -2029, 14209, 2475, 563, -3278, 402, -480, 1185, 17506, 1033, 8915, 3688, -65, 8861, 91, 2246, -1487, -1504, -1853, -9042, 2166, 3090, 3247, 2351, 2909, 4149, 1297, 5115, 3337, 15769, 3914, -3273, 706, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00014372541045304388, 0.0002196195418946445, 0.00025263853603973985, 0.00021718464267905802, 0.00015171436825767159, 9.5744973805267364e-05, 0.00014415342593565583, 4.4255451939534396e-05, 0.00010370118252467364, 0.000266327551798895, 0.00013299881538841873, 0.00014061006368137896, 0.00013756488624494523, 6.7280219809617847e-05, 0.00010738567652879283, 0.00020362167560961097, 6.916838901815936e-05, 0.00011636286217253655, 0.00034490460529923439, 0.0001902345975395292, 9.485494956606999e-05, 0.00020157099061179906, 0.00026740631437860429, 5.413162216427736e-05, 0.00020727646187879145, 7.7526805398520082e-05, 0.00017791955906432122, 0.00028325070161372423, 6.3353756559081376e-05, 0.00023074324417393655, 0.00014621697482652962, 0.00023037467326503247, 0.00025524885859340429, 0.00015695384354330599, 6.1275830375961959e-05, 0.00020602269796654582, 0.00014119929983280599, 0.00012502710160333663, 0.00019721375429071486, 0.000166623096447438, 0.00015671177243348211, 0.00016027198580559343, 0.00014325747906696051, 0.00016595800116192549, 5.6337416026508436e-05, 0.00017369675333611667, 8.9137858594767749e-05, 0.00028157435008324683, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -10,-53,-53,122,1,-82,-78,-127, 
  /* [1][0][][] */ 127,-21,37,-19,29,-76,-1,30, 
  /* [2][0][][] */ -14,50,0,-127,25,85,-58,63, 
  /* [3][0][][] */ -24,127,-46,-71,-92,-2,26,-78, 
  /* [4][0][][] */ 20,-67,-98,-65,13,-94,-78,-127, 
  /* [5][0][][] */ -52,-80,92,32,10,107,13,-127, 
  /* [6][0][][] */ 3,10,-47,18,10,18,-127,-38, 
  /* [7][0][][] */ 13,-13,-4,30,-40,48,127,63, 
  /* [8][0][][] */ -9,41,-82,-42,-55,-127,-86,54, 
  /* [9][0][][] */ 73,8,-39,-20,-4,127,-30,115, 
  /* [10][0][][] */ -27,77,87,127,121,110,-22,-46, 
  /* [11][0][][] */ -39,-59,-31,62,-127,79,-45,-13, 
  /* [12][0][][] */ -39,36,93,-81,77,-107,-127,-53, 
  /* [13][0][][] */ 45,39,-95,-127,-35,-79,-108,98, 
  /* [14][0][][] */ -50,-127,16,-67,-2,-64,10,-118, 
  /* [15][0][][] */ 2,86,61,103,108,127,-23,-29, 
  /* [16][0][][] */ 47,-5,-43,-127,38,98,-70,71, 
  /* [17][0][][] */ -74,87,-127,40,9,107,-78,29, 
  /* [18][0][][] */ -127,48,22,-23,-71,20,-16,-1, 
  /* [19][0][][] */ 127,9,-52,-41,77,-66,59,-102, 
  /* [20][0][][] */ 127,-51,48,-22,-74,25,75,15, 
  /* [21][0][][] */ 24,-38,-27,37,-10,27,127,28, 
  /* [22][0][][] */ 74,43,-127,-89,27,85,39,121, 
  /* [23][0][][] */ -30,61,-46,-91,51,6,-127,5, 
  /* [24][0][][] */ 127,-61,-96,-36,99,-54,-2,17, 
  /* [25][0][][] */ -47,-85,97,-47,75,127,-49,-105, 
  /* [26][0][][] */ 7,-51,36,37,127,-64,-51,-59, 
  /* [27][0][][] */ -23,-127,41,88,19,5,-51,81, 
  /* [28][0][][] */ -34,44,-98,-27,75,-104,-48,127, 
  /* [29][0][][] */ -65,22,127,-78,11,-33,48,31, 
  /* [30][0][][] */ 97,-61,78,-15,-69,-127,65,-15, 
  /* [31][0][][] */ 18,32,47,-15,-21,-11,-127,16, 
  /* [32][0][][] */ 14,-22,24,127,-28,-84,-43,-94, 
  /* [33][0][][] */ 85,-75,-74,127,-88,100,-67,-37, 
  /* [34][0][][] */ -6,-103,4,-62,-127,124,67,-20, 
  /* [35][0][][] */ 10,127,88,12,21,10,-63,7, 
  /* [36][0][][] */ 30,116,-86,-127,-87,0,96,-68, 
  /* [37][0][][] */ 35,-9,58,21,48,127,77,32, 
  /* [38][0][][] */ -68,-110,120,62,19,5,-65,127, 
  /* [39][0][][] */ 8,42,127,-65,-13,43,-31,32, 
  /* [40][0][][] */ 10,-2,31,-2,10,-42,127,-3, 
  /* [41][0][][] */ -27,-15,-79,-127,-80,-114,-58,49, 
  /* [42][0][][] */ 32,-23,62,-29,-127,-34,-43,15, 
  /* [43][0][][] */ 52,11,22,34,-44,-127,85,47, 
  /* [44][0][][] */ -70,-127,-5,-56,-7,16,7,-112, 
  /* [45][0][][] */ 22,96,78,91,26,127,-53,27, 
  /* [46][0][][] */ -92,-10,-4,92,90,34,-70,127, 
  /* [47][0][][] */ 29,86,-57,-50,8,-53,20,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.002512096893042326, 0.0038386082742363214, 0.0044157290831208229, 0.0037960500922054052, 0.0026517312508076429, 0.0016734733944758773, 0.0025195777416229248, 0.0007735165418125689, 0.001812535454519093, 0.004654991440474987, 0.0023246125783771276, 0.0024576454889029264, 0.0024044204037636518, 0.0011759536573663354, 0.001876934664323926, 0.0035589903127402067, 0.0012089558877050877, 0.0020338420290499926, 0.0060283965431153774, 0.0033250050619244576, 0.0016579170478507876, 0.0035231476649641991, 0.004673846997320652, 0.00094613659894093871, 0.0036228704266250134, 0.0013550480362027884, 0.0031097573228180408, 0.0049507822841405869, 0.0011073251953348517, 0.0040330332703888416, 0.0025556455366313457, 0.0040265913121402264, 0.0044613531790673733, 0.0027433093637228012, 0.0010710062924772501, 0.0036009566392749548, 0.0024679442867636681, 0.0021852795034646988, 0.0034469899255782366, 0.0029123127460479736, 0.0027390781324356794, 0.0028013051487505436, 0.0025039180181920528, 0.0029006879776716232, 0.00098469050135463476, 0.0030359493102878332, 0.0015579912578687072, 0.0049214819446206093, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 18983, 5195, 12875, -5388, -15849, 10736, 3837, 17372, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.9695524871349335e-05, 9.5336654339917004e-05, 6.2975377659313381e-05, 0.00012938409054186195, 8.5490311903413385e-05, 9.2903814220335335e-05, 0.00010014979488914832, 7.7590862929355353e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-17,0,-8,-34,-89,-45,-15,57,-38,-59,-26,-27,72,-55,-4,6,-18,12,11,26,-38,0,3,44,6,0,36,12,58,-51,-95,20,-64,11,-18,28,-48,-3,20,-58,-22,-28,-50,-69,-92,6,-30, 
  /* [1][0][][] */ -86,-1,91,-68,58,44,40,13,-15,38,-3,104,21,-26,-127,-36,-98,-92,34,-13,14,94,-41,6,24,-113,35,103,22,-33,26,42,36,47,-9,29,-92,-37,23,30,17,-38,-89,32,-30,-53,-92,29, 
  /* [2][0][][] */ 90,30,-26,-65,-43,1,-38,-83,41,33,-87,-51,-21,53,-64,44,-12,89,19,23,53,46,-1,-2,-118,8,38,-65,2,29,43,-88,6,-27,23,23,-46,-48,13,41,-127,-120,-23,-43,-49,-72,36,10, 
  /* [3][0][][] */ 18,-3,17,28,-105,-30,-4,61,-42,-74,-17,84,5,-33,-93,-58,-34,27,-2,-68,-55,127,14,-67,31,43,48,-50,24,25,24,14,50,26,21,-6,61,70,21,-4,19,-29,18,-54,1,11,21,44, 
  /* [4][0][][] */ -40,30,-121,9,-12,113,13,33,-31,127,45,76,27,-71,-18,27,-8,-12,-16,37,-14,52,-75,33,-5,1,63,-7,33,-77,111,108,51,42,0,-44,-101,24,3,-23,64,20,36,34,41,45,30,68, 
  /* [5][0][][] */ -31,-9,31,-13,53,-71,-33,-36,-24,-56,6,-32,38,5,-9,8,23,-2,9,34,14,61,14,17,18,1,-30,-13,-33,-3,-127,-11,-47,-11,22,-20,-3,-35,0,-20,-5,3,-39,-8,21,34,-10,48, 
  /* [6][0][][] */ 9,57,-1,59,-13,41,-64,58,-83,-39,43,15,39,0,27,2,4,-44,-55,20,-3,51,30,-44,-79,-7,-31,32,-86,3,-72,-9,11,-35,-34,-48,127,5,-39,-45,32,25,43,-54,-62,-16,-50,-44, 
  /* [7][0][][] */ -51,19,-80,25,-23,3,-24,-17,-52,-48,46,64,47,17,-64,-70,-72,75,-13,-17,50,22,40,-36,-33,110,-47,-97,-44,-7,-127,-9,-25,-36,-70,-1,-40,-46,-43,-25,-12,46,63,-28,-62,-71,125,-67, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0030735619366168976, 0.0042043318971991539, 0.0027772043831646442, 0.0057058185338973999, 0.0037701097317039967, 0.0040970440022647381, 0.0044165905565023422, 0.0034217450302094221, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 8105, 3624, 9226, 8494, 36684, -2843, 1876, 62, -3640, -8087, -2907, -1909, 14448, 8307, 6094, -287, 6081, 3205, 449, -5432, 5244, -3542, 6008, 1432, 5464, 12566, -1162, -330, -2548, 400, 7902, 4247, -337, -2442, 1867, 760, 6258, -791, -39, -445, 5784, -6325, 4876, -3361, -866, 1660, 6321, -953, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00024638677132315934, 0.00021157129958737642, 8.3227816503494978e-05, 0.00018910750804934651, 5.1395654736552387e-05, 0.00046169105917215347, 0.00020847012638114393, 0.00058951997198164463, 0.00041221885476261377, 0.00030832472839392722, 0.00013432148261927068, 0.00026826109387911856, 8.4464205428957939e-05, 0.00012421132123563439, 0.00042767144623212516, 0.00013839649909641594, 0.00015392508066724986, 0.00019482120114844292, 0.00070636166492477059, 0.00021692065638490021, 0.00013844713976141065, 0.00018778671801555902, 0.00017011874297168106, 0.00012802096898667514, 0.00019829058146569878, 0.00016714548110030591, 0.00035206324537284672, 0.00018683754024095833, 0.00034886508365161717, 0.00030858872924000025, 0.00020408927230164409, 0.00037579124909825623, 0.00033625736250542104, 0.0007047443650662899, 0.00013460012269206345, 0.00015926764172036201, 0.00020276810391806066, 0.00033591731335036457, 0.00013036730524618179, 0.00024051280342973769, 0.00017582850705366582, 0.00021777705114800483, 0.00021746299171354622, 0.00044266355689615011, 0.00035603751894086599, 0.00036990971420891583, 0.00017984812438953668, 0.00032965507125481963, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -123,53,61,-12,-127,6,-119,-4,6,127,43,15,-8,61,27,22,6,36,41,6,-108,-20,-20,34,-18,-1,-11,-67,34,-127,87,29,-15,33,57,-42,30,-127,-38,127,-54,41,-17,11,-16,12,12,-2, 4,-57,-1,33,-100,12,-127,-6,48,38,121,79,-39,-52,-116,-53,-8,-49,115,62,20,47,-62,16,-56,-9,-2,-127,17,-52,-32,-127,-12,23,-44,-127,-18,35,5,89,127,-8,-13,127,-3,-127,10,-26, -116,60,56,-11,-59,23,-89,-18,10,96,1,2,-31,59,5,60,-50,10,18,-22,-111,-16,40,7,-6,-41,17,-56,-25,-120,52,-16,5,30,-54,-28,40,-56,12,94,-52,35,-18,21,4,20,13,50, 
  /* [0][1][][] */ 41,-25,37,-28,-76,11,73,-23,-53,34,36,40,-87,-59,-55,103,-30,-1,45,127,-1,57,-127,-24,-40,-111,-17,-58,127,36,46,110,-127,6,106,6,5,53,-127,-114,54,-30,4,24,-127,40,3,-55, 107,11,-127,-127,40,127,-17,127,-127,-87,-22,127,-75,-127,-127,-127,-14,-127,-82,47,127,127,-56,85,-127,72,-112,84,-54,-30,-127,-99,15,127,-127,89,-127,-14,125,-51,-53,127,-127,-63,110,82,-127,-79, 64,-7,93,-18,-31,-20,-8,-38,-34,19,20,-17,-29,-75,-81,94,-127,-35,20,111,-44,76,4,-127,5,-104,127,-4,-38,125,-51,87,109,-36,-55,18,13,30,1,-61,30,-32,-17,9,0,38,-21,127, 
  /* [0][2][][] */ -127,-95,36,-29,-66,28,95,-3,109,23,105,18,-91,66,30,6,73,69,3,-2,-78,-22,49,13,-49,-4,-5,5,8,39,83,3,5,24,75,19,21,-3,-39,33,-32,24,14,-2,-1,-17,-14,-9, -83,-127,62,-26,-91,0,102,1,108,16,127,-32,55,-90,-91,-15,-24,61,-127,33,-78,7,-74,-9,3,-127,1,23,7,94,10,-81,15,-47,-20,25,-7,81,58,-39,0,24,36,-31,31,-33,-8,1, -60,-37,28,-6,-87,59,29,-9,39,-1,29,27,-127,35,25,2,-37,76,0,2,-36,-5,124,-69,-28,-38,10,30,-6,52,26,-52,12,39,-29,16,43,-12,16,-39,-26,44,24,15,-3,0,1,-7, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.010471437126398087, 0.0089917797595262527, 0.003537182230502367, 0.0080370688810944557, 0.0021843153517693281, 0.019621869549155235, 0.0088599799200892448, 0.025054598227143288, 0.017519300803542137, 0.01310380082577467, 0.0057086627930402756, 0.011401096358895302, 0.0035897286143153906, 0.0052789808250963688, 0.018176035955548286, 0.0058818510733544827, 0.0065418155863881111, 0.008279900997877121, 0.030020369216799736, 0.0092191277071833611, 0.005884003359824419, 0.007980935275554657, 0.0072300462052226067, 0.0054408912546932697, 0.0084273498505353928, 0.0071036829613149166, 0.014962687157094479, 0.0079405950382351875, 0.014826766215264797, 0.013115020468831062, 0.0086737936362624168, 0.015971127897500992, 0.014290937222540379, 0.029951633885502815, 0.0057205050252377987, 0.0067688748240470886, 0.0086176441982388496, 0.01427648589015007, 0.0055406102910637856, 0.010221794247627258, 0.0074727116152644157, 0.0092555247247219086, 0.0092421770095825195, 0.018813200294971466, 0.015131594613194466, 0.015721162781119347, 0.0076435450464487076, 0.014010339975357056, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 14493, -260, 1677, 1503, 2952, 903, 5852, -301, 8355, 9210, -542, -85, 1647, 1320, 1505, 3492, 3159, 4514, -1733, -172, 3217, 4879, 6012, 28, 3769, 3247, 7660, -573, 7130, -273, 7078, 9279, 4047, 814, 1564, 1920, 2129, 1992, 1597, 1401, -664, 3077, 1544, 7123, 5021, 1859, -45, 2345, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 7.6461794378701597e-05, 0.00033692410215735435, 0.0003023932222276926, 0.0001924024400068447, 0.00024002781719900668, 0.00016731936193536967, 8.848164725350216e-05, 0.00023104573483578861, 0.0001111570090870373, 7.3755683843046427e-05, 0.0002608721551951021, 0.00016453501302748919, 0.00031068097450770438, 0.00024215973098762333, 8.1815174780786037e-05, 0.00019790975784417242, 0.00015813976642675698, 0.00017782229406293482, 0.00020613579545170069, 0.00011639615695457906, 0.00020493674674071372, 8.5169180238153785e-05, 0.00010651539923856035, 0.00031007526558823884, 0.00016917574976105243, 0.00023050008167047054, 0.0001259012205991894, 0.00046427518827840686, 0.00013365525228437036, 0.00011948010796913877, 0.00010153396578971297, 7.5654563261196017e-05, 0.00021278228086885065, 0.0001160349347628653, 0.00019384364713914692, 0.00034817503183148801, 0.00029456650372594595, 0.00019341080042067915, 0.00032849135459400713, 0.00015661523502785712, 0.00020535850489977747, 0.00022498192265629768, 0.00047567728324793279, 9.9474607850424945e-05, 0.00017673034744802862, 0.00014067070151213557, 0.0003554026479832828, 0.00027208798564970493, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 68,-80,42,2,52,-127,6,-70, 
  /* [1][0][][] */ -28,-53,-68,38,-127,51,-26,11, 
  /* [2][0][][] */ 53,-46,44,-20,127,-21,-10,78, 
  /* [3][0][][] */ -12,127,-16,122,9,11,-50,-47, 
  /* [4][0][][] */ -39,127,87,-32,40,22,-56,23, 
  /* [5][0][][] */ -101,31,1,24,127,-29,87,-5, 
  /* [6][0][][] */ 90,-92,88,8,53,127,114,-35, 
  /* [7][0][][] */ -31,-58,40,44,77,31,-60,127, 
  /* [8][0][][] */ 5,-31,-51,-74,0,127,-47,3, 
  /* [9][0][][] */ -127,16,-99,-12,114,-36,-72,12, 
  /* [10][0][][] */ -12,-85,55,36,-46,-94,-127,-88, 
  /* [11][0][][] */ 27,87,-17,-1,-31,-83,28,127, 
  /* [12][0][][] */ 23,-46,-100,45,-76,127,40,98, 
  /* [13][0][][] */ -50,-29,-127,28,-104,95,17,45, 
  /* [14][0][][] */ -65,127,-97,83,88,42,-22,75, 
  /* [15][0][][] */ -70,-6,-4,-18,77,78,-98,-127, 
  /* [16][0][][] */ 76,-127,-107,-21,-65,92,-47,-13, 
  /* [17][0][][] */ 16,117,-109,-47,-88,49,76,-127, 
  /* [18][0][][] */ -59,-104,28,8,127,-65,-42,55, 
  /* [19][0][][] */ -56,85,-24,24,19,-82,-127,44, 
  /* [20][0][][] */ 88,-28,49,-56,-7,-94,55,127, 
  /* [21][0][][] */ 72,-53,125,107,-44,127,87,-41, 
  /* [22][0][][] */ -15,121,6,18,127,-85,-96,-60, 
  /* [23][0][][] */ 45,-73,39,127,-11,-56,74,-46, 
  /* [24][0][][] */ -40,44,127,-53,-18,-28,24,-29, 
  /* [25][0][][] */ -52,-107,89,58,33,-14,-31,127, 
  /* [26][0][][] */ 68,-34,-127,-99,-107,44,26,99, 
  /* [27][0][][] */ 44,127,-103,-49,-42,19,31,-115, 
  /* [28][0][][] */ -15,33,-46,-101,-25,-34,-127,-52, 
  /* [29][0][][] */ -93,42,-127,-27,111,71,-63,-5, 
  /* [30][0][][] */ 65,-59,15,-13,-109,93,127,56, 
  /* [31][0][][] */ -60,74,-49,77,127,-55,-14,-3, 
  /* [32][0][][] */ 23,78,46,-61,127,-40,-34,-95, 
  /* [33][0][][] */ -127,47,-100,11,39,25,-27,11, 
  /* [34][0][][] */ 74,-30,68,-104,-53,-127,58,103, 
  /* [35][0][][] */ -127,28,48,-11,-83,7,4,-6, 
  /* [36][0][][] */ 14,-50,-23,29,-23,1,127,27, 
  /* [37][0][][] */ -25,-23,-82,-58,-34,-127,-97,-17, 
  /* [38][0][][] */ -125,45,12,28,-127,22,52,24, 
  /* [39][0][][] */ -61,-53,46,-55,5,88,-127,-101, 
  /* [40][0][][] */ 72,-127,18,61,-61,-48,108,52, 
  /* [41][0][][] */ 27,127,89,40,25,32,-94,-37, 
  /* [42][0][][] */ 31,127,-25,-17,-24,14,-10,-44, 
  /* [43][0][][] */ -55,66,-106,-127,41,15,-68,74, 
  /* [44][0][][] */ -57,36,-18,31,50,127,11,-12, 
  /* [45][0][][] */ 12,87,-73,-28,-68,-69,-22,127, 
  /* [46][0][][] */ 29,127,-105,-27,-59,17,17,-117, 
  /* [47][0][][] */ 23,3,-6,-66,-61,-127,-30,47, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0011764873052015901, 0.0051841177046298981, 0.0046528046950697899, 0.0029604199808090925, 0.0036932129878550768, 0.0025744766462594271, 0.0013614320196211338, 0.0035550091415643692, 0.0017103288555517793, 0.0011348495027050376, 0.0040139365009963512, 0.0025316351093351841, 0.0047803251072764397, 0.0037260157987475395, 0.0012588576646521688, 0.003045158926397562, 0.0024332338944077492, 0.0027360811363905668, 0.0031717298552393913, 0.0017909415764734149, 0.0031532805878669024, 0.0013104644604027271, 0.0016389102675020695, 0.0047710053622722626, 0.0026030403096228838, 0.0035466135013848543, 0.0019371922826394439, 0.0071436180733144283, 0.0020565004087984562, 0.0018383930437266827, 0.0015622628852725029, 0.0011640667216852307, 0.0032739965245127678, 0.0017853835597634315, 0.002982595469802618, 0.0053572310134768486, 0.0045323781669139862, 0.0029759353492408991, 0.0050543663091957569, 0.0024097764398902655, 0.0031597698107361794, 0.003461707616224885, 0.0073190578259527683, 0.0015305763809010386, 0.0027192798443138599, 0.0021644444204866886, 0.0054684397764503956, 0.0041865101084113121, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5653, -2057, -2922, 3185, 3261, -17602, -4626, -8901, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00028867129003629088, 0.00010945483518298715, 0.00024262588704004884, 0.0001316159323323518, 0.00014747961540706456, 6.9527348387055099e-05, 0.00016510873683728278, 0.00011059771350119263, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -22,16,-2,31,-18,9,0,33,-49,-5,-34,-5,-16,13,33,3,-45,-22,28,-15,-24,127,-21,-19,-26,-37,6,37,-32,39,13,-22,-6,23,31,35,19,6,32,-19,6,-33,-15,-12,-18,23,22,14, 
  /* [1][0][][] */ 12,63,4,43,33,35,47,117,-41,-43,80,-33,-40,-28,32,-26,-13,-1,30,4,31,-127,-4,-63,6,10,-21,8,-11,3,-30,-54,-40,1,22,-15,22,68,66,-22,19,22,34,-31,-31,47,13,51, 
  /* [2][0][][] */ -2,24,-1,28,23,21,-29,34,22,15,69,19,5,-18,31,-50,24,29,-10,16,-11,127,3,-11,15,-47,-4,5,-23,25,-15,-55,-16,10,18,-36,30,-13,-40,-22,19,-18,-7,-49,-27,39,12,17, 
  /* [3][0][][] */ -42,52,-1,3,-21,34,64,4,7,4,6,13,-13,35,45,21,-14,4,17,5,42,-83,-10,20,-16,2,-127,33,-33,-25,-14,1,-43,-18,16,36,28,-15,-43,-36,5,-18,15,23,14,-10,38,15, 
  /* [4][0][][] */ 17,-2,-38,9,20,-7,20,-14,-52,8,-7,22,0,-13,-18,10,-30,32,-13,-16,0,-127,-8,-10,35,34,30,-46,42,-5,-4,10,-15,47,24,-7,-23,18,-9,7,-10,-58,-85,16,30,31,3,-7, 
  /* [5][0][][] */ -2,53,88,3,-2,30,26,-105,70,-40,-19,3,106,-55,-5,16,11,-43,48,1,-23,127,11,9,84,3,82,51,97,57,-1,-37,-67,-47,108,37,-56,-52,10,-107,9,-16,62,73,-49,-43,-32,-32, 
  /* [6][0][][] */ 60,-3,-34,13,42,-22,38,-39,53,41,8,-39,-13,44,21,-68,32,-118,-30,-7,32,-12,0,32,-43,-40,47,-14,55,-46,127,53,49,41,34,-51,-50,18,53,-31,-36,22,-66,62,46,13,45,-45, 
  /* [7][0][][] */ -17,41,45,54,-4,10,52,90,48,31,-6,68,-57,0,31,-19,82,-19,-31,-20,-9,-127,4,-101,-66,77,49,19,5,29,10,-21,24,-20,8,26,-8,92,-94,-20,7,0,26,-14,-50,-4,38,15, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.012268530204892159, 0.0046518305316567421, 0.01031159982085228, 0.0055936770513653755, 0.0062678833492100239, 0.0029549121391028166, 0.007017121184617281, 0.0047004027292132378, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 28325, 20694, 10164, 19199, 5833, 12194, 15051, 12229, 60097, -1531, 894, 19203, 14769, -4411, 11065, 406, 3796, 33062, 16514, 1366, 4654, -5583, -106, 899, 50635, 42443, 3181, 202, 3165, 13458, -1051, 2147, -10338, 16051, 35317, 25674, 23843, 22862, -37, 915, 4973, 34466, 1616, -781, 497, -2158, 23514, 10228, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 3.771659976337105e-05, 9.0506939159240574e-05, 9.3446265964303166e-05, 7.074168388498947e-05, 0.00010208693856839091, 8.9771579951047897e-05, 0.00012088672519894317, 0.0001350982638541609, 3.3397867809981108e-05, 0.00010647720046108589, 7.1885202487464994e-05, 6.4951396780088544e-05, 0.00015279512444976717, 6.9784953666385263e-05, 9.2176160251256078e-05, 8.1232297816313803e-05, 3.1203602702589706e-05, 6.4838008256629109e-05, 7.9609184467699379e-05, 0.00013433287676889449, 5.1775448810076341e-05, 0.00030022175633348525, 0.00011512229684740305, 8.7928972789086401e-05, 3.3384454582119361e-05, 5.1717215683311224e-05, 6.4783758716657758e-05, 0.00013309108908288181, 4.7717498091515154e-05, 0.00012739984958898276, 0.00013235044025350362, 0.00024034845409914851, 6.2832070398144424e-05, 7.2187540354207158e-05, 5.9841266192961484e-05, 0.00010175434726988897, 9.6978037618100643e-05, 0.00011880567763000727, 0.00010512339940760285, 8.1889498687814921e-05, 0.00015674304449930787, 4.5930908527225256e-05, 7.6784446719102561e-05, 6.5603104303590953e-05, 0.00030988003709353507, 0.00012133763812016696, 7.4834075348917395e-05, 8.4588042227551341e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -27,-96,-38,-54,-33,-13,-37,-83,-88,60,60,-110,-24,9,-89,38,112,-65,-49,106,59,41,-59,79,-96,-110,60,61,41,-83,98,64,44,-22,-110,-31,-95,-58,116,66,-12,6,19,94,70,115,-53,-54, -58,-127,-76,-98,-109,-24,-83,-93,-92,97,80,-107,-67,84,-127,82,127,-111,-97,-6,109,72,108,113,-65,-112,120,94,97,-104,79,86,86,-57,-125,-53,-100,-80,127,96,-65,-49,54,96,43,106,-73,-75, -27,-29,-44,-53,-73,-5,-45,-37,-78,34,45,-36,-23,103,-65,34,64,-62,-30,-46,89,-127,-64,45,-28,-73,51,18,46,-51,112,51,30,-37,-79,-6,-57,-36,41,36,-35,-44,47,54,9,75,-41,-19, 
  /* [0][1][][] */ -97,-81,-69,-92,-77,-27,-75,-103,-98,110,98,-102,-55,45,-121,59,116,-77,-93,105,69,63,-80,87,-127,-105,63,108,64,-77,98,69,75,-108,-127,-77,-116,-69,104,82,-77,-43,60,86,53,127,-96,-88, -127,-113,-127,-127,-127,-111,-127,-127,-127,127,127,-127,-127,127,-92,127,115,-127,-127,-63,127,68,127,127,-107,-127,127,127,127,-127,122,127,127,-127,-122,-127,-127,-127,105,127,-127,-127,127,127,75,97,-127,-127, -54,-12,-82,-94,-100,-91,-78,-79,-102,74,61,-50,-54,99,-93,55,96,-58,-54,-127,103,-125,-88,44,-31,-90,36,27,77,-57,127,61,51,-75,-103,-40,-89,-66,46,68,-87,-44,73,77,12,44,-70,-70, 
  /* [0][2][][] */ -42,-11,-34,-46,-83,-30,-46,-67,-57,65,38,-24,-37,-16,-69,20,38,-45,-34,27,37,35,-26,38,-63,-15,22,48,19,-43,55,39,22,-77,-51,-59,-22,-47,0,31,-71,-67,43,-4,76,55,-69,-37, -72,-10,-95,-59,-98,-127,-81,-61,-86,101,38,-48,-55,55,-64,51,67,-53,-56,-71,60,18,38,29,-43,-34,47,58,43,-78,45,77,53,-104,-84,-99,-26,-78,11,67,-92,-105,87,31,127,-10,-81,-51, -32,34,-62,-38,-47,-94,-53,-51,-52,78,13,-16,-20,17,8,26,79,-44,-50,-93,22,-47,-30,20,-14,-57,5,22,36,-40,85,38,7,-74,-72,-49,-17,-40,10,30,-68,-66,51,12,66,12,-43,-40, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0016029555117711425, 0.0038465447723865509, 0.0039714663289487362, 0.0030065213795751333, 0.0043386947363615036, 0.0038152921479195356, 0.0051376856863498688, 0.0057416758500039577, 0.0014194094110280275, 0.004525281023234129, 0.0030551210511475801, 0.002760434290394187, 0.0064937928691506386, 0.0029658605344593525, 0.0039174868725240231, 0.0034523725043982267, 0.0013261530548334122, 0.0027556153945624828, 0.0033833901397883892, 0.0057091470807790756, 0.0022004565689712763, 0.01275942474603653, 0.0048926975578069687, 0.0037369811907410622, 0.001418839325197041, 0.0021979815792292356, 0.0027533096726983786, 0.0056563708931207657, 0.002027993556112051, 0.0054144933819770813, 0.0056248935870826244, 0.010214809328317642, 0.0026703630574047565, 0.0030679705087095499, 0.0025432538241147995, 0.0043245595879852772, 0.0041215666569769382, 0.0050492412410676479, 0.004467744380235672, 0.0034803035669028759, 0.0066615794785320759, 0.001952063525095582, 0.0032633389346301556, 0.0027881318237632513, 0.013169901445508003, 0.0051568495109677315, 0.0031804481986910105, 0.0035949917510151863, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 712, 2843, 1449, -99, -418, 497, 7224, 3499, 1895, -3549, 1479, 147, 4910, 177, 1138, -1288, -77, 3782, 433, 1106, -374, 42793, 1329, -1162, 976, 2781, 2229, -1502, 296, 148, -2315, -1907, 2386, 814, 5007, 6703, 3914, 5397, -2625, -1509, -950, 1226, 1526, 537, -2575, -2574, 3749, 828, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00033425804576836526, 0.00024638907052576542, 0.00030883259023539722, 0.00039247894892469049, 0.00038953204057179391, 0.00023145248997025192, 0.00011629355867626145, 0.00018591801926959306, 0.00022406122297979891, 0.00015694119792897254, 0.00026211506337858737, 0.00038028915878385305, 0.00013921175559516996, 0.00042622006731107831, 0.0004161038959864527, 0.00027040261193178594, 0.00059112400049343705, 0.00016869656974449754, 0.00039627717342227697, 0.00029679792351089418, 0.00031801921431906521, 3.8644553569611162e-05, 0.00031097378814592957, 0.00023410447465721518, 0.00029253101092763245, 0.00024976269924081862, 0.00025830676895566285, 0.00032730636303313076, 0.00033871506457217038, 0.00043134726001881063, 0.00022985601390246302, 0.00021084809850435704, 0.00029522518161684275, 0.00039222792838700116, 0.0001723980822134763, 0.00014482002006843686, 0.00022707565221935511, 0.00015604555665049702, 0.00023349391994997859, 0.00022090025595389307, 0.0003556191804818809, 0.00035592957283370197, 0.00021429976914077997, 0.00033811447792686522, 0.00019433756824582815, 0.00019647246517706662, 0.00018529653607401997, 0.00022043834906071424, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -21,45,-57,59,37,127,28,25, 
  /* [1][0][][] */ 51,-127,-94,-30,-28,58,55,-29, 
  /* [2][0][][] */ -63,50,-31,-126,-46,-127,-24,-60, 
  /* [3][0][][] */ -7,127,59,37,16,-86,-38,34, 
  /* [4][0][][] */ -81,31,-127,85,20,-20,-46,-60, 
  /* [5][0][][] */ 97,-90,-127,35,14,-19,76,-39, 
  /* [6][0][][] */ -22,-90,-68,10,-127,-42,-63,100, 
  /* [7][0][][] */ -17,-48,-15,-40,51,0,-35,127, 
  /* [8][0][][] */ 26,27,-97,-116,44,-35,-127,-110, 
  /* [9][0][][] */ -127,60,-14,104,-12,81,103,-1, 
  /* [10][0][][] */ -34,-6,89,-127,-35,68,24,36, 
  /* [11][0][][] */ 96,-12,101,27,-49,40,88,127, 
  /* [12][0][][] */ 51,47,32,-55,63,125,115,-127, 
  /* [13][0][][] */ 37,52,-44,64,-7,-127,-37,51, 
  /* [14][0][][] */ 16,-127,-27,-19,20,64,32,-23, 
  /* [15][0][][] */ -85,-10,2,-76,65,127,-82,-33, 
  /* [16][0][][] */ 12,-34,104,16,-24,26,127,71, 
  /* [17][0][][] */ 66,21,54,25,-21,-92,-30,-127, 
  /* [18][0][][] */ -127,26,-66,-9,-11,-101,21,-74, 
  /* [19][0][][] */ 63,11,108,-27,-56,34,108,127, 
  /* [20][0][][] */ 22,127,55,1,24,37,49,10, 
  /* [21][0][][] */ -37,21,29,-117,-67,127,-11,-6, 
  /* [22][0][][] */ 39,1,88,-8,-45,15,127,89, 
  /* [23][0][][] */ -71,113,54,33,-97,-75,-127,119, 
  /* [24][0][][] */ -17,-12,97,17,-119,127,-2,-83, 
  /* [25][0][][] */ -43,28,72,21,-127,50,-58,13, 
  /* [26][0][][] */ -41,-127,26,-49,10,36,-13,-15, 
  /* [27][0][][] */ -34,74,37,43,-18,127,-39,-8, 
  /* [28][0][][] */ 10,-127,51,22,59,118,37,45, 
  /* [29][0][][] */ 16,127,-20,42,-63,-56,-12,24, 
  /* [30][0][][] */ -61,75,106,86,-127,-60,-47,-103, 
  /* [31][0][][] */ 20,62,25,55,-51,-13,14,-127, 
  /* [32][0][][] */ -24,-25,-69,55,-127,-26,-53,10, 
  /* [33][0][][] */ 73,12,59,61,-28,56,48,127, 
  /* [34][0][][] */ 127,8,-125,-35,-54,-3,71,37, 
  /* [35][0][][] */ 102,108,95,-127,-57,-86,31,113, 
  /* [36][0][][] */ -36,-119,127,47,54,70,-5,-29, 
  /* [37][0][][] */ -6,9,-23,-2,-9,-46,-47,127, 
  /* [38][0][][] */ 127,3,51,9,-10,26,-58,41, 
  /* [39][0][][] */ 63,74,-102,-127,-81,75,28,-74, 
  /* [40][0][][] */ -51,127,-51,72,-56,-12,-58,-4, 
  /* [41][0][][] */ -127,50,-24,-61,76,60,3,-85, 
  /* [42][0][][] */ 43,-44,-6,-26,-24,127,7,97, 
  /* [43][0][][] */ -71,45,127,18,80,22,-40,5, 
  /* [44][0][][] */ 13,127,-2,31,-46,-63,-16,-7, 
  /* [45][0][][] */ -94,99,82,-127,-92,26,-67,-63, 
  /* [46][0][][] */ 47,-49,-25,18,33,8,-127,64, 
  /* [47][0][][] */ -78,-127,19,67,45,-69,0,86, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0033818590454757214, 0.0024928438942879438, 0.0031246165744960308, 0.0039709093980491161, 0.0039410940371453762, 0.0023417228367179632, 0.0011766011593863368, 0.0018810273613780737, 0.0022669415920972824, 0.0015878541162237525, 0.0026519515085965395, 0.003847579238936305, 0.001408476266078651, 0.0043122856877744198, 0.0042099351994693279, 0.0027358010411262512, 0.0059807025827467442, 0.0017067891312763095, 0.0040093380957841873, 0.0030028556939214468, 0.0032175623346120119, 0.00039098662091419101, 0.0031462803017348051, 0.0023685542400926352, 0.0029596854001283646, 0.0025269766338169575, 0.0026134210638701916, 0.0033115253318101168, 0.0034269529860466719, 0.0043641598895192146, 0.0023255704436451197, 0.0021332576870918274, 0.002986943582072854, 0.0039683696813881397, 0.0017442392418161035, 0.0014652179088443518, 0.0022974400781095028, 0.0015787924639880657, 0.0023623770102858543, 0.0022349604405462742, 0.0035979803651571274, 0.0036011207848787308, 0.0021681799553334713, 0.0034208763390779495, 0.0019662121776491404, 0.0019878121092915535, 0.0018747394206002355, 0.0022302870638668537, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 8002, -12282, -543, 5200, 4423, -5291, 2918, 4947, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022189154697116464, 0.00020498820231296122, 0.00012014617823297158, 0.00017297142767347395, 0.00024650199338793755, 0.0001252613146789372, 0.00020886650600004941, 0.00011275201541138813, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -23,-2,-11,-38,-64,-18,-4,-25,64,10,4,-9,5,14,-20,11,-32,17,-21,-24,6,7,-16,-5,18,-12,85,7,-13,-83,-19,10,-5,32,127,-11,-21,-45,33,-39,31,8,0,-20,-18,-4,-21,-92, 
  /* [1][0][][] */ 16,-30,-8,63,3,-7,19,39,65,74,40,-52,-54,68,-3,2,-6,-28,21,-19,-65,39,-43,31,85,15,-29,29,25,-1,127,29,-18,-33,-32,-4,-19,10,-19,-12,2,-27,4,21,-6,38,31,24, 
  /* [2][0][][] */ -49,-9,-57,112,-51,-59,21,-52,-72,35,46,-99,-25,-3,-43,4,127,33,-70,-45,-55,-34,-27,14,82,-22,124,-12,70,-2,-63,17,3,-21,45,4,-40,32,-5,-101,65,-90,-54,-105,-13,-68,-59,98, 
  /* [3][0][][] */ 27,-56,21,-38,30,-21,-14,-72,51,-68,8,-29,-79,-76,-14,9,19,-25,42,-36,-12,32,-80,7,78,-33,51,16,3,-6,3,-19,-36,35,27,-28,-53,30,-5,1,127,14,-53,40,-61,52,-6,-48, 
  /* [4][0][][] */ 19,6,8,10,0,26,-13,-16,44,22,11,-43,-1,4,-65,21,-6,17,24,-22,-24,29,0,41,32,-1,-34,8,50,-17,-19,20,-3,-13,29,19,-127,-4,47,11,10,1,-4,15,-35,49,-30,-101, 
  /* [5][0][][] */ -38,-95,25,112,-38,-2,-55,95,-95,87,55,37,-81,25,74,-31,-19,34,29,-4,5,35,40,54,-52,9,-29,39,-38,-100,36,13,-108,-54,-31,1,127,4,-23,17,-41,-3,91,95,20,36,43,44, 
  /* [6][0][][] */ 90,-1,-17,-17,88,-29,-25,-68,38,28,28,-33,-16,8,12,8,-5,5,-10,-31,-29,13,16,17,56,-52,52,-3,-20,114,-26,10,44,25,-127,-16,-86,-35,26,-70,-6,-5,-2,-92,0,-1,-22,-16, 
  /* [7][0][][] */ -33,-69,52,-44,12,127,38,-55,4,-87,-53,2,-9,-22,-55,3,9,-42,104,60,54,-28,15,-7,-22,7,97,-6,51,16,9,1,-35,-21,-51,105,-103,97,-25,-24,-50,50,14,-69,6,-19,66,-28, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0094303907826542854, 0.008711998350918293, 0.0051062125712633133, 0.0073512853123247623, 0.010476334020495415, 0.0053236060775816441, 0.0088768266141414642, 0.0047919605858623981, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 10020, 2995, -2023, 8183, 955, -1471, 5140, -1317, 3498, 5844, 573, 652, -3717, 9478, 3898, 33, -4881, -205, 1255, 2218, 16970, 630, -14971, 830, -5024, -28, 1048, 555, -1380, -941, -4617, 978, 16335, -817, -95, 1708, -932, 266, -986, 2793, 18150, 823, 4519, 581, -259, 266, -4433, 6712, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00022223526320885867, 0.00028548369300551713, 0.00018983069458045065, 0.00031013120315037668, 0.00034146150574088097, 0.00061089859809726477, 0.00013952732842881233, 0.00020435823535080999, 5.8895504480460659e-05, 0.00020974186190869659, 0.00039147707866504788, 0.00054621294839307666, 0.00025601559900678694, 0.0002018457162193954, 0.00024075960391201079, 0.00032260690932162106, 5.206433343118988e-05, 0.0033371453173458576, 0.00043740883120335639, 0.00020850972214248031, 9.4155038823373616e-05, 0.00053442351054400206, 0.00012894009705632925, 0.00021480448776856065, 0.00031955059967003763, 0.00027941580628976226, 0.00030878567486070096, 0.00024981235037557781, 0.0005178998108021915, 0.00025757783441804349, 0.00020777668396476656, 0.00043167854892089963, 6.9059511588420719e-05, 0.00032330577960237861, 0.00015483290189877152, 0.00054522173013538122, 0.00016435688303317875, 0.00027394035714678466, 0.00095069815870374441, 0.00030481198336929083, 5.7403674873057753e-05, 0.00032334489515051246, 0.00018816532974597067, 0.00011180295405210927, 0.00032404845114797354, 0.00030571690876968205, 0.00013734959065914154, 0.00046219862997531891, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -72,55,-38,-67,-8,-12,28,-12,13,-19,5,39,7,-86,-103,21,106,-6,64,39,-102,-61,106,-99,-12,-33,-10,101,-17,16,23,127,1,-10,-9,4,10,-43,-4,15,91,-78,-41,45,91,-108,-31,-8, -9,-127,36,-127,-5,-14,-55,127,88,-73,24,41,24,-127,-85,10,-67,8,-27,-78,-107,-4,66,127,14,2,9,127,23,-4,-1,-107,-97,24,-5,-26,127,-120,55,-12,-1,-115,-52,30,110,63,29,-35, -20,6,21,-16,-6,38,31,69,3,7,2,26,34,38,-70,25,105,11,-29,15,-127,50,35,16,-4,71,-1,-67,-22,1,16,-42,-33,4,3,8,-14,127,-15,10,92,-66,19,-33,74,38,-39,-15, 
  /* [0][1][][] */ -20,-20,-127,-30,-35,25,-3,7,48,-68,-9,-106,-23,-40,-127,111,100,5,127,78,-21,127,127,103,5,-44,-44,-4,36,-40,35,-106,7,-24,-49,-8,26,-94,49,21,66,127,-27,-12,-63,127,68,-38, -127,57,124,120,127,-112,-127,-6,-14,-127,-127,-127,127,-17,-7,41,14,-127,-107,-127,108,-18,-61,-104,127,-34,127,-73,127,127,-33,73,-127,-127,127,-127,90,-66,-127,-127,23,93,-104,20,-127,-70,127,127, -13,12,7,29,36,127,-12,61,86,1,47,-57,-10,-5,-66,-16,127,50,-11,48,-78,-118,87,-32,15,127,12,-2,34,26,127,19,44,8,58,8,-19,102,48,-9,15,60,115,-14,-47,-50,63,-11, 
  /* [0][2][][] */ -47,4,-55,-15,-9,-17,2,-9,36,11,0,50,4,-4,64,-12,2,2,42,5,-79,-6,81,34,-5,-52,-18,-92,-9,-18,-15,-32,-28,51,-4,-11,-68,7,0,8,4,1,-60,-61,-24,15,-52,-40, -36,-52,55,0,-89,-23,-89,-94,127,57,44,55,-2,-37,25,6,76,102,-50,-24,-115,-1,33,-37,-3,-55,-70,-107,-20,-37,74,24,-85,45,-68,-20,6,-99,35,42,-127,-8,-127,127,23,-1,55,-43, 4,-8,29,5,-48,22,17,-91,-1,-19,-21,20,10,22,91,-127,91,-20,-45,-19,-98,9,9,-23,-8,23,-35,2,-9,-31,11,5,-28,46,-47,-7,-124,100,-21,25,4,-23,30,48,-31,-14,-69,-22, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0094449985772371292, 0.012133056297898293, 0.0080678043887019157, 0.013180575333535671, 0.014512114226818085, 0.025963189080357552, 0.0059299115091562271, 0.0086852246895432472, 0.0025030588731169701, 0.0089140292257070541, 0.016637776046991348, 0.023214049637317657, 0.010880662128329277, 0.0085784429684281349, 0.010232282802462578, 0.013710793107748032, 0.0022127341944724321, 0.14182867109775543, 0.018589874729514122, 0.008861662819981575, 0.0040015890263020992, 0.02271299809217453, 0.0054799537174403667, 0.0091291908174753189, 0.013580900616943836, 0.011875172145664692, 0.013123391196131706, 0.010617024265229702, 0.022010741755366325, 0.010947057977318764, 0.0088305091485381126, 0.018346337601542473, 0.0029350291006267071, 0.013740494847297668, 0.0065803979523479939, 0.02317192405462265, 0.0069851675070822239, 0.011642464436590672, 0.040404669940471649, 0.012954508885741234, 0.0024396560620516539, 0.013742157258093357, 0.0079970266669988632, 0.0047516254708170891, 0.013772059231996536, 0.01299296785145998, 0.0058373576030135155, 0.019643440842628479, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3934, 1295, 4061, 10735, 398, 4310, 2057, 1595, 2046, 4421, 3194, 7050, 2028, 1872, 3590, -31, 253, -2860, 5220, 2235, 1251, 4889, 8015, 734, 3656, 3537, 1829, -85, -1445, 1695, 6604, 2157, 1163, 969, 587, -494, 1142, 2015, 16, 1883, 1512, 4942, 2535, 664, 3300, 1212, -170, 16435, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0002292183053214103, 0.000448098115157336, 0.00016895371663849801, 0.00010750692308647558, 0.0013016957091167569, 0.00015790649922564626, 0.00033062984584830701, 0.00039476688834838569, 0.00024973350809887052, 0.00016238956595771015, 0.0002464097342453897, 9.9798518931493163e-05, 0.00035161335836164653, 0.00021421276323962957, 0.00016595300985500216, 0.00022325104509945959, 0.00037134485319256783, 0.00028536800527945161, 0.00018518026627134532, 0.0004549406876321882, 0.00059118634089827538, 0.00016888018581084907, 0.00011065643047913909, 0.00031130717252381146, 0.00016639434034004807, 0.0002644417982082814, 0.00038915578625164926, 0.00023947279260028154, 0.0003122277557849884, 0.00062113429885357618, 0.00013870923430658877, 0.00035839452175423503, 0.00051158899441361427, 0.00032549718162044883, 0.00098260515369474888, 0.00027477386174723506, 0.00020910920284222811, 0.00018549396190792322, 0.00021862475841771811, 0.00038156556547619402, 0.00024506307090632617, 0.00016435727593488991, 0.00017764543008524925, 0.00033121940214186907, 0.00017155573004856706, 0.00038196609239093959, 0.00047038067714311182, 6.6708060330711305e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-25,36,-113,-113,125,-6,-55, 
  /* [1][0][][] */ 72,0,22,-17,2,61,-127,42, 
  /* [2][0][][] */ -31,72,-127,96,-67,124,36,41, 
  /* [3][0][][] */ 106,-39,-32,66,3,-79,10,127, 
  /* [4][0][][] */ -82,-9,-5,15,-20,-34,127,3, 
  /* [5][0][][] */ 57,120,29,44,-127,-54,12,-25, 
  /* [6][0][][] */ -2,-65,31,127,14,-96,-16,42, 
  /* [7][0][][] */ 127,10,86,10,-90,38,77,110, 
  /* [8][0][][] */ -41,-127,49,49,89,-28,-23,4, 
  /* [9][0][][] */ -77,-116,17,-29,-26,2,-52,127, 
  /* [10][0][][] */ -34,-106,22,108,60,127,14,-26, 
  /* [11][0][][] */ -127,-127,32,-73,56,53,-54,123, 
  /* [12][0][][] */ 89,-15,84,-86,21,-127,90,-4, 
  /* [13][0][][] */ 42,11,19,127,-13,17,34,-65, 
  /* [14][0][][] */ -38,-11,40,7,127,-22,-8,122, 
  /* [15][0][][] */ -88,127,51,89,71,116,-54,111, 
  /* [16][0][][] */ -3,-18,-57,-127,-49,51,12,68, 
  /* [17][0][][] */ 28,127,9,50,-35,-40,6,10, 
  /* [18][0][][] */ 15,25,-20,-127,-43,-70,26,-16, 
  /* [19][0][][] */ 31,-66,-127,-100,-80,117,28,-10, 
  /* [20][0][][] */ 27,7,15,-2,127,24,32,-33, 
  /* [21][0][][] */ -127,-81,-58,-73,31,45,38,-9, 
  /* [22][0][][] */ -57,-35,79,127,35,-40,-50,103, 
  /* [23][0][][] */ 14,38,-38,117,127,19,35,119, 
  /* [24][0][][] */ 127,8,-126,-15,-3,-17,42,-42, 
  /* [25][0][][] */ 13,-1,-53,-20,69,-34,-127,-71, 
  /* [26][0][][] */ 127,0,101,-42,-84,45,63,120, 
  /* [27][0][][] */ 20,-36,-49,127,40,13,-8,-105, 
  /* [28][0][][] */ -63,127,82,67,69,-20,-27,2, 
  /* [29][0][][] */ -1,-5,53,3,-73,4,127,66, 
  /* [30][0][][] */ -58,-66,48,-68,-66,127,63,44, 
  /* [31][0][][] */ 100,19,78,-22,-93,72,80,127, 
  /* [32][0][][] */ -115,-20,-33,31,-25,14,127,17, 
  /* [33][0][][] */ -101,127,46,55,36,18,-79,13, 
  /* [34][0][][] */ 109,13,22,-16,11,51,-127,27, 
  /* [35][0][][] */ 7,-5,18,27,-41,30,14,-127, 
  /* [36][0][][] */ 23,17,-73,-124,61,-24,36,127, 
  /* [37][0][][] */ 74,-37,-68,-58,-37,24,49,-127, 
  /* [38][0][][] */ 38,125,20,127,-85,-85,-22,-13, 
  /* [39][0][][] */ 98,-11,120,-9,-92,31,122,127, 
  /* [40][0][][] */ -75,-75,127,100,-6,-28,-90,48, 
  /* [41][0][][] */ 10,-5,20,32,18,-49,-10,127, 
  /* [42][0][][] */ 53,-87,-85,-74,-64,79,52,-127, 
  /* [43][0][][] */ 99,-10,127,-32,-80,-13,109,126, 
  /* [44][0][][] */ -127,-97,-75,96,111,-25,-77,47, 
  /* [45][0][][] */ 127,-23,103,-30,-45,18,-16,77, 
  /* [46][0][][] */ 60,-120,-1,94,127,16,77,1, 
  /* [47][0][][] */ 78,109,-27,127,-53,-64,46,-91, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.002666502958163619, 0.0052127381786704063, 0.0019654433708637953, 0.0012506310595199466, 0.015142662450671196, 0.0018369307508692145, 0.0038462262600660324, 0.0045923343859612942, 0.0029051569290459156, 0.0018890824867412448, 0.0028664914425462484, 0.0011609590146690607, 0.0040903282351791859, 0.002491943072527647, 0.001930536120198667, 0.0025970856659114361, 0.0043198652565479279, 0.0033196939621120691, 0.0021542073227465153, 0.005292337853461504, 0.0068772877566516399, 0.001964587951079011, 0.0012872694060206413, 0.0036214450374245644, 0.0019356700358912349, 0.0030762588139623404, 0.0045270603150129318, 0.0027857937384396791, 0.0036321543157100677, 0.0072256727144122124, 0.0016136084450408816, 0.0041692135855555534, 0.0059513296000659466, 0.0037865177728235722, 0.01143067330121994, 0.0031964522786438465, 0.0024325733538717031, 0.0021578564774245024, 0.0025432680267840624, 0.0044387630186975002, 0.0028508256655186415, 0.0019119727658107877, 0.0020665542688220739, 0.0038530847523361444, 0.0019957127515226603, 0.0044434224255383015, 0.0054719517938792706, 0.00077601673547178507, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4204, 2788, 1081, 10062, 7705, 4322, 2247, -2484, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00011924719001399353, 0.00010676492820493877, 0.00011463622649898753, 0.0001482008519815281, 0.0001049956408678554, 0.00011746662494260818, 9.7871423349715769e-05, 0.00029886522679589689, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -32,35,-28,-3,-46,-23,-81,28,8,20,35,35,35,1,-41,8,-41,41,10,-68,30,45,-127,4,-6,12,-36,45,-5,-11,21,24,11,-26,36,17,-2,106,-69,-20,-5,16,-25,32,2,4,17,-5, 
  /* [1][0][][] */ -82,-104,-62,4,85,-27,-126,54,-22,-41,-20,-78,-19,81,4,-5,124,-127,-9,-21,-62,-3,-4,-18,30,-8,-34,-51,20,-6,-117,-26,29,-67,-85,-102,41,8,-99,-9,6,39,14,87,-17,10,4,50, 
  /* [2][0][][] */ 14,-67,10,59,114,12,101,-13,-34,-22,-15,-44,8,-26,16,32,-32,-92,47,-55,10,-68,-50,18,-69,57,70,-97,-31,-1,-56,-54,18,10,-68,-49,0,127,84,-28,-13,10,-23,-78,45,39,48,-23, 
  /* [3][0][][] */ 12,6,23,-16,38,28,23,-94,25,21,-10,12,3,-109,-17,5,-30,14,-14,-6,-4,48,-127,6,18,-98,31,32,42,-19,-23,53,6,10,0,-29,-94,-43,10,-13,-8,1,30,-2,-15,7,3,-45, 
  /* [4][0][][] */ 30,-60,0,71,52,6,-35,-1,-40,-19,26,-41,69,33,-17,27,-47,-66,62,35,30,-46,127,20,-37,10,-49,-19,-15,13,-85,-38,81,-27,-49,-66,-48,-46,-26,-3,-66,95,-1,-11,58,79,39,22, 
  /* [5][0][][] */ -57,-21,-29,48,-8,9,-3,-46,-56,-32,-3,-27,14,36,-63,11,127,-18,51,-67,26,-87,-4,-10,76,-107,-89,-7,56,-43,29,-73,12,-53,-39,23,-78,-19,17,-29,-44,27,85,39,37,15,26,-38, 
  /* [6][0][][] */ -31,9,-33,36,-23,73,-70,6,-19,0,-127,14,49,37,111,18,19,11,44,-11,38,-18,-49,-16,15,-1,-74,15,3,-54,8,-24,35,-43,9,9,2,-12,-52,-20,-32,46,-29,34,28,32,31,-1, 
  /* [7][0][][] */ 32,-4,39,-17,4,7,14,-12,15,5,-9,-3,-11,-6,-3,-14,11,-3,-24,-18,-20,13,127,13,3,-16,2,9,6,-11,-20,13,-2,21,-2,-19,-8,12,8,28,3,-2,7,-3,-17,0,-24,16, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0050680055283010006, 0.0045375092886388302, 0.0048720394261181355, 0.0062985359691083431, 0.0044623147696256638, 0.0049923313781619072, 0.0041595352813601494, 0.012701772153377533, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 4627, -691, -172, -594, 9910, 2268, 682, 3310, 4816, 168, -1895, -268, -745, -1530, -884, -140, 11031, -81, -461, 32810, 1574, 12576, -1419, 922, -211, -9113, 9160, -345, 503, -209, 3746, 6919, 686, -34, -645, 482, 7887, 961, 2851, -916, 798, 47, 18730, -6494, 1425, 32, -44, -854, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.4032770751509815e-05, 0.00017645389016252011, 0.0025087271351367235, 0.0011993524385616183, 0.00011982154683209956, 0.00014747696695849299, 7.1861402830109e-05, 0.00035267134080640972, 0.00017367648251820356, 0.00034186348784714937, 5.1031158363912255e-05, 0.00070657848846167326, 0.00093615864170715213, 0.00014843903772998601, 0.00011860335507662967, 0.0082470057532191277, 0.00017038980149663985, 0.0001718126586638391, 0.00044683425221592188, 0.0001041967625496909, 0.0010631565237417817, 0.00010000487236538902, 0.00027457359828986228, 0.00013335974654182792, 0.00013052171561866999, 0.00078147108433768153, 0.00011846355482703075, 0.00031635712366551161, 0.00096272584050893784, 0.00060940423281863332, 0.00010909960110438988, 0.00012017402332276106, 0.0012388707837089896, 0.00056650082115083933, 0.00017388018022757024, 0.00020670054072979838, 0.00015390712360385805, 5.700291512766853e-05, 9.1399793745949864e-05, 0.00026064363191835582, 0.00032534328056499362, 0.00045365543337538838, 7.0013651566114277e-05, 0.00022941238421481103, 0.00098492740653455257, 0.00062710500787943602, 0.0058345692232251167, 0.00054907379671931267, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 88,-40,-69,-85,11,-105,75,-49,63,18,109,49,-99,60,52,-116,81,-96,7,-41,-127,-52,38,113,-12,72,-3,67,-127,6,69,-69,-44,-62,53,90,-127,62,113,79,-37,-127,-63,41,-70,-36,8,-82, 76,-56,76,127,75,34,122,-108,-79,92,74,69,0,60,56,120,84,-93,-96,-62,84,-85,54,0,107,127,-29,85,2,76,65,-45,49,112,127,127,-94,62,81,-31,97,29,-36,87,127,105,-3,-8, 15,-22,6,-43,24,52,19,-83,-26,43,-68,37,94,-7,-63,-1,36,-32,95,-21,28,0,-83,-97,21,7,-6,33,29,91,27,10,-3,-45,31,35,-25,14,13,-55,-46,111,17,65,-65,-83,-1,81, 
  /* [0][1][][] */ 107,68,-127,23,-85,-127,82,-70,95,-72,127,-95,99,94,127,127,-38,111,-5,-72,115,-73,51,127,-10,-2,-37,16,-60,75,64,-127,-127,-72,-19,35,-18,98,127,127,-50,-84,-127,53,-8,-29,-125,-127, 127,127,112,-16,-127,14,127,-127,-127,-127,94,-127,44,127,97,-123,-32,127,127,-127,-64,-127,77,-42,67,12,-127,72,6,127,127,-94,111,127,-26,9,-26,127,108,-47,127,-10,-65,127,-14,127,127,46, 23,59,5,13,-36,80,30,-74,-19,-96,-75,-67,-127,0,-75,1,42,34,-103,-45,-56,-10,-127,-116,-32,7,-71,26,39,75,40,8,2,-62,-5,1,-8,27,24,-74,-64,93,-25,90,2,-85,5,99, 
  /* [0][2][][] */ 35,-36,-27,-4,37,-22,18,-40,84,21,27,45,9,33,-2,-13,-127,-30,-9,-17,12,-28,13,46,86,-17,-12,-98,16,30,-19,-77,-27,-42,-58,-8,65,14,39,77,-99,-60,-103,24,-3,-8,91,-63, 24,-59,6,-2,35,5,36,-59,-81,65,-3,60,-17,45,2,15,-96,-22,-17,-59,-32,-66,33,-10,127,-13,-40,-127,14,77,-4,-48,26,82,-46,10,70,44,39,-27,-66,-4,-54,88,-8,-9,-101,63, 4,-22,26,0,5,24,15,-34,-3,45,-35,33,20,-22,-19,0,28,-3,14,-39,1,5,-39,-60,-7,-8,-9,-40,15,55,-12,11,-6,-40,-29,-2,54,12,10,-39,-108,53,-22,40,0,6,3,15, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0027213927824050188, 0.0074992901645600796, 0.1066209003329277, 0.050972476601600647, 0.0050924154929816723, 0.0062677711248397827, 0.0030541096348315477, 0.014988532289862633, 0.0073812501505017281, 0.014529198408126831, 0.0021688241977244616, 0.030029585584998131, 0.039786741137504578, 0.0063086589798331261, 0.0050406423397362232, 0.35049772262573242, 0.0072415661998093128, 0.0073020379059016705, 0.018990455195307732, 0.0044283624738454819, 0.045184150338172913, 0.0042502069845795631, 0.01166937779635191, 0.0056677893735468388, 0.0055471728555858135, 0.033212520182132721, 0.0050347009673714638, 0.013445178046822548, 0.040915846824645996, 0.025899678468704224, 0.0046367328613996506, 0.0051073958165943623, 0.052652005106210709, 0.024076284840703011, 0.0073899077251553535, 0.0087847728282213211, 0.0065410523675382137, 0.0024226238019764423, 0.0038844910450279713, 0.011077354662120342, 0.013827089220285416, 0.019280355423688889, 0.0029755800496786833, 0.0097500262781977654, 0.041859414428472519, 0.026651961728930473, 0.24796919524669647, 0.023335635662078857, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -1814, -9095, 33420, 6961, 12029, 3671, 3004, 186, -1168, -8093, 848, 3417, 24886, -12665, -13, 6770, -6824, -719, 3545, 8234, 15765, 3553, 3361, 713, 12617, 29236, 11313, -13141, 2624, -1320, 365, -3402, 20949, 10165, 12229, -1025, -12846, 138, -4245, -285, -14484, -10907, -686, 3208, 12086, -12924, 14107, -1124, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030042449361644685, 0.000200136229977943, 2.9372742574196309e-05, 0.00016756229160819203, 0.0002408531290711835, 0.00073458929546177387, 0.00095914979465305805, 0.00053525634575635195, 0.00061334238853305578, 0.00031837177812121809, 0.0018442710861563683, 0.0002867787261493504, 5.5029940995154902e-05, 0.00032893690513446927, 0.00067456613760441542, 3.9070084312697873e-05, 0.00025861646281555295, 0.00031234911875799298, 0.00027598231099545956, 0.00017808107077144086, 7.498478953493759e-05, 0.001311233383603394, 0.00025420848396606743, 0.00076796283246949315, 0.00019694834190886468, 6.6651140514295548e-05, 0.00033662308123894036, 0.00025834934785962105, 0.00085617013974115252, 0.00040714885108172894, 0.00083972874563187361, 0.0013088607229292393, 0.0001047769546858035, 0.00021016357641201466, 0.00026584474835544825, 0.00053853832650929689, 0.00034979221527464688, 0.00038261563167907298, 0.00099706300534307957, 0.00033128136419691145, 0.00028301301063038409, 0.00022496934980154037, 0.00027493975358083844, 0.00035413808654993773, 8.5659783508162946e-05, 0.00024493219098076224, 2.3445192709914409e-05, 0.00042626919457688928, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 16,46,11,-16,88,-19,127,4, 
  /* [1][0][][] */ 127,84,87,15,-11,-42,4,117, 
  /* [2][0][][] */ -65,9,-3,127,8,-17,-43,64, 
  /* [3][0][][] */ 44,-26,-127,1,5,-49,21,112, 
  /* [4][0][][] */ -127,102,-124,-10,18,30,-45,-48, 
  /* [5][0][][] */ 121,-15,-9,-46,2,-35,9,-127, 
  /* [6][0][][] */ 8,-9,-1,2,-127,-25,63,8, 
  /* [7][0][][] */ -3,-65,-3,3,-24,4,-127,-1, 
  /* [8][0][][] */ -18,22,31,-13,127,12,-71,-23, 
  /* [9][0][][] */ 127,-34,26,-3,-11,-29,30,107, 
  /* [10][0][][] */ 127,13,-8,-32,-1,4,-2,-125, 
  /* [11][0][][] */ -43,-4,0,127,-1,-40,-38,40, 
  /* [12][0][][] */ -127,8,-89,-17,18,106,-55,-124, 
  /* [13][0][][] */ 112,3,127,10,-11,18,21,46, 
  /* [14][0][][] */ -127,-5,16,16,-1,-14,6,126, 
  /* [15][0][][] */ -124,15,1,121,0,-11,-26,127, 
  /* [16][0][][] */ 63,-71,115,78,-6,-127,33,58, 
  /* [17][0][][] */ 17,-56,-67,127,5,26,2,107, 
  /* [18][0][][] */ 15,-34,-127,43,-18,-1,29,126, 
  /* [19][0][][] */ 26,14,-9,127,-9,7,-67,-43, 
  /* [20][0][][] */ 19,55,111,-110,4,-70,11,-127, 
  /* [21][0][][] */ 4,0,-9,2,-127,-16,61,1, 
  /* [22][0][][] */ 2,61,-2,-7,3,127,-9,0, 
  /* [23][0][][] */ 119,25,-11,92,-4,1,-48,-127, 
  /* [24][0][][] */ -127,17,-83,-52,18,-35,-41,-63, 
  /* [25][0][][] */ -46,-6,-58,-38,5,-127,6,-42, 
  /* [26][0][][] */ -103,-26,-127,5,6,7,-24,-30, 
  /* [27][0][][] */ 96,0,127,13,-13,56,8,51, 
  /* [28][0][][] */ 6,-60,-22,41,21,-127,-2,13, 
  /* [29][0][][] */ -5,-5,27,-127,-14,-4,18,3, 
  /* [30][0][][] */ -49,9,127,-3,3,5,-7,-126, 
  /* [31][0][][] */ -2,11,1,-4,127,21,-51,-2, 
  /* [32][0][][] */ -127,-27,-107,-16,-1,-22,-24,-64, 
  /* [33][0][][] */ 9,-56,4,-33,36,-127,15,-22, 
  /* [34][0][][] */ -53,-107,-127,52,7,-60,-13,-14, 
  /* [35][0][][] */ 57,9,-125,-1,-1,-5,4,127, 
  /* [36][0][][] */ 68,36,86,29,3,127,2,38, 
  /* [37][0][][] */ -13,20,-4,127,7,-18,-12,11, 
  /* [38][0][][] */ 4,19,9,1,127,26,-35,-3, 
  /* [39][0][][] */ -5,9,-11,21,-34,127,-98,-5, 
  /* [40][0][][] */ 127,-20,127,17,-21,34,15,65, 
  /* [41][0][][] */ 114,-11,127,14,-8,15,37,45, 
  /* [42][0][][] */ 53,-64,-17,-37,23,127,19,-36, 
  /* [43][0][][] */ -11,-62,-11,0,-46,-17,-127,-1, 
  /* [44][0][][] */ -22,-127,39,105,23,38,14,-125, 
  /* [45][0][][] */ 123,13,127,0,-3,29,28,44, 
  /* [46][0][][] */ -84,16,4,127,3,6,-37,70, 
  /* [47][0][][] */ -4,42,-11,-4,-2,127,-17,0, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0035561902914196253, 0.0023690562229603529, 0.00034769155899994075, 0.0019834714476019144, 0.0028510310221463442, 0.0086954934522509575, 0.01135366503149271, 0.0063359462656080723, 0.0072602676227688789, 0.0037686361465603113, 0.02183103933930397, 0.0033946624025702477, 0.00065140140941366553, 0.0038936978671699762, 0.0079849865287542343, 0.00046248108264990151, 0.0030612994451075792, 0.0036973445676267147, 0.0032668628264218569, 0.0021079843863844872, 0.00088761129882186651, 0.015521354973316193, 0.0030091211665421724, 0.0090905437245965004, 0.0023313204292207956, 0.00078896409831941128, 0.0039846808649599552, 0.003058137372136116, 0.010134672746062279, 0.0048195095732808113, 0.009940052404999733, 0.015493270009756088, 0.001240267651155591, 0.0024877521209418774, 0.0031468621455132961, 0.0063747954554855824, 0.0041405665688216686, 0.0045291045680642128, 0.011802451685070992, 0.0039214496500790119, 0.0033500867430120707, 0.002663011197000742, 0.0032545216381549835, 0.0041920095682144165, 0.0010139734949916601, 0.0028993156738579273, 0.00027752586174756289, 0.0050458414480090141, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1152, 1660, -1455, -9133, 443, -1355, 228, 4027, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021804930293001235, 0.00028135071625001729, 0.00036271192948333919, 0.00018856326641980559, 0.00025059306062757969, 0.00012835735105909407, 0.00031238081282936037, 0.00020237015269231051, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -13,-13,-22,16,-12,-127,6,40, 
  /* [1][0][][] */ -58,22,-127,111,8,55,-21,38, 
  /* [2][0][][] */ 17,-8,26,-4,-9,-127,13,34, 
  /* [3][0][][] */ 25,49,55,127,19,-46,-39,-13, 
  /* [4][0][][] */ 17,52,18,-22,-127,-7,26,-8, 
  /* [5][0][][] */ 68,-25,127,-104,17,-58,-9,-40, 
  /* [6][0][][] */ 27,127,40,-36,38,-13,-65,-22, 
  /* [7][0][][] */ -22,-27,-42,-19,-10,-127,25,39, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0092670954763889313, 0.011957405135035515, 0.015415256842970848, 0.0080139385536313057, 0.010650205425918102, 0.0054551870562136173, 0.013276183977723122, 0.0086007313802838326, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 17018, 97, 9203, 1537, 9958, -1188, 954, -6091, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00011396006448194385, 0.00047848443500697613, 0.00016195129137486219, 0.00051008869195356965, 0.00021239236230030656, 0.00025991312577389181, 0.00054801302030682564, 8.2831713370978832e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -30,-6,2,1,-2,28,2,14, 6,-2,9,-6,14,127,14,127, -4,-4,3,-7,7,18,3,-1, 
  /* [0][1][][] */ -4,-127,-18,4,-13,-5,-109,8, -127,100,-89,127,-127,-6,127,-43, 2,-1,-11,-64,2,3,53,-21, 
  /* [0][2][][] */ 8,-3,-9,-4,-2,-21,0,14, 47,0,127,-21,13,-110,-5,20, 1,1,-14,-8,0,-19,-2,5, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0048433025367558002, 0.020335588604211807, 0.0068829297088086605, 0.02167876809835434, 0.0090266754850745201, 0.011046307161450386, 0.023290552198886871, 0.0035203478764742613, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 48578, 5092, 58965, 34366, 15264, 565730, 11431, 48405, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 5.4651736718369648e-05, 4.7442495997529477e-05, 6.4145140640903264e-05, 2.870526623155456e-05, 0.00011704837379511446, 5.9939488892268855e-06, 1.5087260180735029e-05, 6.9835376052651554e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 13,-1,16, 12,-22,34, 15,-22,24, 
  /* [0][1][][] */ 44,33,30, 71,21,63, 28,-31,42, 
  /* [0][2][][] */ -18,-92,-10, -27,-127,2, -4,-54,21, 
  /* [1][0][][] */ 28,73,23, 3,7,-3, -34,-70,-27, 
  /* [1][1][][] */ 50,119,38, 0,-1,-4, -57,-127,-40, 
  /* [1][2][][] */ 27,43,10, 2,-3,-1, -35,-54,-4, 
  /* [2][0][][] */ 43,92,10, 54,127,12, 17,43,-2, 
  /* [2][1][][] */ -47,-83,-28, -80,-93,-39, -31,-6,-21, 
  /* [2][2][][] */ 1,11,7, 5,17,-1, 1,11,-7, 
  /* [3][0][][] */ 42,-36,-21, 76,-40,-43, 31,-18,-14, 
  /* [3][1][][] */ 79,-58,-39, 127,-58,-77, 59,-29,-30, 
  /* [3][2][][] */ 17,-22,-6, 40,-30,-18, 15,-12,-2, 
  /* [4][0][][] */ -12,-23,-4, 27,45,10, -16,-28,-3, 
  /* [4][1][][] */ -29,-59,-9, 63,127,19, -34,-61,-7, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -12,-13,-2, 
  /* [5][0][][] */ -44,-75,-42, -61,-101,-57, -48,-38,-25, 
  /* [5][1][][] */ -59,-110,-44, -81,-127,-54, -47,-37,-23, 
  /* [5][2][][] */ -2,4,-11, -1,-1,-4, 0,11,4, 
  /* [6][0][][] */ -100,-5,36, 2,21,-13, 65,18,-19, 
  /* [6][1][][] */ -127,-34,45, 15,22,-25, 108,18,-30, 
  /* [6][2][][] */ -51,-13,17, 15,-7,-1, 33,-13,30, 
  /* [7][0][][] */ -7,15,-2, -17,21,-8, -8,20,-8, 
  /* [7][1][][] */ 16,83,-7, 21,127,-23, -4,60,-28, 
  /* [7][2][][] */ -30,-52,-21, -45,-54,-34, -22,3,-20, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.01393619179725647, 0.012097835540771484, 0.01635701023042202, 0.0073198424652218819, 0.029847333207726479, 0.0015284569235518575, 0.0038472511805593967, 0.017808020114898682, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.095039054751396179, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.084479309618473053, } };
const TfArray<1, int> quant47_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.085962139070034027, } };
const TfArray<1, int> quant51_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.083777308464050293, } };
const TfArray<1, int> quant54_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.098838552832603455, } };
const TfArray<1, int> quant55_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.064991600811481476, } };
const TfArray<1, int> quant59_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.022675815969705582, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.029226725921034813, } };
const TfArray<1, int> quant62_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.057213325053453445, } };
const TfArray<1, int> quant63_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.043254837393760681, } };
const TfArray<1, int> quant66_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.081482477486133575, } };
const TfArray<1, int> quant67_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.031763982027769089, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.13162434101104736, } };
const TfArray<1, int> quant70_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
