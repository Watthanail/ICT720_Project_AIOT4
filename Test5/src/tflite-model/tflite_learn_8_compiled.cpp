/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.03.2024 07:43:05

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 19317, -25184, -24764, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00026472046738490462, 0.00022130883007775992, 0.00022889526735525578, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 116,98,116,-96,-81,25,-11,53,-37,86,-1,65,-20,-84,104,25,-49,86,25,119,-5,-42,37,-33,-127,39,-42,23,61,19,-13,4, 
  /* [1][0][][] */ -6,-45,-57,13,-24,121,-1,-16,127,-70,-7,-121,-50,103,7,-59,97,-32,-6,-86,-106,14,102,80,15,15,14,-9,-66,-40,-16,-10, 
  /* [2][0][][] */ -11,71,-64,71,80,-47,-17,111,93,24,127,-59,-83,-84,71,110,-83,-39,22,-101,84,113,-63,-79,83,-44,-11,-103,31,-65,75,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0036632455885410309, 0.0030625083018094301, 0.0031674907077103853, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -509, 226, -1072, -196, 80, -27, -887, 175, 63, -322, 92, 1285, -1287, -378, -625, -12, 94, -1115, 0, -1040, -1067, -163, -292, -937, -368, -249, -853, -1541, 1036, -998, -1028, -1131, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 9.6577517979312688e-05, 4.9589500122237951e-05, 5.0602189730852842e-05, 4.5906494051450863e-05, 4.2114359530387446e-05, 3.8414880691561848e-05, 4.9290887545794249e-05, 4.1839182813419029e-05, 4.807880031876266e-05, 5.4628573707304895e-05, 4.2116720578633249e-05, 6.3502797274850309e-05, 5.232224430073984e-05, 4.6311106416396797e-05, 5.9288264310453087e-05, 5.518398029380478e-05, 4.3225281842751428e-05, 5.4587133490713313e-05, 5.045737634645775e-05, 5.6280015996890143e-05, 4.7670026106061414e-05, 4.7434717998839915e-05, 5.4710282711312175e-05, 4.8122776206582785e-05, 5.2411603974178433e-05, 5.0115097110392526e-05, 5.3391071560326964e-05, 5.314970258041285e-05, 5.0449187256162986e-05, 4.7540943342028186e-05, 4.8363370297010988e-05, 5.0494269089540467e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -29,-12,43,-8,51,14,-51,-53,10,35,-66,6,40,-12,-23,8,-28,-25,19,18,-47,-57,-12,41,-21,-14,21,1,103,13,-22,-10,43,-53,-50,43,-19,-51,13,-12,19,-52,-5,40,56,-67,36,-15,1,33,-30,32,-27,-19,-28,49,43,16,75,-69,-49,108,-9,20,11,-6,19,19,103,85,26,-54,29,-12,42,22,-30,-7,-43,28,11,-8,28,-31,-36,-36,-59,24,-1,39,13,-49,-8,127,0,28, 
  /* [1][0][][] */ -42,31,-44,0,-40,70,34,14,64,-112,-86,78,17,-18,31,56,93,-35,43,127,-42,0,34,26,25,5,-35,96,-12,12,89,-36,38,93,-30,21,41,47,-12,-54,-58,6,-14,-74,-22,40,-35,-50,-25,-80,61,45,13,66,-52,-47,28,71,80,68,-69,109,-62,-70,-85,36,71,35,81,27,12,-1,-114,76,-54,47,74,-37,-34,48,-69,70,-43,-88,27,104,-55,-50,60,66,97,12,61,86,22,-22, 
  /* [2][0][][] */ 12,5,-75,55,-44,-70,50,56,-110,43,-57,81,56,-40,45,-122,-76,-50,14,22,-108,-38,69,-6,-48,38,61,-13,-81,42,39,52,-85,-45,-96,-120,-98,52,68,-50,-127,-93,-16,-31,-98,71,-51,-90,58,25,56,-103,-60,25,-7,-10,-78,49,-70,-24,-37,29,-58,26,52,12,16,47,-110,30,-10,-92,6,-87,5,0,-71,-47,-21,-16,4,-104,-27,-65,-26,-110,-45,-55,50,71,-39,-11,-65,-99,-64,-83, 
  /* [3][0][][] */ 62,7,33,-41,-47,72,-114,23,42,15,59,-9,65,91,65,8,97,97,-77,5,101,-87,-63,-118,-14,-110,-75,98,15,-96,85,19,-51,-32,-44,-7,-92,-26,26,45,-27,-85,-89,-1,70,32,-52,-88,62,-104,8,-9,80,24,78,-103,-115,-114,-114,-55,-103,20,-20,103,33,-37,-61,-37,-35,-68,-7,102,-3,-94,60,-49,27,91,83,-64,-87,-119,8,96,24,45,-39,-111,-87,28,-5,-94,85,-99,-127,26, 
  /* [4][0][][] */ 59,115,1,51,-49,-13,29,19,59,70,-3,31,16,-29,-11,-66,-21,1,-102,17,118,-90,92,23,-36,0,67,-66,-89,10,-62,-34,81,127,-17,-95,-55,-7,-111,58,-49,-58,-75,-84,34,119,34,50,30,-93,-53,-86,-100,54,-96,13,35,-78,-26,19,-14,-98,-31,-47,-70,58,4,-27,16,-114,-92,-77,-70,12,103,59,40,-18,-8,-62,9,-75,-97,3,2,78,107,13,-115,-84,61,16,35,104,-107,-50, 
  /* [5][0][][] */ 78,-94,58,78,62,-124,25,42,122,-126,-5,-71,50,112,26,53,79,75,-99,72,39,56,21,-39,-101,-54,-12,-111,59,47,26,-120,-29,9,-84,26,-123,-36,45,25,-93,-53,51,107,-48,31,45,-60,-109,102,54,42,40,28,7,-22,109,75,-87,-33,38,-88,63,-42,13,110,-32,29,95,1,125,-58,-46,92,-17,-86,21,-51,8,74,120,48,33,127,-89,93,4,45,87,-113,90,88,-9,37,72,-86, 
  /* [6][0][][] */ -10,-61,83,50,-91,-65,-19,37,-32,-97,-14,-84,54,29,82,-121,19,-19,-7,69,-90,-120,78,34,-71,-93,-28,-63,-35,-119,18,-94,-97,-127,-45,-116,-21,12,-111,50,53,28,-1,-32,-120,68,-101,-57,-92,0,-47,-81,41,-71,61,-48,-9,-25,-78,82,-109,-7,35,-86,-66,36,71,-62,48,-27,-100,-27,35,-82,-92,-51,-90,-104,-67,-44,8,-41,17,-48,-82,-97,-54,-105,52,62,75,-10,-69,-80,45,-45, 
  /* [7][0][][] */ 126,82,-35,-51,-68,121,-23,1,115,-13,-94,-5,23,-82,49,79,59,23,13,122,65,39,-1,86,-76,108,45,56,-105,127,-12,57,27,36,39,113,-111,88,-15,-20,98,-75,91,81,55,12,105,-120,59,-72,-116,-71,-24,97,17,25,121,-75,12,-54,10,-7,91,-96,-78,-54,72,29,-118,17,73,91,86,22,68,65,-60,61,-103,42,97,-35,-6,-53,92,42,-96,108,86,1,102,48,-46,-33,-1,-92, 
  /* [8][0][][] */ 5,41,-50,-92,71,33,-71,-24,4,30,41,72,14,-34,-80,-58,-53,92,-48,4,36,-22,77,93,-101,96,45,63,-70,42,-71,113,90,-19,17,10,105,5,-19,69,76,97,-92,-100,-11,-14,-16,94,25,-93,-38,4,-57,4,-40,-96,39,118,-99,102,105,34,56,127,0,-40,-20,94,-73,47,37,13,72,63,23,19,-33,99,72,57,35,74,-90,-59,26,43,81,-28,42,-37,-78,72,-59,-79,-41,51, 
  /* [9][0][][] */ 15,8,95,46,87,-105,-53,-63,35,59,-9,29,-35,-76,-88,-26,-14,-27,-87,-50,-16,69,-92,-92,111,-9,-33,9,-29,-57,-73,101,18,-7,-2,-4,-61,4,4,-53,23,-58,53,-52,59,25,-81,32,21,-30,-72,-36,49,-61,-54,58,55,-43,-28,-19,-84,74,18,-87,-56,5,70,17,-69,96,74,-92,-2,44,-96,-79,-71,-102,-43,94,12,23,61,31,-43,-97,29,-12,49,12,-48,127,68,-25,40,-36, 
  /* [10][0][][] */ -58,94,93,-74,-10,109,105,27,36,19,27,-89,72,89,-36,15,-34,87,-91,-64,-11,30,60,-77,27,56,-119,-123,-81,93,-89,-61,90,112,93,84,-49,6,-37,42,-36,121,-115,-31,-96,-46,-3,-67,4,-30,39,9,59,31,-71,-39,-105,2,42,-44,-1,81,122,61,117,-76,-100,-18,20,-34,-95,-66,85,62,-81,111,-19,68,65,18,81,-2,69,127,-102,76,118,-14,38,3,2,-85,-46,-32,-42,-103, 
  /* [11][0][][] */ 101,27,50,116,58,20,76,56,105,109,-33,127,-17,-41,73,-24,-19,-62,72,73,21,85,38,-29,-43,-62,2,80,97,4,40,7,-74,-49,70,42,-15,68,11,-39,1,84,-15,31,2,-28,-55,-32,53,117,71,32,-45,-76,74,43,-46,-62,62,-51,-62,108,31,-33,-19,96,-3,23,73,85,-53,-59,33,67,-76,65,-52,44,-2,81,-53,-14,-52,-25,66,-46,20,0,-63,37,32,-22,-66,10,-32,23, 
  /* [12][0][][] */ -14,20,-77,-23,48,-18,-55,-5,-89,13,-40,-23,-66,-19,10,-94,-114,-53,-76,-65,-7,-37,-18,52,-88,-70,54,-115,44,14,-62,73,-94,-83,-61,-23,-36,-90,-46,10,65,2,-123,-66,-48,-99,-61,65,-66,-127,-77,61,-4,-19,-97,40,-41,-79,10,26,24,58,-29,14,64,-1,-66,72,24,50,3,29,39,69,-45,-36,-47,-3,-123,-110,-76,57,8,-16,-60,-3,12,70,-105,-116,49,61,56,-41,2,29, 
  /* [13][0][][] */ 55,-65,63,72,70,126,55,19,67,-82,-15,-30,110,62,35,-42,-105,-65,-54,18,64,-32,107,-65,-67,35,-1,21,-68,-93,80,-9,47,87,-27,20,-73,-44,-21,33,-67,66,-57,-4,-67,13,-19,-31,39,87,-11,-87,-98,23,65,-70,-56,41,-40,-63,-20,109,-99,46,-25,-76,-92,58,-36,-19,85,12,-79,25,-61,-47,-116,60,55,-70,32,-94,96,2,-81,-127,84,72,2,-56,-105,63,115,-99,42,6, 
  /* [14][0][][] */ -78,-91,52,28,27,-58,-26,-96,-85,-64,44,22,-40,-98,-78,-99,-55,-58,-28,36,-65,7,-20,30,-94,-33,-34,5,-102,-67,-66,40,62,-19,-51,-37,52,80,7,-82,-12,-81,13,53,45,-74,5,-81,72,-8,23,55,33,-18,-4,8,-67,-16,7,50,-55,-95,8,22,-103,-10,39,-82,-104,-97,-99,43,-31,67,-1,-69,58,-97,27,-13,29,-49,-127,-11,-95,-79,-115,86,66,-4,51,-72,32,39,-22,11, 
  /* [15][0][][] */ 20,-15,-14,56,76,-127,43,-71,43,-24,-51,-4,56,10,-70,-86,64,11,-61,15,45,15,59,80,52,46,31,74,-6,53,56,-55,-2,10,-73,5,-55,79,85,-48,9,91,-35,-11,19,-47,-38,-66,-3,-66,-29,19,-75,-77,-41,-15,54,37,-26,84,-41,-53,-15,87,-42,82,-56,3,-55,-7,48,-69,6,-25,20,-79,1,44,82,53,-59,49,-74,-28,-92,-27,-71,43,66,50,-83,-48,40,94,-78,47, 
  /* [16][0][][] */ -106,8,56,-72,58,111,-65,22,58,71,-108,83,23,-43,-62,-42,123,91,58,31,118,82,-30,39,-9,73,-69,52,-86,12,51,-22,-80,85,61,67,-19,66,-46,-85,36,-37,80,90,53,104,114,-3,-38,-112,37,127,-49,127,25,56,8,109,20,31,123,108,39,97,108,18,-35,78,74,107,-31,17,47,87,84,85,-16,107,-121,-19,22,-75,59,7,20,88,110,15,98,21,-44,123,84,-44,-109,50, 
  /* [17][0][][] */ 6,-111,-3,36,1,-55,-77,-103,6,-94,43,24,55,22,-115,13,1,18,64,67,-99,-36,-15,-66,-3,30,-87,-13,65,-58,-51,36,-53,-44,-2,-19,-63,55,-95,-49,-99,-57,-37,-32,-18,-14,44,-113,41,116,-34,-3,-45,38,55,-82,-127,42,-31,-114,2,-96,40,49,-92,-83,8,-108,-110,-27,57,-2,-12,-117,-75,26,70,-64,8,-75,-16,-37,-87,-98,-114,35,38,-50,-9,36,-41,-113,-34,51,-14,-11, 
  /* [18][0][][] */ -70,71,116,-34,-9,-109,-95,29,-3,85,-89,-17,-68,28,61,-54,9,-38,46,42,71,-36,15,-56,31,-94,-26,93,22,45,-5,55,-11,-33,-89,-102,-28,25,-1,27,-38,-6,-40,-2,-91,12,19,0,-6,-19,58,31,-100,-18,33,58,-46,9,5,-111,54,127,1,-26,-36,-93,-24,41,45,-52,-73,76,-90,-51,-94,-88,45,45,-4,-81,-54,-10,-43,-60,85,-39,50,61,-117,-55,-72,122,60,-68,35,-22, 
  /* [19][0][][] */ -7,1,36,8,71,-86,52,48,50,-69,0,-29,-37,4,-63,24,34,-100,127,71,-38,39,-63,-11,36,-82,1,-71,-87,-62,-71,13,40,-84,4,-23,-15,-74,-63,-98,12,-109,-84,-14,-87,1,36,-92,-42,68,-51,13,-46,-11,-17,-29,-3,53,20,-42,21,-63,54,25,-75,-23,-41,-22,-28,19,36,-59,-68,-112,-64,-82,-39,-107,-10,60,23,-107,-44,37,-87,-27,-15,-24,47,1,-24,27,-46,65,32,-58, 
  /* [20][0][][] */ 14,48,64,62,-68,95,-11,47,-14,-9,-99,-33,-10,66,12,-99,-66,-60,-37,-46,17,-65,-89,-85,31,-86,-127,48,11,71,-59,71,64,18,-25,37,18,-55,-31,-127,-100,-52,-92,-102,-48,-71,-85,73,29,-110,-101,17,51,73,43,-2,108,51,86,52,107,-78,-81,-65,-55,-83,-71,11,-116,-78,-62,53,-68,-106,18,0,122,48,75,94,52,7,94,-46,28,79,-32,36,7,66,27,30,10,13,-2,-24, 
  /* [21][0][][] */ 77,71,53,-111,99,-105,54,3,-13,-76,-70,25,2,36,-58,-80,-95,-27,37,-50,101,-50,62,-89,43,-79,-33,58,-3,28,-5,-22,0,16,-110,-99,95,77,-117,-34,-12,7,20,-12,-100,-69,-76,75,-20,-65,-2,77,30,58,-110,16,-52,64,-40,108,52,-71,-1,2,72,23,-40,-75,-96,-19,57,75,30,-46,59,55,-101,-29,46,91,7,90,41,-57,18,-91,68,-73,-95,56,78,-127,-33,-42,39,-57, 
  /* [22][0][][] */ -15,-48,-67,-124,58,-44,76,33,-109,74,-68,-84,72,-100,-97,-81,32,53,-127,-81,54,-69,19,21,62,-8,-107,72,-55,-101,-66,-107,42,38,-16,5,5,-18,-45,-102,-6,-21,-18,73,33,-102,60,-30,-53,-84,-19,-20,-71,-96,-49,10,-34,-62,-62,-23,52,-69,-45,-113,-49,5,-99,-54,65,56,-33,-13,-76,-13,65,-77,21,-44,40,37,75,-113,-79,-111,54,67,62,-38,-55,9,-63,5,5,5,-78,48, 
  /* [23][0][][] */ 24,-103,-21,54,115,-118,-14,-118,63,-42,50,69,-3,-95,-14,-16,64,-33,-106,127,54,-91,85,-57,43,-22,70,15,62,85,72,-60,-25,36,42,11,73,-24,-121,-11,-102,-24,5,-124,-84,-82,86,12,67,-124,-104,-7,65,-59,-87,60,-91,-1,48,37,-80,-80,-62,27,12,16,-121,-113,64,-18,81,-81,-2,-49,-63,-101,40,-38,66,100,-63,-31,-3,-99,67,-26,97,-41,-98,63,79,28,92,-76,-22,81, 
  /* [24][0][][] */ -91,-43,-87,-85,-76,-127,-68,-83,45,86,56,29,98,46,-44,-101,-74,27,42,-79,72,-74,-51,-44,36,-39,56,54,89,29,-1,-90,-28,-11,12,22,-46,-89,28,-26,-77,-90,79,-3,5,-36,14,52,-77,-44,-28,-10,68,19,39,-67,-17,55,32,-5,72,-1,-8,88,-119,67,-46,-90,-100,36,-56,-26,-33,20,64,81,32,-68,-94,-76,-75,-73,-57,-103,-7,42,-15,-109,15,-101,-35,-99,-17,-5,-112,16, 
  /* [25][0][][] */ -73,-69,-64,15,65,-45,-74,45,54,-75,-37,42,48,-27,-89,-14,-68,51,20,-45,35,76,-22,-39,20,-33,-78,33,89,-93,20,108,107,-104,69,44,79,-63,2,-9,-78,70,-118,-13,94,19,56,33,-85,105,-46,7,35,-14,-10,12,-22,32,-94,61,79,52,46,33,-1,68,-9,16,-17,-33,-27,-118,29,-54,44,13,62,51,23,4,40,26,-74,59,-67,-59,-108,-69,-37,-17,121,36,-127,-37,-4,-83, 
  /* [26][0][][] */ 21,-119,-40,-32,-75,15,-24,-35,-103,-127,68,62,-69,-57,-9,-24,79,11,-79,-67,-14,41,63,-5,35,36,-4,18,2,6,-95,-23,-26,-69,-83,-110,-68,53,-65,72,-95,62,26,6,-76,36,-48,65,-34,10,-19,71,-8,-58,-22,-107,69,36,16,8,-23,-101,45,-34,85,-34,-61,28,-68,44,60,59,55,-91,-77,-13,20,-103,-95,-17,-40,44,39,-85,47,-14,-57,-9,-85,76,-3,4,-64,65,25,52, 
  /* [27][0][][] */ -20,-18,-78,-100,-71,-33,-91,-43,17,59,-5,-44,9,11,33,-58,30,-46,76,-86,-110,-26,-57,-53,-115,2,-122,43,46,51,-60,-31,17,20,-90,-91,-96,-85,-108,39,-109,-20,5,-12,45,-14,20,48,38,87,88,-84,-28,-104,-28,-57,127,-51,-58,-98,-79,-6,-51,83,8,-71,-124,57,17,-2,-52,-18,16,-68,-29,-103,14,-85,36,65,35,-21,69,-80,-94,-98,-61,-9,-72,-35,14,-24,17,-10,47,82, 
  /* [28][0][][] */ 103,13,123,81,-109,-50,-54,-34,-6,-80,75,91,-101,-51,39,104,83,113,-83,111,-15,45,-70,-41,-73,78,-52,-33,-47,-48,14,17,-68,28,95,72,26,-73,-18,43,107,53,-67,60,-61,11,30,63,36,-34,-81,-26,-63,27,92,44,50,-5,127,58,-15,10,-93,-19,39,92,8,82,-51,42,-84,-38,72,27,-14,-58,-102,-41,-48,68,-45,-64,83,-8,74,-78,73,-46,-87,-28,15,-30,-38,39,-57,-38, 
  /* [29][0][][] */ 38,34,30,-67,-117,-25,-127,-18,67,-35,-101,-100,74,-115,-63,-63,-111,74,1,-76,-88,-52,28,-16,-50,-15,-62,-48,-110,-27,69,-28,41,-17,-92,-63,-31,76,-35,65,25,74,-62,53,-18,73,-61,-41,3,-28,37,-114,47,-103,83,29,-95,29,-57,74,-123,66,-108,-78,-80,-77,25,58,70,-96,15,-91,89,57,40,2,75,-77,-47,33,-24,-89,-31,-96,36,84,17,48,-53,71,39,66,-119,-4,-15,29, 
  /* [30][0][][] */ 8,-83,-79,17,-87,-4,-82,-28,90,-29,-25,-43,-89,0,27,10,-29,7,82,-115,25,-113,-124,-13,-115,-3,-78,97,-26,-96,-96,-9,-77,-86,-119,-69,-11,-40,-13,4,54,-91,-34,63,68,-58,66,29,-83,61,15,-105,83,-66,-34,66,-72,-49,-88,-63,-93,-28,-90,-25,-117,-101,-108,74,-76,76,42,-44,-79,70,10,-98,-54,-88,-90,-70,3,24,-94,-23,-118,1,-105,81,-50,-127,45,48,-40,-27,6,-82, 
  /* [31][0][][] */ 45,-104,9,63,19,31,-74,-109,-49,-30,-92,-29,87,-127,-64,71,-76,-100,65,19,30,8,-50,67,14,-121,8,16,-84,-86,17,68,-8,-6,-34,-31,60,-50,-82,-119,27,-82,-50,3,-20,-71,-58,-3,37,49,82,-49,-115,-73,-93,-3,-123,78,10,73,-20,46,49,-23,36,71,-61,-91,38,-85,-57,-14,-104,-60,-21,-17,-74,-63,19,56,-89,0,26,38,24,59,-105,-10,-9,-69,-96,-70,-14,65,-28,-16, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0041045444086194038, 0.0021075536496937275, 0.0021505930926650763, 0.0019510260317474604, 0.0017898603109642863, 0.0016326323384419084, 0.002094862749800086, 0.0017781652277335525, 0.0020433489698916674, 0.0023217143025249243, 0.0017899605445563793, 0.0026988687459379435, 0.002223695395514369, 0.0019682219717651606, 0.0025197512004524469, 0.0023453191388398409, 0.001837074407376349, 0.0023199531715363264, 0.0021444384474307299, 0.002391900634393096, 0.0020259760785847902, 0.0020159755367785692, 0.0023251869715750217, 0.002045217901468277, 0.0022274930961430073, 0.0021298916544765234, 0.0022691204212605953, 0.0022588623687624931, 0.0021440903656184673, 0.0020204901229590178, 0.002055443124845624, 0.002146006328985095, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -3954, 4171, 16419, 2244, -5578, -2617, 21331, 2824, 2746, -1904, 11520, -551, -8797, 4145, 24737, 8700, 13115, 6227, -5890, -7297, 5816, 32818, 24352, 14014, 1093, 1054, 5529, 3504, 2106, -4428, 8918, -3099, -308, 6517, 158, 986, 7975, 4786, -2107, 4934, 7337, 10320, 4500, 12545, 4491, 5729, 2345, 10971, 5204, -4823, -8119, 455, -447, -1553, 2410, -57, 181, -1605, -5372, 15210, -1193, 2016, -1767, -1937, -6080, 10081, 34446, 1475, -4137, 578, 1145, 2326, 2088, -1005, 603, 11927, -945, 26068, 17074, -708, 13122, 2562, -531, 2033, 26908, 10096, 5912, 1234, 5392, 3764, -786, -8322, 511, -2757, -1785, -3251, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00017914254567585886, 0.00036906060995534062, 0.00014053279301151633, 0.00040651683229953051, 0.00018898712005466223, 0.00056800193851813674, 0.00015516208077315241, 0.00022634511697106063, 0.00021953025134280324, 0.00036302331136539578, 0.00017321431369055063, 0.00017408953863196075, 0.00028992374427616596, 0.00067057565320283175, 0.0001238070399267599, 0.0001409629185218364, 0.00014475276111625135, 0.00022991573496256024, 0.00032615714007988572, 0.0002368373388890177, 0.00010612457117531449, 8.3506325609050691e-05, 0.00012467935448512435, 0.00011775361053878441, 0.00014967605238780379, 0.00045898283133283257, 0.00052111921831965446, 0.00030940223950892687, 0.00025520427152514458, 0.00044846156379207969, 0.00015920396253932267, 0.00026821449864655733, 0.00018413728685118258, 0.00017746441881172359, 0.00026925021666102111, 0.0002676676376722753, 0.00023921171668916941, 0.00022019445896148682, 0.00031528371619060636, 0.00034938100725412369, 0.00017354634474031627, 0.00025003214250318706, 0.00033887199242599308, 0.00018226345127914101, 0.00043564586667343974, 0.0001669465855229646, 0.00022217463993001729, 0.00019325879111420363, 0.00024529144866392016, 0.00026299819000996649, 0.00020139137632213533, 0.00024061748990789056, 0.00051920086843892932, 0.0002007472503464669, 0.00032478041248396039, 0.00035253626992926002, 0.00053787796059623361, 0.00019843596965074539, 0.00028338213451206684, 0.00011667987564578652, 0.00065174582414329052, 0.0002786382392514497, 0.00015333283226937056, 0.00041759185842238367, 0.00032556132646277547, 0.00018696472398005426, 6.289300654316321e-05, 0.00019712514767888933, 0.00028805443434976041, 0.00041927336133085191, 0.00030888657784089446, 0.00021678458142559975, 0.0006101177423261106, 0.0004419421311467886, 0.00024488713825121522, 0.00018111955432686955, 0.00016921864880714566, 7.1944385126698762e-05, 0.00010626753646647558, 0.00025270946207456291, 0.00011064156569773331, 0.0001248630287591368, 0.0002168003557017073, 0.00011840662045869976, 6.7631102865561843e-05, 0.00023461291857529432, 0.00039305008249357343, 0.00019153743050992489, 0.0001281087170355022, 0.00053251651115715504, 0.00021288647258188576, 0.00023998079996090382, 0.0002294735168106854, 0.00039557501440867782, 0.000377124291844666, 0.00015202818030957133, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -27,58,-27,-127,-44,-44,9,-122,-61,59,-3,94,-3,-63,6,69, 
  /* [1][0][][] */ -40,-5,-57,-3,-33,-18,14,-60,82,27,-80,7,4,-7,33,-127, 
  /* [2][0][][] */ 50,12,-33,120,117,34,-3,-127,98,55,25,83,-89,96,-92,-52, 
  /* [3][0][][] */ 42,-38,0,-52,26,-22,38,-1,127,43,102,1,-27,25,-17,83, 
  /* [4][0][][] */ -92,109,21,58,-6,21,58,71,-6,33,-40,-108,-127,-44,-14,82, 
  /* [5][0][][] */ 42,101,70,4,-14,81,-74,100,2,54,-52,-9,25,-35,-127,12, 
  /* [6][0][][] */ 63,-55,127,-72,53,-6,-35,88,-32,-88,23,-37,1,108,-33,75, 
  /* [7][0][][] */ 72,100,-7,-25,127,14,31,-10,115,119,-23,45,7,-32,49,29, 
  /* [8][0][][] */ 11,-55,-1,-57,6,-52,11,-68,9,55,50,-3,-14,127,80,46, 
  /* [9][0][][] */ 13,-42,2,127,61,-16,33,-59,-36,115,24,-4,27,-51,-23,-16, 
  /* [10][0][][] */ -23,78,-41,-127,-7,-1,-4,28,7,-42,44,-25,-39,-51,32,43, 
  /* [11][0][][] */ 13,52,19,4,66,-28,73,-67,-72,62,11,19,-23,127,-58,-49, 
  /* [12][0][][] */ 1,-7,-55,54,9,-49,10,29,27,96,-67,-36,-10,127,-17,31, 
  /* [13][0][][] */ -21,22,-19,29,1,-127,4,29,7,-23,-6,-20,-4,-8,4,9, 
  /* [14][0][][] */ 38,-46,90,1,94,-8,-127,-58,-30,2,95,41,-14,-41,-74,-19, 
  /* [15][0][][] */ -28,34,-36,-127,-4,21,79,-25,-80,22,123,-18,-24,80,58,19, 
  /* [16][0][][] */ -4,81,93,83,-9,38,52,40,-18,19,-15,-35,-48,-8,-15,-127, 
  /* [17][0][][] */ -49,-91,-20,33,-96,-27,-43,4,-127,-36,3,-59,6,42,84,-52, 
  /* [18][0][][] */ 24,22,29,44,77,25,-6,9,117,13,-17,-20,45,127,32,20, 
  /* [19][0][][] */ 11,-45,38,94,114,102,-115,-111,-86,-43,-57,-127,-79,-51,-42,-87, 
  /* [20][0][][] */ 61,10,-64,-8,-41,-127,53,8,-42,17,-98,-49,13,3,58,16, 
  /* [21][0][][] */ 117,-22,52,-37,13,8,42,8,-35,-44,127,18,-58,52,46,86, 
  /* [22][0][][] */ -19,4,-17,127,-69,-7,109,61,-3,39,-42,14,24,4,46,-1, 
  /* [23][0][][] */ 56,-21,127,-65,20,-8,19,41,15,-18,-56,-68,31,-31,-61,13, 
  /* [24][0][][] */ -109,56,11,-9,21,113,9,-21,16,17,127,-6,-102,19,48,-27, 
  /* [25][0][][] */ 27,34,6,17,-9,21,79,-45,6,-127,-34,-26,-2,-52,16,8, 
  /* [26][0][][] */ -15,-19,7,18,-48,-30,-19,-38,-120,-23,16,-25,27,127,-9,75, 
  /* [27][0][][] */ -5,42,7,77,29,-28,-26,-39,71,10,-30,-8,-3,127,-13,6, 
  /* [28][0][][] */ 22,52,51,20,127,-1,-16,24,-53,-24,5,-23,2,66,-4,-1, 
  /* [29][0][][] */ 5,20,-6,39,34,29,10,18,-10,17,5,-127,-17,-36,-35,-21, 
  /* [30][0][][] */ -22,62,-38,71,-6,-9,26,-127,-62,72,16,17,49,50,54,92, 
  /* [31][0][][] */ -30,-48,-44,-50,10,-42,-127,-124,-7,61,13,-102,-62,-1,59,21, 
  /* [32][0][][] */ -118,-60,-7,60,14,29,-19,13,35,-64,-127,44,56,6,62,59, 
  /* [33][0][][] */ -7,-13,-31,-5,-127,-8,-85,5,81,11,-23,-63,48,-109,126,33, 
  /* [34][0][][] */ 61,3,64,14,31,41,-52,71,-41,-57,73,27,26,7,-7,127, 
  /* [35][0][][] */ -22,60,-41,28,-10,-1,28,-127,40,74,-60,-29,-19,-25,65,-81, 
  /* [36][0][][] */ 0,59,-3,96,26,3,127,-1,-43,8,-30,-54,2,12,-13,-24, 
  /* [37][0][][] */ -1,-14,8,-69,-3,7,-37,-57,-38,-18,-25,-9,-8,-127,36,-63, 
  /* [38][0][][] */ 34,80,-9,-45,127,26,12,-34,75,50,-4,4,-14,-8,48,17, 
  /* [39][0][][] */ -37,58,-13,-127,-48,-3,-27,35,41,-63,-32,0,32,61,78,34, 
  /* [40][0][][] */ -19,-60,8,-77,-14,5,15,-45,-57,-10,-21,-36,2,-127,50,-62, 
  /* [41][0][][] */ 10,-85,-71,-36,-28,-42,59,-43,-24,6,-88,-28,-127,15,61,64, 
  /* [42][0][][] */ 111,119,-7,-17,-68,-32,-11,-34,-20,21,127,1,-43,26,95,-97, 
  /* [43][0][][] */ 7,66,-56,20,79,-17,124,-42,-4,127,-7,37,-6,-85,-67,-69, 
  /* [44][0][][] */ -38,26,46,-46,27,27,-117,-127,23,-44,-13,-35,13,-30,37,-59, 
  /* [45][0][][] */ -37,62,-127,-31,40,-57,32,-62,-49,50,11,-40,-13,-57,58,-56, 
  /* [46][0][][] */ 3,27,-13,-55,-38,0,34,-21,-127,-15,-4,0,-17,-120,90,-53, 
  /* [47][0][][] */ 28,46,24,-22,118,-24,-9,23,-69,23,-5,10,16,-6,127,-11, 
  /* [48][0][][] */ -106,-88,-31,53,103,5,-1,-23,46,0,-127,63,56,36,58,64, 
  /* [49][0][][] */ -14,32,70,13,108,4,36,-4,-127,-62,-34,-67,18,81,17,-35, 
  /* [50][0][][] */ 37,-68,-64,-21,82,-127,-112,-70,-32,10,17,-103,71,-37,-44,48, 
  /* [51][0][][] */ -13,16,21,30,3,11,15,28,-90,38,-20,-127,-8,-79,-38,64, 
  /* [52][0][][] */ -15,23,-39,43,66,10,9,59,48,66,13,-30,0,127,22,35, 
  /* [53][0][][] */ 5,-20,-8,-18,-91,-7,-63,14,49,9,-23,-67,35,-127,108,23, 
  /* [54][0][][] */ 28,-12,-12,21,127,49,-71,-33,-91,1,-22,-15,-17,-40,-21,-68, 
  /* [55][0][][] */ 45,-20,1,-25,52,-25,-28,-127,-52,-36,-40,12,12,-38,10,31, 
  /* [56][0][][] */ 0,36,3,-22,-15,-30,-82,57,5,127,-30,-33,34,-7,-1,9, 
  /* [57][0][][] */ -3,60,-38,-3,-34,-42,119,111,-53,53,-32,-10,13,29,127,-21, 
  /* [58][0][][] */ -15,-12,-118,-15,101,112,-30,61,-127,-52,-1,5,3,3,-11,17, 
  /* [59][0][][] */ -108,46,94,16,-73,-63,127,124,31,1,7,-24,20,21,71,3, 
  /* [60][0][][] */ 22,5,-50,11,11,-127,-25,8,-15,-32,4,-26,19,30,34,12, 
  /* [61][0][][] */ 26,-26,41,124,104,50,21,4,-127,-2,12,42,13,34,-4,-31, 
  /* [62][0][][] */ -33,111,15,-38,-42,12,-35,41,17,-48,-103,-95,-19,-127,-51,-68, 
  /* [63][0][][] */ -55,23,-41,127,-60,-18,-52,-43,-84,3,-33,-38,-8,75,71,36, 
  /* [64][0][][] */ 21,11,-13,36,-23,-19,-4,84,14,3,21,-53,-33,-127,59,26, 
  /* [65][0][][] */ -25,-120,23,-127,98,0,113,-70,16,54,88,-88,-32,15,-29,-53, 
  /* [66][0][][] */ 53,-77,75,-61,49,43,-59,119,44,-87,81,92,-33,127,-26,67, 
  /* [67][0][][] */ 26,31,-20,-127,-2,-14,-50,12,65,-99,-26,8,23,102,97,65, 
  /* [68][0][][] */ -29,35,127,-40,46,11,8,-19,-71,2,25,-4,34,-7,97,14, 
  /* [69][0][][] */ 127,58,-2,25,-81,-32,1,-26,7,18,86,-34,-45,27,47,-117, 
  /* [70][0][][] */ 37,5,-34,1,-20,17,64,127,-46,88,-27,6,4,45,-8,27, 
  /* [71][0][][] */ 1,17,-1,41,1,-87,-3,27,-9,10,-76,-7,-127,5,29,37, 
  /* [72][0][][] */ 4,-22,-127,7,0,19,48,84,-14,-18,-20,24,22,13,-2,-8, 
  /* [73][0][][] */ -33,0,43,5,31,-7,-63,-127,25,-64,16,-5,24,-34,36,-17, 
  /* [74][0][][] */ -9,38,41,127,7,-11,-91,85,-51,-8,-74,83,15,-117,29,-118, 
  /* [75][0][][] */ -5,34,-38,12,-19,1,12,1,127,-6,-51,-10,18,88,-38,-11, 
  /* [76][0][][] */ 16,-30,13,3,34,-21,-42,84,31,-57,8,-127,-2,22,-18,22, 
  /* [77][0][][] */ -7,62,-10,127,-84,23,81,93,24,19,-57,-3,-2,-37,10,-2, 
  /* [78][0][][] */ 4,25,16,-65,11,-40,-35,28,30,-61,-29,-76,31,127,27,31, 
  /* [79][0][][] */ -18,-78,-73,-22,-76,-25,32,-58,127,10,20,92,21,33,43,-77, 
  /* [80][0][][] */ -26,64,89,-15,-35,-60,53,-55,-98,20,-92,-122,-4,50,127,-87, 
  /* [81][0][][] */ -33,37,-127,16,46,-119,0,40,7,-51,40,-4,16,-9,14,-3, 
  /* [82][0][][] */ 127,-9,-15,21,27,-119,-5,9,-53,15,-78,-1,87,3,-13,28, 
  /* [83][0][][] */ -42,67,-120,-82,-71,-34,63,-127,23,44,-55,-108,-13,23,87,104, 
  /* [84][0][][] */ -14,14,73,-64,33,12,11,-127,-8,26,34,-24,49,66,-10,10, 
  /* [85][0][][] */ -96,127,29,-100,-93,-27,-27,3,-19,-23,-88,8,-1,-9,-71,-41, 
  /* [86][0][][] */ -13,24,-11,29,-25,-26,127,25,-11,-19,-22,10,9,20,92,-36, 
  /* [87][0][][] */ -14,-41,-1,-127,21,-42,44,-19,-38,1,-7,-102,-26,-10,22,-20, 
  /* [88][0][][] */ 62,33,12,-10,-24,-72,5,36,-40,7,-127,-50,-13,14,86,-19, 
  /* [89][0][][] */ 24,-34,-70,-48,55,-30,-49,0,-51,28,51,-103,127,-4,1,-87, 
  /* [90][0][][] */ 8,-71,45,-27,73,11,-31,78,53,-82,-37,0,-31,83,-12,-127, 
  /* [91][0][][] */ -67,-2,-28,15,49,-8,-26,-127,12,54,-16,-127,-25,-5,2,-4, 
  /* [92][0][][] */ -33,23,51,33,0,-127,6,-3,-20,-12,20,-22,-13,-10,14,25, 
  /* [93][0][][] */ 64,-24,127,-21,-22,48,18,-28,1,13,-64,-5,-21,12,9,-1, 
  /* [94][0][][] */ 18,0,2,-5,45,-33,-31,-7,-60,-22,43,-33,127,0,47,-27, 
  /* [95][0][][] */ 127,87,20,28,-88,-20,-54,8,-28,-20,97,-79,-49,46,98,-63, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00049172039143741131, 0.0010130179580301046, 0.00038574216887354851, 0.0011158299166709185, 0.00051874230848625302, 0.0015590832335874438, 0.00042589745135046542, 0.00062128459103405476, 0.00060257880249992013, 0.00099644646979868412, 0.0004754482361022383, 0.00047785061178728938, 0.00079579872544854879, 0.0018406331073492765, 0.0003398324188310653, 0.00038692282396368682, 0.00039732540608383715, 0.00063108542235568166, 0.00089525413932278752, 0.00065008422825485468, 0.00029129660106264055, 0.00022921279014553875, 0.00034222679096274078, 0.00032321663456968963, 0.00041083910036832094, 0.0012598414905369282, 0.0014303969219326973, 0.00084926438285037875, 0.00070049881469458342, 0.0012309621088206768, 0.00043699186062440276, 0.00073620997136458755, 0.00050543021643534303, 0.00048711415729485452, 0.00073905289173126221, 0.00073470891220495105, 0.00065660156542435288, 0.00060440192464739084, 0.00086540816118940711, 0.00095900031737983227, 0.00047635962255299091, 0.00068630202440544963, 0.00093015457969158888, 0.00050028681289404631, 0.0011957848910242319, 0.00045824423432350159, 0.0006098372396081686, 0.00053046742687001824, 0.00067328952718526125, 0.00072189199272543192, 0.00055279018124565482, 0.00066046020947396755, 0.0014251313405111432, 0.00055102218175306916, 0.00089147523976862431, 0.00096766103524714708, 0.0014763972721993923, 0.00054467801237478852, 0.00077784300083294511, 0.00032026937697082758, 0.0017889480805024505, 0.00076482165604829788, 0.00042087642941623926, 0.0011462292168289423, 0.00089361873688176274, 0.00051319110207259655, 0.00017263220797758549, 0.00054108002223074436, 0.00079066772013902664, 0.0011508447350934148, 0.00084784900536760688, 0.00059504230739548802, 0.0016746849287301302, 0.0012130672112107277, 0.00067217979812994599, 0.00049714697524905205, 0.00046448071952909231, 0.00019747692567761987, 0.00029168900800868869, 0.00069365091621875763, 0.00030369509477168322, 0.00034273095661774278, 0.00059508561389520764, 0.00032500905217602849, 0.0001856375893112272, 0.00064397853566333652, 0.0010788656072691083, 0.00052574253641068935, 0.00035163990105502307, 0.0014616807457059622, 0.00058434257516637444, 0.00065871258266270161, 0.00062987161800265312, 0.0010857961606234312, 0.0010351516539230943, 0.00041729537770152092, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -17798, 5193, -7799, -20027, -10308, 4277, 16334, -34776, 5533, 10051, 16976, 28130, -7272, 10554, -24769, 6103, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00070874165976420045, 0.00034296244848519564, 0.00018450994684826583, 0.00020898092770949006, 0.000280218810075894, 0.00027246473473496735, 0.00023628224153071642, 0.00023397682525683194, 0.00019218066881876439, 0.00019646962755359709, 0.00054259260650724173, 0.00072129251202568412, 0.00034525484079495072, 0.00021155810100026429, 0.00031697377562522888, 0.00037528408574871719, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -28,10,-23,-53,16,0,-49,21,7,15,4,43,-10,0,-29,-13,-8,29,-27,24,13,-34,-12,3,19,8,10,127,39,-15,55,6,8,17,-14,0,-7,46,-21,-3,-4,-14,26,71,25,-10,2,0,41,6,-9,35,24,-15,4,52,5,-10,-14,-48,-14,13,2,1,-19,-39,-28,36,-1,21,5,-26,9,-53,-10,-9,-53,-9,-10,-2,12,-3,28,49,17,3,14,-59,22,8,16,6,62,-57,-35,-10, 
  /* [1][0][][] */ 10,-71,-83,-16,106,-47,34,87,-77,-49,-32,-15,31,-18,-52,0,-39,27,32,54,-4,90,-12,-49,32,-10,-55,-72,47,-23,-71,96,-15,70,-32,-30,3,-10,-8,42,26,55,7,-57,-28,56,-11,5,33,-59,-3,-57,5,54,59,44,-27,-30,-30,-75,6,-18,5,-70,-127,122,-32,-13,-35,-45,-37,-3,58,-119,-27,12,36,-78,39,3,23,-35,33,42,-19,35,15,28,-8,-29,-1,44,43,1,12,79, 
  /* [2][0][][] */ -5,81,-127,-41,83,65,41,46,52,-122,-22,45,-19,-49,33,46,0,18,-60,70,45,-91,16,15,45,45,85,-23,-6,34,75,-44,23,54,-13,17,-113,-54,76,24,-29,-100,41,35,14,-45,14,77,26,-5,25,39,34,-64,-35,14,49,1,-13,1,54,-33,15,6,68,21,-40,0,-44,-5,14,-47,0,-100,-7,26,4,44,-6,-35,47,-14,-15,1,-50,6,21,75,23,23,-4,-53,-33,-59,-29,-10, 
  /* [3][0][][] */ 74,-4,64,0,83,-42,52,-42,-20,-44,21,-41,21,74,-9,88,0,-14,66,-31,127,-2,66,33,44,-33,8,4,-6,10,-22,80,-65,-7,42,25,12,-28,-26,37,-25,-56,63,9,19,33,-15,-49,-52,-54,-8,31,21,-20,35,70,-54,80,42,-9,38,63,-3,-35,10,54,-21,-8,82,-26,15,-60,30,13,60,34,33,18,45,49,-3,-20,32,-18,-30,-8,-1,36,7,9,32,23,4,75,55,-76, 
  /* [4][0][][] */ -13,23,-20,-39,127,41,-18,-37,14,-51,-20,52,-32,8,13,27,3,-45,-51,104,22,-39,1,-41,15,-10,75,-24,18,13,85,-49,79,-28,-4,15,56,74,58,6,-35,-50,8,35,29,-87,-21,-2,53,39,10,49,-22,-48,-4,-84,0,-43,-21,25,2,16,67,70,96,48,-16,-11,-23,19,46,40,35,-62,-50,-25,-32,19,63,-41,20,6,32,-7,-61,2,55,85,-6,55,14,-67,16,-36,35,8, 
  /* [5][0][][] */ -10,20,-37,-17,23,4,38,-11,-11,-58,-2,57,4,12,-1,4,-30,12,-20,19,47,-22,-62,40,24,5,53,-54,-5,48,40,25,8,-18,18,-32,30,9,30,15,-12,-38,43,29,20,-29,4,-27,13,-19,39,12,-5,-31,-10,-83,1,-17,-28,-4,57,-27,2,52,27,49,7,30,8,66,20,11,24,37,-4,47,-52,5,-2,7,18,10,16,8,-8,6,-3,127,39,41,7,-4,-8,-15,-28,33, 
  /* [6][0][][] */ 57,-108,58,-3,-12,-1,27,38,-48,21,0,-118,-33,-1,-33,31,-7,1,-12,-3,-51,77,33,27,-21,7,-57,-39,-4,4,5,22,44,46,78,-7,-37,-13,10,-70,-19,127,-4,-111,38,-19,-42,4,-49,15,-51,34,11,-37,9,36,24,-57,17,11,-34,63,17,-91,-1,-2,-5,12,-8,38,115,10,-12,34,-4,66,-56,-26,21,-15,19,-32,3,40,2,1,50,-18,-31,-3,41,-18,4,8,-69,-73, 
  /* [7][0][][] */ 45,83,99,10,77,23,61,-94,-45,-48,2,-60,14,30,-24,82,8,-50,35,-21,38,-11,47,19,-30,33,7,-11,-17,-57,-31,31,15,-1,-17,-6,20,-54,-60,90,-7,26,-6,-19,-36,7,45,-4,-66,-24,45,-28,22,-43,-46,105,51,41,-30,-36,1,-34,-7,-26,-104,50,-42,-92,-3,-42,13,69,-7,-5,31,36,127,101,73,14,-52,-89,-14,-19,-44,2,-46,-48,-84,-1,-49,-45,-73,19,21,-30, 
  /* [8][0][][] */ 20,-6,50,27,-127,-22,8,-29,-6,91,67,-31,0,22,34,3,-33,-33,19,28,-55,-8,-87,29,12,-27,15,-45,34,-32,-9,55,69,-57,-35,-27,-45,-9,21,63,-15,5,19,31,-39,5,9,-22,-105,33,-12,3,-76,-32,-48,13,-7,-89,-84,2,-29,-6,-26,-3,1,19,13,-102,33,5,-71,-1,28,66,82,-24,-7,-19,9,17,-107,9,8,-63,23,29,18,21,52,-43,25,57,18,7,42,69, 
  /* [9][0][][] */ 18,-71,-64,-26,127,78,-47,6,-22,27,64,68,7,24,64,-126,28,-57,-5,35,-28,-111,22,-43,-11,36,66,-21,-30,46,56,-28,-10,2,-85,8,5,87,13,60,44,-90,34,100,10,-20,-66,-28,59,10,-51,-69,61,36,14,-58,-17,61,12,-30,44,-73,3,122,-67,38,-36,-39,-25,-29,-50,-115,56,-21,12,24,26,-61,4,23,-25,32,-16,57,-17,-70,21,24,2,12,-45,-6,-49,-59,27,-50, 
  /* [10][0][][] */ -62,-5,-52,-58,-13,-8,40,6,22,21,26,90,-2,-9,3,-12,-33,40,-37,15,1,-7,19,15,2,-2,45,-101,17,-10,76,-15,-4,8,-8,10,-15,79,25,-6,-10,-42,41,6,19,-31,-4,15,-4,18,-21,12,-12,-20,1,-61,11,-16,-2,-53,26,-21,-3,18,-2,77,-28,-25,4,-26,-4,-17,-2,-22,7,59,-37,4,-24,-12,-4,11,5,65,11,-6,16,127,14,15,22,13,53,-62,34,-37, 
  /* [11][0][][] */ -67,13,3,1,13,-42,-10,8,-11,-30,-25,19,4,-2,-5,-9,30,-16,-60,-38,17,-65,-5,-12,48,19,102,6,-28,33,0,2,-19,14,8,-21,-29,7,18,-8,-19,0,-2,43,58,8,55,16,26,40,15,25,2,-61,1,-14,-64,-6,-36,-28,26,-29,27,19,6,-25,29,-15,11,2,24,9,1,18,24,-7,-31,70,-127,41,-38,-4,-53,-19,50,-7,42,-8,16,32,-20,-50,-17,17,-35,-19, 
  /* [12][0][][] */ -25,4,-37,-10,66,51,2,-27,-13,18,16,-2,27,-2,15,-28,-15,-44,39,-22,-1,-5,-26,16,-24,62,-38,82,-16,40,-30,-32,-9,-10,7,61,13,-28,24,14,-5,-20,4,9,2,23,21,-9,7,-14,-20,-17,-14,-10,9,-25,-19,12,20,11,0,4,5,60,53,-76,38,54,16,-127,-33,57,-19,24,5,99,17,28,5,18,6,29,-11,-27,12,-8,-28,-29,-1,18,4,-19,-44,27,19,54, 
  /* [13][0][][] */ -86,38,2,21,-31,-20,-6,-42,-23,-5,45,-3,73,18,-11,-12,14,-2,-46,-11,-11,-14,36,-39,67,52,8,-2,34,-35,-21,-127,-100,-19,-18,35,18,32,24,-21,-12,58,-7,-28,23,22,-11,-17,67,1,-7,35,50,-42,72,3,-33,55,47,-1,-8,71,-11,15,9,-26,20,-43,38,20,-30,-93,1,-43,-82,6,70,19,-39,-28,58,-2,4,-69,59,-55,40,-2,-5,32,6,6,65,0,3,38, 
  /* [14][0][][] */ -34,-13,14,-22,45,-24,13,31,-99,36,-19,-74,-23,-43,-82,-21,-32,-18,87,-9,2,101,3,-70,-19,9,-118,-13,38,-46,-51,6,-38,19,33,25,-26,-39,-27,15,48,127,-84,-76,-74,38,20,15,122,-33,34,-62,48,82,-79,90,1,84,-91,28,-18,87,32,-26,-62,53,-5,51,-45,29,29,31,23,-21,-7,27,102,-86,-50,-87,17,-67,0,24,66,-82,-22,-23,-80,14,34,92,22,90,-5,-42, 
  /* [15][0][][] */ -55,-83,-3,-34,0,12,-22,-97,-2,12,37,12,23,-40,75,-28,-65,19,23,20,-42,8,-30,-62,-4,5,28,19,-2,8,87,-127,-29,83,2,-22,-23,54,-90,-12,55,-111,-12,53,-63,-41,22,25,32,23,12,-60,-15,22,27,99,44,-6,-26,16,45,15,54,-7,37,-17,3,24,-31,39,4,50,-78,-17,-2,-19,-16,8,17,26,-1,25,-14,118,9,-36,-72,-37,-38,47,50,65,-51,9,-10,-31, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.030121520161628723, 0.014575903303921223, 0.0078416727483272552, 0.0088816890493035316, 0.011909298598766327, 0.011579751037061214, 0.010041994974017143, 0.0099440151825547218, 0.008167678490281105, 0.0083499588072299957, 0.023060185834765434, 0.03065493144094944, 0.014673329889774323, 0.0089912191033363342, 0.013471385464072227, 0.015949573367834091, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 24785, 63573, -260, 37, 17190, -6200, 4870, -781, 5342, 16251, -3379, -1683, -128, 3141, 4577, -10678, -4805, -589, -3909, 14435, -10249, 21621, -4891, 13832, 22954, -443, -6728, 23987, 16525, -20344, 3662, 20807, 26784, -9301, 1974, 886, -678, -147, -484, -11356, -4442, -1003, -3425, -485, 27925, 494, 11851, -2905, -14967, 1897, -166, -306, -4551, 19417, -5154, 11236, 22478, 2451, 36012, 871, -8056, -240, 709, 476, -2304, 15332, -4341, -7343, -2652, 2783, -1045, -5256, 3312, -466, -3374, -6113, 1540, -1366, 34321, -10520, -6821, -14471, -620, -166, 56278, -16426, -11957, -26077, -2915, 5843, -3028, 30119, 1189, -1047, -2305, 678, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 9.1766189143527299e-05, 9.0048954007215798e-05, 0.00010318304703105241, 0.00024033561930991709, 0.00024298764765262604, 0.00015908555360510945, 3.1184990803012624e-05, 9.6998905064538121e-05, 0.00019378546858206391, 0.00015470483049284667, 0.00023906030401121825, 0.0001495729957241565, 0.00021112016111146659, 0.00019356992561370134, 0.00031291460618376732, 0.00016055275045800954, 0.00020202183804940432, 0.00019360896840225905, 0.00023418404452968389, 7.7497854363173246e-05, 8.4552535554394126e-05, 5.762193541158922e-05, 0.00013679686526302248, 5.8250836445949972e-05, 7.3762210377026349e-05, 9.1719542979262769e-05, 0.00014403004024643451, 0.00012391516065690666, 7.278451812453568e-05, 0.00050689716590568423, 0.00036669938708655536, 0.00025472344714216888, 0.00010397366713732481, 0.00015573629934806377, 0.00024698983179405332, 0.000413721107179299, 0.00037026972859166563, 0.00015367328887805343, 0.0002182472962886095, 6.8479253968689591e-05, 0.00023409785353578627, 0.00023303330817725509, 0.00051347771659493446, 0.00015702900418546051, 0.00038417044561356306, 8.8014057837426662e-05, 8.1503138062544167e-05, 0.00036163226468488574, 0.00054536288371309638, 8.8090106146410108e-05, 0.00035633242805488408, 0.00015713866741862148, 0.00012979505117982626, 0.00014886779536027461, 0.00015559465100523084, 0.00013800780288875103, 0.00011541754065547138, 0.00049583095824345946, 4.0327773604076356e-05, 0.00016026929370127618, 0.00028921334887854755, 0.0003796457895077765, 0.00011409903527237475, 0.00015880410501267761, 0.00012079603766323999, 0.00011679984891088679, 0.000210198835702613, 0.00030594636336900294, 0.00020256199059076607, 0.00016775392577983439, 0.00022320174321066588, 0.00010953487799270079, 0.00029224215541034937, 0.00017135251255240291, 0.00021840479166712612, 0.00032271875534206629, 0.00013221173139754683, 8.6763684521429241e-05, 7.3730167059693485e-05, 0.00013152410974726081, 0.00014522449055220932, 0.00020810856949537992, 0.00017613389354664832, 0.00037867011269554496, 6.0812391893705353e-05, 8.9506393123883754e-05, 6.6804241214413196e-05, 0.00050837313756346703, 0.0003568896499928087, 0.00010725071479100734, 0.00031311847851611674, 3.6586152418749407e-05, 0.0001763447216944769, 0.00010684676090022549, 0.00028604958788491786, 0.0003136086743324995, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-71,0,127,20,64,85,-59,-15,-19,-18,1,-27,2,36,3,-7,-40,33,22,18,-127,127,12,-82,8,56,-32,-122,-127,39,23,6,28,59,-22,-31,-15,35,-7,-13,35,-107,73,26,-73,39,51,-18,47,-30,20,3,-3,17,53,-87,-52,-69,-14,-8,-5,6,42,72,-28,84,20,-12,13,23,127,20,27,29,-6,-14,18,127,-4,-17,22,-29,23,127,24,-79,-16,-8,-31,-17,-38,0,-25,-19,26, 127,-127,83,106,-47,127,45,-114,73,2,-21,127,127,-98,-15,14,13,127,127,-107,127,-104,84,77,-118,-120,-64,-36,-57,48,-60,-14,-107,47,-127,-90,-44,-18,-45,68,-4,127,127,90,-51,-115,-122,-47,-16,-127,39,82,70,-33,42,78,-46,37,-82,-109,-41,-48,-71,71,76,-63,28,38,-86,33,-15,86,112,127,19,12,3,56,-33,55,60,127,127,-18,-2,82,-105,127,-127,-104,1,-127,-92,-127,-42,101, -79,-15,40,-74,11,-34,77,-4,85,-37,-32,35,-14,-7,-9,-12,-7,-12,17,0,-19,-126,33,2,-127,84,10,-60,108,50,-13,10,-8,23,10,-35,-6,35,26,27,21,21,-115,76,16,-22,35,17,-15,11,-21,11,-2,-3,-6,19,-59,4,-35,49,2,35,26,1,-1,-41,-26,31,2,-2,0,34,6,-21,0,-1,-15,-10,-81,4,-22,-17,-19,1,-99,20,-29,-25,-60,32,-26,-47,28,-32,-19,3, 
  /* [0][1][][] */ -67,-77,72,-42,-52,87,12,127,-51,-20,-4,-112,23,-107,80,33,-1,-63,-13,84,47,-73,46,49,-95,-12,127,-28,-35,66,118,-108,-127,92,-86,-65,-34,34,-20,92,-45,-20,-7,67,-47,127,-23,69,16,92,14,0,19,-60,29,36,127,111,-66,-87,127,-33,-37,127,79,-39,-12,-5,127,36,127,94,-41,109,-7,14,16,11,-28,8,-42,120,-80,109,7,36,-59,31,75,-127,-35,-18,127,-66,-26,-1, 69,126,54,-116,127,84,97,43,-127,127,127,-38,-63,-127,-127,127,127,-69,-121,-50,103,104,-110,127,-100,-86,-44,127,-127,112,-127,-127,-91,127,108,127,127,-127,-95,127,-64,-89,104,-122,-127,-33,-127,-127,127,-108,88,42,127,127,127,-127,99,-127,-127,127,15,-76,-127,-96,-127,127,-127,127,-121,-127,-105,-85,-127,-77,127,127,-127,127,-75,127,127,24,-42,-127,61,127,97,45,119,19,127,6,-70,38,127,-127, -56,-15,-45,42,-61,-96,32,-24,17,-31,-28,97,3,93,15,11,-2,64,-1,127,5,-82,-34,6,-45,96,-77,-24,-74,-14,16,-60,-81,41,5,-23,-19,48,-56,50,127,1,-37,49,-37,-57,20,48,8,114,-10,7,-37,-83,5,24,100,-2,1,14,-39,127,94,-50,-43,16,52,-15,-70,115,-18,-86,-6,-45,-17,-20,30,14,89,-39,-66,-36,57,12,-42,-10,77,21,8,78,-44,7,-43,98,-31,-3, 
  /* [0][2][][] */ -70,-4,-7,-27,9,-44,67,28,54,-25,-39,9,13,20,-25,8,-6,75,13,-3,-56,-91,8,-5,-33,-62,38,-73,87,38,22,24,15,3,-13,-52,-6,34,3,-2,-16,-10,-67,127,8,37,17,40,-18,-30,9,-23,29,2,6,17,-74,16,-20,8,13,1,-28,-2,0,-46,-47,14,-37,17,25,25,11,-22,21,10,22,4,-80,-10,-4,4,23,13,-122,4,8,-45,-61,-48,-24,-43,6,68,-23,-5, 124,30,-127,-37,-77,-15,39,36,-69,-25,-19,-92,-77,111,-11,44,1,-47,-3,-126,90,-57,-29,0,-96,127,-49,21,-40,-22,-15,-11,-71,19,28,2,-23,-29,127,43,7,-16,68,-17,-31,76,-67,-42,-35,-7,-127,-127,-60,-24,-3,40,-67,-14,6,40,-12,-14,8,-42,-52,34,74,-26,111,107,-25,-65,6,-57,-1,5,103,8,47,24,17,-88,-45,5,2,6,127,38,-61,47,-16,-92,39,89,-14,28, -56,9,-14,30,12,-69,-127,5,-14,-4,-17,21,12,-21,22,5,-10,-6,12,14,-47,-91,19,1,37,-100,24,3,-46,-39,-9,20,38,-17,-10,-29,-35,7,49,-39,22,-1,-46,-21,6,64,32,17,-11,1,10,-9,14,4,-11,1,-57,-16,0,-49,-16,8,87,-5,40,1,4,26,-2,3,-4,26,-20,19,4,12,43,2,77,-11,5,-3,-5,-16,72,-5,49,-42,52,56,-13,-58,-5,7,-19,-11, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0039000629913061857, 0.0038270803634077311, 0.0043852794915437698, 0.010214263573288918, 0.010326975025236607, 0.0067611359991133213, 0.00132536212913692, 0.0041224532760679722, 0.0082358820363879204, 0.006574955303221941, 0.010160062462091446, 0.0063568521291017532, 0.0089726066216826439, 0.0082267215475440025, 0.01329887006431818, 0.0068234917707741261, 0.0085859280079603195, 0.0082283811643719673, 0.0099528217688202858, 0.0032936588395386934, 0.0035934825427830219, 0.0024489322677254677, 0.005813866388052702, 0.002475660527125001, 0.0031348939519375563, 0.003898080438375473, 0.0061212764121592045, 0.0052663940005004406, 0.0030933420639485121, 0.021543130278587341, 0.015584723092615604, 0.010825745761394501, 0.0044188806787133217, 0.0066187926568090916, 0.010497067123651505, 0.017583146691322327, 0.01573646254837513, 0.0065311146900057793, 0.0092755099758505821, 0.0029103681445121765, 0.0099491588771343231, 0.0099039152264595032, 0.021822802722454071, 0.0066737327724695206, 0.01632724329829216, 0.0037405975162982941, 0.0034638831857591867, 0.015369370579719543, 0.023177921772003174, 0.0037438294384628534, 0.015144127421081066, 0.0066783931106328964, 0.0055162892676889896, 0.0063268812373280525, 0.0066127725876867771, 0.0058653312735259533, 0.004905245266854763, 0.021072814241051674, 0.0017139302799478173, 0.0068114446476101875, 0.012291567400097847, 0.016134945675730705, 0.0048492089845240116, 0.0067491740919649601, 0.0051338314078748226, 0.0049639935605227947, 0.0089334500953555107, 0.013002719730138779, 0.0086088841781020164, 0.0071295415982604027, 0.0094860736280679703, 0.0046552321873605251, 0.0124202910810709, 0.0072824815288186073, 0.0092822033911943436, 0.013715546578168869, 0.0056189987808465958, 0.0036874564830213785, 0.0031335321255028248, 0.0055897748097777367, 0.006172040943056345, 0.0088446140289306641, 0.0074856900610029697, 0.016093479469418526, 0.0025845265481621027, 0.0038040215149521828, 0.0028391801752150059, 0.021605856716632843, 0.015167810022830963, 0.0045581553131341934, 0.013307535089552402, 0.0015549113741144538, 0.0074946503154933453, 0.0045409873127937317, 0.012157106772065163, 0.013328368775546551, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2183, 11491, 15397, 20945, 28786, -3599, -3313, 8814, 33958, -5640, 18333, 4073, 11571, 12697, 35470, 3311, 2494, 5894, 23769, 6674, -235, 472, 15500, -1566, 6454, -132, 10296, 8678, 6674, 53887, 43806, 19733, 7877, -1602, 11098, 5170, 2697, 8837, 30206, -1331, 13255, 10588, 44262, -3316, 27212, 9759, 7414, 22176, 165524, 6400, -561, 11136, -2253, -94, -2597, 5853, -909, 17599, 4896, 7877, 9024, 21742, 12613, 6613, 9576, 15016, 3247, -4535, 5250, -9496, 6094, 14220, 34510, 8815, -5716, -5186, 6071, 441, 1959, -817, 12908, 12710, 5932, 9085, 4365, 898, 9640, 95316, 18614, 9769, 4583, -608, 4223, 7662, 10566, 13425, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00020224996842443943, 0.00013461720664054155, 0.0001122197209042497, 0.00011015526251867414, 0.00010902005305979401, 0.00029113370692357421, 0.00024107261560857296, 0.00017723544442560524, 6.9786205131094903e-05, 0.00023990462068468332, 0.00014730051043443382, 0.00019708808395080268, 0.00010911449498962611, 0.00018491809896659106, 6.7602712078951299e-05, 0.00021636724704876542, 0.00020126349409110844, 0.00018842554709408432, 9.4035582151263952e-05, 0.00017308858514297754, 0.00035889478749595582, 0.00051915907533839345, 0.00013429216051008552, 0.00045967864571139216, 0.00042254151776432991, 0.0002629264781717211, 0.00020212407980579883, 0.00017189385835081339, 0.00025281001580879092, 6.476591806858778e-05, 6.3546904129907489e-05, 0.00012346211588010192, 0.00020747275266330689, 0.00020974296785425395, 0.00017682646284811199, 0.00013476416643243283, 0.0002025231224251911, 0.00016199066885747015, 9.066294296644628e-05, 0.00047648104373365641, 0.0001439899206161499, 0.00014653336256742477, 5.9298137784935534e-05, 0.00030169662204571068, 0.00011895123316207901, 0.00015268089191522449, 0.00025486494996584952, 0.00012496118142735213, 2.5495777663309127e-05, 0.00032877130433917046, 0.00021440348064061254, 0.00016404791676905006, 0.00041581440018489957, 0.00021559091692324728, 0.00036780591472052038, 0.00018325127894058824, 0.00015301383973564953, 0.00010330351506127045, 0.0004053027369081974, 0.00017127433966379613, 0.00018000350974034518, 6.6142005380243063e-05, 0.00012664111272897571, 0.00013487973774317652, 0.00025789541541598737, 0.00012751882604788989, 0.00035647663753479719, 0.00027791108004748821, 0.00031992254662327468, 8.4844366938341409e-05, 0.00018223082588519901, 0.00011420620285207406, 6.2580540543422103e-05, 0.00011590982467168942, 0.00028576303157024086, 0.00025833852123469114, 0.00025348787312395871, 0.00030215151491574943, 0.00038613099604845047, 0.00036333713796921074, 0.00015460340364370495, 0.00012651125143747777, 0.00014252947585191578, 0.00020368960394989699, 0.00028413947438821197, 0.00017480476526543498, 0.00024332528118975461, 4.033012010040693e-05, 7.7344186138361692e-05, 0.00022615306079387665, 0.00028117370675317943, 0.00030234784935601056, 0.00034714979119598866, 0.00018783648556564003, 0.00011350822023814544, 0.00012375775258988142, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 24,29,20,12,86,47,16,-62,-5,68,-9,75,-40,-127,-16,-102, 
  /* [1][0][][] */ 32,63,2,2,-7,-93,94,-79,12,127,-22,-34,29,-51,50,42, 
  /* [2][0][][] */ -127,113,-75,-7,59,-57,111,26,-53,85,6,36,-69,-15,-34,-66, 
  /* [3][0][][] */ -69,80,30,57,-12,7,69,58,-5,29,-42,21,20,-23,3,-127, 
  /* [4][0][][] */ -2,-83,39,88,-62,22,-38,82,32,-57,-35,-39,74,59,-127,32, 
  /* [5][0][][] */ 33,-23,67,-27,25,-31,-41,-13,-20,29,3,-127,-16,42,-62,7, 
  /* [6][0][][] */ 49,35,74,-61,46,112,-95,-127,-24,36,15,42,123,-93,-101,-47, 
  /* [7][0][][] */ -22,10,127,-55,-16,-19,-18,-60,-88,-50,-74,-46,2,-67,124,-34, 
  /* [8][0][][] */ 39,-46,127,-2,0,96,-20,2,73,-67,77,-83,-17,20,-64,-22, 
  /* [9][0][][] */ 22,-125,70,127,12,2,20,79,93,29,36,39,-38,-9,-102,-59, 
  /* [10][0][][] */ 48,-20,68,77,-89,-34,-7,127,110,111,58,-58,-23,32,17,-110, 
  /* [11][0][][] */ 14,-27,-31,-103,46,32,-77,-127,3,8,31,48,1,-2,-5,-94, 
  /* [12][0][][] */ 16,1,44,-35,0,19,-126,60,-45,-127,44,-33,-15,113,79,1, 
  /* [13][0][][] */ 52,-115,-35,90,6,-42,2,9,44,76,31,3,32,-13,127,63, 
  /* [14][0][][] */ -18,-97,71,-7,62,81,-7,68,-20,14,14,1,-13,59,-82,127, 
  /* [15][0][][] */ 29,-53,-9,74,-10,-7,127,18,-1,-120,-17,-30,19,-43,-20,-65, 
  /* [16][0][][] */ 23,-96,-22,46,25,25,14,-63,127,72,61,-30,22,43,25,84, 
  /* [17][0][][] */ -41,-72,-36,-8,127,64,64,-82,65,36,12,-2,-94,30,-83,5, 
  /* [18][0][][] */ -28,79,22,22,-122,-32,19,63,-71,39,-127,-44,31,-123,0,-4, 
  /* [19][0][][] */ 48,-127,97,-13,106,91,-108,41,61,-8,23,51,2,-2,-21,50, 
  /* [20][0][][] */ 20,8,31,-74,-11,-7,-5,36,-28,-17,53,-2,17,21,-30,127, 
  /* [21][0][][] */ -36,-52,-24,-38,20,26,-73,-36,-3,17,20,1,-127,0,-34,-10, 
  /* [22][0][][] */ -4,7,30,3,2,-81,24,-3,-127,64,2,-19,-1,-20,98,-17, 
  /* [23][0][][] */ 38,0,18,-21,2,24,2,31,9,-2,15,-14,127,7,-25,-22, 
  /* [24][0][][] */ -53,20,22,-68,-42,-52,-10,8,-46,-66,-42,-127,4,-112,44,6, 
  /* [25][0][][] */ -93,-33,58,-33,1,-10,-78,-16,-50,5,47,-96,-44,-127,77,17, 
  /* [26][0][][] */ 60,-54,10,-127,102,-12,-27,-39,64,-30,61,-38,-5,27,-46,75, 
  /* [27][0][][] */ 127,-57,41,-21,17,-9,-16,-40,-13,28,-100,27,9,-14,9,36, 
  /* [28][0][][] */ -31,-22,-127,-83,-6,7,24,-30,-9,17,-56,11,-5,2,-54,-19, 
  /* [29][0][][] */ -10,34,-35,63,-45,5,59,-70,-18,42,-114,48,-64,-127,-15,-22, 
  /* [30][0][][] */ 69,-12,66,-31,47,72,-1,-13,-55,13,127,-72,-4,-1,-67,43, 
  /* [31][0][][] */ -15,-113,-29,-24,12,-94,29,-37,-47,78,85,-14,-30,127,57,123, 
  /* [32][0][][] */ 8,94,-10,-4,-127,27,-68,-93,-87,-49,-27,9,24,33,15,73, 
  /* [33][0][][] */ 9,69,19,127,-7,-34,72,44,-108,62,-23,-13,40,-60,12,106, 
  /* [34][0][][] */ 101,18,22,13,52,11,-127,27,-78,31,-12,16,-44,11,30,-31, 
  /* [35][0][][] */ 125,30,59,5,58,-127,-106,16,2,-38,-16,34,89,30,1,-8, 
  /* [36][0][][] */ 32,7,-127,-31,-20,32,-42,31,-80,-19,-45,33,-18,-14,21,37, 
  /* [37][0][][] */ 39,25,120,-6,24,60,39,-127,25,81,53,100,-18,11,-80,-29, 
  /* [38][0][][] */ -85,-50,23,79,78,127,-33,-19,72,45,74,-11,-37,37,-73,-35, 
  /* [39][0][][] */ -14,8,1,16,23,-1,-127,41,27,7,8,-49,-31,-9,-19,2, 
  /* [40][0][][] */ -19,77,64,127,-3,7,5,32,-105,-86,-96,68,65,122,-73,-88, 
  /* [41][0][][] */ -23,76,-47,18,-75,-12,107,81,-57,127,-63,21,-18,78,-32,-28, 
  /* [42][0][][] */ -27,-15,-101,-31,-75,-62,-4,127,16,-114,95,20,-53,-56,-32,-4, 
  /* [43][0][][] */ -47,21,9,21,37,5,-15,-68,32,62,41,6,-127,-9,31,-87, 
  /* [44][0][][] */ 26,32,-12,23,0,-18,10,-37,127,30,8,55,-7,47,-5,28, 
  /* [45][0][][] */ -24,-127,46,-54,37,4,-57,8,23,-116,11,-68,44,72,45,52, 
  /* [46][0][][] */ -29,-8,9,24,-34,13,-17,-72,-127,-1,-44,-17,9,4,-12,-26, 
  /* [47][0][][] */ -66,14,-127,125,-43,42,-22,-73,-32,99,63,21,1,-57,-19,-39, 
  /* [48][0][][] */ 40,31,107,-127,111,44,-96,-103,3,-7,51,-13,50,116,77,122, 
  /* [49][0][][] */ 1,-19,48,-1,20,34,-71,-30,-2,-12,-12,-71,-35,-19,-127,-55, 
  /* [50][0][][] */ 52,108,12,-83,94,51,47,4,127,42,-25,-57,-23,-12,18,-76, 
  /* [51][0][][] */ 1,-13,-13,-38,5,16,-23,-127,-23,-54,-38,-16,-27,-20,3,31, 
  /* [52][0][][] */ -51,25,-36,-11,43,-63,-5,28,-78,127,-74,-17,82,35,12,-12, 
  /* [53][0][][] */ -45,11,-1,-127,-21,-25,10,-56,-38,-61,-40,57,-12,-73,-90,-17, 
  /* [54][0][][] */ 4,-1,38,30,23,-10,-24,-8,17,-19,1,-33,-22,127,-58,4, 
  /* [55][0][][] */ -127,122,35,34,-31,-55,-10,38,-14,32,19,-29,-8,-19,81,19, 
  /* [56][0][][] */ 10,66,71,-59,69,10,-58,36,64,-43,127,103,-13,87,93,31, 
  /* [57][0][][] */ 15,56,-7,117,-13,34,31,127,-10,-22,12,-10,26,-18,17,0, 
  /* [58][0][][] */ 26,127,30,-60,12,41,12,68,124,30,37,105,49,-45,91,91, 
  /* [59][0][][] */ 74,-15,-7,-127,-47,43,35,-87,24,66,87,-107,-56,-78,-56,41, 
  /* [60][0][][] */ 102,21,124,-10,-22,97,82,-99,17,107,-127,-3,58,-4,-35,-36, 
  /* [61][0][][] */ -91,49,-123,-68,-6,-35,121,48,42,127,-46,9,47,99,-24,36, 
  /* [62][0][][] */ -1,7,-46,65,-108,30,-21,8,37,-24,-63,-69,-49,-127,47,-63, 
  /* [63][0][][] */ 35,-32,-5,-117,26,29,-112,-127,-15,13,-13,44,59,49,77,10, 
  /* [64][0][][] */ -45,-1,13,10,34,32,-30,-108,6,-127,-54,7,41,-5,36,22, 
  /* [65][0][][] */ -127,31,15,-80,-28,43,43,-19,-104,-23,-15,-9,-16,6,-35,-24, 
  /* [66][0][][] */ 42,14,2,-19,-48,65,-15,18,-62,-51,-21,-82,-71,32,-127,-17, 
  /* [67][0][][] */ -41,-64,-39,127,92,10,-4,-119,93,-33,-51,-74,-49,12,-119,-38, 
  /* [68][0][][] */ -51,-57,-59,11,-2,-127,53,-16,-52,11,38,-43,-19,62,51,3, 
  /* [69][0][][] */ -38,24,-111,127,35,-115,-9,121,111,108,56,-92,98,23,-48,-81, 
  /* [70][0][][] */ -16,-35,-41,5,-80,-50,118,127,-5,12,-19,-1,7,24,39,6, 
  /* [71][0][][] */ -21,3,-55,-70,-20,-9,8,48,-3,-59,-47,-1,0,-127,74,5, 
  /* [72][0][][] */ 84,101,-41,-1,-36,-90,-51,-123,-6,97,-114,11,100,127,37,126, 
  /* [73][0][][] */ -80,-79,-127,-99,-50,16,106,-24,-53,30,-82,-2,-50,-2,62,-29, 
  /* [74][0][][] */ -61,40,78,45,-31,50,-127,70,-47,-66,-44,-56,-12,-57,-13,-8, 
  /* [75][0][][] */ -53,48,-86,-17,-23,59,99,81,-44,47,13,-33,-127,37,8,-23, 
  /* [76][0][][] */ 38,23,-14,-54,-69,-24,-127,-41,-55,-90,-4,-52,49,42,123,71, 
  /* [77][0][][] */ -52,2,-55,-60,-60,-6,-2,-51,127,14,-82,-16,-24,44,39,-82, 
  /* [78][0][][] */ -58,-67,20,64,23,6,20,40,-15,-59,-64,7,90,-19,127,4, 
  /* [79][0][][] */ 16,-29,33,-58,127,9,67,17,58,32,-1,8,27,1,25,-63, 
  /* [80][0][][] */ 30,14,63,-49,-4,-15,29,13,-27,-16,10,-19,16,127,-5,3, 
  /* [81][0][][] */ 62,22,-8,82,-24,3,38,1,50,45,-17,-20,-39,-8,-127,40, 
  /* [82][0][][] */ -47,-94,15,-97,-48,-17,-59,-40,-61,-38,-67,-16,24,-127,-88,-38, 
  /* [83][0][][] */ 29,54,17,29,-2,10,-16,42,-56,40,20,-38,13,-127,-25,6, 
  /* [84][0][][] */ 127,61,-36,63,-26,17,-49,18,-13,-2,67,11,-99,-22,28,-103, 
  /* [85][0][][] */ -53,5,44,-97,14,-8,-56,120,-49,-118,-110,-100,-21,61,36,-127, 
  /* [86][0][][] */ -16,-14,-15,12,-4,50,-32,43,-81,23,4,-20,-39,-127,-61,-7, 
  /* [87][0][][] */ 55,46,-24,9,-76,-45,34,12,-1,35,-127,-13,17,-43,20,-5, 
  /* [88][0][][] */ -19,57,-96,41,-89,-90,47,76,91,39,23,22,-62,10,127,-96, 
  /* [89][0][][] */ -16,28,-36,13,-24,-37,21,-27,15,33,-34,-10,-35,-12,-53,-127, 
  /* [90][0][][] */ -51,-10,46,-32,-24,15,17,-76,127,-25,-42,-64,26,9,-57,16, 
  /* [91][0][][] */ -4,-50,-4,-127,16,16,11,-69,-25,24,45,46,-1,-24,28,43, 
  /* [92][0][][] */ 14,27,-15,5,28,24,-19,-127,-2,-28,2,-31,0,-50,5,-38, 
  /* [93][0][][] */ 72,-72,11,-127,-39,24,-63,-6,23,-75,56,-64,-9,65,27,84, 
  /* [94][0][][] */ -62,69,-19,110,73,-127,-33,41,52,-21,81,-59,53,0,-75,-56, 
  /* [95][0][][] */ -43,99,-4,-107,-8,-12,7,33,20,-20,-127,-13,27,-3,-86,-82, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00067962892353534698, 0.00045235975994728506, 0.00037709655589424074, 0.00037015927955508232, 0.00036634458228945732, 0.0009783086134120822, 0.00081008626148104668, 0.00059557158965617418, 0.00023450545268133283, 0.00080616137711331248, 0.00049497996224090457, 0.00066228321520611644, 0.00036666193045675755, 0.00062138790963217616, 0.00022716817329637706, 0.00072706775972619653, 0.00067631399724632502, 0.00063317414605990052, 0.00031599163776263595, 0.000581636733841151, 0.0012060089502483606, 0.0017445515841245651, 0.00045126749319024384, 0.0015446770703420043, 0.0014198836870491505, 0.00088352267630398273, 0.0006792058702558279, 0.00057762203505262733, 0.00084952794713899493, 0.00021763559198006988, 0.00021353928605094552, 0.00041487484122626483, 0.00069717923179268837, 0.00070480792783200741, 0.0005941972485743463, 0.00045285359374247491, 0.00068054680014029145, 0.00054434390040114522, 0.0003046584315598011, 0.0016011388506740332, 0.00048385525587946177, 0.00049240211956202984, 0.00019926198001485318, 0.0010138036450371146, 0.00039971672231331468, 0.00051305990200489759, 0.00085643318016082048, 0.00041991221951320767, 8.5674510046374053e-05, 0.0011047837324440479, 0.00072046887362375855, 0.00055125699145719409, 0.0013972782762721181, 0.00072445906698703766, 0.0012359534157440066, 0.00061578681925311685, 0.00051417871145531535, 0.00034713506465777755, 0.0013619555393233895, 0.00057554023806005716, 0.00060487323207780719, 0.00022225971042644233, 0.00042555737309157848, 0.00045324192615225911, 0.00086661655222997069, 0.00042850678437389433, 0.0011978831607848406, 0.0009338760282844305, 0.0010750489309430122, 0.00028510601259768009, 0.00061235774774104357, 0.00038377181044779718, 0.00021029198251198977, 0.00038949656300246716, 0.00096026132814586163, 0.00086810562061145902, 0.00085180572932586074, 0.0010153321782127023, 0.0012975318823009729, 0.0012209367705509067, 0.0005195201956667006, 0.00042512099025771022, 0.0004789476515725255, 0.00068446656223386526, 0.00095480558229610324, 0.00058740365784615278, 0.00081765599315986037, 0.00013552296150010079, 0.00025990285212174058, 0.00075995147926732898, 0.00094483955763280392, 0.0010159919038414955, 0.0011665417114272714, 0.00063119467813521624, 0.00038142636185511947, 0.00041586827137507498, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -9775, 2612, -36958, 16336, 4647, -10338, 8150, 3874, 26461, -13945, 18338, 20825, -19377, 1686, 32161, -33110, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00047488950076512992, 0.00021147634834051132, 0.00022109747806098312, 0.00017414617468602955, 0.00024999765446409583, 0.00025411206297576427, 0.00015836926468182355, 0.00035402443609200418, 0.0001511284353910014, 0.00013627909356728196, 0.00022499241458717734, 0.00040425325278192759, 0.00035255108377896249, 0.00037979218177497387, 0.00047685447498224676, 0.00028801942244172096, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -9,22,8,-1,34,83,-7,17,12,20,-19,-2,-17,17,-5,36,0,-23,-12,-10,48,-20,49,10,-27,-27,-16,-67,5,-9,27,64,113,-23,-13,1,-16,-18,-15,11,-21,34,21,2,15,-9,29,42,-8,25,6,-7,-32,-7,2,20,41,35,2,-16,-50,39,-4,-20,14,-19,64,19,4,6,46,-10,-48,-7,-25,-21,31,-59,-2,-40,30,-12,-52,-62,66,-31,11,17,11,-22,26,-35,23,13,-8,127, 
  /* [1][0][][] */ 50,-113,23,43,-24,-93,1,-98,-22,-100,45,55,-3,-37,-14,4,-34,45,-19,-35,-65,-127,-42,0,114,-41,-60,15,22,61,-20,22,3,-22,-35,61,14,4,79,-25,-12,-117,46,-5,-40,30,54,3,-2,7,-6,-35,53,-92,81,2,-29,3,-41,-86,23,-123,13,-47,-30,-62,45,-18,12,78,-113,15,-61,4,-24,35,51,27,5,0,35,14,-65,45,-57,93,28,53,-56,-6,21,23,-51,-57,6,-1, 
  /* [2][0][][] */ 51,31,39,-5,13,22,0,55,75,-25,15,29,-33,34,72,-16,28,-8,33,45,-11,-28,45,-8,25,-49,-8,27,-18,39,127,-54,14,-64,-42,28,-5,88,-41,-6,4,-40,13,26,-36,-31,-16,1,51,43,-43,-22,15,4,47,-51,-6,-3,29,68,-14,35,65,113,3,-63,22,-79,-55,-26,38,45,29,24,-61,26,31,75,0,15,50,77,32,10,-32,-42,40,24,42,-2,-22,-51,-30,33,13,77, 
  /* [3][0][][] */ -20,-37,-1,45,24,-9,11,-52,-29,-19,25,45,19,-9,54,-7,-7,-41,26,12,1,-30,-36,1,36,52,26,-27,32,-10,66,-41,36,-22,30,63,7,13,25,17,-1,-89,14,-40,-17,-6,-17,39,-127,37,-32,-10,-112,-39,-29,-48,27,23,-35,71,52,23,11,8,-62,-75,-42,46,23,27,-55,15,-47,7,-6,-8,-12,-41,7,-7,-23,-20,38,54,1,97,2,-6,28,-5,-7,25,-61,57,-13,-24, 
  /* [4][0][][] */ 26,-1,43,-41,27,-22,-36,54,1,-29,-51,-34,-16,69,-15,7,50,-29,16,6,6,65,82,30,-4,-3,1,38,12,-12,-24,29,-21,-1,7,-16,1,3,-3,-13,18,18,-77,-30,60,2,40,18,12,94,12,-26,10,-17,18,-21,26,-57,57,74,-35,17,-27,-8,17,-112,28,0,-10,6,72,6,4,28,-20,-14,-1,75,41,-45,36,29,127,-56,74,-28,4,-66,65,-28,-4,37,14,30,42,-24, 
  /* [5][0][][] */ 6,37,35,11,-4,-3,25,127,85,-37,-31,-32,-23,47,43,17,1,-23,-9,12,-9,27,21,-10,-1,10,-4,81,63,36,33,39,-43,-9,-43,-13,-45,-19,-27,18,-18,-21,-4,4,90,22,45,37,35,27,0,1,-11,8,0,8,10,-52,20,64,-63,14,-21,-36,-17,12,-6,-21,39,2,67,1,43,12,-17,-12,15,17,-12,60,23,-8,8,19,0,-37,18,-65,-5,-58,12,-90,1,-15,6,-81, 
  /* [6][0][][] */ 13,-25,14,-81,-53,-36,2,-17,9,-35,-25,34,25,-57,-4,-5,14,-81,4,-20,3,4,-44,-28,98,-1,-10,-27,49,-4,25,-25,-40,-7,-26,26,60,33,26,26,-6,-59,-56,-7,-26,-18,-6,-127,4,31,3,16,-6,-13,-9,-17,42,-1,-46,6,33,-7,12,12,24,93,11,-26,-16,-23,-49,-16,-21,-23,60,-23,-16,9,-23,-15,-13,-23,50,-74,-43,90,12,-46,3,0,-60,35,-49,27,-38,15, 
  /* [7][0][][] */ 11,-41,12,-10,-21,-9,-16,-54,-10,-31,15,13,9,-68,40,12,-12,-19,-23,-11,13,-32,-74,-12,-17,-1,-8,-22,-7,1,12,-32,-23,12,8,-9,28,-12,-2,28,6,-10,-21,22,-28,5,-45,41,-5,13,-9,-26,-29,-15,-1,-44,21,7,-10,-10,27,-12,5,14,-18,30,-1,-26,-21,3,-60,37,-11,-6,-8,23,24,7,4,22,-15,-15,28,0,-49,127,-27,3,-40,-3,-18,15,-27,7,4,-8, 
  /* [8][0][][] */ -48,39,-106,11,69,-6,-59,75,-8,98,-63,-51,12,-9,26,-23,-10,4,-39,5,-5,75,11,11,-82,-62,12,16,65,-126,-14,31,25,-5,27,-33,-47,0,-78,32,39,66,10,-127,-73,6,57,-78,-14,55,8,55,-76,55,-24,-19,48,-13,-18,-3,-48,13,-9,7,42,33,37,15,-17,-58,90,72,-16,64,63,7,-6,-82,9,-31,-29,-36,-11,30,-41,-52,25,-54,-6,31,-13,-18,58,-43,4,-12, 
  /* [9][0][][] */ 94,-82,32,-4,6,2,17,-29,66,-105,29,99,-84,24,37,58,-45,-51,23,-19,-51,-17,-34,-24,109,-13,-9,0,-7,-42,17,-21,35,42,24,20,6,80,18,31,-54,23,-42,-91,53,20,34,-83,-46,-58,-36,6,-14,-53,-28,54,-77,66,-45,67,66,15,69,16,-53,111,21,85,18,-26,50,6,-35,18,-23,-56,110,16,9,-36,-7,21,15,-127,-46,109,-41,-51,-51,-8,-55,43,2,76,-25,-13, 
  /* [10][0][][] */ 21,78,28,30,41,-100,16,17,10,41,20,13,-48,3,15,-64,4,30,-45,53,-127,-1,0,-11,-90,-48,-47,20,50,24,-13,79,-21,-26,22,-65,98,-64,-8,4,19,80,62,7,0,6,20,31,3,-3,-66,10,-38,-29,-19,4,32,45,10,33,-43,-15,-45,19,-25,27,67,49,31,15,103,79,-19,-9,-103,-40,33,8,-17,-47,83,1,-64,-70,126,-63,116,-8,-7,-20,64,-10,90,36,-13,-82, 
  /* [11][0][][] */ 59,62,-6,19,34,3,65,10,6,-23,-61,-25,29,3,46,-27,22,-62,-125,34,7,11,57,-6,-36,25,-16,19,4,52,6,1,-5,-21,9,2,-2,16,-22,19,-4,44,87,-127,20,-60,28,37,-122,5,11,-71,59,73,-10,3,-1,-28,7,26,-17,-35,18,-15,-88,91,-25,29,23,-5,123,5,-70,-49,9,52,-31,-59,-48,-39,23,-20,90,22,-21,34,-41,-49,20,6,-4,-10,-2,21,-10,-4, 
  /* [12][0][][] */ -9,3,6,-14,-6,68,6,10,127,-2,13,13,-9,15,-17,-9,14,-11,21,39,57,18,-35,-3,25,-18,16,-51,-58,-7,30,-12,-29,10,10,-5,0,13,44,6,7,22,3,-2,6,22,-9,-25,16,22,1,-24,11,-22,9,-1,63,-20,19,11,12,-25,0,-22,29,20,-22,19,1,-8,-50,-24,8,36,-21,-13,9,13,44,-61,-30,37,31,45,-2,3,-24,-2,3,28,-13,56,4,8,28,26, 
  /* [13][0][][] */ 26,-16,-29,44,30,23,7,18,-7,27,5,8,11,-8,13,-14,8,-88,-7,20,-19,-22,6,2,1,4,6,-7,-9,-42,6,14,-2,23,10,27,7,-19,-18,17,-3,23,20,23,27,29,-11,-127,23,-3,3,7,-4,-1,7,-14,-11,46,32,-7,-9,27,-3,4,24,-18,-20,-38,-1,19,-20,-31,7,40,-17,20,-31,-4,43,4,20,3,5,14,35,-4,24,30,-3,12,37,-17,21,11,-9,15, 
  /* [14][0][][] */ -84,-66,12,27,-9,-22,-49,-15,-36,1,-22,7,53,13,-87,-7,54,-3,-34,-7,-20,-34,11,-29,-38,12,25,-40,-45,-66,-9,1,0,9,12,-8,24,3,24,-7,-11,-5,-10,0,-24,88,3,35,-127,14,-15,35,-63,-40,37,0,-23,35,32,5,27,6,9,38,29,-15,-39,43,4,58,-86,-66,-81,2,1,34,-21,20,82,20,26,-24,40,34,-9,24,37,65,11,43,80,-2,-33,16,6,4, 
  /* [15][0][][] */ 41,-11,14,36,14,105,25,-4,4,104,-16,-16,-85,-38,-27,5,27,15,33,-38,-32,5,-73,56,21,35,100,-23,18,-2,-44,-36,57,-20,61,28,49,-37,-47,-107,-2,33,35,77,17,32,-1,-67,74,-45,-51,27,42,-93,50,-76,-28,-10,9,-16,-85,2,20,31,127,18,-41,82,-32,81,-76,13,13,24,-33,1,41,-29,64,-24,11,3,94,64,36,-10,9,24,25,36,62,-48,-49,23,52,-13, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.020182803273200989, 0.0089877443388104439, 0.0093966424465179443, 0.0074012125842273235, 0.010624900460243225, 0.010799762792885303, 0.0067306933924555779, 0.01504603773355484, 0.0064229583367705345, 0.0057918610982596874, 0.0095621775835752487, 0.017180763185024261, 0.014983420260250568, 0.016141166910529137, 0.020266314968466759, 0.012240825220942497, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9359, -9279, 2834, 62725, -2500, -2373, -11090, -455, -3056, -280, 2902, -1733, 3685, -10371, 5648, -9732, 586, 15852, 25910, 1509, 2527, -2570, -768, 913, 17946, -1610, -757, -1744, -7304, -5789, 6675, -7778, -2135, -364, 357, 36356, 2292, -3848, 17425, 1091, -644, 3754, -10538, -8822, -5377, 65430, 649, 16858, 40808, -14283, -397, 8966, 9211, -1134, -5077, 2839, -13370, 2170, 1697, -7813, -3457, 473, -15274, -2956, 1491, 19600, 31638, 33449, -15623, -353, -15021, -1410, 60738, 10932, 505, -1095, 16638, 41936, 1571, -9512, -2129, -9102, -1043, -2609, 2400, -3124, 1716, -1845, 1188, -2021, -1359, 741, -4221, 1220, 1742, 55894, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020661701273638755, 0.00010179346281802282, 0.00021203017968218774, 3.4299431717954576e-05, 0.00014545077283401042, 0.00023985574080143124, 0.00031170228612609208, 9.1407418949529529e-05, 0.00014973232464399189, 0.00037819016142748296, 0.00019128485291730613, 0.00037066280492581427, 8.4406776295509189e-05, 0.00030589301604777575, 0.00016902854258660227, 8.3919301687274128e-05, 8.446152787655592e-05, 0.00026750224060378969, 6.1367718444671482e-05, 0.00018237507902085781, 4.6744367864448577e-05, 0.00017585842579137534, 0.00011887860455317423, 0.00030942843295633793, 0.00019152427557855844, 0.0001971876627067104, 0.00012781358964275569, 0.00017735887377057225, 0.00010217990347882733, 0.00010957285121548921, 0.00011547592293936759, 0.00023451515880879015, 0.00012917394633404911, 0.00013492582365870476, 0.00024140984169207513, 6.5073145378846675e-05, 0.0005204900517128408, 9.6132993348874152e-05, 5.2460014558164403e-05, 9.7759824711829424e-05, 0.0001493819581810385, 0.00031821543234400451, 0.0003130215045530349, 0.00015088246436789632, 0.00024682175717316568, 4.672696377383545e-05, 0.00016757527191657573, 0.00019159491057507694, 6.5387852373532951e-05, 0.00014581951836589724, 0.0001614754437468946, 0.00013093392772134393, 0.00020301283802837133, 0.00021417274547275156, 0.00022954036830924451, 0.00040413864189758897, 0.00028218931402079761, 0.00027760546072386205, 0.00012027323828078806, 9.6655450761318207e-05, 0.00032261770684272051, 0.00015844311565160751, 0.0002160326112061739, 0.00014361555804498494, 0.00026956136571243405, 0.00014164377353154123, 6.7383276473265141e-05, 5.459386738948524e-05, 0.00030317669734358788, 0.00026056190836243331, 0.00015243935922626406, 0.00011242319305893034, 9.5325973234139383e-05, 0.00013223389396443963, 0.00013901120109949261, 0.00021027907496318221, 0.00048208207590505481, 4.0161059587262571e-05, 0.00024500832660123706, 0.0001993878249777481, 0.0001684054295765236, 0.00024830625625327229, 0.00019986926054116338, 0.00015398244431708008, 0.00016468789544887841, 0.0001148359733633697, 0.00014335334708448499, 0.00019755178072955459, 0.00015990353131201118, 9.8304153652861714e-05, 0.00021596354781650007, 0.00012660882202908397, 0.0001446474198019132, 0.00037072144914418459, 0.00081508583389222622, 6.5467604144942015e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -15,1,-25,108,-26,23,-62,-57,19,-5,91,-7,6,-7,-7,47,6,16,-34,4,81,6,35,-41,0,13,48,40,20,11,20,43,-6,22,8,-12,5,50,-77,-27,16,4,25,18,-86,-58,24,-5,-8,-25,-6,-6,49,9,-13,1,-6,-37,29,-26,36,-8,127,27,-16,-9,-5,-59,73,34,-13,-1,80,-44,72,4,20,-125,23,66,0,16,127,-16,39,36,-23,-14,31,-9,-14,81,11,13,-6,16, -45,13,-12,9,46,-9,-10,-127,39,17,-127,0,-17,-8,1,80,16,-29,-16,-11,76,-108,127,21,-59,-36,-109,-21,26,32,-52,17,119,16,-17,1,-24,127,-87,-127,5,-23,-31,13,50,-127,127,-43,-76,48,48,8,36,-59,28,54,34,38,-96,86,127,25,0,-20,40,-37,-117,-4,40,-29,1,61,-55,-56,104,-6,-26,-60,-39,72,-65,58,-18,4,-14,53,61,-37,-33,51,-13,70,-127,-34,18,-127, 2,-7,-27,-74,5,19,36,17,-3,3,1,68,1,-13,-15,3,-17,19,-24,22,7,22,28,-36,-2,-35,6,9,-9,11,42,-86,42,14,7,-22,10,2,-61,-17,4,-3,-17,6,17,-33,19,1,9,-5,2,-5,2,9,-12,7,-5,41,10,-5,14,-21,1,-12,-27,-14,24,-59,-99,-4,57,-18,-125,-27,-8,19,15,-11,1,17,-18,21,-38,-5,-40,30,33,33,-28,-22,24,-8,23,5,-4,-49, 
  /* [0][1][][] */ -40,59,-17,35,-88,-15,-10,-44,35,98,-43,-20,-37,-26,-8,70,127,-27,-83,-10,61,-127,-29,11,-36,-49,-127,-5,37,39,-50,28,-121,-77,-57,6,64,-2,-44,53,-20,82,0,-1,33,-54,-11,-30,127,47,-3,23,43,11,-41,-16,32,8,-121,127,-26,-85,20,127,-58,-39,-90,126,-28,127,-32,50,-35,-57,36,9,-34,-75,127,50,127,39,9,-2,127,34,-96,48,-38,-33,-96,35,110,100,24,-59, 127,127,127,127,-42,-127,127,30,127,-127,21,-127,-112,127,127,127,-17,-127,-54,-127,127,21,-63,127,127,127,-58,-127,127,127,-127,127,-5,-127,-127,127,-127,-47,124,109,-127,-127,127,127,127,-112,-110,127,-15,127,-127,-127,-127,127,127,-127,127,-127,-37,40,-101,-30,-75,-62,127,127,-65,127,127,-106,-108,127,-46,127,-127,-127,-127,127,-79,127,-45,127,79,127,-43,-127,-31,-95,-127,-126,-20,-127,-16,-127,-127,123, -24,75,-36,5,127,67,-20,51,8,29,-14,-5,-25,-32,-15,2,-109,-20,-127,46,32,78,-12,-123,-38,-40,121,67,8,37,73,0,127,-48,127,-4,53,5,-118,14,34,20,-22,-5,-22,-49,-14,-40,81,23,-9,45,-7,-1,-78,-16,26,19,127,-89,2,127,-1,-34,-106,-28,-76,102,20,-12,127,17,-14,-59,10,50,-33,-8,-44,-5,-45,10,44,20,-93,39,127,-42,40,-24,127,-7,-111,33,30,21, 
  /* [0][2][][] */ -5,-50,-21,-71,-3,12,38,34,5,14,-18,53,19,-35,-4,15,46,-3,7,24,-9,35,-14,-33,-1,-23,15,2,-6,-9,51,-76,-42,63,-22,-25,30,-36,-63,19,12,10,-34,18,9,-79,-13,0,-11,10,17,-7,7,1,-24,3,-3,43,-50,34,3,-14,5,22,-6,-12,25,-63,-53,10,-25,-15,-127,-34,-9,22,16,-16,59,20,27,17,-41,17,9,22,-23,15,6,29,26,-7,23,37,-10,-29, -29,-20,-27,20,-38,69,-25,74,11,-3,55,-9,127,-7,-15,-12,-6,-43,-51,24,-27,84,-43,-122,-49,-46,109,68,17,39,56,-2,-116,60,-12,-19,-30,-28,-127,-9,45,-10,-13,38,-28,-40,-21,-45,-62,32,69,24,-11,-79,32,47,21,28,71,-55,26,-58,-9,5,20,-26,-127,-64,-11,-28,-41,19,35,-50,-37,-5,-41,20,-61,3,49,28,22,12,0,55,-94,127,21,127,-22,-18,124,-22,40,86, -10,-42,-26,23,18,61,-42,17,9,-1,-3,12,7,-54,-8,-14,-48,-9,17,25,-22,7,-15,-2,-5,17,0,48,1,-3,36,23,20,41,21,-20,-8,-28,-20,10,11,-12,20,7,-73,-29,-14,6,-4,-15,2,-2,-5,10,-20,-7,2,-51,12,-38,-17,44,16,-22,-8,-4,43,-62,45,10,73,-30,30,-61,-21,24,14,8,-6,17,-29,33,95,-15,-23,49,42,-3,113,16,6,-16,16,-24,-9,-45, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0087812226265668869, 0.0043262219987809658, 0.0090112825855612755, 0.0014577257679775357, 0.0061816577799618244, 0.010193868540227413, 0.013247347436845303, 0.0038848151452839375, 0.0063636237755417824, 0.016073081642389297, 0.0081296060234308243, 0.015753168612718582, 0.0035872878506779671, 0.013000452890992165, 0.0071837129071354866, 0.0035665703471750021, 0.0035896147601306438, 0.011368844658136368, 0.0026081281248480082, 0.0077509405091404915, 0.0019866356160491705, 0.0074739828705787659, 0.0050523406825959682, 0.013150707818567753, 0.008139781653881073, 0.0083804754540324211, 0.0054320776835083961, 0.0075377519242465496, 0.0043426458723843098, 0.0046568461693823338, 0.004907726775854826, 0.0099668940529227257, 0.0054898927919566631, 0.0057343472726643085, 0.010259917937219143, 0.0027656084857881069, 0.022120827808976173, 0.0040856520645320415, 0.0022295506205409765, 0.0041547925211489201, 0.0063487333245575428, 0.013524155132472515, 0.013303413987159729, 0.0064125047065317631, 0.010489923879504204, 0.0019858959130942822, 0.00712194899097085, 0.0081427833065390587, 0.0027789836749434471, 0.0061973291449248791, 0.0068627065047621727, 0.0055646919645369053, 0.0086280452087521553, 0.0091023417189717293, 0.0097554652020335197, 0.017175892367959023, 0.011993045918643475, 0.011798231862485409, 0.0051116123795509338, 0.0041078566573560238, 0.013711252249777317, 0.0067338324151933193, 0.0091813858598470688, 0.00610366091132164, 0.011456357315182686, 0.006019860040396452, 0.0028637892100960016, 0.002320239320397377, 0.012885008938610554, 0.011073880828917027, 0.006478672381490469, 0.0047779856249690056, 0.00405135378241539, 0.005619940347969532, 0.0059079760685563087, 0.0089368605986237526, 0.020488487556576729, 0.0017068450106307864, 0.010412854142487049, 0.0084739821031689644, 0.0071572307497262955, 0.010553015395998955, 0.0084944432601332664, 0.0065442537888884544, 0.006999235600233078, 0.0048805288970470428, 0.0060925171710550785, 0.0083959503099322319, 0.0067958999425172806, 0.0041779265739023685, 0.0091784503310918808, 0.0053808749653398991, 0.006147515494376421, 0.015755660831928253, 0.034641146659851074, 0.0027823729906231165, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 15576, 779, 12170, -856, 7711, 4549, 13837, 10747, -2442, 13433, 7778, 3364, 10813, 45602, -547, -2284, 12669, 9550, 1331, -281, -1413, 13693, 6181, 3519, 17559, 11704, 6488, 7600, 28, -1081, 5627, 15060, 11541, 3566, 12095, -1081, 14541, 13544, 1639, 4800, 1069, 17343, 11547, 6966, 5486, 21728, 13827, 10951, 5892, 4081, 526, -1206, 20892, 6108, 8750, 15863, -539, 13426, 4007, 5702, 13850, 4478, 2427, 9646, 10221, 3162, 7975, -465, 20733, 5559, 7695, -2440, -1287, 4541, 2690, 1862, 20067, 18517, 19812, -4205, 4363, -5099, -1667, 998, 12503, 8743, 6561, 3200, 22855, 3286, 9777, 8540, 23019, 16990, -10918, 19490, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00016880439943633974, 0.00026807549875229597, 0.00011298770550638437, 0.00072522863047197461, 0.00021369371097534895, 0.00018273280875291675, 0.00022439772146753967, 0.00032017900957725942, 0.00017388860578648746, 0.00012133840937167406, 0.00019387848442420363, 0.00022598991927225143, 0.00025905229267664254, 0.00010991035378538072, 0.00023485469864681363, 0.00024083617608994246, 0.00018045101023744792, 0.00023380503989756107, 0.00028950237901881337, 0.00062623654957860708, 0.0002614883123897016, 0.00017161744472105056, 0.00023117379168979824, 0.00019790664373431355, 0.00010183611448155716, 0.00018879110575653613, 0.00020665668125730008, 0.00012715980119537562, 0.00069053348852321506, 0.00015826179878786206, 0.00023876252816990018, 0.00013342929014470428, 0.00016633335326332599, 0.00029558013193309307, 0.0001401256158715114, 0.00029808760154992342, 0.00015147190424613655, 0.00020045465498697013, 0.00026549631729722023, 0.00017918000230565667, 0.00050251232460141182, 0.0001092988604796119, 0.00018577421724330634, 0.00011598784476518631, 0.00022020879259798676, 0.00015216472093015909, 0.00021763499535154551, 0.00012362741108518094, 0.00025286921299993992, 0.00020692305406555533, 0.00022516176977660507, 0.00049597874749451876, 0.00013036650489084423, 0.0002683191851247102, 0.00026815352612175047, 0.00012106419308111072, 0.0002170807565562427, 0.00013155805936548859, 0.00018516795535106212, 0.00027390391915105283, 0.00011834729230031371, 0.00028919288888573647, 0.00048814667388796806, 0.00027938690618611872, 0.00010377317812526599, 0.00033744965912774205, 0.00022800579608883709, 0.00058635731693357229, 0.0001306852645939216, 0.00018049974460154772, 0.00021956175623927265, 0.00016553456953261048, 0.00023494810739066452, 0.00027995192795060575, 0.00018069028737954795, 0.00064714922336861491, 0.00011503729183459654, 0.00024612937704659998, 8.6230546003207564e-05, 0.00029872058075852692, 0.00024690604186616838, 0.00039145926712080836, 0.0002227553486591205, 0.00034137401962652802, 0.00012494232214521617, 0.00017786503303796053, 0.00024069173377938569, 0.00037440066807903349, 8.0710255133453757e-05, 0.00045479772961698472, 0.00014067387382965535, 0.00019793417595792562, 9.5121889899019152e-05, 0.00016534999303985387, 0.00027222916833125055, 0.00017042976105585694, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 18,-25,13,78,-42,3,4,-23,127,-45,-73,-62,53,45,6,-9, 
  /* [1][0][][] */ 37,120,-30,-8,89,-13,2,-17,22,79,-25,127,-9,-42,67,-63, 
  /* [2][0][][] */ 66,-114,38,-45,-42,8,-77,54,-78,-127,-13,11,23,-60,82,-77, 
  /* [3][0][][] */ 126,102,29,47,-34,10,-27,-33,-10,18,127,-23,-43,56,-81,-48, 
  /* [4][0][][] */ -6,16,-33,8,-31,23,-17,18,-11,-20,-19,11,25,-127,80,-14, 
  /* [5][0][][] */ 92,-99,41,-31,-5,-55,-30,0,-12,-47,-127,31,39,13,-4,50, 
  /* [6][0][][] */ -127,-65,-11,85,-61,-33,-11,-16,-29,-27,-55,-97,78,37,67,23, 
  /* [7][0][][] */ -48,1,-96,49,24,-127,-8,51,-26,-18,26,-90,-46,16,-28,-1, 
  /* [8][0][][] */ 23,-18,-39,-29,29,-11,-83,-124,-7,72,-127,30,-119,-53,-15,18, 
  /* [9][0][][] */ 22,-70,127,97,10,18,-34,-33,91,-92,1,-3,44,53,-86,57, 
  /* [10][0][][] */ -127,-10,-19,-19,12,24,58,6,28,-66,-42,18,18,-86,-56,72, 
  /* [11][0][][] */ 46,7,-127,69,34,35,-21,88,-2,-88,27,-71,50,18,-44,-59, 
  /* [12][0][][] */ 47,-101,26,69,10,-68,-127,-15,122,-41,-42,-16,-7,2,97,12, 
  /* [13][0][][] */ 118,26,123,-94,127,10,46,-56,-19,-7,120,-93,-14,4,-70,44, 
  /* [14][0][][] */ -53,1,-76,-37,39,-127,60,-38,97,4,-60,-96,53,106,2,25, 
  /* [15][0][][] */ -21,-56,127,48,101,-63,-56,-78,42,-99,-63,30,-121,-37,-47,56, 
  /* [16][0][][] */ -127,-23,81,-20,66,11,46,81,-15,-45,64,56,24,66,-82,-18, 
  /* [17][0][][] */ -35,-26,-33,-24,-4,30,47,24,-4,127,0,-5,-10,84,18,36, 
  /* [18][0][][] */ 4,75,-14,-10,8,38,6,-46,36,127,0,48,-3,-34,-4,-31, 
  /* [19][0][][] */ -26,-3,10,20,20,17,12,16,11,9,-45,0,-127,-19,-3,6, 
  /* [20][0][][] */ 73,-59,-6,-127,-39,63,50,-78,-59,33,-76,-11,2,-25,64,49, 
  /* [21][0][][] */ 9,-49,127,34,24,81,-27,-22,15,34,40,-18,-16,24,5,-14, 
  /* [22][0][][] */ 63,43,127,-21,80,98,5,101,64,-13,19,91,66,56,-35,55, 
  /* [23][0][][] */ -37,11,-87,43,78,-127,16,21,-25,25,-45,32,-42,-66,-12,25, 
  /* [24][0][][] */ 58,-127,14,-71,46,38,-52,-61,25,-14,16,102,-49,82,76,58, 
  /* [25][0][][] */ -127,-75,-63,-51,67,-19,1,-63,-108,42,-81,32,73,-8,-1,93, 
  /* [26][0][][] */ 21,-35,85,-14,-24,35,-76,127,-82,-90,29,9,0,-47,51,-18, 
  /* [27][0][][] */ -111,5,-6,-16,58,6,-8,-5,-4,-28,127,28,-37,13,-35,-16, 
  /* [28][0][][] */ -19,-24,21,48,5,-19,-2,107,31,17,-21,-8,-127,7,-9,17, 
  /* [29][0][][] */ -10,62,74,-71,74,-30,3,-61,-127,14,-42,23,-22,52,-91,22, 
  /* [30][0][][] */ -11,-26,-127,-14,66,-58,20,19,-30,10,-12,-40,-92,-26,-24,-1, 
  /* [31][0][][] */ 50,-3,-127,15,-49,-4,-30,90,-27,-14,-49,-40,49,5,-77,29, 
  /* [32][0][][] */ -112,67,-4,23,-24,13,46,72,43,19,127,2,21,63,-17,23, 
  /* [33][0][][] */ -30,-33,127,-30,-65,46,-50,-51,-25,9,45,-2,-15,43,19,-6, 
  /* [34][0][][] */ -10,67,-69,-57,39,-23,125,6,-38,34,-98,-87,-1,-70,127,62, 
  /* [35][0][][] */ 12,-37,36,3,50,-33,28,-24,-117,41,19,29,-19,127,-50,-16, 
  /* [36][0][][] */ -70,24,-27,29,-19,23,42,105,18,37,127,5,-15,38,8,-51, 
  /* [37][0][][] */ -24,53,127,0,-100,-72,67,-20,7,80,-24,47,-13,-114,67,-14, 
  /* [38][0][][] */ 15,-85,14,-25,83,-25,-71,-1,-51,6,127,38,106,64,-53,95, 
  /* [39][0][][] */ -57,-84,46,-35,-94,-47,35,82,24,-26,68,-127,69,58,76,44, 
  /* [40][0][][] */ 81,18,-15,-57,-40,127,-30,13,-22,-39,-6,21,106,-5,-26,48, 
  /* [41][0][][] */ 19,-81,-33,-127,86,7,-122,-62,81,-112,79,-26,-21,0,-40,-87, 
  /* [42][0][][] */ -15,-3,38,77,-68,-18,-47,16,-48,-29,35,0,6,127,-54,23, 
  /* [43][0][][] */ 64,127,-37,124,-20,1,23,-48,-22,24,-23,36,-11,-68,37,3, 
  /* [44][0][][] */ -49,-23,-127,-2,-10,0,-44,40,-17,-34,-27,2,28,-50,7,11, 
  /* [45][0][][] */ 25,50,-50,-97,-65,-73,127,-12,-15,103,-42,5,-30,-87,57,-9, 
  /* [46][0][][] */ 1,44,1,-1,-9,-14,9,73,0,-12,-4,45,4,127,21,24, 
  /* [47][0][][] */ 56,-19,65,-114,-89,-33,-96,103,-59,-106,12,50,65,-127,40,71, 
  /* [48][0][][] */ 10,-21,6,-127,16,-2,-36,-12,7,-60,-3,33,4,72,6,23, 
  /* [49][0][][] */ -2,-52,30,110,87,15,3,76,-63,0,-8,19,28,68,127,1, 
  /* [50][0][][] */ -53,-77,63,18,26,127,-84,-107,96,-65,86,-44,78,32,42,-88, 
  /* [51][0][][] */ -19,16,-50,53,-3,-46,-81,28,106,-22,49,127,59,64,53,-49, 
  /* [52][0][][] */ -47,62,115,0,17,5,32,14,-28,15,20,69,31,37,-127,-17, 
  /* [53][0][][] */ 33,2,-1,-127,-41,-9,-7,-63,41,27,-9,33,22,-76,116,-4, 
  /* [54][0][][] */ -18,-19,-2,-25,13,10,3,33,45,-6,25,3,22,127,24,36, 
  /* [55][0][][] */ -8,-1,-76,16,1,6,18,-127,16,-4,-22,-19,-41,-49,-41,-10, 
  /* [56][0][][] */ 30,41,44,87,-5,-15,23,127,40,-14,10,-36,84,6,-35,16, 
  /* [57][0][][] */ 96,-1,68,-7,-102,-127,-70,-82,41,5,-127,11,29,-25,55,-44, 
  /* [58][0][][] */ 50,106,-28,46,-127,-77,-15,17,-13,34,23,-61,-55,-55,55,-12, 
  /* [59][0][][] */ 102,-26,-14,23,-47,-83,47,18,-23,26,-127,27,64,20,-3,46, 
  /* [60][0][][] */ -127,41,-26,9,-9,39,40,41,-25,36,60,10,-60,-1,50,-29, 
  /* [61][0][][] */ -11,45,38,12,77,3,-39,-33,127,-12,64,15,4,-11,-12,-56, 
  /* [62][0][][] */ -81,4,-88,23,46,3,-32,44,30,-69,44,-20,-71,17,-127,-13, 
  /* [63][0][][] */ -76,14,127,-5,-48,-40,46,-28,63,46,-22,45,35,-111,96,42, 
  /* [64][0][][] */ 12,127,-56,59,61,-5,86,-126,-34,105,13,-55,-63,-118,-13,4, 
  /* [65][0][][] */ -2,-14,41,13,72,-23,-8,-127,16,-28,-42,-4,0,-39,57,21, 
  /* [66][0][][] */ -127,-10,-21,-34,-64,37,-9,-35,-74,-83,-39,26,73,37,86,104, 
  /* [67][0][][] */ 5,-34,20,104,2,15,-7,48,31,24,-44,29,-4,-39,-127,-22, 
  /* [68][0][][] */ -35,36,-9,127,-10,28,44,-8,-44,76,42,1,9,-42,-53,-26, 
  /* [69][0][][] */ 25,79,37,127,28,-56,58,-103,-26,50,2,106,7,-94,-28,14, 
  /* [70][0][][] */ -9,-23,53,-42,127,19,-16,-57,13,26,47,9,-54,3,18,30, 
  /* [71][0][][] */ 3,32,12,80,-6,-127,-62,122,69,-99,-17,20,17,-40,-41,53, 
  /* [72][0][][] */ -107,-9,-32,127,19,-33,13,39,-20,45,-106,15,111,45,23,85, 
  /* [73][0][][] */ 13,-15,-13,114,60,27,52,-26,127,95,26,73,-25,108,-59,-66, 
  /* [74][0][][] */ 32,-38,-17,-17,-63,42,91,19,-40,21,-127,-51,-106,-50,38,13, 
  /* [75][0][][] */ -25,-30,-25,127,-42,38,-28,-17,-32,-3,-4,-9,-26,-19,-36,-47, 
  /* [76][0][][] */ -24,-19,12,-1,21,28,-43,-104,-7,-127,-4,-6,-30,-37,24,-17, 
  /* [77][0][][] */ 127,-61,63,32,-24,6,-30,5,51,0,-16,-6,6,57,-83,24, 
  /* [78][0][][] */ -51,-42,63,4,23,16,-72,42,-3,-69,-44,-38,25,127,20,-1, 
  /* [79][0][][] */ 24,-12,80,26,70,97,-51,-101,34,-44,51,11,127,-56,-29,-69, 
  /* [80][0][][] */ -96,-75,-72,102,18,12,29,10,-50,-48,-2,-4,62,-127,46,3, 
  /* [81][0][][] */ 59,-25,-68,10,110,127,-22,-67,-2,-81,20,-94,-12,-40,-70,3, 
  /* [82][0][][] */ 93,127,-23,25,-109,22,-49,-12,-16,35,76,-67,-79,61,33,-11, 
  /* [83][0][][] */ 127,52,22,-70,28,36,-28,13,51,-15,78,-3,-59,-56,0,-97, 
  /* [84][0][][] */ 52,-78,-47,21,85,50,-45,-127,-24,-36,87,-6,-100,24,-76,-58, 
  /* [85][0][][] */ -66,43,-102,-37,-88,-1,37,93,7,127,6,-127,22,57,119,-64, 
  /* [86][0][][] */ 127,-8,31,-1,28,0,-8,-8,36,50,-39,19,22,57,-10,43, 
  /* [87][0][][] */ -5,38,0,-13,-3,47,-13,36,27,-25,29,33,-14,-127,66,20, 
  /* [88][0][][] */ -6,-78,-105,-127,24,8,-86,-127,-40,-62,8,-89,-101,-54,91,-29, 
  /* [89][0][][] */ 21,17,31,-127,36,45,-36,39,39,-94,10,9,32,41,21,25, 
  /* [90][0][][] */ -21,82,-58,35,22,-9,59,-108,62,127,-94,35,1,-31,12,-12, 
  /* [91][0][][] */ 53,21,-80,26,-24,-107,38,1,-43,34,-127,18,25,-69,60,2, 
  /* [92][0][][] */ -3,7,127,65,95,5,10,-35,-60,49,4,-30,-67,116,-41,-40, 
  /* [93][0][][] */ 127,-59,21,-16,7,-65,-20,-34,-3,53,-55,-18,-36,49,10,23, 
  /* [94][0][][] */ 56,-52,71,53,127,-2,-11,-17,-15,-28,-73,68,-54,72,-21,-84, 
  /* [95][0][][] */ -112,4,54,22,56,56,-6,13,3,-29,127,49,-20,30,12,-19, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00062603573314845562, 0.00099419709295034409, 0.00041903136298060417, 0.0026896160561591387, 0.00079251424176618457, 0.00067769124871119857, 0.00083221163367852569, 0.0011874304618686438, 0.00064489123178645968, 0.00045000118552707136, 0.00071902660420164466, 0.0008381165680475533, 0.00096073315944522619, 0.00040761855780147016, 0.00087099289521574974, 0.00089317606762051582, 0.00066922884434461594, 0.00086710008326917887, 0.0010736617259681225, 0.002322489395737648, 0.00096976751228794456, 0.00063646829221397638, 0.00085734168533235788, 0.00073396560037508607, 0.0003776740632019937, 0.00070015934761613607, 0.00076641642954200506, 0.00047159066889435053, 0.0025609440635889769, 0.0005869369488209486, 0.0008854856132529676, 0.00049484195187687874, 0.0006168714608065784, 0.0010962019441649318, 0.00051967625040560961, 0.0011055013164877892, 0.00056175561621785164, 0.00074341532308608294, 0.00098463182803243399, 0.00066451512975618243, 0.0018636402674019337, 0.00040535075822845101, 0.00068897072924301028, 0.00043015781557187438, 0.00081667641643434763, 0.00056432501878589392, 0.00080713111674413085, 0.00045849027810618281, 0.00093780236784368753, 0.00076740427175536752, 0.00083504524081945419, 0.0018394094659015536, 0.00048348319251090288, 0.00099510082509368658, 0.00099448638502508402, 0.00044898421037942171, 0.00080507562961429358, 0.00048790223081596196, 0.00068672234192490578, 0.001015812624245882, 0.00043890817323699594, 0.0010725139873102307, 0.0018103630281984806, 0.0010361470049247146, 0.00038485796540044248, 0.0012514812406152487, 0.00084559270180761814, 0.0021745916455984116, 0.00048466536100022495, 0.00066940957913175225, 0.00081427674740552902, 0.0006139090983197093, 0.00087133928900584579, 0.0010382424807175994, 0.00067011627834290266, 0.0024000471457839012, 0.0004266325559001416, 0.00091280665947124362, 0.00031979853520169854, 0.0011078488314524293, 0.00091568706557154655, 0.0014517836971208453, 0.00082612066762521863, 0.0012660352513194084, 0.00046336682862602174, 0.00065963837550953031, 0.00089264038251712918, 0.0013885194202885032, 0.00029932573670521379, 0.0016866836231201887, 0.00052170956041663885, 0.0007340677548199892, 0.00035277337883599102, 0.00061322451801970601, 0.0010096015175804496, 0.00063206360209733248, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -50861, -9377, 13361, -9651, 6596, 4400, -16068, -44637, -7621, 26331, 33725, 6850, -12237, -17907, 22965, -43411, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00051846296992152929, 0.00054453435586765409, 0.00073049025377258658, 0.00075782107887789607, 0.00061690248548984528, 0.00069214164977893233, 0.00075423839734867215, 0.00071061274502426386, 0.00049283209955319762, 0.00048069117474369705, 0.0006302687106654048, 0.00045502654393203557, 0.00070646242238581181, 0.0012853931402787566, 0.00043218999053351581, 0.00054682983318343759, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -30,15,-29,6,44,8,12,112,-60,19,44,-6,4,3,-15,9,-7,-30,-19,-14,52,-10,13,127,-15,115,17,-13,7,-32,28,-46,14,31,31,-70,29,10,45,-16,-123,1,23,18,29,50,-127,-50, 
  /* [1][0][][] */ -48,11,-4,13,-29,29,17,63,-45,-47,20,-25,-49,-7,30,-36,-35,90,-7,18,2,33,-42,-17,36,-40,19,21,-19,-65,-52,8,-18,-5,47,-5,8,-39,22,17,-27,-29,127,-2,19,-5,35,0, 
  /* [2][0][][] */ -3,-12,-11,-44,1,-78,8,-32,-11,28,-1,16,28,26,-14,9,6,-12,-35,-25,-13,4,10,-127,-24,73,-8,10,-1,-27,-3,-6,-9,54,3,-9,8,8,13,-17,-28,-1,-18,1,-8,5,3,9, 
  /* [3][0][][] */ -14,56,-12,-34,-18,7,5,0,-18,3,19,40,-127,8,-15,-7,4,0,-28,-16,-34,7,22,10,-6,-11,15,32,-9,23,-17,15,6,-2,13,15,-18,18,52,17,8,5,9,-38,5,-1,0,34, 
  /* [4][0][][] */ 48,-25,20,17,28,39,9,-43,-47,14,-8,-22,11,23,0,15,23,1,-83,-11,-25,16,6,69,22,-32,25,56,2,-87,20,-6,28,-16,20,-127,-5,41,-5,33,-16,17,-2,-27,-7,-30,5,10, 
  /* [5][0][][] */ 51,-3,-16,50,5,-5,1,4,-8,1,31,3,18,59,-2,-7,-22,37,26,5,7,0,-10,-29,1,-46,12,-25,-2,-33,20,-1,66,-127,-5,25,-21,-8,-1,5,-90,61,25,3,-2,-4,-107,-4, 
  /* [6][0][][] */ 31,6,-1,6,-36,9,4,-18,5,-11,0,3,-30,-9,24,-6,2,-22,127,6,8,27,20,-45,3,-8,28,-8,3,2,-19,4,8,-13,41,-39,12,-43,72,21,-1,-4,1,15,-2,-14,12,-1, 
  /* [7][0][][] */ -30,-18,-35,39,-8,72,-3,48,17,29,12,127,75,-5,-18,-13,-7,-20,-2,-6,-14,-12,5,71,15,-51,-59,8,-22,1,-4,-3,3,-5,-35,15,0,-35,93,-16,20,11,-72,-45,17,-7,10,-11, 
  /* [8][0][][] */ -71,-60,2,9,13,2,-15,41,-7,-53,-1,63,34,4,15,19,-21,59,-28,-7,-56,26,-18,-5,-1,5,1,30,-12,127,-6,17,-3,-2,-7,-112,-101,72,41,10,18,8,97,-14,2,19,14,28, 
  /* [9][0][][] */ -10,32,-7,37,-8,-4,-17,-12,64,-61,15,47,-87,-23,24,-13,-2,-1,-55,-17,42,-6,-5,-31,-3,-27,48,2,20,25,-5,9,25,36,105,-117,-12,-127,-104,17,-11,15,64,37,7,4,-11,-27, 
  /* [10][0][][] */ -29,1,-40,-127,42,106,9,-19,-9,51,25,0,51,-42,-35,17,21,-28,35,-57,14,-15,18,25,-53,-109,33,-13,25,14,49,-65,-3,-86,10,-11,14,-58,14,-47,-26,-44,-33,-1,26,6,12,-35, 
  /* [11][0][][] */ 20,38,-9,57,37,-95,-87,-46,-8,69,-20,-17,19,68,-37,-33,53,47,8,-13,-58,-84,42,-6,34,-35,47,-15,73,-47,35,-93,39,-4,-47,-102,88,-4,-30,-127,-13,74,102,-82,-17,-81,27,22, 
  /* [12][0][][] */ 126,-31,9,28,-5,19,5,127,26,-3,-51,-17,5,25,-13,11,-15,21,-5,-2,9,-8,38,23,-17,31,-22,13,29,36,-35,15,-8,-59,-20,9,-25,-3,-8,-22,-12,-94,19,-123,-84,-16,74,-5, 
  /* [13][0][][] */ 9,-2,-4,7,12,-8,11,-3,4,7,11,15,-7,0,11,5,2,-2,9,-2,8,-14,14,-6,-8,-8,16,127,15,-3,2,-6,16,-5,-34,19,4,0,-2,-2,-8,-3,-8,13,3,-4,-7,-8, 
  /* [14][0][][] */ 56,-37,40,-77,30,35,47,-68,-47,-68,3,123,-91,-11,52,26,72,9,-61,87,48,22,89,-15,12,63,-35,-127,32,-37,31,65,4,64,-107,-57,-15,31,118,-14,-45,10,73,-13,8,-5,28,-38, 
  /* [15][0][][] */ 18,-21,-72,-6,57,22,52,-65,-4,13,-48,-20,39,0,-88,80,36,19,73,-70,-90,5,32,8,-71,36,33,63,70,46,-2,-60,20,83,101,109,-6,-127,-9,-34,101,44,120,-65,19,-34,-16,27, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.022034676745533943, 0.023142708465456963, 0.031045835465192795, 0.032207395881414413, 0.02621835470199585, 0.029416019096970558, 0.03205513209104538, 0.030201040208339691, 0.020945362746715546, 0.020429374650120735, 0.026786420494318008, 0.019338628277182579, 0.030024653300642967, 0.054629206657409668, 0.018368074670433998, 0.023240266367793083, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 4022, 34981, -608, 36063, 6505, 120681, -2323, 49587, 3810, 38605, 24482, 1754, -249, 34261, -478, -1147, -373, 2807, 941, -1187, 476, -6705, -563, -13668, -5624, 41924, 136578, 110689, 4412, 3592, -3112, 2938, 26675, -1207, 47953, 11304, 56392, 585, 46636, 5079, -57, 67568, 60, 5006, 48008, -737, -344, 54478, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.870521949371323e-05, 3.449372889008373e-05, 0.00012544018682092428, 5.9115722251590341e-05, 9.7533396910876036e-05, 7.8433738963212818e-05, 0.00015555370191577822, 0.00011272110714344308, 7.7426040661521256e-05, 4.0268318116432056e-05, 4.979208461008966e-05, 9.1730151325464249e-05, 4.5946442696731538e-05, 3.0646504455944523e-05, 0.00015217777399811894, 0.00017338249017484486, 0.00018422579159960151, 6.1815153458155692e-05, 0.00010788802319439128, 0.0001183072236017324, 0.0001049658385454677, 0.0001151665928773582, 0.00012764307030010968, 9.2156595201231539e-05, 7.8220073191914707e-05, 0.00010987160931108519, 1.8351540347794071e-05, 6.2534250901080668e-05, 0.00010488348198123276, 9.6063413366209716e-05, 0.00011862623796332628, 0.00014588802878279239, 4.6134413423715159e-05, 0.00014420242223422974, 2.5472303605056368e-05, 4.1271148802479729e-05, 0.00010165329149458557, 8.9246663264930248e-05, 0.00012439594138413668, 8.7306594650726765e-05, 0.00012137168960180134, 8.8903936557471752e-05, 7.673505024285987e-05, 7.6716118201147765e-05, 2.5009265300468542e-05, 0.0001376605941914022, 0.00011213320249225944, 2.6390827770228498e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 63,-91,98,71,53,-39,109,-64,65,-101,-83,52,58,-42,-75,-93,106,77,48,86,63,-66,-81,48,-36,-41,-57,-67,-58,69,-61,-117,-20,44,68,59,-67,57,-49,-35,47,-73,58,62,-90,12,76,-38, 79,-94,127,83,-75,-70,-59,-80,101,-119,-66,71,83,-114,-94,95,-39,100,81,127,92,-109,55,68,-56,-78,-62,-86,55,81,-28,-127,-85,78,78,81,-77,81,-79,-27,74,-97,79,86,-66,-127,90,-113, 38,-44,70,40,17,-44,-50,-39,47,-43,1,35,30,-83,-55,-1,-57,40,38,77,35,-52,34,25,-27,-45,-41,-28,26,34,83,-84,-84,43,30,34,-32,42,-36,-14,40,-46,34,45,-4,-8,38,-76, 
  /* [0][1][][] */ 86,-112,-41,93,53,-86,127,-89,87,-113,-70,83,87,-119,-13,-127,127,111,68,-35,82,106,-127,70,77,-77,-97,-106,-127,90,-66,-8,-84,68,108,91,-84,77,-87,91,84,-101,92,95,-92,105,95,-98, 127,-127,-67,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-22,97,-73,127,127,-47,127,127,69,127,127,-127,-127,-127,50,127,-26,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-8,127,-127, 62,-72,-34,71,32,-63,-56,-64,59,-42,-63,60,49,-50,-14,8,-72,55,62,-25,58,67,51,67,66,-58,-60,-46,29,60,127,16,-62,63,45,51,-51,61,-61,53,62,-59,53,60,-71,-66,54,-57, 
  /* [0][2][][] */ 38,-54,-46,47,25,-48,66,-42,42,-78,-4,36,59,-80,86,-87,80,52,38,-32,28,-12,-76,28,-31,-47,-59,-53,-75,33,-43,86,-72,38,54,43,-31,41,-43,-94,47,-48,40,48,-25,15,38,-83, 71,-83,-54,76,-56,-60,-74,-71,51,-79,-69,58,74,-49,127,30,-44,61,65,-46,56,-14,40,68,-54,-66,-91,-68,30,64,-26,108,-56,67,61,60,-51,66,-70,-111,66,-62,64,62,-85,50,61,-59, 38,-39,-25,45,25,-17,-18,-36,17,-20,-50,26,31,10,63,23,-38,25,29,-37,31,0,38,43,-26,-29,-57,-23,27,31,57,59,-2,38,17,25,-23,36,-32,-53,27,-37,28,26,-59,8,28,1, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033449716866016388, 0.0014659834560006857, 0.0053312079980969429, 0.0025124181993305683, 0.0041451691649854183, 0.0033334337640553713, 0.0066110319457948208, 0.004790646955370903, 0.0032906066626310349, 0.0017114034853875637, 0.0021161634940654039, 0.0038985314313322306, 0.0019527238328009844, 0.0013024763902649283, 0.006467555183917284, 0.0073687555268406868, 0.0078295962885022163, 0.002627143869176507, 0.0045852409675717354, 0.005028056912124157, 0.0044610481709241867, 0.0048945802263915539, 0.0054248301312327385, 0.0039166552014648914, 0.0033243529032915831, 0.0046695433557033539, 0.00077994045568630099, 0.0026577056851238012, 0.0044575477950274944, 0.0040826951153576374, 0.0050416151061654091, 0.0062002409249544144, 0.0019607124850153923, 0.0061286026611924171, 0.001082572853192687, 0.0017540238332003355, 0.0043202647939324379, 0.0037929830141365528, 0.0052868276834487915, 0.0037105302326381207, 0.0051582967862486839, 0.0037784173619002104, 0.0032612395007163286, 0.0032604350708425045, 0.0010628937743604183, 0.0058505749329924583, 0.0047656609676778316, 0.0011216101702302694, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 282, 747, 2237, 420, 13242, 16327, 2562, -413, -909, -555, 707, 1345, 3208, 1434, 21974, 3777, 3586, -1633, 47, 4761, -2520, 13060, 8166, 9640, 6811, 205, 6265, 4315, 6483, -622, 10436, 6311, 1005, 13, 5013, 5424, -3252, 1011, -1655, 4755, 1330, -493, -566, 73, 1159, 3675, 1073, 1108, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039271914283744991, 0.00077643786789849401, 0.000226591233513318, 0.00022805875050835311, 0.00016167668218258768, 0.0002413613983662799, 0.00040676968637853861, 0.00017969055625144392, 0.00035750679671764374, 0.00066329381661489606, 0.0012668881099671125, 0.00024428204051218927, 0.00038663187297061086, 0.00064831128111109138, 0.00016163258987944573, 0.00035199927515350282, 0.00015345151768997312, 0.00029435133910737932, 0.00027531804516911507, 0.00019469669496174902, 0.00030704887467436492, 0.00018899554561357945, 0.00046632115845568478, 0.00016329914797097445, 0.00024775080964900553, 0.00027990885428152978, 0.0011156589025631547, 0.00043180762440897524, 0.00022927891404833645, 0.00039061345160007477, 0.0002508827019482851, 0.00019707879982888699, 0.00057665759231895208, 0.00026650039944797754, 0.00075717957224696875, 0.00036281606298871338, 0.00045036579831503332, 0.00024394998035859317, 0.00014422653475776315, 0.0003652916057035327, 0.00013147637946531177, 0.00024653051514178514, 0.00039747089613229036, 0.00018760532839223742, 0.0015961520839482546, 0.00032196575193665922, 0.00029502046527341008, 0.0011188414646312594, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,4,44,-28,30,28,-9, 
  /* [1][0][][] */ 41,75,19,0,-27,-62,108,127, 
  /* [2][0][][] */ -63,-46,9,-44,-127,34,-13,14, 
  /* [3][0][][] */ 106,-19,-25,-90,-127,9,13,-6, 
  /* [4][0][][] */ -120,127,-2,50,25,-18,94,25, 
  /* [5][0][][] */ -127,-27,58,4,-120,-5,12,116, 
  /* [6][0][][] */ -17,-127,32,-20,37,32,-14,16, 
  /* [7][0][][] */ -48,-21,-14,86,127,-10,-22,20, 
  /* [8][0][][] */ 36,10,-20,-127,23,-8,-19,-16, 
  /* [9][0][][] */ 17,-127,3,-6,20,115,-107,-3, 
  /* [10][0][][] */ -53,-7,-11,8,-127,50,45,-18, 
  /* [11][0][][] */ 103,25,39,-7,-30,-14,-19,-127, 
  /* [12][0][][] */ 5,19,31,-1,-8,-77,127,61, 
  /* [13][0][][] */ 62,-40,14,-46,127,122,72,-62, 
  /* [14][0][][] */ 127,54,-35,4,-70,-40,16,26, 
  /* [15][0][][] */ 9,-127,-5,-12,-20,-26,-8,20, 
  /* [16][0][][] */ -65,-82,-11,-42,-127,47,-23,-1, 
  /* [17][0][][] */ -19,95,-110,-22,24,-127,99,-95, 
  /* [18][0][][] */ 127,-32,-51,13,-46,38,1,76, 
  /* [19][0][][] */ 119,-127,-49,-4,57,47,21,62, 
  /* [20][0][][] */ 110,31,-18,127,19,8,30,-42, 
  /* [21][0][][] */ 53,44,-63,62,-59,108,-127,-106, 
  /* [22][0][][] */ -127,-22,-4,1,-47,-13,-27,26, 
  /* [23][0][][] */ -18,-50,-19,15,-127,57,51,-37, 
  /* [24][0][][] */ 127,-30,-11,64,-78,-37,5,29, 
  /* [25][0][][] */ 24,-4,1,-4,127,43,59,-29, 
  /* [26][0][][] */ 2,-127,-3,-72,2,-91,72,-46, 
  /* [27][0][][] */ -15,-127,29,5,-9,-59,22,-12, 
  /* [28][0][][] */ -127,65,76,36,20,-24,79,21, 
  /* [29][0][][] */ -1,49,1,-11,6,32,-92,-127, 
  /* [30][0][][] */ 127,-69,-2,81,-72,-31,6,19, 
  /* [31][0][][] */ -24,13,43,13,21,-85,127,36, 
  /* [32][0][][] */ -26,12,4,3,-127,-104,-116,22, 
  /* [33][0][][] */ -27,12,0,16,-127,-67,-52,28, 
  /* [34][0][][] */ 9,-127,29,8,-21,82,-68,49, 
  /* [35][0][][] */ -17,-46,-127,-13,-7,-73,65,-45, 
  /* [36][0][][] */ 26,127,58,-16,-32,55,-62,-74, 
  /* [37][0][][] */ -127,46,77,-9,63,-77,-13,-126, 
  /* [38][0][][] */ -127,-6,-36,-35,70,25,71,121, 
  /* [39][0][][] */ 0,-6,100,13,-8,-83,127,60, 
  /* [40][0][][] */ -27,-22,-25,-60,-122,127,121,-55, 
  /* [41][0][][] */ -117,51,-2,-84,-75,-63,-127,5, 
  /* [42][0][][] */ -25,-102,-78,14,-11,36,-127,-56, 
  /* [43][0][][] */ -86,-8,-20,-115,127,81,55,-8, 
  /* [44][0][][] */ 100,-48,20,-127,5,-56,13,76, 
  /* [45][0][][] */ -74,-127,1,-29,10,-72,61,43, 
  /* [46][0][][] */ 127,-2,-7,-37,112,-36,-37,-20, 
  /* [47][0][][] */ 124,-3,-8,127,9,43,4,-51, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00078610097989439964, 0.0015541859902441502, 0.00045356483315117657, 0.00045650234096683562, 0.00032362618367187679, 0.00048313010483980179, 0.00081422581570222974, 0.00035968434531241655, 0.00071561691584065557, 0.0013277069665491581, 0.0025359140709042549, 0.00048897630767896771, 0.00077391619561240077, 0.0012977166334167123, 0.00032353794085793197, 0.00070459255948662758, 0.00030716200126335025, 0.00058919942239299417, 0.00055110070388764143, 0.0003897219430655241, 0.00061461591394618154, 0.00037831001100130379, 0.00093342922627925873, 0.0003268738801125437, 0.0004959197249263525, 0.00056029006373137236, 0.0022332004737108946, 0.00086434395052492619, 0.00045894473441876471, 0.00078188604675233364, 0.00050218874821439385, 0.00039449016912840307, 0.0011542883003130555, 0.00053345051128417253, 0.0015156369190663099, 0.00072624441236257553, 0.00090149161405861378, 0.00048831163439899683, 0.00028869646484963596, 0.00073119963053613901, 0.00026317461743019521, 0.00049347704043611884, 0.00079561251914128661, 0.0003755272482521832, 0.0031949977856129408, 0.00064447481418028474, 0.00059053878067061305, 0.0022395709529519081, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -33476, 28917, -15089, -7591, 17041, -10550, 20033, 38990, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00050572108011692762, 0.00056970154400914907, 0.0013136923080310225, 0.0013673978392034769, 0.00090540089877322316, 0.00057712144916877151, 0.00062553974566981196, 0.00069801200879737735, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -45,2,-37,27,8,24,14,-5,-41,120,-28,116,127,-5,81,-34,32,-34,20,-11,-4,-2,19,-59,0,-72,-7,8,19,7,5,-27,12,-85,67,12,-2,9,-27,-2,94,1,4,-45,-36,2,-26,8, 
  /* [1][0][][] */ 0,51,127,31,-9,-59,9,-78,6,-17,34,-8,-39,28,-38,-127,16,-45,24,21,-26,49,32,-33,-12,-42,23,15,17,-34,7,4,-29,22,18,18,11,-33,73,-77,38,62,-9,20,16,24,27,-34, 
  /* [2][0][][] */ 8,-56,11,-38,36,19,-20,-29,10,-8,-7,9,-17,59,19,-6,-49,121,-37,-43,-23,23,-46,17,127,12,3,28,-50,-10,-4,-31,-18,-11,-5,22,0,-6,-12,7,4,-13,-18,-6,6,29,-35,-38, 
  /* [3][0][][] */ 22,-96,-27,-7,9,-24,-2,-11,-18,-14,28,25,21,-6,47,-13,-40,-15,8,42,-12,14,-24,2,14,67,22,5,-24,2,127,-8,4,-6,-1,6,-17,-49,-14,2,-25,5,9,30,19,-14,2,46, 
  /* [4][0][][] */ -71,7,-9,1,2,-38,1,16,48,-48,17,-26,-28,33,17,-18,5,11,-3,37,19,-1,6,3,1,40,10,85,-2,-15,-22,-12,-1,-127,-35,11,21,3,-11,-9,-41,1,-3,10,-31,-8,4,39, 
  /* [5][0][][] */ 0,17,-19,4,-44,19,21,73,37,2,27,23,0,-59,23,29,34,-69,12,36,45,-41,2,41,6,7,-42,-64,-28,-49,-7,5,8,-74,15,-40,61,0,-49,43,8,-54,-4,-8,127,-14,-61,-4, 
  /* [6][0][][] */ -23,-22,-17,9,49,-25,-7,-21,-15,-7,40,-17,-11,37,8,-40,3,5,-9,-17,-30,56,-7,-75,3,-7,-27,-44,-6,28,-4,19,24,-35,19,69,-66,-40,14,-52,-1,10,13,58,127,-42,21,-2, 
  /* [7][0][][] */ 24,30,-106,6,-15,19,21,67,-26,12,82,-25,37,-39,15,2,-27,-127,36,-41,87,75,18,-54,28,-29,56,19,-23,32,-34,24,6,55,36,-17,8,-86,-58,-68,-18,-44,29,59,-5,-57,-24,4, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.021493144333362579, 0.024212315678596497, 0.055831924080848694, 0.05811440572142601, 0.038479536771774292, 0.024527661502361298, 0.026585439220070839, 0.029665509238839149, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -55449, -393, 8272, 718, 6872, -6730, 2068, 40279, 2390, 37723, -4153, 24209, -6145, -575, 32332, 16185, -599, 22316, 34117, 10666, -1282, 114, -2454, 14571, -7946, 21144, 44747, 38091, 3266, 1114, -2817, 1562, 1139, 14160, -7410, 21546, -13063, 11272, -21991, 141263, 25246, 22302, 10684, -2532, 10213, 7008, 479, 408, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00029364734655246139, 0.00030062708538025618, 0.0001901619543787092, 0.00019259621331002563, 0.0001324516924796626, 0.00010154340270673856, 0.00064009759807959199, 8.7685461039654911e-05, 9.909970685839653e-05, 0.00012816795788239688, 7.6085954788140953e-05, 0.00018434722733218223, 0.00028819017461501062, 0.00033943625749088824, 7.5956784712616354e-05, 9.9493161542341113e-05, 0.00020247648353688419, 0.00016569084255024791, 7.5776915764436126e-05, 0.00018849711341317743, 0.00015565070498269051, 0.00026550207985565066, 0.00018226672546006739, 0.00014327345706988126, 0.00015928228094708174, 0.0001847020466811955, 0.00041284915641881526, 9.3933078460395336e-05, 0.00021954669500701129, 0.00070754910120740533, 0.0001326009223703295, 0.0001917645859066397, 0.00063035933999344707, 0.00020790749113075435, 0.00016748518100939691, 0.00011576295946724713, 0.00028168258722871542, 0.00018443498993292451, 0.0002622457395773381, 1.7985816157306544e-05, 0.000127506471471861, 5.3640877013094723e-05, 0.00016300710558425635, 0.00014348170952871442, 0.00025762314908206463, 9.3734750407747924e-05, 0.00024227793619502336, 9.9884018709417433e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-4,19,105,3,82,-7,26,16,9,11,8,-14,-6,-46,8,-1,9,-24,-107,-4,-23,127,-10,0,7,-6,6,-5,6,14,100,23,31,38,-27,3,38,-3,8,18,-70,-8,-8,14,-1,-4,-12, 127,10,12,-127,26,89,7,9,127,127,8,42,-57,-21,5,8,127,-56,-59,-50,-97,25,-103,15,17,71,-31,-85,23,23,7,-124,6,-59,127,10,-38,-47,-5,125,-77,-96,-28,2,-37,-14,-127,21, -27,-3,5,15,-2,69,2,16,32,9,-13,31,-16,0,19,4,-101,29,-4,79,-29,-12,-16,-5,-3,-60,-4,26,-19,5,2,-23,9,-25,18,-19,3,45,43,-6,50,46,-16,11,-43,-3,1,-8, 
  /* [0][1][][] */ 126,8,1,-97,14,-27,32,-18,9,10,-10,51,-4,0,16,-34,1,-49,-57,-81,14,-74,-119,-18,6,99,-12,-127,-9,33,12,-111,20,-53,-2,127,-1,61,-43,43,-59,-127,35,-86,-47,-14,-8,-7, 25,-126,-127,112,-127,-127,-127,-127,-126,-94,127,-127,127,127,34,-127,-81,127,127,-104,127,127,112,127,127,-127,-127,28,-127,-127,92,127,-127,127,-29,-39,127,-127,127,127,127,-81,127,127,127,-127,111,103, 55,7,48,-14,4,-60,42,17,-22,16,-100,-8,-1,-38,127,3,64,-65,-69,79,16,-47,12,-32,4,8,-37,68,18,40,1,0,33,-46,11,67,-2,60,69,-11,-77,14,-85,-30,28,-17,-7,5, 
  /* [0][2][][] */ -46,-5,26,-16,7,34,-37,21,7,-26,14,30,10,-6,-37,16,6,22,-9,103,7,-35,-15,-13,-3,17,2,49,-10,4,45,-35,-19,-43,-31,-36,0,34,5,-24,12,-6,39,-35,-38,18,-9,17, 70,127,76,20,18,-18,123,34,19,-6,48,24,-6,-1,-92,24,-57,-56,-34,114,-34,47,13,18,30,-66,-38,27,76,2,127,23,87,-26,6,-33,-24,-15,-14,120,-24,-15,-41,46,18,-36,12,-127, -36,-3,8,-6,3,-8,-60,7,-19,-11,-36,-42,19,-8,-10,10,34,24,-11,-127,21,-12,5,-10,-4,8,-10,-53,-16,10,6,9,-21,90,-36,-19,-5,39,24,-66,6,9,-39,7,-46,125,-1,-5, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012480012141168118, 0.012776650488376617, 0.0080818831920623779, 0.0081853391602635384, 0.0056291967630386353, 0.0043155946768820286, 0.027204148471355438, 0.0037266321014612913, 0.0042117373086512089, 0.0054471381008625031, 0.0032336530275642872, 0.0078347567468881607, 0.012248082086443901, 0.014426040463149548, 0.0032281633466482162, 0.0042284592054784298, 0.0086052501574158669, 0.0070418608374893665, 0.0032205188181251287, 0.0080111268907785416, 0.0066151549108326435, 0.01128383819013834, 0.0077463355846703053, 0.0060891215689480305, 0.0067694969475269318, 0.0078498367220163345, 0.017546089366078377, 0.003992155659943819, 0.0093307346105575562, 0.030070835724473, 0.0056355390697717667, 0.0081499945372343063, 0.026790270581841469, 0.0088360682129859924, 0.0071181198582053185, 0.0049199257045984268, 0.011971510015428066, 0.0078384866937994957, 0.01114544365555048, 0.00076439714757725596, 0.0054190251976251602, 0.0022797372657805681, 0.0069278017617762089, 0.0060979723930358887, 0.010948983021080494, 0.0039837267249822617, 0.010296812281012535, 0.0042450707405805588, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 61577, 8892, 8558, 8889, 1913, 8110, -2341, -216, 1628, 3841, 5363, 170, 2142, -1357, 767, -2251, 3967, 13101, -363, 16679, 5144, 3245, 10013, -388, 4202, 7497, 28478, 7735, 57, -2946, 233, 2193, -2055, 7353, 6043, 5327, 7958, 6541, 22067, 2695, -1199, 2758, 1948, 5507, 11123, 3211, -2037, 3272, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.9883288233540952e-05, 0.00025539391208440065, 0.0001877740869531408, 0.00037477878504432738, 0.0011324686929583549, 0.00060545123415067792, 0.00077617669012397528, 0.0010290289064869285, 0.00040003782487474382, 0.00031918904278427362, 0.00042936988756991923, 0.00045274297008290887, 0.00045059705735184252, 0.00039715581806376576, 0.00051377923227846622, 0.0016007821541279554, 0.00040015092235989869, 0.00032214997918345034, 0.0014715356519445777, 0.00015748024452477694, 0.00020260554447304457, 0.00032597332028672099, 0.00039959207060746849, 0.00096060091163963079, 0.00028520129853859544, 0.00015416648238897324, 0.00014230697706807405, 0.00046910214587114751, 0.00056689634220674634, 0.00091148534556850791, 0.00041483942186459899, 0.00040683604311197996, 0.00092802470317110419, 0.00029968938906677067, 0.00019542402878869325, 0.00033536818227730691, 0.000451542844530195, 0.00023675627016928047, 0.00010597836808301508, 0.0016456758603453636, 0.0005255240248516202, 0.00099528266582638025, 0.00023169557971414179, 0.00028622802346944809, 0.00012276889174245298, 0.00035422362270765007, 0.0005988076445646584, 0.0008308385731652379, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 82,50,35,24,127,1,-89,-40, 
  /* [1][0][][] */ -9,12,-1,127,16,-12,8,9, 
  /* [2][0][][] */ 32,-121,-18,33,-2,-102,127,20, 
  /* [3][0][][] */ 127,-70,-61,-9,-9,19,85,-34, 
  /* [4][0][][] */ 1,-31,127,-17,-4,-49,0,-80, 
  /* [5][0][][] */ 62,-18,-13,-14,127,17,12,24, 
  /* [6][0][][] */ 23,127,-31,118,47,72,-90,-73, 
  /* [7][0][][] */ 8,127,14,8,5,-3,17,-17, 
  /* [8][0][][] */ 127,57,-3,7,-32,-68,-38,-37, 
  /* [9][0][][] */ -127,-28,73,16,121,39,27,1, 
  /* [10][0][][] */ -127,35,-11,86,83,63,19,-26, 
  /* [11][0][][] */ -86,-17,16,-127,53,31,-67,-85, 
  /* [12][0][][] */ 127,14,7,22,-24,-15,-25,-40, 
  /* [13][0][][] */ 41,71,-62,3,-4,127,-94,26, 
  /* [14][0][][] */ -90,3,-27,127,1,-9,19,-50, 
  /* [15][0][][] */ 3,127,-1,1,-10,1,1,-73, 
  /* [16][0][][] */ -10,-68,15,14,36,-43,127,-29, 
  /* [17][0][][] */ 6,127,20,-15,25,102,-86,-30, 
  /* [18][0][][] */ 10,52,-127,13,7,61,-47,82, 
  /* [19][0][][] */ -127,55,-22,37,-127,-33,-15,7, 
  /* [20][0][][] */ -116,-91,-45,8,127,55,23,-22, 
  /* [21][0][][] */ -34,-53,-12,8,-127,19,-22,-12, 
  /* [22][0][][] */ -127,0,11,-9,54,-43,18,65, 
  /* [23][0][][] */ -2,-13,12,-24,-11,52,-127,-88, 
  /* [24][0][][] */ 5,40,-127,15,-2,49,-25,55, 
  /* [25][0][][] */ 117,-13,54,90,-127,6,-74,-68, 
  /* [26][0][][] */ 12,-28,0,-10,-16,127,107,-22, 
  /* [27][0][][] */ 27,-7,-2,4,127,-1,13,-19, 
  /* [28][0][][] */ -16,127,-40,53,-21,77,-39,91, 
  /* [29][0][][] */ 2,2,0,-27,-17,86,-127,-70, 
  /* [30][0][][] */ 15,-6,-8,-127,-17,13,-12,-20, 
  /* [31][0][][] */ -63,-25,2,-31,-127,13,27,11, 
  /* [32][0][][] */ -73,45,32,-127,30,19,-58,-117, 
  /* [33][0][][] */ -78,-12,-15,6,-127,17,61,-14, 
  /* [34][0][][] */ -127,50,4,39,95,-46,23,1, 
  /* [35][0][][] */ -23,127,26,-9,-8,-59,28,-10, 
  /* [36][0][][] */ 41,48,1,-26,-20,55,-127,-40, 
  /* [37][0][][] */ 67,-63,-12,-49,12,-127,102,-39, 
  /* [38][0][][] */ 6,-127,6,-43,5,25,3,66, 
  /* [39][0][][] */ 34,-127,2,7,-19,2,-66,-89, 
  /* [40][0][][] */ 65,47,15,16,-82,127,-111,-70, 
  /* [41][0][][] */ -1,-127,7,-4,-13,95,-40,124, 
  /* [42][0][][] */ 52,42,11,-127,-51,65,-10,-122, 
  /* [43][0][][] */ -127,10,1,-88,109,48,46,-48, 
  /* [44][0][][] */ 0,-96,14,-26,-73,77,127,32, 
  /* [45][0][][] */ -127,13,20,-19,17,-25,86,-27, 
  /* [46][0][][] */ 32,127,100,12,0,5,37,39, 
  /* [47][0][][] */ 14,36,-13,127,18,30,70,-24, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018673732120078057, 0.00068244611611589789, 0.00050175702199339867, 0.0010014581494033337, 0.0030261052306741476, 0.0016178452642634511, 0.0020740460604429245, 0.0027497003320604563, 0.0010689536575227976, 0.0008529150509275496, 0.0011473327176645398, 0.0012097887229174376, 0.0012040545698255301, 0.0010612525511533022, 0.0013728856574743986, 0.0042775003239512444, 0.0010692558716982603, 0.0008608271018601954, 0.0039321365766227245, 0.00042080788989551365, 0.00054138863924890757, 0.00087104353588074446, 0.0010677624959498644, 0.0025668519083410501, 0.0007620953256264329, 0.00041195307858288288, 0.00038026293623261154, 0.0012535025598481297, 0.0015148215461522341, 0.002435608534142375, 0.0011085054138675332, 0.0010871193371713161, 0.0024798039812594652, 0.00080080941552296281, 0.00052219867939129472, 0.0008961478597484529, 0.001206581830047071, 0.00063264387426897883, 0.00028318812837824225, 0.0043974621221423149, 0.0014042692491784692, 0.0026595259550958872, 0.00061912101227790117, 0.00076483888551592827, 0.00032805459341034293, 0.00094653206178918481, 0.0016000927425920963, 0.0022201098036020994, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -6721, -19801, 20271, 21474, 6889, -5491, 35930, 10908, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0010706309694796801, 0.00063531054183840752, 0.0010072307195514441, 0.00098612695001065731, 0.00064979470334947109, 0.001122060464695096, 0.00073791533941403031, 0.00047452971921302378, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,6,7,-91,-7,19,11,3,6,9,11,-11,75,0,-11,5,0,-20,-11,1,60,-6,7,7,24,30,22,16,2,-9,-6,-127,17,3,-5,-3,-16,-9,-12,26,7,-27,-6,-9,2,18,-12,9, 
  /* [1][0][][] */ -41,-10,5,-6,31,45,-30,75,26,12,-27,-22,15,0,11,22,0,54,4,-58,2,32,127,11,-28,-4,67,6,22,-24,30,-6,19,-9,-15,-13,18,-35,-2,4,-10,-5,-98,8,-42,0,-55,-106, 
  /* [2][0][][] */ -63,22,3,25,55,7,44,30,-14,60,-5,11,-1,0,10,47,0,17,-127,27,-9,14,5,-9,-38,13,37,-2,22,25,29,11,-13,-16,-18,-24,11,10,22,2,43,-11,-37,21,8,-52,7,-1, 
  /* [3][0][][] */ -2,-17,8,15,8,43,-8,6,64,9,-2,-1,32,0,-28,5,0,13,0,-15,4,9,11,-20,-12,-5,-11,7,-4,-6,6,11,-47,52,-47,1,5,-15,-4,-127,-1,19,-5,-76,-6,-2,10,0, 
  /* [4][0][][] */ -5,-5,93,38,-5,-12,-9,11,22,-10,-28,11,-64,0,-18,17,0,6,13,-11,72,-11,-9,6,-12,29,-20,42,4,2,21,127,10,11,-11,-18,18,-9,-26,-14,8,-126,-11,-4,-4,-1,-10,-17, 
  /* [5][0][][] */ 8,50,8,-14,7,41,24,10,-23,23,4,67,40,0,-127,-11,0,14,-40,27,-5,8,-20,51,-34,6,28,-14,-25,21,32,-10,45,21,-39,-3,5,18,-39,20,25,-15,-15,36,23,74,29,19, 
  /* [6][0][][] */ -22,-63,9,21,57,-28,-19,15,17,-38,-24,106,-6,0,-127,38,0,-1,58,-14,-13,7,13,-32,29,9,-20,-11,41,-11,-15,-5,85,-36,38,17,-18,-4,-59,-16,-5,-23,3,-25,-27,-78,-13,-18, 
  /* [7][0][][] */ -127,-43,-6,22,124,41,64,37,39,-5,15,-10,-15,0,113,112,0,22,26,53,-12,-3,-46,55,30,-7,34,-5,62,72,63,17,-10,-2,-36,-14,15,37,22,30,84,18,-25,-31,80,-2,64,75, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.045501813292503357, 0.027000697329640388, 0.042807303369045258, 0.04191039502620697, 0.027616275474429131, 0.04768756777048111, 0.031361401081085205, 0.020167512819170952, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 80468, 49639, 67152, 42476, -1836, 13242, 1265, 38173, 27062, 39091, 30511, -310, -49816, -127, 43638, 2180, -204, 46627, 423, 96, -12539, 8922, 61358, 40953, 4649, 58194, 47626, 22187, -3016, 18292, -6751, -48599, 13731, 143587, 22155, 842, 64482, -692, 224170, -19931, 13541, -29339, 105, 90230, -963, 74376, 711, -22936, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.553393515991047e-05, 8.1895872426684946e-05, 0.00013504789967555553, 0.00012878789857495576, 0.00015998937305994332, 0.00014251956599764526, 0.0001252947113243863, 4.1553699702490121e-05, 8.1831625720951706e-05, 2.7237065296503715e-05, 5.3633557399734855e-05, 2.5101464416366071e-05, 0.00018962298054248095, 0.005541567225009203, 6.0825746913906187e-05, 0.00024440768174827099, 0.0027484172023832798, 1.9809071091003716e-05, 9.1883950517512858e-05, 0.00017104772268794477, 9.0042260126210749e-05, 0.00011968176841037348, 9.3861068307887763e-05, 3.4807802876457572e-05, 4.1157723899232224e-05, 4.7046840336406603e-05, 2.9107473892509006e-05, 4.2602263420121744e-05, 0.000293987977784127, 4.2777130147442222e-05, 5.6308770581381395e-05, 0.00018403852300252765, 0.00017826689872890711, 7.8714465416851453e-06, 0.00010509831918170676, 0.00028723065042868257, 1.2671535841946024e-05, 0.00037139022606424987, 2.004861380555667e-05, 7.5918404036201537e-05, 5.3582090913550928e-05, 0.00020919661619700491, 0.00011671767424559221, 1.247482759936247e-05, 0.00011956636444665492, 8.1260775914415717e-05, 0.0001888458791654557, 7.4927942478097975e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -45,-24,-4,-18,6,-37,-78,-74,-27,-53,13,58,36,-71,118,-46,-113,-79,39,-4,2,-80,-114,-75,-40,-122,-64,-20,72,13,98,29,-127,-89,-10,57,17,49,-127,77,-77,-14,97,-110,0,-37,-86,105, 77,8,-29,-29,59,-127,-127,-87,63,-77,-114,104,38,-82,-1,64,-52,-107,59,10,14,-114,-127,-73,-9,-127,-115,-33,-55,20,-59,52,26,-127,63,90,15,72,-90,127,-127,7,121,-127,3,-26,-127,90, -31,45,7,-3,-57,-108,-58,-24,89,-4,-127,37,9,-71,-104,-12,-127,-20,25,10,-14,-90,-35,-30,-12,-36,-53,-6,-9,16,-26,11,105,-80,70,34,11,33,1,20,-79,2,-1,-87,-18,1,-55,14, 
  /* [0][1][][] */ -91,-127,-42,-46,-10,57,102,-107,-22,-113,-25,109,86,-64,28,-96,-121,-82,93,-76,38,-82,-105,-127,38,-102,-77,-33,127,-60,127,89,-46,-79,-18,88,-29,-76,-115,90,42,58,113,-113,-94,-112,80,123, 127,-78,-127,-127,127,44,100,-127,102,-127,-117,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-122,-122,127,-91,-127,-127,-121,-127,-71,127,27,-104,127,127,-65,-127,-108,90,63,127,127,-126,-114,-127,126,127, -57,27,-63,-89,-112,-24,33,-41,127,-21,-81,34,55,-70,-26,-46,-37,-32,57,-72,55,-85,-37,-29,50,-5,-45,-65,15,-92,-38,22,30,-93,113,23,-30,-65,-1,-16,38,52,8,-77,-57,-37,63,37, 
  /* [0][2][][] */ -65,-105,-38,-36,-1,36,-7,-36,-35,-65,-22,59,78,-127,-127,-68,-43,-19,66,73,46,-39,-12,-64,34,-47,-9,-57,76,29,79,65,107,-24,-41,-5,-96,37,-16,31,9,39,15,-61,96,-75,3,33, 87,-77,-95,-87,81,19,3,-46,44,-78,-29,55,87,-26,18,89,-24,-29,78,123,78,-65,-18,-63,97,-65,-14,-96,-51,40,-46,106,-19,-48,67,7,-127,53,-14,-3,9,36,19,-58,127,-103,-10,40, -31,25,-48,-37,-75,-18,21,-8,59,0,-14,26,34,-43,115,-34,-93,-6,29,59,70,-35,-4,-8,50,-5,-1,-64,-12,29,-19,36,-88,-39,69,8,-19,23,31,-40,6,39,-5,-16,61,-37,-3,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0032101923134177923, 0.003480574581772089, 0.0057395356707274914, 0.0054734856821596622, 0.0067995483987033367, 0.0060570817440748215, 0.0053250249475240707, 0.0017660321900621057, 0.0034778439439833164, 0.001157575286924839, 0.0022794262040406466, 0.0010668121976777911, 0.0080589763820171356, 0.23551659286022186, 0.0025850941892713308, 0.010387326590716839, 0.1168077290058136, 0.00084188551409170032, 0.0039050679188221693, 0.0072695282287895679, 0.0038267960771918297, 0.0050864750519394875, 0.0039890953339636326, 0.001479331636801362, 0.001749203191138804, 0.0019994906615465879, 0.0012370676267892122, 0.0018105960916727781, 0.012494488619267941, 0.0018180279294028878, 0.0023931227624416351, 0.0078216372057795525, 0.0075763431377708912, 0.00033453645301051438, 0.0044666784815490246, 0.012207302264869213, 0.00053854024736210704, 0.015784084796905518, 0.00085206609219312668, 0.0032265321351587772, 0.0022772387601435184, 0.0088908560574054718, 0.0049605011008679867, 0.00053018017206341028, 0.005081570241600275, 0.0034535829909145832, 0.0080259498208761215, 0.0031844375189393759, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3697, -153, 15217, 6411, 7827, 8049, 13024, -166, 39, -281, 3033, 407, 16844, -91773848, 3453, 29361, -74084616, -118, -551, 14094, 3415, -43, -106, 402, 4165, -736, 102, 732, 7816, 2332, 2554, 11402, 3609, 369, 445, -3114, 510, 3242, -272, 14203, 3945, 23108, -28, -106, 14624, 258, 14769, 5177, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00056453346041962504, 0.00044765081838704646, 0.00021877443941775709, 0.00028996344190090895, 0.00026004423853009939, 0.00026471266755834222, 0.00028697578818537295, 0.00080156535841524601, 0.00037531254929490387, 0.0030984950717538595, 0.0005074571818113327, 0.0020777611061930656, 0.00013753230450674891, 1.7672099339449687e-09, 0.0007470595883205533, 0.00011442287359386683, 1.7672099339449687e-09, 0.0058673457242548466, 0.00047845634981058538, 0.00027631816919893026, 0.00029609655030071735, 0.0033222108613699675, 0.00022614737099502236, 0.0017374939052388072, 0.000935824413318187, 0.00078816898167133331, 0.0013741124421358109, 0.0016841685865074396, 0.00015052460366860032, 0.0012635459424927831, 0.0011349715059623122, 0.00019499589689075947, 0.00021296950581017882, 0.0088555598631501198, 0.00035657302942126989, 0.00040724393329583108, 0.0030996017158031464, 0.00035148218739777803, 0.0018413681536912918, 0.0002469361643306911, 0.00073812931077554822, 0.00010008629760704935, 0.00046382079017348588, 0.0079387351870536804, 0.00033157301368191838, 0.0004027157265227288, 0.00019321560102980584, 0.00015361337864305824, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 18,-127,48,-51,29,-43,-25,34, 
  /* [1][0][][] */ 52,34,-15,-81,26,-11,-82,127, 
  /* [2][0][][] */ 45,18,-23,127,72,108,43,91, 
  /* [3][0][][] */ 82,63,-56,127,-45,-6,-9,-11, 
  /* [4][0][][] */ -49,-63,75,26,-12,17,-23,-127, 
  /* [5][0][][] */ 15,25,-41,38,-7,-49,40,127, 
  /* [6][0][][] */ 78,37,-127,-63,109,-6,116,-45, 
  /* [7][0][][] */ 127,30,38,-4,30,-12,67,-41, 
  /* [8][0][][] */ 40,-100,12,127,-9,45,7,-98, 
  /* [9][0][][] */ 59,-108,22,14,-28,-15,-127,61, 
  /* [10][0][][] */ -127,3,-68,-17,-14,9,-68,17, 
  /* [11][0][][] */ -12,-43,-9,-76,-127,-15,31,-16, 
  /* [12][0][][] */ 51,10,-9,74,-75,-45,43,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 9,-42,-15,2,32,127,26,36, 
  /* [15][0][][] */ 51,-2,-10,-127,78,65,-88,92, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 28,9,127,-2,-19,1,9,28, 
  /* [18][0][][] */ 72,-127,19,36,-14,6,-119,4, 
  /* [19][0][][] */ -127,-32,13,42,-8,-23,-71,44, 
  /* [20][0][][] */ 34,20,-41,96,-31,-127,-5,62, 
  /* [21][0][][] */ 64,3,127,0,-41,-2,93,38, 
  /* [22][0][][] */ -81,-53,-127,-14,-4,45,-117,14, 
  /* [23][0][][] */ -83,127,0,-17,-10,-35,83,-78, 
  /* [24][0][][] */ 20,-52,-31,94,-10,-60,93,127, 
  /* [25][0][][] */ -13,49,11,25,127,105,-41,-62, 
  /* [26][0][][] */ -81,-63,-127,8,23,51,-127,12, 
  /* [27][0][][] */ 36,-19,-38,-13,-6,127,69,58, 
  /* [28][0][][] */ 30,-42,-44,16,23,127,63,113, 
  /* [29][0][][] */ 74,49,127,29,13,3,68,-2, 
  /* [30][0][][] */ -88,127,-63,-71,-27,-22,117,-15, 
  /* [31][0][][] */ -44,-64,-20,13,10,-50,127,105, 
  /* [32][0][][] */ -10,-6,-75,86,-51,124,37,127, 
  /* [33][0][][] */ -5,47,9,-112,16,8,-11,127, 
  /* [34][0][][] */ -30,126,37,-106,22,-33,43,127, 
  /* [35][0][][] */ 127,13,16,-66,40,20,28,-62, 
  /* [36][0][][] */ -72,-2,57,48,-12,31,-127,49, 
  /* [37][0][][] */ -33,-37,-33,16,43,127,2,58, 
  /* [38][0][][] */ 29,24,-3,77,127,-2,-28,54, 
  /* [39][0][][] */ 15,54,55,-127,25,-17,-55,104, 
  /* [40][0][][] */ 112,77,127,9,-3,-17,109,-16, 
  /* [41][0][][] */ 13,-16,-12,117,72,127,84,107, 
  /* [42][0][][] */ -46,-28,127,0,-32,14,-49,39, 
  /* [43][0][][] */ -4,-82,19,94,-18,17,25,-127, 
  /* [44][0][][] */ 50,47,-75,-111,111,-107,22,-127, 
  /* [45][0][][] */ -116,127,12,-51,13,11,95,-111, 
  /* [46][0][][] */ -127,3,42,13,-32,9,-61,39, 
  /* [47][0][][] */ 127,14,122,14,13,8,95,-17, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0012576732551679015, 0.00099728093482553959, 0.0004873878788203001, 0.00064598344033583999, 0.0005793291493318975, 0.00058972951956093311, 0.00063932751072570682, 0.0017857353668659925, 0.00083612505113705993, 0.0069028581492602825, 0.0011305181542411447, 0.0046288571320474148, 0.00030639584292657673, 3.937008052901092e-09, 0.0016643068520352244, 0.00025491241831332445, 3.937008052901092e-09, 0.013071331195533276, 0.0010659098625183105, 0.00061558437300845981, 0.00065964687382802367, 0.0074012544937431812, 0.00050381338223814964, 0.0038708061911165714, 0.0020848389249294996, 0.0017558906693011522, 0.0030612614937126637, 0.0037520076148211956, 0.00033534021349623799, 0.0028149401769042015, 0.0025285009760409594, 0.00043441381421871483, 0.00047445559175685048, 0.019728504121303558, 0.00079437694512307644, 0.00090726208873093128, 0.006905323825776577, 0.0007830355316400528, 0.0041022184304893017, 0.00055012683151289821, 0.0016444118227809668, 0.00022297324903775007, 0.0010333046084269881, 0.017685992643237114, 0.00073868164326995611, 0.00089717411901801825, 0.00043044766061939299, 0.00034222140675410628, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7538, -41382, -7222, -10942, -42334, -3286, -29255, -20575, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0012385809095576406, 0.0018227039836347103, 0.0019999062642455101, 0.00090367550728842616, 0.00098087487276643515, 0.0021285603288561106, 0.0013400277821347117, 0.0012908612843602896, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-28,12,-1,127,8,14,2,8,-117,-82,-4,0,113,-13,0, 
  /* [1][0][][] */ 0,-32,-4,89,71,9,32,3,-6,-13,127,-54,0,29,-24,0, 
  /* [2][0][][] */ 0,6,-4,-13,-62,7,4,-4,6,14,-13,-8,0,127,-10,0, 
  /* [3][0][][] */ 0,-14,-31,-127,100,7,94,-3,-9,55,-11,42,0,4,21,0, 
  /* [4][0][][] */ 0,57,-22,50,-40,30,127,25,8,-50,20,18,0,-9,36,0, 
  /* [5][0][][] */ 0,-10,-3,4,-28,-25,-8,11,4,5,-9,-47,0,-9,127,0, 
  /* [6][0][][] */ 0,-5,-3,14,70,3,-18,-16,9,-84,100,65,0,127,58,0, 
  /* [7][0][][] */ 0,7,-19,127,8,-12,18,10,0,63,-68,43,0,3,19,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.052639689296483994, 0.077464915812015533, 0.084996014833450317, 0.038406208157539368, 0.041687183082103729, 0.090463809669017792, 0.056951180100440979, 0.054861601442098618, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 26431, 32995, 10613, 9976, 77378, 12903, 92770, -5256, 9872, 29910, 13639, -445, 25325, 11523, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 9.7147683845832944e-05, 0.00012433873780537397, 0.00033264924422837794, 0.00017389783170074224, 4.2906740418402478e-05, 0.00037254489143379033, 4.2530220525804907e-05, 2.0506353394011967e-05, 0.00020100873371120542, 0.00019603494729381055, 0.00077119865454733372, 0.00072724185883998871, 0.00028176463092677295, 0.00018125488713849336, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,20,-82,-126,39,-67,79,-75,-90,-3,-8,31,-127,5,54,-73, 51,26,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-22,90,-2,-72,70,-93,79,-95,-28,4,-13,61,2,-101,-29, 
  /* [0][1][][] */ -127,127,-21,13,-44,17,-28,15,-28,0,3,-107,-49,8,-29,-14, -78,-40,-56,-15,-7,-25,9,-27,-108,-90,21,-10,-104,-127,1,23, 14,2,65,2,3,35,-24,35,-127,6,-1,3,-21,12,-4,43, 
  /* [0][2][][] */ -115,-71,69,2,-6,40,-39,53,-76,0,-1,3,40,2,-27,23, 23,-3,31,-2,-27,41,-33,21,-125,-13,0,82,-58,0,-28,-111, 21,-6,19,0,4,15,10,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.004128776490688324, 0.0052843964658677578, 0.014137592166662216, 0.0073906579054892063, 0.0018235364696010947, 0.015833158046007156, 0.0018075343687087297, 0.0008715200237929821, 0.0085428711026906967, 0.0083314850926399231, 0.032775942236185074, 0.030907778069376945, 0.011974996887147427, 0.0077033326961100101, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, -47816, -175470, 56366, 361491, 5519, 66599, -11820, 471165, 89167, 33386, 50796440, -1073741824, 89503, 79586, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00012529826199170202, 8.9112691057380289e-05, 2.1493862732313573e-05, 8.7533881014678627e-06, 0.00013045909872744232, 3.7887431972194463e-05, 0.00026528432499617338, 4.014802925667027e-06, 5.3807882068213075e-05, 8.4746534412261099e-05, 1.0966986252469724e-07, 1.1533876076441629e-09, 4.1307102947030216e-05, 2.9605636882479303e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 76,15,57, 30,-6,38, -125,-127,-75, 
  /* [1][1][][] */ 23,18,26, -3,27,18, 26,-17,21, 
  /* [1][2][][] */ 26,56,43, 27,44,32, 78,5,51, 
  /* [2][0][][] */ 48,0,9, 108,127,24, 52,-9,41, 
  /* [2][1][][] */ 4,14,7, 62,124,-14, 25,11,21, 
  /* [2][2][][] */ 56,-48,40, 81,-18,7, 38,-32,44, 
  /* [3][0][][] */ 26,49,31, 64,127,57, 30,35,29, 
  /* [3][1][][] */ 30,28,21, 83,125,27, 9,0,32, 
  /* [3][2][][] */ -15,-26,-5, 30,8,11, 16,8,25, 
  /* [4][0][][] */ 35,87,54, 13,96,50, -7,32,63, 
  /* [4][1][][] */ -17,26,108, -12,89,93, -2,41,44, 
  /* [4][2][][] */ 23,68,64, 19,127,60, -36,52,81, 
  /* [5][0][][] */ -16,-16,-127, -23,-12,-93, -16,27,-18, 
  /* [5][1][][] */ 6,-38,-109, -12,-62,-122, -6,4,-23, 
  /* [5][2][][] */ -3,1,-22, 2,-11,-18, 0,6,-13, 
  /* [6][0][][] */ 28,-62,39, 52,-87,45, 18,-12,20, 
  /* [6][1][][] */ 39,-96,68, 70,-127,80, 18,-19,29, 
  /* [6][2][][] */ 23,-31,25, 23,-33,43, -1,25,23, 
  /* [7][0][][] */ 11,38,-3, -78,-2,-2, -21,13,-25, 
  /* [7][1][][] */ 1,-25,-10, -127,-107,-11, 3,-10,-15, 
  /* [7][2][][] */ 16,67,12, 32,55,33, 30,81,37, 
  /* [8][0][][] */ -126,-126,-126, -126,-126,-127, -126,-126,-127, 
  /* [8][1][][] */ -126,-126,-127, -126,-127,-127, -126,-127,-127, 
  /* [8][2][][] */ -126,-126,-127, -126,-126,-127, -126,-127,-127, 
  /* [9][0][][] */ -47,-21,0, -26,-17,2, -16,-23,-24, 
  /* [9][1][][] */ 83,94,-25, 75,127,19, -31,-3,7, 
  /* [9][2][][] */ -66,-74,-22, -25,-71,-31, -24,-36,-58, 
  /* [10][0][][] */ -23,-80,-17, 35,95,20, -8,-12,-3, 
  /* [10][1][][] */ -58,-100,-13, 78,127,15, -16,-25,0, 
  /* [10][2][][] */ -31,-18,3, 36,24,-10, -8,0,7, 
  /* [11][0][][] */ -71,-80,-51, -48,-96,-45, -19,-127,-80, 
  /* [11][1][][] */ -95,-91,-64, -86,-112,-83, -40,-85,-79, 
  /* [11][2][][] */ -25,-57,-95, 97,105,43, -53,-3,-62, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-95,-19, -60,-108,-26, -10,-17,-8, 
  /* [13][1][][] */ 60,114,14, 57,127,24, 7,17,10, 
  /* [13][2][][] */ -6,-15,5, 3,-14,1, 2,8,-1, 
  /* [14][0][][] */ 40,-13,-46, 71,-36,-60, 38,-10,-15, 
  /* [14][1][][] */ 78,-28,-82, 127,-40,-85, 62,-17,-32, 
  /* [14][2][][] */ 70,6,-29, 88,-9,-38, 35,2,-7, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.031951054930686951, 0.022723734378814697, 0.0054809348657727242, 0.002232113853096962, 0.033267069607973099, 0.0096612945199012756, 0.067647501826286316, 0.0010237747337669134, 0.013721008785068989, 0.021610364317893982, 2.7965812478214502e-05, 2.9411381774480105e-07, 0.01053331047296524, 0.0075494367629289627, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.44887131452560425, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.37423309683799744, } };
const TfArray<1, int> quant50_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.41829314827919006, } };
const TfArray<1, int> quant53_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.49957847595214844, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26964020729064941, } };
const TfArray<1, int> quant58_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.259176105260849, } };
const TfArray<1, int> quant61_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29758882522583008, } };
const TfArray<1, int> quant62_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.2444973886013031, } };
const TfArray<1, int> quant65_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.36431792378425598, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.072263911366462708, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10865253955125809, } };
const TfArray<1, int> quant69_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
