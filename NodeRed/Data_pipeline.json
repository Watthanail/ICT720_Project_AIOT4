[
    {
        "id": "5201271c5fd3743c",
        "type": "tab",
        "label": "TAIST2024_SmartRefrigerator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c4d6faffbe16484",
        "type": "group",
        "z": "5201271c5fd3743c",
        "name": "Grobal Variable",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "37bcea7358a11597",
            "67547b89c1f8c5df",
            "98dd063a39b3aa9c"
        ],
        "x": 74,
        "y": 79,
        "w": 712,
        "h": 82
    },
    {
        "id": "4c6fe88d2a82dd4a",
        "type": "group",
        "z": "5201271c5fd3743c",
        "name": "Subscribe MQTT",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "1d53f75b734892ce",
            "dc7fcc537dffcb67",
            "01790c7683c6b141",
            "72d67459d6d2428e",
            "96a876bba1723d85",
            "f71a4ea63ddab8d8",
            "dcbf1d4c9809cb93"
        ],
        "x": 74,
        "y": 179,
        "w": 1072,
        "h": 202
    },
    {
        "id": "8e273b697740a1b5",
        "type": "group",
        "z": "5201271c5fd3743c",
        "name": "Check Heartbeat",
        "style": {
            "stroke": "#7f7f7f",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "6b5d9eb500a9dbda",
            "acadebec887e596e",
            "462c82cb06da3a72"
        ],
        "x": 74,
        "y": 399,
        "w": 492,
        "h": 142
    },
    {
        "id": "1d53f75b734892ce",
        "type": "mqtt in",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "name": "",
        "topic": "taist2024/refrigerator/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3ae12a7058da1d51",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "dc7fcc537dffcb67",
                "67547b89c1f8c5df"
            ]
        ]
    },
    {
        "id": "37bcea7358a11597",
        "type": "function",
        "z": "5201271c5fd3743c",
        "g": "1c4d6faffbe16484",
        "name": "Initial Setup",
        "func": "flow.set('WW:DD:CC:SS', {\n    \"time_heartbeat\": null,\n    \"status_device\": null\n});\n\nvar outputCounts = {};\nfor (var i = 1; i <= 7; i++) {\n    // var paramName =  (\"0\" + i).slice(-2);\n    var paramName = i;\n    outputCounts[paramName] = null;\n}\n\nflow.set(\"data\", outputCounts);\n\nflow.set(\"dev01_sampling\", 1);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "67547b89c1f8c5df"
            ]
        ]
    },
    {
        "id": "dc7fcc537dffcb67",
        "type": "function",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "name": "update data sampling",
        "func": "var header = msg.topic.trim();\nvar list = header.split('/');\nvar type = list[2];\n\nvar currentDate = new Date();\nvar milliseconds = currentDate.valueOf();\n\nvar device_addr = msg.payload.device_addr;\nvar status = msg.payload.status;\n\nvar dev01 = flow.get('WW:DD:CC:SS') || {}; // Initialize dev01 if it doesn't exist\n\n// var data = msg.payload.value\n// return {type,data}\n\nif (device_addr == \"WW:DD:CC:SS\") {\n    if (type == \"data\") {\n        ///////////**************************************/////// */\n        var data = msg.payload.value;\n        var outputCounts = flow.get(\"data\") || {};\n        var sampling = flow.get(\"dev01_sampling\") || 0;\n        var count = 0;\n        \n        if (sampling <= 8) {\n            for (var i = 0; i < data.length; i++) {\n                var value = data[i];\n                if (value !== \"\") {\n                    count++;\n                }\n            }\n\n            outputCounts[sampling] = count;\n            sampling++;\n            flow.set(\"dev01_sampling\", sampling);\n            // outputCounts[sampling] = count;\n        } else {\n\n            sampling = 0;\n            flow.set(\"dev01_sampling\", sampling);\n            for (var i = 0; i <= 8; i++) {\n                // var paramName =  (\"0\" + i).slice(-2);\n                var paramName = i;\n                outputCounts[paramName] = null;\n            }\n\n            flow.set(\"data\", outputCounts);\n\n        }\n    } else if (type == \"heartbeat\") {\n        // Update msg.topic and dev01.topic\n        // msg.topic = 'UPDATE dev_registor_db SET status = \"online\", update_time = NOW() WHERE device_addr = \"' + device_addr + '\"';\n        var outputCounts = flow.set(\"data\",{}) ;\n        var sampling = flow.set(\"dev01_sampling\",0) ;\n    \n        dev01.time_heartbeat = milliseconds;\n        dev01.status_device = \"online\";\n    }\n    flow.set(\"WW:DD:CC:SS\", dev01);\n}\n\nreturn {count: count, sampling: sampling, outputCounts: outputCounts ,dev01:dev01};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "67547b89c1f8c5df",
                "01790c7683c6b141"
            ]
        ]
    },
    {
        "id": "67547b89c1f8c5df",
        "type": "debug",
        "z": "5201271c5fd3743c",
        "g": "1c4d6faffbe16484",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "6b5d9eb500a9dbda",
        "type": "function",
        "z": "5201271c5fd3743c",
        "g": "8e273b697740a1b5",
        "name": "update staus dev",
        "func": "var currentDate = new Date();\nvar Global_milliseconds = currentDate.valueOf();\n\n// flow.set(\"Global_time\", milliseconds);\nvar time_heartbeat = flow.get(\"WW:DD:CC:SS\").time_heartbeat || 0\nvar timeDifference = Global_milliseconds - time_heartbeat;\nvar status = flow.get(\"WW:DD:CC:SS\").status_device ||0;\nif (timeDifference > (60 * 5 * 1000)) {\n    status = \"offline\"\n} else {\n    // Do something else if the time difference is above the threshold\n    status = \"online\"\n}\n\nmsg.topic = 'UPDATE dev_registor_db SET status = \"' + status + '\", update_time = NOW() WHERE device_addr = \"WW:DD:CC:SS\"';\n\n\n\n\n\n\n\n// Return updated values\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 440,
        "wires": [
            [
                "dcbf1d4c9809cb93"
            ]
        ]
    },
    {
        "id": "acadebec887e596e",
        "type": "function",
        "z": "5201271c5fd3743c",
        "g": "8e273b697740a1b5",
        "name": "update staus user",
        "func": "var currentDate = new Date();\nvar Global_milliseconds = currentDate.valueOf();\n\n// flow.set(\"Global_time\", milliseconds);\nvar time_heartbeat = flow.get(\"WW:DD:CC:SS\").time_heartbeat || 0\nvar timeDifference = Global_milliseconds - time_heartbeat;\nvar status = flow.get(\"WW:DD:CC:SS\").status_device ||0;\nif (timeDifference > (60 * 5 * 1000)) {\n    status = \"offline\"\n} else {\n    // Do something else if the time difference is above the threshold\n    status = \"online\"\n}\n\nmsg.topic = 'UPDATE user_registor_db SET status = \"' + status + '\", update_time = NOW() WHERE device_addr = \"WW:DD:CC:SS\"';\n\n\n\nreturn msg\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 500,
        "wires": [
            [
                "dcbf1d4c9809cb93"
            ]
        ]
    },
    {
        "id": "98dd063a39b3aa9c",
        "type": "inject",
        "z": "5201271c5fd3743c",
        "g": "1c4d6faffbe16484",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "37bcea7358a11597"
            ]
        ]
    },
    {
        "id": "462c82cb06da3a72",
        "type": "inject",
        "z": "5201271c5fd3743c",
        "g": "8e273b697740a1b5",
        "name": "",
        "props": [],
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "6b5d9eb500a9dbda",
                "acadebec887e596e"
            ]
        ]
    },
    {
        "id": "01790c7683c6b141",
        "type": "switch",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "name": "Select 5 sample",
        "property": "sampling",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 800,
        "y": 220,
        "wires": [
            [
                "72d67459d6d2428e",
                "96a876bba1723d85"
            ]
        ]
    },
    {
        "id": "72d67459d6d2428e",
        "type": "function",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "name": "Insert Data",
        "func": "var nonNullValues = Object.values(msg.outputCounts).filter(value => value !== null);\n// Sort the non-null values\nnonNullValues.sort((a, b) => a - b);\n// Calculate the middle index\nvar middleIndex = Math.floor(nonNullValues.length / 2);\n// Get the middle value\nvar middleValue = nonNullValues[middleIndex];\n\nmsg.topic = \"INSERT INTO device_db(dev_addr, user_name, VALUE) VALUES('WW:DD:CC:SS', 'watthanai', \" + middleValue  +\")\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "dcbf1d4c9809cb93"
            ]
        ]
    },
    {
        "id": "96a876bba1723d85",
        "type": "function",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "name": "Updated Data",
        "func": "var currentDate = new Date();\n\nvar nonNullValues = Object.values(msg.outputCounts).filter(value => value !== null);\n// Sort the non-null values\nnonNullValues.sort((a, b) => a - b);\n// Calculate the middle index\nvar middleIndex = Math.floor(nonNullValues.length / 2);\n// Get the middle value\nvar middleValue = nonNullValues[middleIndex];\n\nmsg.topic = \"update user_registor_db set value = \" + middleValue + \",update_time = NOW() where device_addr ='WW:DD:CC:SS'\"\n\nmsg.payload = [\n    {\n        $inc: { device_addr: \"WW:DD:CC:SS\" } \n    },\n    {\n        $set: {\n            value: middleValue,\n            update_time: currentDate\n        }\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "dcbf1d4c9809cb93"
            ]
        ]
    },
    {
        "id": "f71a4ea63ddab8d8",
        "type": "debug",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 320,
        "wires": []
    },
    {
        "id": "dcbf1d4c9809cb93",
        "type": "mysql",
        "z": "5201271c5fd3743c",
        "g": "4c6fe88d2a82dd4a",
        "mydb": "b3f945185763d718",
        "name": "taistnode",
        "x": 840,
        "y": 320,
        "wires": [
            [
                "f71a4ea63ddab8d8"
            ]
        ]
    },
    {
        "id": "3ae12a7058da1d51",
        "type": "mqtt-broker",
        "name": "taist2024",
        "broker": "emqx.taist.online",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b3f945185763d718",
        "type": "MySQLdatabase",
        "name": "taistnode",
        "host": "103.253.73.68",
        "port": "3306",
        "db": "taistdb",
        "tz": "",
        "charset": "UTF8"
    }
]