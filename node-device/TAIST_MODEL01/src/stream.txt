#include "main.h"
#include "hw_camera.h"
#include "openmvrpc.h"

// constants
#define TAG           "main"

#define BUTTON_PIN    0

// static variables
static uint8_t jpg_buf[20480];
static uint16_t jpg_sz = 0;
static bool read_flag = false;

openmv::rpc_scratch_buffer<256> scratch_buffer;
openmv::rpc_callback_buffer<8> callback_buffer;
openmv::rpc_hardware_serial_uart_slave rpc_slave;


///////////////////////////////////////////////////////////////
// Streaming Code
///////////////////////////////////////////////////////////////

enum StreamingState { NOT_STREAMING, SETUP_STREAMING, STREAMING } streaming_state;


bool stream_writer_cb(uint8_t **out_data, uint32_t *out_data_len) {
    static char sentence[] = "How much wood would a woodchuck chuck if a woodchuck could chuck wood?\r\n";
    *out_data = (uint8_t *) sentence;
    *out_data_len = strlen(sentence) + 1; // plus null terminator
    return true; // always continue streaming
}

// The controller device will execute this function to kick off streaming.
void setup_streaming_cb() {
    streaming_state = SETUP_STREAMING;
}

// NOTE: The string name can be anything below. It just needs to match between the master/slave devices.

void setup() {

    // For MCP2515 CAN we might need to change the default CAN settings for the Arduino Uno.
    //
    // CAN.setPins(9, 2); // CS & INT
    // CAN.setClockFrequency(16E6); // 16 MHz
    streaming_state = NOT_STREAMING;
    rpc_slave.register_callback(F("setup_streaming_cb"), setup_streaming_cb);

    // Startup the RPC interface and a debug channel.
    rpc_slave.begin();
    Serial.begin(115200);
}

// Once all call backs have been registered we can start
// processing remote events.

void loop() {

    // It's important the loop() returns constantly for your Arduino to work properly.
    // The state machine below keeps our state while returning constantly.

    if (streaming_state == NOT_STREAMING) {
        Serial.println("Not Streaming");
        rpc_slave.loop();
    } else if (streaming_state == SETUP_STREAMING) {
        Serial.println("Setting up streaming");
        streaming_state = rpc_slave.stream_writer_setup() ? STREAMING : NOT_STREAMING;
    } else if (streaming_state == STREAMING) {
        Serial.println("Streaming");
        streaming_state = rpc_slave.stream_writer_loop(stream_writer_cb) ? STREAMING : NOT_STREAMING;
    }
}